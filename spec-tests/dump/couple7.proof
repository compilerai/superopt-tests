=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 31 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 32 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%8%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%7%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 37 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-13.E0%0%d
1 : input.spec-%tmpvar-13.E0%0%d : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-18.E0%0%d
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L3%7%bbentry
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L3%7%bbentry
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=Loc 47 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%tmpvar-11.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%tmpvar-5.L3%7%bbentry : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%tmpvar-6.L3%7%bbentry : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%19%bbentry
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 57 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%19%bbentry
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%19%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%tmpvar-3.L3%19%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%var-x_ij-0.L3%19%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
35, 36, 43, 
=live locs at L3%8%d
33, 35, 36, 43, 
=live locs at L3%9%bbentry
43, 
=live locs at L3%11%bbentry
33, 35, 36, 43, 
=live locs at L3%19%bbentry
36, 37, 38, 51, 52, 
=live locs at L3%20%d
34, 36, 37, 38, 51, 52, 
=live locs at L3%21%bbentry
36, 51, 52, 
=live locs at L3%23%bbentry
34, 36, 37, 38, 51, 52, 
=live locs at E0%0%d
42[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 31, 32
=loc definedness at L3%7%bbentry
1, 31, 32, 35, 36, 43, 45, 46, 47
=loc definedness at L3%8%d
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%9%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%11%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%19%bbentry
1, 31, 32, 33, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%20%d
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%21%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%23%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at E0%0%d
1, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
35, 36
=branch affecting variable locs at L3%8%d
33, 35, 36
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
33, 35, 36
=branch affecting variable locs at L3%19%bbentry
36, 37, 38, 51
=branch affecting variable locs at L3%20%d
34, 36, 37, 38, 51
=branch affecting variable locs at L3%21%bbentry
36, 51
=branch affecting variable locs at L3%23%bbentry
36, 37, 38, 51
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 36 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 45 {input.spec-%tmpvar-15.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 46 {input.spec-%tmpvar-16.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 33 {input.spec-%tmpvar-7.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 39 {input.spec-%tmpvar-13.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 40 {input.spec-%tmpvar-14.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 41 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 42 {input.spec-%tmpvar-18.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 38 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 51 {input.spec-%tmpvar-9.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 54 {input.spec-%tmpvar-10.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 55 {input.spec-%tmpvar-8.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 56 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 34 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%tmpvar-11.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 49 {input.spec-%tmpvar-5.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 50 {input.spec-%tmpvar-6.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 53 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 58 {input.spec-%tmpvar-1.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 59 {input.spec-%tmpvar-2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 60 {input.spec-%tmpvar-3.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-x_ij-0.L3%19%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 36
=loc_expr
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 45
=loc_expr
140553 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140554 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140559 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140560 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 58
=loc_expr
140562 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 45 expr
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=loc 45 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=loc 46 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=loc 55 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 58 expr
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=loc 58 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 45 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end7%1%d Lfor.inc5%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end7%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc5%1%d
Lfor.body3%1%d => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc5%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end7%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end7%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc5%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end7%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc5%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36))*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36)))*((((  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36)*(((  %add = add i32 %ret.1, %1, !dbg !38*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39))*(((((  %inc = add i32 %j.0, 1, !dbg !40*  br label %for.cond1, !dbg !41, !llvm.loop !42)*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !41, !llvm.loop !42))*  br label %for.cond1, !dbg !41, !llvm.loop !42)*(  br label %for.cond1, !dbg !41, !llvm.loop !42*  br label %for.cond1, !dbg !41, !llvm.loop !42)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: Lfor.inc5%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc6 = add i32 %i.0, 1, !dbg !45*  br label %for.cond, !dbg !46, !llvm.loop !47)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !46, !llvm.loop !47))*  br label %for.cond, !dbg !46, !llvm.loop !47)*(  br label %for.cond, !dbg !46, !llvm.loop !47*  br label %for.cond, !dbg !46, !llvm.loop !47))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end7%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !49
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100046 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100047 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100048 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100050 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100051 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100052 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100067 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055, 100059, 
=live locs at Lfor.body3%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100059, 
=live locs at Lfor.cond%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100057, 100059, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100058, 100059, 100060, 100067, 
=live locs at Lfor.end7%1%d
100050, 100055[f], 
=live locs at Lfor.inc5%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100067, 
=live locs at E0%0%d
100050, 100055[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.body3%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.end7%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.inc5%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at E0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100059, 100061, 100062, 100063, 100085, 100086

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100059
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100059
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100057, 100059
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100058, 100059, 100060
=branch affecting variable locs at Lfor.end7%1%d

=branch affecting variable locs at Lfor.inc5%1%d
100006, 100012, 100059
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100068 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100069 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100070 {input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100071 {input.dst.llvm-%0.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100072 {input.dst.llvm-%1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100073 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100074 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100075 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100076 {input.dst.llvm-%add.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100077 {input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100078 {input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100079 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100080 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100081 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100082 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100057 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100058 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100053 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100054 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100056 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100065 {input.dst.llvm-%inc6.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100066 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end7%1%d:
vacuous mls at Lfor.inc5%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end7%1%d:
non-vacuous mls at Lfor.inc5%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140383 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140381 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140385 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140459 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140460 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140462 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140464 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140466 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140390 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100043
=loc_expr
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100044
=loc_expr
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100053
=loc_expr
140659 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140660 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140661 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140662 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140663 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140666 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140667 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140683 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100086
=loc_expr
140684 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100056 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100056 spreled-expr
140267 : retaddr_const : BV:32
=loc 100061 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100061 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100062 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100062 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100068 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100068 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100085 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100085 spreled-expr
140390 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100086 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100086 spreled-expr
140389 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end7%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc5%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end7%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end7%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc5%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end7%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end7%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end7%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end7%1%d)))
=suffixpath_at_Lfor.inc5%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc5%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc5%1%d))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end7%1%d)*(Lfor.end7%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140385 : input.dst.llvm-%x : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140391 : islangaligned(140385, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140507 : 4 { 0x4 +1.0e1025 } : BV:64
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140409 : 32 { 0x20 +1.0e1025 } : INT
140633 : bvsign_ext(140612, 140409) : BV:64
140752 : bvmul(140507, 140633) : BV:64
140413 : 63 { 0x3f +1.0e1025 } : INT
140753 : bvextract(140752, 140413, 140409) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140632 : bvslt(140612, 140276) : BOOL
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140766 : ite(140632, 140415, 140276) : BV:32
140768 : eq(140753, 140766) : BOOL
140364 : 4 { 0x4 +1.0e1025 } : INT
140770 : isindexforsize(140768, 140364) : BOOL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140772 : isgepoffset(140702, 140699) : BOOL
140776 : islangaligned(140702, 140364) : BOOL
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140778 : islangaligned(140708, 140364) : BOOL
140781 : and(140776, 140778) : BOOL
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140648 : bvsign_ext(140614, 140409) : BV:64
140794 : bvmul(140507, 140648) : BV:64
140795 : bvextract(140794, 140413, 140409) : BV:32
140647 : bvslt(140614, 140276) : BOOL
140808 : ite(140647, 140415, 140276) : BV:32
140810 : eq(140795, 140808) : BOOL
140812 : isindexforsize(140810, 140364) : BOOL
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140814 : isgepoffset(140713, 140711) : BOOL
140819 : and(140770, 140772, 140776, 140781, 140812, 140814) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140734 : islangaligned(140713, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d done
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.body3%3%d
=linename
line 5
=pc
Lfor.body3%4%d
=linename
line 5
=pc
Lfor.body3%5%d
=linename
line 5
=pc
Lfor.body3%6%d
=linename
line 6
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 7
=pc
Lfor.end7%1%d
=linename
line 8
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc5%1%d
=linename
line 3
=pc
Lfor.inc5%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 14
=pc
Lfor.body3%2%d
=column_name
 at column 14
=pc
Lfor.body3%3%d
=column_name
 at column 14
=pc
Lfor.body3%4%d
=column_name
 at column 14
=pc
Lfor.body3%5%d
=column_name
 at column 11
=pc
Lfor.body3%6%d
=column_name
 at column 5
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end7%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc5%1%d
=column_name
 at column 31
=pc
Lfor.inc5%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%3%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%4%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%5%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.body3%6%d
=line_and_column
line 6
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 7
=pc
Lfor.end7%1%d
=line_and_column
line 8
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc5%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc5%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx4]_4
input.dst.llvm-%add : Lfor.body3%6%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%inc6 : Lfor.inc5%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset
input.dst.llvm-%arrayidx4 : L0%0%d : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx4
=dst.llvm-%arrayidx4 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx4 val_scevb
=dst.llvm-%arrayidx4 val_scevb scev
=dst.llvm-%arrayidx4 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr done
=dst.llvm-%arrayidx4 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb
=dst.llvm-%arrayidx4 atuse_scevb scev
=dst.llvm-%arrayidx4 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx4 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atexit_scev
=dst.llvm-%arrayidx4 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx4 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
20 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc6
=dst.llvm-%inc6 loop pc: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb
=dst.llvm-%inc6 val_scevb scev
=dst.llvm-%inc6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 val_scevb scev scev_expr done
=dst.llvm-%inc6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb
=dst.llvm-%inc6 atuse_scevb scev
=dst.llvm-%inc6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 atuse_scevb scev scev_expr done
=dst.llvm-%inc6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atexit_scev
=dst.llvm-%inc6 atexit_scev loop: L0%0%d
=dst.llvm-%inc6 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc6 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
22 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc6 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.end7%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc5%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 18 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 19 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc6.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple7.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc5%1%d#{0,0})*(Lfor.inc5%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*(L3%23%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*(Lfor.body3%1%d#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end7%1%d#{0,0})*(Lfor.end7%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B4.C1.D2.E1
=Locs end
=Liveness in foo.A1.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B4.C1.D2.E1

=Branch affecting variable locs in foo.A1.B4.C1.D2.E1

=Relevant Memlabels in foo.A1.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3v487.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3v487.ce3 d9ed9fcf81a839eca983085b91059e8
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 195 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 196; 199 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 200; 2287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2288; 2291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2292; 1140589075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140589076; 1140589079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1140589080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 196 { 0xc4 +1.2336e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2288 { 0x8f0 +1.27275e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1140589076 { 0x43fc0214 +1.96881341e8 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2288 { 0x8f0 +1.27275e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2291 { 0x8f3 +1.27310e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1140589076 { 0x43fc0214 +1.96881341e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1140589079 { 0x43fc0217 +1.96881377e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 196 { 0xc4 +1.2336e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 199 { 0xc7 +1.2372e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3.ce4 121386e675ab1c25e1874fe5bfcf3d75
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1235122207 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1235122208; 1235122211 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1235122212; 3382590495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3382590496; 3382590499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3382590500; 3892314115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3892314116; 3892314119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3892314120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1235122208 { 0x499e7820 +1.23804092e20 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3892314116 { 0xe8000004 -402653180 -1.47e81 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3382590496 { 0xc99e3c20 -912376800 -1.23620986e20 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3892314116 { 0xe8000004 -402653180 -1.47e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3892314119 { 0xe8000007 -402653177 -1.83e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3382590496 { 0xc99e3c20 -912376800 -1.23620986e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3382590499 { 0xc99e3c23 -912376797 -1.23621022e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1235122208 { 0x499e7820 +1.23804092e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1235122211 { 0x499e7823 +1.23804128e20 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce27.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce27 4ca525f87ce86225dd0b16cb67ded2c
=input.spec-%var-x-1
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3504525224 ] -> 0, [ 3504525225; 3504525225 ] -> 1, [ 3504525226; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2430791539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2430791540; 2430791543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2430791544; 3504525223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3504525224; 3504525227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3504525228; 3840593815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3840593816; 3840593819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3840593820; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2430791540 { 0x90e2ef74 -1864175756 -1.77293252e162 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3840593816 { 0xe4eacf98 -454373480 -1.83446025e74 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3504525224 { 0xd0e2cfa8 -790442072 -1.77196216e34 } : BV:32
=input.dst.llvm-%x
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3840593816 { 0xe4eacf98 -454373480 -1.83446025e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3840593819 { 0xe4eacf9b -454373477 -1.83446061e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3504525224 { 0xd0e2cfa8 -790442072 -1.77196216e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3504525227 { 0xd0e2cfab -790442069 -1.77196252e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2430791540 { 0x90e2ef74 -1864175756 -1.77293252e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2430791543 { 0x90e2ef77 -1864175753 -1.77293288e162 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda428Var : BV:32
2 : Lambda429Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce28.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce28 707f45f2a5ebd742b1f2a745bf7df664
=input.spec-%var-x-1
1 : Lambda536Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda537Var : BV:32
11 : Lambda538Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda539Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda536Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda537Var : BV:32
11 : Lambda538Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda539Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 259 ] -> 0, [ 260; 260 ] -> 8, [ 261; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 264; 4223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4224; 4227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4228; 4194307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194308; 4194311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4227 { 0x1083 +1.50389e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194311 { 0x400007 +1.50000083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda437Var : BV:32
2 : Lambda438Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce51.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce51 742213c63889db81f3bd21cab04ba3
=input.spec-%var-x-1
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3398718947 ] -> 4, [ 3398718948; 3398718951 ] -> 0, [ 3398718952; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3335065055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3335065056; 3335065059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3335065060; 3398718947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3398718948; 3398718951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3398718952; 3403367135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3403367136; 3403367139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3403367140; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3335065059 { 0xc6c90de3 -959902237 -1.57073628e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3403367139 { 0xcadb42e3 -891600157 -1.71297872e22 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda651Var : BV:32
2 : Lambda652Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda653Var : BV:32
2 : Lambda654Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce52.num_edges_traversed2
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce52 eccdb21a9599a8d8e998a8525488
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4350Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 6) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 6) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 11) : BOOL
40 : eq(38, 14) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 11) : BOOL
45 : eq(43, 14) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 13, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 13, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 11) : BOOL
55 : eq(53, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4340Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : bvadd(15, 24, 22) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 31, 32) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 22) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 31, 32) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 31, 32) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 31, 32) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(15, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 31, 32) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 31, 32) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4356Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 6) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 6) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 11) : BOOL
40 : eq(38, 14) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 11) : BOOL
45 : eq(43, 14) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 13, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 13, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 11) : BOOL
55 : eq(53, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda664Var : BV:32
2 : Lambda665Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 5 num_edges_traversed 2
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce75.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce75 94d33611c756c6bbd1bd553d1c1675
=input.spec-%var-x-1
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 169, [ 1; 1 ] -> 127, [ 2; 1813540559 ] -> 251, [ 1813540560; 1813540563 ] -> 0, [ 1813540564; 2761015701 ] -> 251, [ 2761015702; 2761015702 ] -> 1, [ 2761015703; 3833956687 ] -> 251, [ 3833956688; 3833956691 ] -> 0, [ 3833956692; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1813540559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1813540560; 1813540563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1813540564; 2761015699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2761015700; 2761015703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2761015704; 3833956687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3833956688; 3833956691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3833956692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.llvm-%n
1 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1185342811 { 0x46a6e55b +1.30387437e14 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4301Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4302Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
12 : eq(10, 11) : BOOL
13 : 0 { 0x0 } : BV:8
14 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
15 : eq(10, 14) : BOOL
16 : eq(10, 8) : BOOL
17 : 169 { 0xa9 -87 } : BV:8
18 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
19 : eq(10, 18) : BOOL
20 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
21 : eq(10, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(10, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
26 : eq(10, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
29 : eq(10, 28) : BOOL
30 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
31 : eq(10, 30) : BOOL
32 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
33 : eq(10, 32) : BOOL
34 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
35 : eq(10, 34) : BOOL
36 : 251 { 0xfb -5 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(33, 13, 37) : BV:8
39 : ite(31, 13, 38) : BV:8
40 : ite(29, 13, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(21, 13, 42) : BV:8
44 : ite(19, 13, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : ite(15, 13, 45) : BV:8
47 : ite(12, 13, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 8) : BV:32
50 : eq(49, 11) : BOOL
51 : eq(49, 14) : BOOL
52 : eq(49, 8) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 20) : BOOL
55 : eq(49, 22) : BOOL
56 : eq(49, 25) : BOOL
57 : eq(49, 28) : BOOL
58 : eq(49, 30) : BOOL
59 : eq(49, 32) : BOOL
60 : eq(49, 34) : BOOL
61 : ite(60, 13, 36) : BV:8
62 : ite(59, 13, 61) : BV:8
63 : ite(58, 13, 62) : BV:8
64 : ite(57, 13, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 13, 66) : BV:8
68 : ite(53, 13, 67) : BV:8
69 : ite(52, 17, 68) : BV:8
70 : ite(51, 13, 69) : BV:8
71 : ite(50, 13, 70) : BV:8
72 : bvadd(22, 9, 8) : BV:32
73 : eq(72, 11) : BOOL
74 : eq(72, 14) : BOOL
75 : eq(72, 8) : BOOL
76 : eq(72, 18) : BOOL
77 : eq(72, 20) : BOOL
78 : eq(72, 22) : BOOL
79 : eq(72, 25) : BOOL
80 : eq(72, 28) : BOOL
81 : eq(72, 30) : BOOL
82 : eq(72, 32) : BOOL
83 : eq(72, 34) : BOOL
84 : ite(83, 13, 36) : BV:8
85 : ite(82, 13, 84) : BV:8
86 : ite(81, 13, 85) : BV:8
87 : ite(80, 13, 86) : BV:8
88 : ite(79, 27, 87) : BV:8
89 : ite(78, 24, 88) : BV:8
90 : ite(77, 13, 89) : BV:8
91 : ite(76, 13, 90) : BV:8
92 : ite(75, 17, 91) : BV:8
93 : ite(74, 13, 92) : BV:8
94 : ite(73, 13, 93) : BV:8
95 : bvadd(9, 8) : BV:32
96 : eq(95, 11) : BOOL
97 : eq(95, 14) : BOOL
98 : eq(95, 8) : BOOL
99 : eq(95, 18) : BOOL
100 : eq(95, 20) : BOOL
101 : eq(95, 22) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 28) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 34) : BOOL
107 : ite(106, 13, 36) : BV:8
108 : ite(105, 13, 107) : BV:8
109 : ite(104, 13, 108) : BV:8
110 : ite(103, 13, 109) : BV:8
111 : ite(102, 27, 110) : BV:8
112 : ite(101, 24, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : ite(99, 13, 113) : BV:8
115 : ite(98, 17, 114) : BV:8
116 : ite(97, 13, 115) : BV:8
117 : ite(96, 13, 116) : BV:8
118 : bvconcat(47, 71, 94, 117) : BV:32
119 : bvadd(5, 7, 118) : BV:32
120 : eq(119, 11) : BOOL
121 : eq(119, 14) : BOOL
122 : eq(119, 8) : BOOL
123 : eq(119, 18) : BOOL
124 : eq(119, 20) : BOOL
125 : eq(119, 22) : BOOL
126 : eq(119, 25) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 30) : BOOL
129 : eq(119, 32) : BOOL
130 : eq(119, 34) : BOOL
131 : ite(130, 13, 36) : BV:8
132 : ite(129, 13, 131) : BV:8
133 : ite(128, 13, 132) : BV:8
134 : ite(127, 13, 133) : BV:8
135 : ite(126, 27, 134) : BV:8
136 : ite(125, 24, 135) : BV:8
137 : ite(124, 13, 136) : BV:8
138 : ite(123, 13, 137) : BV:8
139 : ite(122, 17, 138) : BV:8
140 : ite(121, 13, 139) : BV:8
141 : ite(120, 13, 140) : BV:8
142 : bvadd(48, 7, 118) : BV:32
143 : eq(142, 11) : BOOL
144 : eq(142, 14) : BOOL
145 : eq(142, 8) : BOOL
146 : eq(142, 18) : BOOL
147 : eq(142, 20) : BOOL
148 : eq(142, 22) : BOOL
149 : eq(142, 25) : BOOL
150 : eq(142, 28) : BOOL
151 : eq(142, 30) : BOOL
152 : eq(142, 32) : BOOL
153 : eq(142, 34) : BOOL
154 : ite(153, 13, 36) : BV:8
155 : ite(152, 13, 154) : BV:8
156 : ite(151, 13, 155) : BV:8
157 : ite(150, 13, 156) : BV:8
158 : ite(149, 27, 157) : BV:8
159 : ite(148, 24, 158) : BV:8
160 : ite(147, 13, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : ite(145, 17, 161) : BV:8
163 : ite(144, 13, 162) : BV:8
164 : ite(143, 13, 163) : BV:8
165 : bvadd(22, 7, 118) : BV:32
166 : eq(165, 11) : BOOL
167 : eq(165, 14) : BOOL
168 : eq(165, 8) : BOOL
169 : eq(165, 18) : BOOL
170 : eq(165, 20) : BOOL
171 : eq(165, 22) : BOOL
172 : eq(165, 25) : BOOL
173 : eq(165, 28) : BOOL
174 : eq(165, 30) : BOOL
175 : eq(165, 32) : BOOL
176 : eq(165, 34) : BOOL
177 : ite(176, 13, 36) : BV:8
178 : ite(175, 13, 177) : BV:8
179 : ite(174, 13, 178) : BV:8
180 : ite(173, 13, 179) : BV:8
181 : ite(172, 27, 180) : BV:8
182 : ite(171, 24, 181) : BV:8
183 : ite(170, 13, 182) : BV:8
184 : ite(169, 13, 183) : BV:8
185 : ite(168, 17, 184) : BV:8
186 : ite(167, 13, 185) : BV:8
187 : ite(166, 13, 186) : BV:8
188 : bvadd(7, 118) : BV:32
189 : eq(188, 11) : BOOL
190 : eq(188, 14) : BOOL
191 : eq(188, 8) : BOOL
192 : eq(188, 18) : BOOL
193 : eq(188, 20) : BOOL
194 : eq(188, 22) : BOOL
195 : eq(188, 25) : BOOL
196 : eq(188, 28) : BOOL
197 : eq(188, 30) : BOOL
198 : eq(188, 32) : BOOL
199 : eq(188, 34) : BOOL
200 : ite(199, 13, 36) : BV:8
201 : ite(198, 13, 200) : BV:8
202 : ite(197, 13, 201) : BV:8
203 : ite(196, 13, 202) : BV:8
204 : ite(195, 27, 203) : BV:8
205 : ite(194, 24, 204) : BV:8
206 : ite(193, 13, 205) : BV:8
207 : ite(192, 13, 206) : BV:8
208 : ite(191, 17, 207) : BV:8
209 : ite(190, 13, 208) : BV:8
210 : ite(189, 13, 209) : BV:8
211 : bvconcat(141, 164, 187, 210) : BV:32
212 : lambda(4, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(3, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4291Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4292Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : bvadd(21, 24, 1) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 1) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : eq(25, 15) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
40 : eq(25, 39) : BOOL
41 : 1 { 0x1 } : BV:8
42 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
43 : eq(25, 42) : BOOL
44 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
45 : eq(25, 44) : BOOL
46 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
47 : eq(25, 46) : BOOL
48 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
49 : eq(25, 48) : BOOL
50 : 251 { 0xfb -5 } : BV:8
51 : ite(49, 28, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : ite(45, 28, 52) : BV:8
54 : ite(43, 28, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(36, 28, 56) : BV:8
58 : ite(34, 28, 57) : BV:8
59 : ite(31, 32, 58) : BV:8
60 : ite(30, 28, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 24, 1) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 1) : BOOL
67 : eq(63, 33) : BOOL
68 : eq(63, 35) : BOOL
69 : eq(63, 15) : BOOL
70 : eq(63, 39) : BOOL
71 : eq(63, 42) : BOOL
72 : eq(63, 44) : BOOL
73 : eq(63, 46) : BOOL
74 : eq(63, 48) : BOOL
75 : ite(74, 28, 50) : BV:8
76 : ite(73, 28, 75) : BV:8
77 : ite(72, 28, 76) : BV:8
78 : ite(71, 28, 77) : BV:8
79 : ite(70, 41, 78) : BV:8
80 : ite(69, 38, 79) : BV:8
81 : ite(68, 28, 80) : BV:8
82 : ite(67, 28, 81) : BV:8
83 : ite(66, 32, 82) : BV:8
84 : ite(65, 28, 83) : BV:8
85 : ite(64, 28, 84) : BV:8
86 : bvadd(15, 24, 1) : BV:32
87 : eq(86, 26) : BOOL
88 : eq(86, 29) : BOOL
89 : eq(86, 1) : BOOL
90 : eq(86, 33) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 15) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 42) : BOOL
95 : eq(86, 44) : BOOL
96 : eq(86, 46) : BOOL
97 : eq(86, 48) : BOOL
98 : ite(97, 28, 50) : BV:8
99 : ite(96, 28, 98) : BV:8
100 : ite(95, 28, 99) : BV:8
101 : ite(94, 28, 100) : BV:8
102 : ite(93, 41, 101) : BV:8
103 : ite(92, 38, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 28, 104) : BV:8
106 : ite(89, 32, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 28, 107) : BV:8
109 : bvadd(24, 1) : BV:32
110 : eq(109, 26) : BOOL
111 : eq(109, 29) : BOOL
112 : eq(109, 1) : BOOL
113 : eq(109, 33) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 15) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 42) : BOOL
118 : eq(109, 44) : BOOL
119 : eq(109, 46) : BOOL
120 : eq(109, 48) : BOOL
121 : ite(120, 28, 50) : BV:8
122 : ite(119, 28, 121) : BV:8
123 : ite(118, 28, 122) : BV:8
124 : ite(117, 28, 123) : BV:8
125 : ite(116, 41, 124) : BV:8
126 : ite(115, 38, 125) : BV:8
127 : ite(114, 28, 126) : BV:8
128 : ite(113, 28, 127) : BV:8
129 : ite(112, 32, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 28, 130) : BV:8
132 : bvconcat(61, 85, 108, 131) : BV:32
133 : bvadd(21, 23, 132) : BV:32
134 : eq(133, 26) : BOOL
135 : eq(133, 29) : BOOL
136 : eq(133, 1) : BOOL
137 : eq(133, 33) : BOOL
138 : eq(133, 35) : BOOL
139 : eq(133, 15) : BOOL
140 : eq(133, 39) : BOOL
141 : eq(133, 42) : BOOL
142 : eq(133, 44) : BOOL
143 : eq(133, 46) : BOOL
144 : eq(133, 48) : BOOL
145 : ite(144, 28, 50) : BV:8
146 : ite(143, 28, 145) : BV:8
147 : ite(142, 28, 146) : BV:8
148 : ite(141, 28, 147) : BV:8
149 : ite(140, 41, 148) : BV:8
150 : ite(139, 38, 149) : BV:8
151 : ite(138, 28, 150) : BV:8
152 : ite(137, 28, 151) : BV:8
153 : ite(136, 32, 152) : BV:8
154 : ite(135, 28, 153) : BV:8
155 : ite(134, 28, 154) : BV:8
156 : bvadd(62, 23, 132) : BV:32
157 : eq(156, 26) : BOOL
158 : eq(156, 29) : BOOL
159 : eq(156, 1) : BOOL
160 : eq(156, 33) : BOOL
161 : eq(156, 35) : BOOL
162 : eq(156, 15) : BOOL
163 : eq(156, 39) : BOOL
164 : eq(156, 42) : BOOL
165 : eq(156, 44) : BOOL
166 : eq(156, 46) : BOOL
167 : eq(156, 48) : BOOL
168 : ite(167, 28, 50) : BV:8
169 : ite(166, 28, 168) : BV:8
170 : ite(165, 28, 169) : BV:8
171 : ite(164, 28, 170) : BV:8
172 : ite(163, 41, 171) : BV:8
173 : ite(162, 38, 172) : BV:8
174 : ite(161, 28, 173) : BV:8
175 : ite(160, 28, 174) : BV:8
176 : ite(159, 32, 175) : BV:8
177 : ite(158, 28, 176) : BV:8
178 : ite(157, 28, 177) : BV:8
179 : bvadd(15, 23, 132) : BV:32
180 : eq(179, 26) : BOOL
181 : eq(179, 29) : BOOL
182 : eq(179, 1) : BOOL
183 : eq(179, 33) : BOOL
184 : eq(179, 35) : BOOL
185 : eq(179, 15) : BOOL
186 : eq(179, 39) : BOOL
187 : eq(179, 42) : BOOL
188 : eq(179, 44) : BOOL
189 : eq(179, 46) : BOOL
190 : eq(179, 48) : BOOL
191 : ite(190, 28, 50) : BV:8
192 : ite(189, 28, 191) : BV:8
193 : ite(188, 28, 192) : BV:8
194 : ite(187, 28, 193) : BV:8
195 : ite(186, 41, 194) : BV:8
196 : ite(185, 38, 195) : BV:8
197 : ite(184, 28, 196) : BV:8
198 : ite(183, 28, 197) : BV:8
199 : ite(182, 32, 198) : BV:8
200 : ite(181, 28, 199) : BV:8
201 : ite(180, 28, 200) : BV:8
202 : bvadd(23, 132) : BV:32
203 : eq(202, 26) : BOOL
204 : eq(202, 29) : BOOL
205 : eq(202, 1) : BOOL
206 : eq(202, 33) : BOOL
207 : eq(202, 35) : BOOL
208 : eq(202, 15) : BOOL
209 : eq(202, 39) : BOOL
210 : eq(202, 42) : BOOL
211 : eq(202, 44) : BOOL
212 : eq(202, 46) : BOOL
213 : eq(202, 48) : BOOL
214 : ite(213, 28, 50) : BV:8
215 : ite(212, 28, 214) : BV:8
216 : ite(211, 28, 215) : BV:8
217 : ite(210, 28, 216) : BV:8
218 : ite(209, 41, 217) : BV:8
219 : ite(208, 38, 218) : BV:8
220 : ite(207, 28, 219) : BV:8
221 : ite(206, 28, 220) : BV:8
222 : ite(205, 32, 221) : BV:8
223 : ite(204, 28, 222) : BV:8
224 : ite(203, 28, 223) : BV:8
225 : bvconcat(155, 178, 201, 224) : BV:32
226 : lambda(20, 225) : FUNCTION[BV:32 -> BV:32]
227 : map(19, 226) : MAP[BV:32 -> BV:32]
228 : sum(16, 17, 227) : SUM[UNIT,MAP[BV:32 -> BV:32]]
229 : sym_const(228) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4307Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4308Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
12 : eq(10, 11) : BOOL
13 : 0 { 0x0 } : BV:8
14 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
15 : eq(10, 14) : BOOL
16 : eq(10, 8) : BOOL
17 : 169 { 0xa9 -87 } : BV:8
18 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
19 : eq(10, 18) : BOOL
20 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
21 : eq(10, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(10, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
26 : eq(10, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
29 : eq(10, 28) : BOOL
30 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
31 : eq(10, 30) : BOOL
32 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
33 : eq(10, 32) : BOOL
34 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
35 : eq(10, 34) : BOOL
36 : 251 { 0xfb -5 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(33, 13, 37) : BV:8
39 : ite(31, 13, 38) : BV:8
40 : ite(29, 13, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(21, 13, 42) : BV:8
44 : ite(19, 13, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : ite(15, 13, 45) : BV:8
47 : ite(12, 13, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 8) : BV:32
50 : eq(49, 11) : BOOL
51 : eq(49, 14) : BOOL
52 : eq(49, 8) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 20) : BOOL
55 : eq(49, 22) : BOOL
56 : eq(49, 25) : BOOL
57 : eq(49, 28) : BOOL
58 : eq(49, 30) : BOOL
59 : eq(49, 32) : BOOL
60 : eq(49, 34) : BOOL
61 : ite(60, 13, 36) : BV:8
62 : ite(59, 13, 61) : BV:8
63 : ite(58, 13, 62) : BV:8
64 : ite(57, 13, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 13, 66) : BV:8
68 : ite(53, 13, 67) : BV:8
69 : ite(52, 17, 68) : BV:8
70 : ite(51, 13, 69) : BV:8
71 : ite(50, 13, 70) : BV:8
72 : bvadd(22, 9, 8) : BV:32
73 : eq(72, 11) : BOOL
74 : eq(72, 14) : BOOL
75 : eq(72, 8) : BOOL
76 : eq(72, 18) : BOOL
77 : eq(72, 20) : BOOL
78 : eq(72, 22) : BOOL
79 : eq(72, 25) : BOOL
80 : eq(72, 28) : BOOL
81 : eq(72, 30) : BOOL
82 : eq(72, 32) : BOOL
83 : eq(72, 34) : BOOL
84 : ite(83, 13, 36) : BV:8
85 : ite(82, 13, 84) : BV:8
86 : ite(81, 13, 85) : BV:8
87 : ite(80, 13, 86) : BV:8
88 : ite(79, 27, 87) : BV:8
89 : ite(78, 24, 88) : BV:8
90 : ite(77, 13, 89) : BV:8
91 : ite(76, 13, 90) : BV:8
92 : ite(75, 17, 91) : BV:8
93 : ite(74, 13, 92) : BV:8
94 : ite(73, 13, 93) : BV:8
95 : bvadd(9, 8) : BV:32
96 : eq(95, 11) : BOOL
97 : eq(95, 14) : BOOL
98 : eq(95, 8) : BOOL
99 : eq(95, 18) : BOOL
100 : eq(95, 20) : BOOL
101 : eq(95, 22) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 28) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 34) : BOOL
107 : ite(106, 13, 36) : BV:8
108 : ite(105, 13, 107) : BV:8
109 : ite(104, 13, 108) : BV:8
110 : ite(103, 13, 109) : BV:8
111 : ite(102, 27, 110) : BV:8
112 : ite(101, 24, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : ite(99, 13, 113) : BV:8
115 : ite(98, 17, 114) : BV:8
116 : ite(97, 13, 115) : BV:8
117 : ite(96, 13, 116) : BV:8
118 : bvconcat(47, 71, 94, 117) : BV:32
119 : bvadd(5, 7, 118) : BV:32
120 : eq(119, 11) : BOOL
121 : eq(119, 14) : BOOL
122 : eq(119, 8) : BOOL
123 : eq(119, 18) : BOOL
124 : eq(119, 20) : BOOL
125 : eq(119, 22) : BOOL
126 : eq(119, 25) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 30) : BOOL
129 : eq(119, 32) : BOOL
130 : eq(119, 34) : BOOL
131 : ite(130, 13, 36) : BV:8
132 : ite(129, 13, 131) : BV:8
133 : ite(128, 13, 132) : BV:8
134 : ite(127, 13, 133) : BV:8
135 : ite(126, 27, 134) : BV:8
136 : ite(125, 24, 135) : BV:8
137 : ite(124, 13, 136) : BV:8
138 : ite(123, 13, 137) : BV:8
139 : ite(122, 17, 138) : BV:8
140 : ite(121, 13, 139) : BV:8
141 : ite(120, 13, 140) : BV:8
142 : bvadd(48, 7, 118) : BV:32
143 : eq(142, 11) : BOOL
144 : eq(142, 14) : BOOL
145 : eq(142, 8) : BOOL
146 : eq(142, 18) : BOOL
147 : eq(142, 20) : BOOL
148 : eq(142, 22) : BOOL
149 : eq(142, 25) : BOOL
150 : eq(142, 28) : BOOL
151 : eq(142, 30) : BOOL
152 : eq(142, 32) : BOOL
153 : eq(142, 34) : BOOL
154 : ite(153, 13, 36) : BV:8
155 : ite(152, 13, 154) : BV:8
156 : ite(151, 13, 155) : BV:8
157 : ite(150, 13, 156) : BV:8
158 : ite(149, 27, 157) : BV:8
159 : ite(148, 24, 158) : BV:8
160 : ite(147, 13, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : ite(145, 17, 161) : BV:8
163 : ite(144, 13, 162) : BV:8
164 : ite(143, 13, 163) : BV:8
165 : bvadd(22, 7, 118) : BV:32
166 : eq(165, 11) : BOOL
167 : eq(165, 14) : BOOL
168 : eq(165, 8) : BOOL
169 : eq(165, 18) : BOOL
170 : eq(165, 20) : BOOL
171 : eq(165, 22) : BOOL
172 : eq(165, 25) : BOOL
173 : eq(165, 28) : BOOL
174 : eq(165, 30) : BOOL
175 : eq(165, 32) : BOOL
176 : eq(165, 34) : BOOL
177 : ite(176, 13, 36) : BV:8
178 : ite(175, 13, 177) : BV:8
179 : ite(174, 13, 178) : BV:8
180 : ite(173, 13, 179) : BV:8
181 : ite(172, 27, 180) : BV:8
182 : ite(171, 24, 181) : BV:8
183 : ite(170, 13, 182) : BV:8
184 : ite(169, 13, 183) : BV:8
185 : ite(168, 17, 184) : BV:8
186 : ite(167, 13, 185) : BV:8
187 : ite(166, 13, 186) : BV:8
188 : bvadd(7, 118) : BV:32
189 : eq(188, 11) : BOOL
190 : eq(188, 14) : BOOL
191 : eq(188, 8) : BOOL
192 : eq(188, 18) : BOOL
193 : eq(188, 20) : BOOL
194 : eq(188, 22) : BOOL
195 : eq(188, 25) : BOOL
196 : eq(188, 28) : BOOL
197 : eq(188, 30) : BOOL
198 : eq(188, 32) : BOOL
199 : eq(188, 34) : BOOL
200 : ite(199, 13, 36) : BV:8
201 : ite(198, 13, 200) : BV:8
202 : ite(197, 13, 201) : BV:8
203 : ite(196, 13, 202) : BV:8
204 : ite(195, 27, 203) : BV:8
205 : ite(194, 24, 204) : BV:8
206 : ite(193, 13, 205) : BV:8
207 : ite(192, 13, 206) : BV:8
208 : ite(191, 17, 207) : BV:8
209 : ite(190, 13, 208) : BV:8
210 : ite(189, 13, 209) : BV:8
211 : bvconcat(141, 164, 187, 210) : BV:32
212 : lambda(4, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(3, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1185342811 { 0x46a6e55b +1.30387437e14 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2761015703 { 0xa491c197 -1533951593 -1.13872039e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda878Var : BV:32
2 : Lambda879Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda880Var : BV:32
2 : Lambda881Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3445317818
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce99.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce99 483ed15eff992eec78cd2dbb1b62839f
=input.spec-%var-x-1
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2953120735 ] -> 0, [ 2953120736; 2953120736 ] -> 2, [ 2953120737; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 537985027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537985028; 537985031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 537985032; 2953120735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2953120736; 2953120739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2953120740; 3261267967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3261267968; 3261267971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3261267972; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 537985028 { 0x20110004 +1.13281297e193 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3261267968 { 0xc2630000 -1033699328 -1.77343750e5 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 712131944 { 0x2a724568 +1.89274311e213 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 712131944 { 0x2a724568 +1.89274311e213 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 537985028 { 0x20110004 +1.13281297e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 537985031 { 0x20110007 +1.13281333e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3261267968 { 0xc2630000 -1033699328 -1.77343750e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3261267971 { 0xc2630003 -1033699325 -1.77343785e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2953120739 { 0xb0050be3 -1341846557 -1.3942525e225 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1202Var : BV:32
2 : Lambda1203Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1204Var : BV:32
2 : Lambda1205Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2640874966
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce100.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce100 a69d74ac16869a3be7232225fa781b56
=input.spec-%var-x-1
1 : Lambda1312Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1313Var : BV:32
11 : Lambda1314Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1315Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1312Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1313Var : BV:32
11 : Lambda1314Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1315Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 171550847 ] -> 0, [ 171550848; 171550848 ] -> 1, [ 171550849; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 171550847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171550848; 171550851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 171550852; 171944003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171944004; 171944007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 171944008; 310237215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 310237216; 310237219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 310237220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 861628332 { 0x335b67ac +1.71410131e231 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 861628332 { 0x335b67ac +1.71410131e231 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 310237219 { 0x127dd823 +1.98315846e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 171944007 { 0xa3fa847 +1.49732291e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 171550851 { 0xa39a883 +1.45045506e149 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1213Var : BV:32
2 : Lambda1214Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1215Var : BV:32
2 : Lambda1216Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
464280558
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce123.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce123 a16a46b33c2b3bd955431f2fdf2173c
=input.spec-%var-x-1
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1349049959 ] -> 0, [ 1349049960; 1349049963 ] -> 255, [ 1349049964; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1033427395 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1033427396; 1033427399 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1033427400; 1349049959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1349049960; 1349049963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1349049964; 2807167755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2807167756; 2807167759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2807167760; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1033427396 { 0x3d98d9c4 +1.19414567e252 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2807167756 { 0xa751fb0c -1487799540 -1.64047384e207 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 664880861 { 0x27a146dd +1.25997507e208 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4217Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4218Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
17 : eq(10, 16) : BOOL
18 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda4207Var : BV:32
18 : lambda(17, 11) : FUNCTION[BV:32 -> BOOL]
19 : Lambda4208Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 1) : BV:32
24 : bvadd(20, 23, 1) : BV:32
25 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 1) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : bvadd(14, 23, 1) : BV:32
50 : eq(49, 25) : BOOL
51 : eq(49, 28) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 32) : BOOL
54 : ite(53, 27, 34) : BV:8
55 : ite(52, 27, 54) : BV:8
56 : ite(51, 27, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : bvadd(23, 1) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 32) : BOOL
63 : ite(62, 27, 34) : BV:8
64 : ite(61, 27, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : ite(59, 27, 65) : BV:8
67 : bvconcat(38, 48, 57, 66) : BV:32
68 : bvadd(20, 22, 67) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 30) : BOOL
72 : eq(68, 32) : BOOL
73 : ite(72, 27, 34) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 27, 74) : BV:8
76 : ite(69, 27, 75) : BV:8
77 : bvadd(39, 22, 67) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : ite(81, 27, 34) : BV:8
83 : ite(80, 27, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 27, 84) : BV:8
86 : bvadd(14, 22, 67) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 30) : BOOL
90 : eq(86, 32) : BOOL
91 : ite(90, 27, 34) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 27, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : bvadd(22, 67) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 28) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : ite(99, 27, 34) : BV:8
101 : ite(98, 27, 100) : BV:8
102 : ite(97, 27, 101) : BV:8
103 : ite(96, 27, 102) : BV:8
104 : bvconcat(76, 85, 94, 103) : BV:32
105 : lambda(19, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(18, 105) : MAP[BV:32 -> BV:32]
107 : sum(15, 16, 106) : SUM[UNIT,MAP[BV:32 -> BV:32]]
108 : sym_const(107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4223Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4224Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
17 : eq(10, 16) : BOOL
18 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 664880861 { 0x27a146dd +1.25997507e208 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2807167756 { 0xa751fb0c -1487799540 -1.64047384e207 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2807167759 { 0xa751fb0f -1487799537 -1.64047420e207 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1033427396 { 0x3d98d9c4 +1.19414567e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1033427399 { 0x3d98d9c7 +1.19414603e252 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1427Var : BV:32
2 : Lambda1428Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1429Var : BV:32
2 : Lambda1430Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2464020496
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce147.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce147 5937546aee4ad3ebb9c8945dae9b8dc
=input.spec-%var-x-1
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2114179 ] -> 0, [ 2114180; 2114183 ] -> 255, [ 2114184; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2114179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2114180; 2114183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2114184; 571886851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 571886852; 571886855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 571886856; 807216671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807216672; 807216675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807216676; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 470490015 { 0x1c0b1b9f +1.8678042e185 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 470490015 { 0x1c0b1b9f +1.8678042e185 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807216675 { 0x301d2623 +1.22772634e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 571886855 { 0x22164d07 +1.17422568e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1656Var : BV:32
2 : Lambda1657Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1658Var : BV:32
2 : Lambda1659Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2543809887
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3v487.ce171.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce171 dac01ca2524234db6a1d7d4387cd0bd
=input.spec-%var-x-1
1 : Lambda1942Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1943Var : BV:32
18 : Lambda1944Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1945Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 128 { 0x80 -128 } : BV:8
64 : eq(60, 56) : BOOL
65 : 16 { 0x10 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 59, 2) : BV:32
71 : eq(70, 61) : BOOL
72 : eq(70, 56) : BOOL
73 : ite(72, 65, 66) : BV:8
74 : ite(71, 63, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 59, 2) : BV:32
77 : eq(76, 61) : BOOL
78 : eq(76, 56) : BOOL
79 : ite(78, 65, 66) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : bvadd(59, 2) : BV:32
82 : eq(81, 61) : BOOL
83 : eq(81, 56) : BOOL
84 : ite(83, 65, 66) : BV:8
85 : ite(82, 63, 84) : BV:8
86 : bvconcat(68, 74, 80, 85) : BV:32
87 : bvadd(56, 58, 86) : BV:32
88 : eq(87, 61) : BOOL
89 : eq(87, 56) : BOOL
90 : ite(89, 65, 66) : BV:8
91 : ite(88, 63, 90) : BV:8
92 : bvadd(69, 58, 86) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 56) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : bvadd(75, 58, 86) : BV:32
98 : eq(97, 61) : BOOL
99 : eq(97, 56) : BOOL
100 : ite(99, 65, 66) : BV:8
101 : ite(98, 63, 100) : BV:8
102 : bvadd(58, 86) : BV:32
103 : eq(102, 61) : BOOL
104 : eq(102, 56) : BOOL
105 : ite(104, 65, 66) : BV:8
106 : ite(103, 63, 105) : BV:8
107 : bvconcat(91, 96, 101, 106) : BV:32
108 : ite(55, 2, 107) : BV:32
109 : lambda(52, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(51, 109) : MAP[BV:32 -> BV:32]
111 : lambda(17, 110) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
112 : map(16, 111) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
113 : sym_const(112) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1942Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1943Var : BV:32
18 : Lambda1944Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1945Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 128 { 0x80 -128 } : BV:8
64 : eq(60, 56) : BOOL
65 : 16 { 0x10 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 59, 2) : BV:32
71 : eq(70, 61) : BOOL
72 : eq(70, 56) : BOOL
73 : ite(72, 65, 66) : BV:8
74 : ite(71, 63, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 59, 2) : BV:32
77 : eq(76, 61) : BOOL
78 : eq(76, 56) : BOOL
79 : ite(78, 65, 66) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : bvadd(59, 2) : BV:32
82 : eq(81, 61) : BOOL
83 : eq(81, 56) : BOOL
84 : ite(83, 65, 66) : BV:8
85 : ite(82, 63, 84) : BV:8
86 : bvconcat(68, 74, 80, 85) : BV:32
87 : bvadd(56, 58, 86) : BV:32
88 : eq(87, 61) : BOOL
89 : eq(87, 56) : BOOL
90 : ite(89, 65, 66) : BV:8
91 : ite(88, 63, 90) : BV:8
92 : bvadd(69, 58, 86) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 56) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : bvadd(75, 58, 86) : BV:32
98 : eq(97, 61) : BOOL
99 : eq(97, 56) : BOOL
100 : ite(99, 65, 66) : BV:8
101 : ite(98, 63, 100) : BV:8
102 : bvadd(58, 86) : BV:32
103 : eq(102, 61) : BOOL
104 : eq(102, 56) : BOOL
105 : ite(104, 65, 66) : BV:8
106 : ite(103, 63, 105) : BV:8
107 : bvconcat(91, 96, 101, 106) : BV:32
108 : ite(55, 2, 107) : BV:32
109 : lambda(52, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(51, 109) : MAP[BV:32 -> BV:32]
111 : lambda(17, 110) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
112 : map(16, 111) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
113 : sym_const(112) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2 ] -> 0, [ 3; 3 ] -> 16, [ 4; 2147729418 ] -> 0, [ 2147729419; 2147729419 ] -> 128, [ 2147729420; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 134332483 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134332484; 134332487 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 134332488; 2147729415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147729416; 2147729419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147729420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147729416 { 0x8003c008 -2147237880 -1.2929782e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 134332484 { 0x801c044 +1.1367998e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1339827064 { 0x4fdc2378 +1.71983242e32 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4151Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 268435457 { 0x10000001 +1.11e161 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4152Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
51 : eq(49, 50) : BOOL
52 : 128 { 0x80 -128 } : BV:8
53 : eq(49, 45) : BOOL
54 : 16 { 0x10 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 48, 2) : BV:32
60 : eq(59, 50) : BOOL
61 : eq(59, 45) : BOOL
62 : ite(61, 54, 55) : BV:8
63 : ite(60, 52, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 48, 2) : BV:32
66 : eq(65, 50) : BOOL
67 : eq(65, 45) : BOOL
68 : ite(67, 54, 55) : BV:8
69 : ite(66, 52, 68) : BV:8
70 : bvadd(48, 2) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 45) : BOOL
73 : ite(72, 54, 55) : BV:8
74 : ite(71, 52, 73) : BV:8
75 : bvconcat(57, 63, 69, 74) : BV:32
76 : bvadd(45, 47, 75) : BV:32
77 : eq(76, 50) : BOOL
78 : eq(76, 45) : BOOL
79 : ite(78, 54, 55) : BV:8
80 : ite(77, 52, 79) : BV:8
81 : bvadd(58, 47, 75) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 45) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : bvadd(64, 47, 75) : BV:32
87 : eq(86, 50) : BOOL
88 : eq(86, 45) : BOOL
89 : ite(88, 54, 55) : BV:8
90 : ite(87, 52, 89) : BV:8
91 : bvadd(47, 75) : BV:32
92 : eq(91, 50) : BOOL
93 : eq(91, 45) : BOOL
94 : ite(93, 54, 55) : BV:8
95 : ite(92, 52, 94) : BV:8
96 : bvconcat(80, 85, 90, 95) : BV:32
97 : ite(44, 2, 96) : BV:32
98 : lambda(41, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(40, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4141Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 268435457 { 0x10000001 +1.11e161 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4142Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
57 : eq(55, 56) : BOOL
58 : 128 { 0x80 -128 } : BV:8
59 : eq(55, 51) : BOOL
60 : 16 { 0x10 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(57, 58, 62) : BV:8
64 : 2 { 0x2 +1.23e129 } : BV:32
65 : bvadd(64, 54, 1) : BV:32
66 : eq(65, 56) : BOOL
67 : eq(65, 51) : BOOL
68 : ite(67, 60, 61) : BV:8
69 : ite(66, 58, 68) : BV:8
70 : bvadd(15, 54, 1) : BV:32
71 : eq(70, 56) : BOOL
72 : eq(70, 51) : BOOL
73 : ite(72, 60, 61) : BV:8
74 : ite(71, 58, 73) : BV:8
75 : bvadd(54, 1) : BV:32
76 : eq(75, 56) : BOOL
77 : eq(75, 51) : BOOL
78 : ite(77, 60, 61) : BV:8
79 : ite(76, 58, 78) : BV:8
80 : bvconcat(63, 69, 74, 79) : BV:32
81 : bvadd(51, 53, 80) : BV:32
82 : eq(81, 56) : BOOL
83 : eq(81, 51) : BOOL
84 : ite(83, 60, 61) : BV:8
85 : ite(82, 58, 84) : BV:8
86 : bvadd(64, 53, 80) : BV:32
87 : eq(86, 56) : BOOL
88 : eq(86, 51) : BOOL
89 : ite(88, 60, 61) : BV:8
90 : ite(87, 58, 89) : BV:8
91 : bvadd(15, 53, 80) : BV:32
92 : eq(91, 56) : BOOL
93 : eq(91, 51) : BOOL
94 : ite(93, 60, 61) : BV:8
95 : ite(92, 58, 94) : BV:8
96 : bvadd(53, 80) : BV:32
97 : eq(96, 56) : BOOL
98 : eq(96, 51) : BOOL
99 : ite(98, 60, 61) : BV:8
100 : ite(97, 58, 99) : BV:8
101 : bvconcat(85, 90, 95, 100) : BV:32
102 : ite(50, 1, 101) : BV:32
103 : lambda(47, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(46, 103) : MAP[BV:32 -> BV:32]
105 : sum(16, 17, 104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
106 : sym_const(105) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4157Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 268435457 { 0x10000001 +1.11e161 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4158Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
51 : eq(49, 50) : BOOL
52 : 128 { 0x80 -128 } : BV:8
53 : eq(49, 45) : BOOL
54 : 16 { 0x10 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 48, 2) : BV:32
60 : eq(59, 50) : BOOL
61 : eq(59, 45) : BOOL
62 : ite(61, 54, 55) : BV:8
63 : ite(60, 52, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 48, 2) : BV:32
66 : eq(65, 50) : BOOL
67 : eq(65, 45) : BOOL
68 : ite(67, 54, 55) : BV:8
69 : ite(66, 52, 68) : BV:8
70 : bvadd(48, 2) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 45) : BOOL
73 : ite(72, 54, 55) : BV:8
74 : ite(71, 52, 73) : BV:8
75 : bvconcat(57, 63, 69, 74) : BV:32
76 : bvadd(45, 47, 75) : BV:32
77 : eq(76, 50) : BOOL
78 : eq(76, 45) : BOOL
79 : ite(78, 54, 55) : BV:8
80 : ite(77, 52, 79) : BV:8
81 : bvadd(58, 47, 75) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 45) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : bvadd(64, 47, 75) : BV:32
87 : eq(86, 50) : BOOL
88 : eq(86, 45) : BOOL
89 : ite(88, 54, 55) : BV:8
90 : ite(87, 52, 89) : BV:8
91 : bvadd(47, 75) : BV:32
92 : eq(91, 50) : BOOL
93 : eq(91, 45) : BOOL
94 : ite(93, 54, 55) : BV:8
95 : ite(92, 52, 94) : BV:8
96 : bvconcat(80, 85, 90, 95) : BV:32
97 : ite(44, 2, 96) : BV:32
98 : lambda(41, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(40, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1339827064 { 0x4fdc2378 +1.71983242e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 134332484 { 0x801c044 +1.1367998e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 134332487 { 0x801c047 +1.1368033e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147729416 { 0x8003c008 -2147237880 -1.2929782e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1881Var : BV:32
2 : Lambda1882Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : eq(11, 7) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 10, 3) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 7) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 10, 3) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 7) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(10, 3) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 7) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(7, 9, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 9, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 7) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 9, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 7) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(9, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 7) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : ite(6, 3, 58) : BV:32
60 : lambda(1, 2, 59) : FUNCTION[BV:32,BV:32 -> BV:32]
61 : sym_const(60) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1883Var : BV:32
2 : Lambda1884Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : eq(11, 7) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 10, 3) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 7) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 10, 3) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 7) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(10, 3) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 7) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(7, 9, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 9, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 7) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 9, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 7) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(9, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 7) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : ite(6, 3, 58) : BV:32
60 : ite(6, 3, 59) : BV:32
61 : lambda(1, 2, 60) : FUNCTION[BV:32,BV:32 -> BV:32]
62 : sym_const(61) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1889Var : BV:32
2 : Lambda1890Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 268435457 { 0x10000001 +1.11e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1894Var : BV:32
2 : Lambda1895Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 268435457 { 0x10000001 +1.11e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2339900145
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce326.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce326 26140df4aa183b84ff4377289aa2633
=input.spec-%var-x-1
1 : Lambda3598Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3599Var : BV:32
18 : Lambda3600Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3601Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3611Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3612Var : BV:32
18 : Lambda3613Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3614Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4103Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4104Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4093Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 67108865 { 0x4000001 +1.11e137 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4095 { 0xfff +1.48816e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 4096 { 0x1000 +1.48828e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 4097 { 0x1001 +1.48840e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4094Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 242 { 0xf2 -14 } : BV:8
58 : eq(55, 51) : BOOL
59 : 241 { 0xf1 -15 } : BV:8
60 : eq(55, 15) : BOOL
61 : 127 { 0x7f } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 253 { 0xfd -3 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4109Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4110Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3533Var : BV:32
2 : Lambda3534Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4096 { 0x1000 +1.48828e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3543Var : BV:32
2 : Lambda3544Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3547Var : BV:32
2 : Lambda3548Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3538Var : BV:32
2 : Lambda3539Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3458467281
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce327.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce327 151ae7f128af629985aa3863ef6f0ce
=input.spec-%var-x-1
1 : Lambda3652Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3653Var : BV:32
18 : Lambda3654Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3655Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3669Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3670Var : BV:32
18 : Lambda3671Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3672Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3293487391
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce1768.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce1768 31fa32ebbfca65b056eadb983ef6cc7f
=input.spec-%var-x-1
1 : Lambda11367Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11368Var : BV:32
18 : Lambda11369Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11370Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 13 { 0xd } : BV:8
82 : eq(79, 75) : BOOL
83 : 254 { 0xfe -2 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 255 { 0xff -1 } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 159 { 0x9f -97 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11380Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11381Var : BV:32
18 : Lambda11382Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11383Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 13 { 0xd } : BV:8
63 : eq(60, 56) : BOOL
64 : 254 { 0xfe -2 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 159 { 0x9f -97 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 1 ] -> 255, [ 2; 2 ] -> 159, [ 3; 3 ] -> 254, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 708427843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 708427844; 708427847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 708427848; 1127837707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1127837708; 1127837711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1127837712; 3102617751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3102617752; 3102617755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3102617756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16512Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 511 { 0x1ff +1.6091e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 512 { 0x200 +1.6103e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 513 { 0x201 +1.6115e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16513Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 13 { 0xd } : BV:8
52 : eq(49, 45) : BOOL
53 : 254 { 0xfe -2 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 159 { 0x9f -97 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 16383 { 0x3fff +1.195300e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 16384 { 0x4000 +1.195312e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16502Var : BV:32
19 : 16385 { 0x4001 +1.195324e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 511 { 0x1ff +1.6091e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 512 { 0x200 +1.6103e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 513 { 0x201 +1.6115e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16503Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 13 { 0xd } : BV:8
58 : eq(55, 51) : BOOL
59 : 254 { 0xfe -2 } : BV:8
60 : eq(55, 15) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 159 { 0x9f -97 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16518Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 511 { 0x1ff +1.6091e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 512 { 0x200 +1.6103e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 513 { 0x201 +1.6115e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16519Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 13 { 0xd } : BV:8
52 : eq(49, 45) : BOOL
53 : 254 { 0xfe -2 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 159 { 0x9f -97 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3102617755 { 0xb8ee309b -1192349541 -1.86085832e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 708427847 { 0x2a39c047 +1.45118033e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1127837711 { 0x4339700f +1.44873225e7 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11297Var : BV:32
2 : Lambda11298Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 16383 { 0x3fff +1.195300e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 16385 { 0x4001 +1.195324e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 13 { 0xd } : BV:8
55 : eq(52, 48) : BOOL
56 : 254 { 0xfe -2 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 159 { 0x9f -97 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11307Var : BV:32
2 : Lambda11308Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 13 { 0xd } : BV:8
14 : eq(11, 7) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11311Var : BV:32
2 : Lambda11312Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11302Var : BV:32
2 : Lambda11303Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2774817899
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 15
=global nodece 15 nodece z3v487.ce1769.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce1769 8bf6c72fbdec8af2de2d3249f1b26c
=input.spec-%var-x-1
1 : Lambda11419Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11420Var : BV:32
18 : Lambda11421Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11422Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11432Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11433Var : BV:32
18 : Lambda11434Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11435Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16560Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16561Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16550Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16551Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16567Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11318Var : BV:32
2 : Lambda11319Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11323Var : BV:32
2 : Lambda11324Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11330Var : BV:32
2 : Lambda11331Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
4259449193
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1808.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1808 5c23edcceb1db941a398fe55737074
=input.spec-%var-x-1
1 : Lambda11683Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11684Var : BV:32
18 : Lambda11685Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11686Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(37, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 13 { 0xd } : BV:8
81 : eq(78, 37) : BOOL
82 : 254 { 0xfe -2 } : BV:8
83 : eq(78, 34) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : eq(78, 41) : BOOL
86 : 159 { 0x9f -97 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(41, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 37) : BOOL
95 : eq(92, 34) : BOOL
96 : eq(92, 41) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(34, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 37) : BOOL
104 : eq(101, 34) : BOOL
105 : eq(101, 41) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 37) : BOOL
112 : eq(77, 34) : BOOL
113 : eq(77, 41) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(37, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 37) : BOOL
122 : eq(119, 34) : BOOL
123 : eq(119, 41) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(41, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 37) : BOOL
131 : eq(128, 34) : BOOL
132 : eq(128, 41) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(34, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 37) : BOOL
140 : eq(137, 34) : BOOL
141 : eq(137, 41) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 37) : BOOL
149 : eq(146, 34) : BOOL
150 : eq(146, 41) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(55, 2, 155) : BV:32
157 : ite(74, 155, 156) : BV:32
158 : ite(55, 2, 157) : BV:32
159 : lambda(52, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(51, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11696Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11697Var : BV:32
18 : Lambda11698Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11699Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(37, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 13 { 0xd } : BV:8
62 : eq(59, 37) : BOOL
63 : 254 { 0xfe -2 } : BV:8
64 : eq(59, 34) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : eq(59, 41) : BOOL
67 : 159 { 0x9f -97 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(41, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 37) : BOOL
76 : eq(73, 34) : BOOL
77 : eq(73, 41) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(34, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 37) : BOOL
85 : eq(82, 34) : BOOL
86 : eq(82, 41) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 37) : BOOL
93 : eq(58, 34) : BOOL
94 : eq(58, 41) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(37, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 37) : BOOL
103 : eq(100, 34) : BOOL
104 : eq(100, 41) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(41, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 37) : BOOL
112 : eq(109, 34) : BOOL
113 : eq(109, 41) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(34, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 37) : BOOL
121 : eq(118, 34) : BOOL
122 : eq(118, 41) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 37) : BOOL
130 : eq(127, 34) : BOOL
131 : eq(127, 41) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(55, 2, 136) : BV:32
138 : lambda(52, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(51, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 1 ] -> 255, [ 2; 2 ] -> 159, [ 3; 3 ] -> 254, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 708427843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 708427844; 708427847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 708427848; 1127837707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1127837708; 1127837711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1127837712; 3102617751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3102617752; 3102617755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3102617756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16614Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 9) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16615Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 41) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(24, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 13 { 0xd } : BV:8
51 : eq(48, 24) : BOOL
52 : 254 { 0xfe -2 } : BV:8
53 : eq(48, 21) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 28) : BOOL
56 : 159 { 0x9f -97 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(28, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 24) : BOOL
65 : eq(62, 21) : BOOL
66 : eq(62, 28) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(21, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 24) : BOOL
74 : eq(71, 21) : BOOL
75 : eq(71, 28) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 24) : BOOL
82 : eq(47, 21) : BOOL
83 : eq(47, 28) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(24, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 24) : BOOL
92 : eq(89, 21) : BOOL
93 : eq(89, 28) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(28, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 24) : BOOL
101 : eq(98, 21) : BOOL
102 : eq(98, 28) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(21, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 24) : BOOL
110 : eq(107, 21) : BOOL
111 : eq(107, 28) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 24) : BOOL
119 : eq(116, 21) : BOOL
120 : eq(116, 28) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(44, 2, 125) : BV:32
127 : lambda(41, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(40, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 16383 { 0x3fff +1.195300e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 16384 { 0x4000 +1.195312e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16604Var : BV:32
19 : 16385 { 0x4001 +1.195324e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 15) : BOOL
30 : and(28, 29) : BOOL
31 : 3 { 0x3 +1.35e129 } : BV:32
32 : bvule(31, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 18) : BOOL
37 : bvule(18, 35) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(27, 42) : BOOL
44 : ite(43, 6, 12) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda16605Var : BV:32
47 : eq(1, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 46) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(31, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 13 { 0xd } : BV:8
56 : eq(53, 31) : BOOL
57 : 254 { 0xfe -2 } : BV:8
58 : eq(53, 15) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : eq(53, 35) : BOOL
61 : 159 { 0x9f -97 } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(58, 59, 63) : BV:8
65 : ite(56, 57, 64) : BV:8
66 : ite(54, 55, 65) : BV:8
67 : bvadd(35, 52) : BV:32
68 : eq(67, 1) : BOOL
69 : eq(67, 31) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 35) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 57, 73) : BV:8
75 : ite(68, 55, 74) : BV:8
76 : bvadd(15, 52) : BV:32
77 : eq(76, 1) : BOOL
78 : eq(76, 31) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 35) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 59, 81) : BV:8
83 : ite(78, 57, 82) : BV:8
84 : ite(77, 55, 83) : BV:8
85 : eq(52, 1) : BOOL
86 : eq(52, 31) : BOOL
87 : eq(52, 15) : BOOL
88 : eq(52, 35) : BOOL
89 : ite(88, 61, 62) : BV:8
90 : ite(87, 59, 89) : BV:8
91 : ite(86, 57, 90) : BV:8
92 : ite(85, 55, 91) : BV:8
93 : bvconcat(66, 75, 84, 92) : BV:32
94 : bvadd(31, 51, 93) : BV:32
95 : eq(94, 1) : BOOL
96 : eq(94, 31) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 35) : BOOL
99 : ite(98, 61, 62) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 57, 100) : BV:8
102 : ite(95, 55, 101) : BV:8
103 : bvadd(35, 51, 93) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 31) : BOOL
106 : eq(103, 15) : BOOL
107 : eq(103, 35) : BOOL
108 : ite(107, 61, 62) : BV:8
109 : ite(106, 59, 108) : BV:8
110 : ite(105, 57, 109) : BV:8
111 : ite(104, 55, 110) : BV:8
112 : bvadd(15, 51, 93) : BV:32
113 : eq(112, 1) : BOOL
114 : eq(112, 31) : BOOL
115 : eq(112, 15) : BOOL
116 : eq(112, 35) : BOOL
117 : ite(116, 61, 62) : BV:8
118 : ite(115, 59, 117) : BV:8
119 : ite(114, 57, 118) : BV:8
120 : ite(113, 55, 119) : BV:8
121 : bvadd(51, 93) : BV:32
122 : eq(121, 1) : BOOL
123 : eq(121, 31) : BOOL
124 : eq(121, 15) : BOOL
125 : eq(121, 35) : BOOL
126 : ite(125, 61, 62) : BV:8
127 : ite(124, 59, 126) : BV:8
128 : ite(123, 57, 127) : BV:8
129 : ite(122, 55, 128) : BV:8
130 : bvconcat(102, 111, 120, 129) : BV:32
131 : ite(49, 1, 130) : BV:32
132 : lambda(46, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(45, 132) : MAP[BV:32 -> BV:32]
134 : sum(16, 17, 133) : SUM[UNIT,MAP[BV:32 -> BV:32]]
135 : sym_const(134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16620Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 9) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16621Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 41) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(24, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 13 { 0xd } : BV:8
51 : eq(48, 24) : BOOL
52 : 254 { 0xfe -2 } : BV:8
53 : eq(48, 21) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 28) : BOOL
56 : 159 { 0x9f -97 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(28, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 24) : BOOL
65 : eq(62, 21) : BOOL
66 : eq(62, 28) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(21, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 24) : BOOL
74 : eq(71, 21) : BOOL
75 : eq(71, 28) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 24) : BOOL
82 : eq(47, 21) : BOOL
83 : eq(47, 28) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(24, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 24) : BOOL
92 : eq(89, 21) : BOOL
93 : eq(89, 28) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(28, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 24) : BOOL
101 : eq(98, 21) : BOOL
102 : eq(98, 28) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(21, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 24) : BOOL
110 : eq(107, 21) : BOOL
111 : eq(107, 28) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 24) : BOOL
119 : eq(116, 21) : BOOL
120 : eq(116, 28) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(44, 2, 125) : BV:32
127 : lambda(41, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(40, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3102617755 { 0xb8ee309b -1192349541 -1.86085832e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 708427847 { 0x2a39c047 +1.45118033e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1127837711 { 0x4339700f +1.44873225e7 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11613Var : BV:32
2 : Lambda11614Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 16383 { 0x3fff +1.195300e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 16385 { 0x4001 +1.195324e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(33, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 13 { 0xd } : BV:8
54 : eq(51, 33) : BOOL
55 : 254 { 0xfe -2 } : BV:8
56 : eq(51, 30) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : eq(51, 37) : BOOL
59 : 159 { 0x9f -97 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(37, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 33) : BOOL
68 : eq(65, 30) : BOOL
69 : eq(65, 37) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(30, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 33) : BOOL
77 : eq(74, 30) : BOOL
78 : eq(74, 37) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 33) : BOOL
85 : eq(50, 30) : BOOL
86 : eq(50, 37) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(33, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 33) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 37) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(37, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 33) : BOOL
104 : eq(101, 30) : BOOL
105 : eq(101, 37) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(30, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 33) : BOOL
113 : eq(110, 30) : BOOL
114 : eq(110, 37) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 33) : BOOL
122 : eq(119, 30) : BOOL
123 : eq(119, 37) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(47, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11623Var : BV:32
2 : Lambda11624Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 13 { 0xd } : BV:8
14 : eq(11, 7) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11627Var : BV:32
2 : Lambda11628Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11618Var : BV:32
2 : Lambda11619Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
4029677953
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3v487.ce1809.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3v487.ce1809 c97643eef7fbf512f5dd34db33d7b3c
=input.spec-%var-x-1
1 : Lambda11735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11736Var : BV:32
18 : Lambda11737Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11738Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11749Var : BV:32
18 : Lambda11750Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11751Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16663Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 3, 1) : BV:32
16 : unit : UNIT
17 : Lambda16652Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvule(18, 1) : BOOL
20 : and(19, 10) : BOOL
21 : bvule(1, 7) : BOOL
22 : and(8, 21) : BOOL
23 : ite(22, 7, 7) : BV:32
24 : ite(20, 18, 23) : BV:32
25 : ite(5, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 17) : BOOL
28 : bvule(17, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(18, 17) : BOOL
31 : bvule(17, 9) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(7, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 7, 7) : BV:32
37 : ite(32, 18, 36) : BV:32
38 : ite(29, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(26, 39) : BOOL
41 : ite(40, 6, 12) : BOOL
42 : lambda(17, 41) : FUNCTION[BV:32 -> BOOL]
43 : Lambda16653Var : BV:32
44 : eq(1, 1) : BOOL
45 : eq(43, 1) : BOOL
46 : and(44, 45) : BOOL
47 : bvule(1, 43) : BOOL
48 : bvule(43, 3) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 43) : BOOL
51 : bvule(43, 9) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(7, 43) : BOOL
54 : bvule(43, 7) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 7, 7) : BV:32
57 : ite(52, 18, 56) : BV:32
58 : ite(49, 1, 57) : BV:32
59 : eq(58, 1) : BOOL
60 : and(26, 59) : BOOL
61 : ite(60, 6, 12) : BOOL
62 : and(14, 61) : BOOL
63 : ite(46, 1, 1) : BV:32
64 : ite(62, 1, 63) : BV:32
65 : ite(46, 1, 64) : BV:32
66 : lambda(43, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(42, 66) : MAP[BV:32 -> BV:32]
68 : sum(15, 16, 67) : SUM[UNIT,MAP[BV:32 -> BV:32]]
69 : sym_const(68) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16668Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16669Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11634Var : BV:32
2 : Lambda11635Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11639Var : BV:32
2 : Lambda11640Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11646Var : BV:32
2 : Lambda11647Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1639329293
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce1848.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce1848 fc65d3d32f6939b9de6f54dc1a46d2
=input.spec-%var-x-1
1 : Lambda11999Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12000Var : BV:32
18 : Lambda12001Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12002Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 4 { 0x4 } : BV:8
81 : eq(78, 74) : BOOL
82 : 190 { 0xbe -66 } : BV:8
83 : eq(78, 40) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(81, 82, 86) : BV:8
88 : ite(79, 80, 87) : BV:8
89 : bvadd(40, 77) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 74) : BOOL
92 : eq(89, 40) : BOOL
93 : ite(92, 84, 85) : BV:8
94 : ite(91, 82, 93) : BV:8
95 : ite(90, 80, 94) : BV:8
96 : bvadd(36, 77) : BV:32
97 : eq(96, 2) : BOOL
98 : eq(96, 74) : BOOL
99 : eq(96, 40) : BOOL
100 : ite(99, 84, 85) : BV:8
101 : ite(98, 82, 100) : BV:8
102 : ite(97, 80, 101) : BV:8
103 : eq(77, 2) : BOOL
104 : eq(77, 74) : BOOL
105 : eq(77, 40) : BOOL
106 : ite(105, 84, 85) : BV:8
107 : ite(104, 82, 106) : BV:8
108 : ite(103, 80, 107) : BV:8
109 : bvconcat(88, 95, 102, 108) : BV:32
110 : bvadd(74, 76, 109) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 74) : BOOL
113 : eq(110, 40) : BOOL
114 : ite(113, 84, 85) : BV:8
115 : ite(112, 82, 114) : BV:8
116 : ite(111, 80, 115) : BV:8
117 : bvadd(40, 76, 109) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 74) : BOOL
120 : eq(117, 40) : BOOL
121 : ite(120, 84, 85) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : bvadd(36, 76, 109) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 74) : BOOL
127 : eq(124, 40) : BOOL
128 : ite(127, 84, 85) : BV:8
129 : ite(126, 82, 128) : BV:8
130 : ite(125, 80, 129) : BV:8
131 : bvadd(76, 109) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 74) : BOOL
134 : eq(131, 40) : BOOL
135 : ite(134, 84, 85) : BV:8
136 : ite(133, 82, 135) : BV:8
137 : ite(132, 80, 136) : BV:8
138 : bvconcat(116, 123, 130, 137) : BV:32
139 : ite(54, 2, 138) : BV:32
140 : ite(73, 138, 139) : BV:32
141 : ite(54, 2, 140) : BV:32
142 : lambda(51, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(50, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12012Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12013Var : BV:32
18 : Lambda12014Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12015Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 4 { 0x4 } : BV:8
62 : eq(59, 55) : BOOL
63 : 190 { 0xbe -66 } : BV:8
64 : eq(59, 40) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(60, 61, 68) : BV:8
70 : bvadd(40, 58) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 55) : BOOL
73 : eq(70, 40) : BOOL
74 : ite(73, 65, 66) : BV:8
75 : ite(72, 63, 74) : BV:8
76 : ite(71, 61, 75) : BV:8
77 : bvadd(36, 58) : BV:32
78 : eq(77, 2) : BOOL
79 : eq(77, 55) : BOOL
80 : eq(77, 40) : BOOL
81 : ite(80, 65, 66) : BV:8
82 : ite(79, 63, 81) : BV:8
83 : ite(78, 61, 82) : BV:8
84 : eq(58, 2) : BOOL
85 : eq(58, 55) : BOOL
86 : eq(58, 40) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 63, 87) : BV:8
89 : ite(84, 61, 88) : BV:8
90 : bvconcat(69, 76, 83, 89) : BV:32
91 : bvadd(55, 57, 90) : BV:32
92 : eq(91, 2) : BOOL
93 : eq(91, 55) : BOOL
94 : eq(91, 40) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : ite(92, 61, 96) : BV:8
98 : bvadd(40, 57, 90) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 40) : BOOL
102 : ite(101, 65, 66) : BV:8
103 : ite(100, 63, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : bvadd(36, 57, 90) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 40) : BOOL
109 : ite(108, 65, 66) : BV:8
110 : ite(107, 63, 109) : BV:8
111 : ite(106, 61, 110) : BV:8
112 : bvadd(57, 90) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 55) : BOOL
115 : eq(112, 40) : BOOL
116 : ite(115, 65, 66) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 61, 117) : BV:8
119 : bvconcat(97, 104, 111, 118) : BV:32
120 : ite(54, 2, 119) : BV:32
121 : lambda(51, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(50, 121) : MAP[BV:32 -> BV:32]
123 : lambda(17, 122) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
124 : map(16, 123) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
125 : sym_const(124) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 4, [ 1; 1 ] -> 0, [ 2; 2 ] -> 223, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 161866995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 161866996; 161866999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 161867000; 544929879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 544929880; 544929883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 544929884; 3094983655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094983656; 3094983659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3094983660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.llvm-%n
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16716Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 32769 { 0x8001 +1.390636e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16717Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 32767 { 0x7fff +1.390613e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16706Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 32769 { 0x8001 +1.390636e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16707Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : 3 { 0x3 +1.35e129 } : BV:32
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 45) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(49, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 4 { 0x4 } : BV:8
56 : eq(53, 49) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : eq(53, 34) : BOOL
59 : 223 { 0xdf -33 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : bvadd(34, 52) : BV:32
65 : eq(64, 1) : BOOL
66 : eq(64, 49) : BOOL
67 : eq(64, 34) : BOOL
68 : ite(67, 59, 60) : BV:8
69 : ite(66, 57, 68) : BV:8
70 : ite(65, 55, 69) : BV:8
71 : bvadd(15, 52) : BV:32
72 : eq(71, 1) : BOOL
73 : eq(71, 49) : BOOL
74 : eq(71, 34) : BOOL
75 : ite(74, 59, 60) : BV:8
76 : ite(73, 57, 75) : BV:8
77 : ite(72, 55, 76) : BV:8
78 : eq(52, 1) : BOOL
79 : eq(52, 49) : BOOL
80 : eq(52, 34) : BOOL
81 : ite(80, 59, 60) : BV:8
82 : ite(79, 57, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : bvconcat(63, 70, 77, 83) : BV:32
85 : bvadd(49, 51, 84) : BV:32
86 : eq(85, 1) : BOOL
87 : eq(85, 49) : BOOL
88 : eq(85, 34) : BOOL
89 : ite(88, 59, 60) : BV:8
90 : ite(87, 57, 89) : BV:8
91 : ite(86, 55, 90) : BV:8
92 : bvadd(34, 51, 84) : BV:32
93 : eq(92, 1) : BOOL
94 : eq(92, 49) : BOOL
95 : eq(92, 34) : BOOL
96 : ite(95, 59, 60) : BV:8
97 : ite(94, 57, 96) : BV:8
98 : ite(93, 55, 97) : BV:8
99 : bvadd(15, 51, 84) : BV:32
100 : eq(99, 1) : BOOL
101 : eq(99, 49) : BOOL
102 : eq(99, 34) : BOOL
103 : ite(102, 59, 60) : BV:8
104 : ite(101, 57, 103) : BV:8
105 : ite(100, 55, 104) : BV:8
106 : bvadd(51, 84) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 49) : BOOL
109 : eq(106, 34) : BOOL
110 : ite(109, 59, 60) : BV:8
111 : ite(108, 57, 110) : BV:8
112 : ite(107, 55, 111) : BV:8
113 : bvconcat(91, 98, 105, 112) : BV:32
114 : ite(48, 1, 113) : BV:32
115 : lambda(45, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(44, 115) : MAP[BV:32 -> BV:32]
117 : sum(16, 17, 116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
118 : sym_const(117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16722Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 32769 { 0x8001 +1.390636e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16723Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 161866999 { 0x9a5e4f7 +1.29604995e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 544929883 { 0x207af85b +1.96070420e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3094983659 { 0xb879b3eb -1199983637 -1.95080316e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11929Var : BV:32
2 : Lambda11930Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 32767 { 0x7fff +1.390613e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 32769 { 0x8001 +1.390636e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 4 { 0x4 } : BV:8
54 : eq(51, 47) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : eq(51, 36) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : bvadd(36, 50) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 47) : BOOL
65 : eq(62, 36) : BOOL
66 : ite(65, 57, 58) : BV:8
67 : ite(64, 55, 66) : BV:8
68 : ite(63, 53, 67) : BV:8
69 : bvadd(32, 50) : BV:32
70 : eq(69, 3) : BOOL
71 : eq(69, 47) : BOOL
72 : eq(69, 36) : BOOL
73 : ite(72, 57, 58) : BV:8
74 : ite(71, 55, 73) : BV:8
75 : ite(70, 53, 74) : BV:8
76 : eq(50, 3) : BOOL
77 : eq(50, 47) : BOOL
78 : eq(50, 36) : BOOL
79 : ite(78, 57, 58) : BV:8
80 : ite(77, 55, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : bvconcat(61, 68, 75, 81) : BV:32
83 : bvadd(47, 49, 82) : BV:32
84 : eq(83, 3) : BOOL
85 : eq(83, 47) : BOOL
86 : eq(83, 36) : BOOL
87 : ite(86, 57, 58) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : bvadd(36, 49, 82) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 47) : BOOL
93 : eq(90, 36) : BOOL
94 : ite(93, 57, 58) : BV:8
95 : ite(92, 55, 94) : BV:8
96 : ite(91, 53, 95) : BV:8
97 : bvadd(32, 49, 82) : BV:32
98 : eq(97, 3) : BOOL
99 : eq(97, 47) : BOOL
100 : eq(97, 36) : BOOL
101 : ite(100, 57, 58) : BV:8
102 : ite(99, 55, 101) : BV:8
103 : ite(98, 53, 102) : BV:8
104 : bvadd(49, 82) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 47) : BOOL
107 : eq(104, 36) : BOOL
108 : ite(107, 57, 58) : BV:8
109 : ite(106, 55, 108) : BV:8
110 : ite(105, 53, 109) : BV:8
111 : bvconcat(89, 96, 103, 110) : BV:32
112 : ite(6, 3, 111) : BV:32
113 : ite(46, 111, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11939Var : BV:32
2 : Lambda11940Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 4 { 0x4 } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(12, 13, 21) : BV:8
23 : bvadd(16, 10) : BV:32
24 : eq(23, 3) : BOOL
25 : eq(23, 7) : BOOL
26 : eq(23, 16) : BOOL
27 : ite(26, 18, 19) : BV:8
28 : ite(25, 15, 27) : BV:8
29 : ite(24, 13, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 10) : BV:32
32 : eq(31, 3) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 16) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 15, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 3) : BOOL
39 : eq(10, 7) : BOOL
40 : eq(10, 16) : BOOL
41 : ite(40, 18, 19) : BV:8
42 : ite(39, 15, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(22, 29, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 7) : BOOL
48 : eq(45, 16) : BOOL
49 : ite(48, 18, 19) : BV:8
50 : ite(47, 15, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(16, 9, 44) : BV:32
53 : eq(52, 3) : BOOL
54 : eq(52, 7) : BOOL
55 : eq(52, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(30, 9, 44) : BV:32
60 : eq(59, 3) : BOOL
61 : eq(59, 7) : BOOL
62 : eq(59, 16) : BOOL
63 : ite(62, 18, 19) : BV:8
64 : ite(61, 15, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 7) : BOOL
69 : eq(66, 16) : BOOL
70 : ite(69, 18, 19) : BV:8
71 : ite(68, 15, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11943Var : BV:32
2 : Lambda11944Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 32769 { 0x8001 +1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11934Var : BV:32
2 : Lambda11935Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 32769 { 0x8001 +1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3533613032
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce1888.num_edges_traversed1
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce1888 a3873328fde9e6e4decbf3c6fe128849
=input.spec-%var-x-1
1 : Lambda12419Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12420Var : BV:32
18 : Lambda12421Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12422Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12432Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12433Var : BV:32
18 : Lambda12434Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12435Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17240Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17241Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17230Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17231Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17246Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17247Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12349Var : BV:32
2 : Lambda12350Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12359Var : BV:32
2 : Lambda12360Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12363Var : BV:32
2 : Lambda12364Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12354Var : BV:32
2 : Lambda12355Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3245672291
=counter_example_end
=global nodece 19 num_edges_traversed 1
=global nodece 19 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3v487.ce3090.num_edges_traversed0
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce3090 d57d909370856f366cf415ff7a58bb
=input.spec-%var-x-1
1 : Lambda26052Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26053Var : BV:32
18 : Lambda26054Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26055Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26077Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26078Var : BV:32
18 : Lambda26079Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26080Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1709676611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1709676612; 1709676615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1709676616; 2147485311 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147485312; 2147485315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147485316; 2148054647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2148054648; 2148054651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2148054652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26085Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26086Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda26062Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda26063Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26091Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26092Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147485315 { 0x80000683 -2147481981 -1.19872e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1709676615 { 0x65e79847 +1.80933463e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2148054651 { 0x8008b67b -2146912645 -1.6806886e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
433628221
=counter_example_end
=global nodece 20 num_edges_traversed 0
=global nodece 20 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce3091.num_edges_traversed0
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce3091 315414c4c8179f719729a46426e6e82
=input.spec-%var-x-1
1 : Lambda26144Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26145Var : BV:32
18 : Lambda26146Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26147Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26169Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26170Var : BV:32
18 : Lambda26171Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26172Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1406444491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1406444492; 1406444495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1406444496; 2548826111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2548826112; 2548826115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2548826116; 2895236383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2895236384; 2895236387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2895236388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2548826112 { 0x97ec0000 -1746141184 -1.84375000e176 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1406444492 { 0x53d4a3cc +1.66124868e40 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2895236384 { 0xac91cd20 -1399730912 -1.13907241e218 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26177Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26178Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : unit : UNIT
3 : Lambda26154Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda26155Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26183Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26184Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1406444492 { 0x53d4a3cc +1.66124868e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1406444495 { 0x53d4a3cf +1.66124904e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2895236384 { 0xac91cd20 -1399730912 -1.13907241e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2895236387 { 0xac91cd23 -1399730909 -1.13907277e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2548826112 { 0x97ec0000 -1746141184 -1.84375000e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2548826115 { 0x97ec0003 -1746141181 -1.84375035e176 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1964017805
=counter_example_end
=global nodece 21 num_edges_traversed 0
=global nodece 21 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce3173.num_edges_traversed4
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce3173 f78d5b6773f28aeb72d2c9534bd8
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26315Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26316Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : bvadd(8, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : ite(15, 2, 1) : BV:32
17 : unit : UNIT
18 : Lambda26305Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26306Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 2) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : bvadd(2, 24, 22) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 31, 32) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 22) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 31, 32) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 31, 32) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 31, 32) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(2, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 31, 32) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 31, 32) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26321Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26322Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : bvadd(8, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda664Var : BV:32
2 : Lambda665Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 22 num_edges_traversed 4
=global nodece 22 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce3208.num_edges_traversed6
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce3208 c957a368b377e7f869fba938c3ed674
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26393Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26394Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : bvadd(8, 9, 6) : BV:32
21 : eq(20, 11) : BOOL
22 : eq(20, 14) : BOOL
23 : ite(22, 16, 17) : BV:8
24 : ite(21, 13, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda26383Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda26384Var : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 21) : BV:32
25 : bvmul(23, 2) : BV:32
26 : bvadd(22, 25, 23) : BV:32
27 : 419430464 { 0x19000040 +1.762e179 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : bvadd(2, 25, 23) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 32, 33) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(16, 25, 23) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 32, 33) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(25, 23) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(35, 40, 45, 50) : BV:32
52 : bvadd(22, 24, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(2, 24, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 32, 33) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(16, 24, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 32, 33) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(24, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(21, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(20, 73) : MAP[BV:32 -> BV:32]
75 : sum(17, 18, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26399Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26400Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : bvadd(8, 9, 6) : BV:32
21 : eq(20, 11) : BOOL
22 : eq(20, 14) : BOOL
23 : ite(22, 16, 17) : BV:8
24 : ite(21, 13, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda664Var : BV:32
2 : Lambda665Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 23 num_edges_traversed 6
=global nodece 23 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 24
=global nodece 24 nodece z3v487.ce3243.num_edges_traversed7
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3v487.ce3243 678d7f2628af36b2b3b55bc8b267
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda664Var : BV:32
2 : Lambda665Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 24 num_edges_traversed 7
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce3163.num_edges_traversed3
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce3163 45f4712718dc03cad6a14b7e0444a2
=input.spec-%var-x-1
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 169, [ 1; 1 ] -> 127, [ 2; 1813540559 ] -> 251, [ 1813540560; 1813540563 ] -> 0, [ 1813540564; 2761015701 ] -> 251, [ 2761015702; 2761015702 ] -> 1, [ 2761015703; 3833956687 ] -> 251, [ 3833956688; 3833956691 ] -> 0, [ 3833956692; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1813540559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1813540560; 1813540563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1813540564; 2761015699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2761015700; 2761015703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2761015704; 3833956687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3833956688; 3833956691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3833956692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.llvm-%n
1 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1185342811 { 0x46a6e55b +1.30387437e14 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2761015703 { 0xa491c197 -1533951593 -1.13872039e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda878Var : BV:32
2 : Lambda879Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda880Var : BV:32
2 : Lambda881Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3445317818
=counter_example_end
=global nodece 25 num_edges_traversed 3
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3.ce3153.num_edges_traversed3
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce3153 a636522d2c7086bcea25c0ecb93f0
=input.spec-%var-x-1
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1349049959 ] -> 0, [ 1349049960; 1349049963 ] -> 255, [ 1349049964; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1033427395 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1033427396; 1033427399 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1033427400; 1349049959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1349049960; 1349049963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1349049964; 2807167755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2807167756; 2807167759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2807167760; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1033427396 { 0x3d98d9c4 +1.19414567e252 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2807167756 { 0xa751fb0c -1487799540 -1.64047384e207 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 664880861 { 0x27a146dd +1.25997507e208 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2807167756 { 0xa751fb0c -1487799540 -1.64047384e207 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2807167759 { 0xa751fb0f -1487799537 -1.64047420e207 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1033427396 { 0x3d98d9c4 +1.19414567e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1033427399 { 0x3d98d9c7 +1.19414603e252 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1427Var : BV:32
2 : Lambda1428Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1429Var : BV:32
2 : Lambda1430Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1349049961 { 0x5068de69 +1.81928741e33 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1349049962 { 0x5068de6a +1.81928753e33 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1349049960 { 0x5068de68 +1.81928730e33 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1349049963 { 0x5068de6b +1.81928765e33 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2464020496
=counter_example_end
=global nodece 26 num_edges_traversed 3
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce3111.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce3111 c45a1b30293f6211ef33b2e9b6ffe4af
=input.spec-%var-x-1
1 : Lambda26052Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26053Var : BV:32
18 : Lambda26054Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26055Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26077Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26078Var : BV:32
18 : Lambda26079Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26080Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1709676611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1709676612; 1709676615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1709676616; 2147485311 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147485312; 2147485315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147485316; 2148054647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2148054648; 2148054651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2148054652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1916947959 { 0x72424df7 +1.51800429e101 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2003073943 { 0x77647b97 +1.78502166e111 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147485315 { 0x80000683 -2147481981 -1.19872e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1709676615 { 0x65e79847 +1.80933463e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2148054651 { 0x8008b67b -2146912645 -1.6806886e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
576351845
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3.ce3342.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3.ce3342 a0b7e3d69b387ee8736f90c75350652d
=input.spec-%var-x-1
1 : Lambda29105Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29106Var : BV:32
18 : Lambda29107Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29108Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29130Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29131Var : BV:32
18 : Lambda29132Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29133Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1898124695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1898124696; 1898124699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1898124700; 1967900159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1967900160; 1967900163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1967900164; 3034029035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3034029036; 3034029039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3034029040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1967900160 { 0x754bc600 +1.59197998e107 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3034029036 { 0xb4d79bec -1260938260 -1.68444585e234 } : BV:32
=input.dst.llvm-%n
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1898124696 { 0x71231598 +1.27409648e99 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1323000075 { 0x4edb610b +1.71389901e30 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29138Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29139Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
2 : unit : UNIT
3 : Lambda29115Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda29116Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29144Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29145Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 4707685 { 0x47d565 +1.56119978e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3034029036 { 0xb4d79bec -1260938260 -1.68444585e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3034029039 { 0xb4d79bef -1260938257 -1.68444621e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1898124696 { 0x71231598 +1.27409648e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1898124699 { 0x7123159b +1.27409684e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1967900160 { 0x754bc600 +1.59197998e107 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1967900163 { 0x754bc603 +1.59198033e107 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2489085090
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3.ce3373.num_edges_traversed2
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce3373 a5fe70e23b653f72ab77608798796c
=input.spec-%var-x-1
1 : Lambda29105Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29106Var : BV:32
18 : Lambda29107Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29108Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29130Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29131Var : BV:32
18 : Lambda29132Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29133Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1898124695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1898124696; 1898124699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1898124700; 1967900159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1967900160; 1967900163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1967900164; 3034029035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3034029036; 3034029039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3034029040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1967900160 { 0x754bc600 +1.59197998e107 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3034029036 { 0xb4d79bec -1260938260 -1.68444585e234 } : BV:32
=input.dst.llvm-%n
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1898124696 { 0x71231598 +1.27409648e99 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1323000075 { 0x4edb610b +1.71389901e30 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29304Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda29305Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda29294Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda29295Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29310Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda29311Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 4707685 { 0x47d565 +1.56119978e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3034029036 { 0xb4d79bec -1260938260 -1.68444585e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3034029039 { 0xb4d79bef -1260938257 -1.68444621e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1898124696 { 0x71231598 +1.27409648e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1898124699 { 0x7123159b +1.27409684e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1967900160 { 0x754bc600 +1.59197998e107 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1967900163 { 0x754bc603 +1.59198033e107 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2489085090
=counter_example_end
=global nodece 29 num_edges_traversed 2
=global nodece 29 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 30
=global nodece 30 nodece z3.ce3396.num_edges_traversed4
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce3396 1c6a5a9f9c5ceea049b232dafeddeb6e
=input.spec-%var-x-1
1 : Lambda29105Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29106Var : BV:32
18 : Lambda29107Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29108Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29130Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29131Var : BV:32
18 : Lambda29132Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29133Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1898124695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1898124696; 1898124699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1898124700; 1967900159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1967900160; 1967900163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1967900164; 3034029035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3034029036; 3034029039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3034029040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1967900160 { 0x754bc600 +1.59197998e107 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3034029036 { 0xb4d79bec -1260938260 -1.68444585e234 } : BV:32
=input.dst.llvm-%n
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1898124696 { 0x71231598 +1.27409648e99 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1323000076 { 0x4edb610c +1.71389913e30 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29382Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda29383Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda29372Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda29373Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29388Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda29389Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 4707686 { 0x47d566 +1.56119990e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3034029036 { 0xb4d79bec -1260938260 -1.68444585e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3034029039 { 0xb4d79bef -1260938257 -1.68444621e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1898124696 { 0x71231598 +1.27409648e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1898124699 { 0x7123159b +1.27409684e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1967900160 { 0x754bc600 +1.59197998e107 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1967900163 { 0x754bc603 +1.59198033e107 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2489085090
=counter_example_end
=global nodece 30 num_edges_traversed 4
=global nodece 30 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 31
=global nodece 31 nodece z3.ce3442.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3.ce3442 4473e386fade84f4332ecaa0ac73ef
=input.spec-%var-x-1
1 : Lambda29676Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29677Var : BV:32
18 : Lambda29678Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29679Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29701Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29702Var : BV:32
18 : Lambda29703Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29704Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 167734979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167734980; 167734983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 167734984; 333156951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 333156952; 333156955 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 333156956; 1530274931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1530274932; 1530274935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1530274936; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1530274932 { 0x5b362474 +1.42298746e55 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 333156952 { 0x13db9258 +1.71540355e168 } : BV:32
=input.dst.llvm-%n
1 : 33 { 0x21 +1.393e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 167734980 { 0x9ff6ec4 +1.99556779e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 650274956 { 0x26c2688c +1.51881551e206 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29710Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda29686Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda29687Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29715Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29716Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1063516089 { 0x3f63f7b9 +1.78099739e255 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 333156952 { 0x13db9258 +1.71540355e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 333156955 { 0x13db925b +1.71540391e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 167734980 { 0x9ff6ec4 +1.99556779e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 167734983 { 0x9ff6ec7 +1.99556815e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1530274932 { 0x5b362474 +1.42298746e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1530274935 { 0x5b362477 +1.42298781e55 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32 ] -> true, [ 33; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32 ] -> true, [ 33; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1260446924
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3.ce3473.num_edges_traversed2
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce3473 78e654479ef15c9820d4c69d1b39cda
=input.spec-%var-x-1
1 : Lambda29676Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29677Var : BV:32
18 : Lambda29678Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29679Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29701Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29702Var : BV:32
18 : Lambda29703Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29704Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 167734979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167734980; 167734983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 167734984; 333156951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 333156952; 333156955 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 333156956; 1530274931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1530274932; 1530274935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1530274936; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1530274932 { 0x5b362474 +1.42298746e55 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 333156952 { 0x13db9258 +1.71540355e168 } : BV:32
=input.dst.llvm-%n
1 : 33 { 0x21 +1.393e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 167734980 { 0x9ff6ec4 +1.99556779e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 650274956 { 0x26c2688c +1.51881551e206 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29875Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda29876Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda29865Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda29866Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29881Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda29882Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1063516089 { 0x3f63f7b9 +1.78099739e255 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 333156952 { 0x13db9258 +1.71540355e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 333156955 { 0x13db925b +1.71540391e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 167734980 { 0x9ff6ec4 +1.99556779e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 167734983 { 0x9ff6ec7 +1.99556815e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1530274932 { 0x5b362474 +1.42298746e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1530274935 { 0x5b362477 +1.42298781e55 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32 ] -> true, [ 33; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32 ] -> true, [ 33; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1260446924
=counter_example_end
=global nodece 32 num_edges_traversed 2
=global nodece 32 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 33
=global nodece 33 nodece z3.ce3496.num_edges_traversed3
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(epsilon)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce3496 5de2da33bbe9feaab9b9fdc69fbd9991
=input.spec-%var-x-1
1 : Lambda29676Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29677Var : BV:32
18 : Lambda29678Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29679Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29701Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32 { 0x20 +1.381e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33 { 0x21 +1.393e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29702Var : BV:32
18 : Lambda29703Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29704Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 167734979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167734980; 167734983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 167734984; 333156951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 333156952; 333156955 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 333156956; 1530274931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1530274932; 1530274935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1530274936; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1530274932 { 0x5b362474 +1.42298746e55 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 333156952 { 0x13db9258 +1.71540355e168 } : BV:32
=input.dst.llvm-%n
1 : 33 { 0x21 +1.393e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 167734980 { 0x9ff6ec4 +1.99556779e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 650274957 { 0x26c2688d +1.51881563e206 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1063516090 { 0x3f63f7ba +1.78099751e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 333156952 { 0x13db9258 +1.71540355e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 333156955 { 0x13db925b +1.71540391e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 167734980 { 0x9ff6ec4 +1.99556779e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 167734983 { 0x9ff6ec7 +1.99556815e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1530274932 { 0x5b362474 +1.42298746e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1530274935 { 0x5b362477 +1.42298781e55 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32 ] -> true, [ 33; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32 ] -> true, [ 33; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1260446924
=counter_example_end
=global nodece 33 num_edges_traversed 3
=global nodece 33 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 34
=global nodece 34 nodece z3v487.ce3542.num_edges_traversed1
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3v487.ce3542 d258e4b0b85ed6698123d69eeeb10d2
=input.spec-%var-x-1
1 : Lambda31527Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31528Var : BV:32
18 : Lambda31529Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda31530Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda31544Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31545Var : BV:32
18 : Lambda31546Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda31547Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 335415327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 335415328; 335415331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 335415332; 737558787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 737558788; 737558791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 737558792; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda31588Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda31589Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda31578Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda31579Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda31594Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda31595Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 737558791 { 0x2bf64107 +1.92385947e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 335415331 { 0x13fe0823 +1.98462331e168 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1002753912
=counter_example_end
=global nodece 34 num_edges_traversed 1
=global nodece 34 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce3574.num_edges_traversed3
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce3574 d5b2c8e4e62538fedf504641e4ee4515
=input.spec-%var-x-1
1 : Lambda31527Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31528Var : BV:32
18 : Lambda31529Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda31530Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda31544Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31545Var : BV:32
18 : Lambda31546Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda31547Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 335415327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 335415328; 335415331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 335415332; 737558787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 737558788; 737558791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 737558792; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 107911810 { 0x66e9a82 +1.86409020e141 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda31666Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda31667Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda31656Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda31657Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda31672Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda31673Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 221859615 { 0xd394f1f +1.44772708e155 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 737558791 { 0x2bf64107 +1.92385947e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 335415331 { 0x13fe0823 +1.98462331e168 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2308571840
=counter_example_end
=global nodece 35 num_edges_traversed 3
=global nodece 35 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 36
=global nodece 36 nodece z3v487.ce3609.num_edges_traversed4
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(epsilon)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce3609 46ede9956232347fe2133f7797bf5fc0
=input.spec-%var-x-1
1 : Lambda31527Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31528Var : BV:32
18 : Lambda31529Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda31530Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda31544Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31545Var : BV:32
18 : Lambda31546Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda31547Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 335415327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 335415328; 335415331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 335415332; 737558787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 737558788; 737558791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 737558792; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 107911811 { 0x66e9a83 +1.86409032e141 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 221859616 { 0xd394f20 +1.44772720e155 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 737558791 { 0x2bf64107 +1.92385947e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 335415331 { 0x13fe0823 +1.98462331e168 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2308571840
=counter_example_end
=global nodece 36 num_edges_traversed 4
=global nodece 36 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 37
=global nodece 37 nodece z3v487.ce3613.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce3613 a5b574ed2667808dbdb2447142326d5c
=input.spec-%var-x-1
1 : Lambda33185Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4044554239 { 0xf112ffff -250413057 -1.14843738e99 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4044554240 { 0xf1130000 -250413056 -1.14843750e99 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33186Var : BV:32
18 : Lambda33187Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33188Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33210Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4044554239 { 0xf112ffff -250413057 -1.14843738e99 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4044554240 { 0xf1130000 -250413056 -1.14843750e99 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33211Var : BV:32
18 : Lambda33212Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33213Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 563611779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 563611780; 563611783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 563611784; 3644072383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3644072384; 3644072387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3644072388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 563611780 { 0x21980884 +1.18775987e196 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4044554240 { 0xf1130000 -250413056 -1.14843750e99 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3644072384 { 0xd93421c0 -650894912 -1.40727996e51 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3902146493 { 0xe89607bd -392820803 -1.17211115e82 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1472315183 { 0x57c1bf2f +1.51364696e48 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda33218Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33219Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3902146493 { 0xe89607bd -392820803 -1.17211115e82 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda33195Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda33196Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda33224Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33225Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3902146493 { 0xe89607bd -392820803 -1.17211115e82 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1668365507 { 0x63713cc3 +1.88466680e71 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 3902146493 { 0xe89607bd -392820803 -1.17211115e82 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 3902146493 { 0xe89607bd -392820803 -1.17211115e82 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3644072384 { 0xd93421c0 -650894912 -1.40727996e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3644072387 { 0xd93421c3 -650894909 -1.40728032e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 563611780 { 0x21980884 +1.18775987e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 563611783 { 0x21980887 +1.18776023e196 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4044554239 ] -> true, [ 4044554240; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4044554239 ] -> true, [ 4044554240; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3296744957
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3.ce3678.num_edges_traversed1
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce3678 f46d574c95cb5351a1eca43ec92012c9
=input.spec-%var-x-1
1 : Lambda34266Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda34267Var : BV:32
17 : Lambda34268Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda34269Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : and(18, 26) : BOOL
60 : ite(24, 12, 12) : BOOL
61 : ite(59, 7, 60) : BOOL
62 : bvule(2, 53) : BOOL
63 : bvule(53, 2) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(35, 53) : BOOL
66 : bvule(53, 35) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(39, 53) : BOOL
69 : bvule(53, 8) : BOOL
70 : and(68, 69) : BOOL
71 : ite(70, 39, 39) : BV:32
72 : ite(67, 35, 71) : BV:32
73 : ite(64, 2, 72) : BV:32
74 : eq(73, 2) : BOOL
75 : and(31, 74) : BOOL
76 : and(48, 74) : BOOL
77 : ite(76, 7, 12) : BOOL
78 : ite(75, 7, 77) : BOOL
79 : and(61, 78) : BOOL
80 : 3 { 0x3 +1.35e129 } : BV:32
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 53) : BV:32
83 : bvmul(81, 16) : BV:32
84 : bvadd(80, 83) : BV:32
85 : eq(84, 2) : BOOL
86 : 168 { 0xa8 -88 } : BV:8
87 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
88 : eq(84, 87) : BOOL
89 : 235 { 0xeb -21 } : BV:8
90 : eq(84, 80) : BOOL
91 : 27 { 0x1b } : BV:8
92 : eq(84, 35) : BOOL
93 : 223 { 0xdf -33 } : BV:8
94 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
95 : eq(84, 94) : BOOL
96 : 68 { 0x44 } : BV:8
97 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
98 : eq(84, 97) : BOOL
99 : 114 { 0x72 } : BV:8
100 : eq(84, 39) : BOOL
101 : 104 { 0x68 } : BV:8
102 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
103 : eq(84, 102) : BOOL
104 : 164 { 0xa4 -92 } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(98, 99, 107) : BV:8
109 : ite(95, 96, 108) : BV:8
110 : ite(92, 93, 109) : BV:8
111 : ite(90, 91, 110) : BV:8
112 : ite(88, 89, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : bvadd(39, 83) : BV:32
115 : eq(114, 2) : BOOL
116 : eq(114, 87) : BOOL
117 : eq(114, 80) : BOOL
118 : eq(114, 35) : BOOL
119 : eq(114, 94) : BOOL
120 : eq(114, 97) : BOOL
121 : eq(114, 39) : BOOL
122 : eq(114, 102) : BOOL
123 : ite(122, 104, 105) : BV:8
124 : ite(121, 101, 123) : BV:8
125 : ite(120, 99, 124) : BV:8
126 : ite(119, 96, 125) : BV:8
127 : ite(118, 93, 126) : BV:8
128 : ite(117, 91, 127) : BV:8
129 : ite(116, 89, 128) : BV:8
130 : ite(115, 86, 129) : BV:8
131 : bvadd(35, 83) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 87) : BOOL
134 : eq(131, 80) : BOOL
135 : eq(131, 35) : BOOL
136 : eq(131, 94) : BOOL
137 : eq(131, 97) : BOOL
138 : eq(131, 39) : BOOL
139 : eq(131, 102) : BOOL
140 : ite(139, 104, 105) : BV:8
141 : ite(138, 101, 140) : BV:8
142 : ite(137, 99, 141) : BV:8
143 : ite(136, 96, 142) : BV:8
144 : ite(135, 93, 143) : BV:8
145 : ite(134, 91, 144) : BV:8
146 : ite(133, 89, 145) : BV:8
147 : ite(132, 86, 146) : BV:8
148 : eq(83, 2) : BOOL
149 : eq(83, 87) : BOOL
150 : eq(83, 80) : BOOL
151 : eq(83, 35) : BOOL
152 : eq(83, 94) : BOOL
153 : eq(83, 97) : BOOL
154 : eq(83, 39) : BOOL
155 : eq(83, 102) : BOOL
156 : ite(155, 104, 105) : BV:8
157 : ite(154, 101, 156) : BV:8
158 : ite(153, 99, 157) : BV:8
159 : ite(152, 96, 158) : BV:8
160 : ite(151, 93, 159) : BV:8
161 : ite(150, 91, 160) : BV:8
162 : ite(149, 89, 161) : BV:8
163 : ite(148, 86, 162) : BV:8
164 : bvconcat(113, 130, 147, 163) : BV:32
165 : bvadd(80, 82, 164) : BV:32
166 : eq(165, 2) : BOOL
167 : eq(165, 87) : BOOL
168 : eq(165, 80) : BOOL
169 : eq(165, 35) : BOOL
170 : eq(165, 94) : BOOL
171 : eq(165, 97) : BOOL
172 : eq(165, 39) : BOOL
173 : eq(165, 102) : BOOL
174 : ite(173, 104, 105) : BV:8
175 : ite(172, 101, 174) : BV:8
176 : ite(171, 99, 175) : BV:8
177 : ite(170, 96, 176) : BV:8
178 : ite(169, 93, 177) : BV:8
179 : ite(168, 91, 178) : BV:8
180 : ite(167, 89, 179) : BV:8
181 : ite(166, 86, 180) : BV:8
182 : bvadd(39, 82, 164) : BV:32
183 : eq(182, 2) : BOOL
184 : eq(182, 87) : BOOL
185 : eq(182, 80) : BOOL
186 : eq(182, 35) : BOOL
187 : eq(182, 94) : BOOL
188 : eq(182, 97) : BOOL
189 : eq(182, 39) : BOOL
190 : eq(182, 102) : BOOL
191 : ite(190, 104, 105) : BV:8
192 : ite(189, 101, 191) : BV:8
193 : ite(188, 99, 192) : BV:8
194 : ite(187, 96, 193) : BV:8
195 : ite(186, 93, 194) : BV:8
196 : ite(185, 91, 195) : BV:8
197 : ite(184, 89, 196) : BV:8
198 : ite(183, 86, 197) : BV:8
199 : bvadd(35, 82, 164) : BV:32
200 : eq(199, 2) : BOOL
201 : eq(199, 87) : BOOL
202 : eq(199, 80) : BOOL
203 : eq(199, 35) : BOOL
204 : eq(199, 94) : BOOL
205 : eq(199, 97) : BOOL
206 : eq(199, 39) : BOOL
207 : eq(199, 102) : BOOL
208 : ite(207, 104, 105) : BV:8
209 : ite(206, 101, 208) : BV:8
210 : ite(205, 99, 209) : BV:8
211 : ite(204, 96, 210) : BV:8
212 : ite(203, 93, 211) : BV:8
213 : ite(202, 91, 212) : BV:8
214 : ite(201, 89, 213) : BV:8
215 : ite(200, 86, 214) : BV:8
216 : bvadd(82, 164) : BV:32
217 : eq(216, 2) : BOOL
218 : eq(216, 87) : BOOL
219 : eq(216, 80) : BOOL
220 : eq(216, 35) : BOOL
221 : eq(216, 94) : BOOL
222 : eq(216, 97) : BOOL
223 : eq(216, 39) : BOOL
224 : eq(216, 102) : BOOL
225 : ite(224, 104, 105) : BV:8
226 : ite(223, 101, 225) : BV:8
227 : ite(222, 99, 226) : BV:8
228 : ite(221, 96, 227) : BV:8
229 : ite(220, 93, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 89, 230) : BV:8
232 : ite(217, 86, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(58, 2, 233) : BV:32
235 : ite(56, 2, 234) : BV:32
236 : ite(79, 233, 235) : BV:32
237 : ite(58, 2, 236) : BV:32
238 : ite(56, 2, 237) : BV:32
239 : lambda(53, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(52, 239) : MAP[BV:32 -> BV:32]
241 : lambda(16, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(15, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda34279Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda34280Var : BV:32
17 : Lambda34281Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda34282Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 53) : BV:32
62 : bvmul(60, 16) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 2) : BOOL
65 : 168 { 0xa8 -88 } : BV:8
66 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
67 : eq(63, 66) : BOOL
68 : 235 { 0xeb -21 } : BV:8
69 : eq(63, 59) : BOOL
70 : 27 { 0x1b } : BV:8
71 : eq(63, 35) : BOOL
72 : 223 { 0xdf -33 } : BV:8
73 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
74 : eq(63, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
77 : eq(63, 76) : BOOL
78 : 114 { 0x72 } : BV:8
79 : eq(63, 39) : BOOL
80 : 104 { 0x68 } : BV:8
81 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
82 : eq(63, 81) : BOOL
83 : 164 { 0xa4 -92 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : bvadd(39, 62) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 66) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 35) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 39) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 65, 108) : BV:8
110 : bvadd(35, 62) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 66) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 35) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 39) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 65, 125) : BV:8
127 : eq(62, 2) : BOOL
128 : eq(62, 66) : BOOL
129 : eq(62, 59) : BOOL
130 : eq(62, 35) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 39) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 65, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 66) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 35) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 39) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 65, 159) : BV:8
161 : bvadd(39, 61, 143) : BV:32
162 : eq(161, 2) : BOOL
163 : eq(161, 66) : BOOL
164 : eq(161, 59) : BOOL
165 : eq(161, 35) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 39) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 65, 176) : BV:8
178 : bvadd(35, 61, 143) : BV:32
179 : eq(178, 2) : BOOL
180 : eq(178, 66) : BOOL
181 : eq(178, 59) : BOOL
182 : eq(178, 35) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 39) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 65, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 2) : BOOL
197 : eq(195, 66) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 35) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 39) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 65, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(58, 2, 212) : BV:32
214 : ite(56, 2, 213) : BV:32
215 : lambda(53, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(52, 215) : MAP[BV:32 -> BV:32]
217 : lambda(16, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(15, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 223, [ 2; 2 ] -> 104, [ 3; 3 ] -> 27, [ 4; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 164, [ 4294967289; 4294967289 ] -> 114, [ 4294967290; 4294967290 ] -> 235, [ 4294967291; 4294967291 ] -> 68, [ 4294967292; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 740395007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 740395008; 740395011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 740395012; 1061322755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1061322756; 1061322759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1061322760; 3663098495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3663098496; 3663098499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3663098500; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34373Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda34374Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda34363Var : BV:32
18 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
19 : bvule(2, 18) : BOOL
20 : and(3, 19) : BOOL
21 : and(4, 4) : BOOL
22 : ite(21, 2, 2) : BV:32
23 : ite(10, 7, 22) : BV:32
24 : ite(20, 1, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(1, 17) : BOOL
27 : bvule(17, 1) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(14, 17) : BOOL
30 : bvule(17, 14) : BOOL
31 : and(29, 30) : BOOL
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvule(32, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 14, 36) : BV:32
38 : ite(28, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(25, 39) : BOOL
41 : eq(24, 1) : BOOL
42 : and(41, 39) : BOOL
43 : ite(42, 6, 11) : BOOL
44 : ite(40, 6, 43) : BOOL
45 : lambda(17, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda34364Var : BV:32
47 : eq(2, 2) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : eq(2, 1) : BOOL
51 : and(50, 48) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 46) : BV:32
55 : bvmul(53, 2) : BV:32
56 : bvadd(52, 55) : BV:32
57 : eq(56, 1) : BOOL
58 : 168 { 0xa8 -88 } : BV:8
59 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
60 : eq(56, 59) : BOOL
61 : 235 { 0xeb -21 } : BV:8
62 : eq(56, 52) : BOOL
63 : 27 { 0x1b } : BV:8
64 : eq(56, 14) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
67 : eq(56, 66) : BOOL
68 : 68 { 0x44 } : BV:8
69 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
70 : eq(56, 69) : BOOL
71 : 114 { 0x72 } : BV:8
72 : eq(56, 32) : BOOL
73 : 104 { 0x68 } : BV:8
74 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
75 : eq(56, 74) : BOOL
76 : 164 { 0xa4 -92 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(70, 71, 79) : BV:8
81 : ite(67, 68, 80) : BV:8
82 : ite(64, 65, 81) : BV:8
83 : ite(62, 63, 82) : BV:8
84 : ite(60, 61, 83) : BV:8
85 : ite(57, 58, 84) : BV:8
86 : bvadd(32, 55) : BV:32
87 : eq(86, 1) : BOOL
88 : eq(86, 59) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 14) : BOOL
91 : eq(86, 66) : BOOL
92 : eq(86, 69) : BOOL
93 : eq(86, 32) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 71, 96) : BV:8
98 : ite(91, 68, 97) : BV:8
99 : ite(90, 65, 98) : BV:8
100 : ite(89, 63, 99) : BV:8
101 : ite(88, 61, 100) : BV:8
102 : ite(87, 58, 101) : BV:8
103 : bvadd(14, 55) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 59) : BOOL
106 : eq(103, 52) : BOOL
107 : eq(103, 14) : BOOL
108 : eq(103, 66) : BOOL
109 : eq(103, 69) : BOOL
110 : eq(103, 32) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 71, 113) : BV:8
115 : ite(108, 68, 114) : BV:8
116 : ite(107, 65, 115) : BV:8
117 : ite(106, 63, 116) : BV:8
118 : ite(105, 61, 117) : BV:8
119 : ite(104, 58, 118) : BV:8
120 : eq(55, 1) : BOOL
121 : eq(55, 59) : BOOL
122 : eq(55, 52) : BOOL
123 : eq(55, 14) : BOOL
124 : eq(55, 66) : BOOL
125 : eq(55, 69) : BOOL
126 : eq(55, 32) : BOOL
127 : eq(55, 74) : BOOL
128 : ite(127, 76, 77) : BV:8
129 : ite(126, 73, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : ite(124, 68, 130) : BV:8
132 : ite(123, 65, 131) : BV:8
133 : ite(122, 63, 132) : BV:8
134 : ite(121, 61, 133) : BV:8
135 : ite(120, 58, 134) : BV:8
136 : bvconcat(85, 102, 119, 135) : BV:32
137 : bvadd(52, 54, 136) : BV:32
138 : eq(137, 1) : BOOL
139 : eq(137, 59) : BOOL
140 : eq(137, 52) : BOOL
141 : eq(137, 14) : BOOL
142 : eq(137, 66) : BOOL
143 : eq(137, 69) : BOOL
144 : eq(137, 32) : BOOL
145 : eq(137, 74) : BOOL
146 : ite(145, 76, 77) : BV:8
147 : ite(144, 73, 146) : BV:8
148 : ite(143, 71, 147) : BV:8
149 : ite(142, 68, 148) : BV:8
150 : ite(141, 65, 149) : BV:8
151 : ite(140, 63, 150) : BV:8
152 : ite(139, 61, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : bvadd(32, 54, 136) : BV:32
155 : eq(154, 1) : BOOL
156 : eq(154, 59) : BOOL
157 : eq(154, 52) : BOOL
158 : eq(154, 14) : BOOL
159 : eq(154, 66) : BOOL
160 : eq(154, 69) : BOOL
161 : eq(154, 32) : BOOL
162 : eq(154, 74) : BOOL
163 : ite(162, 76, 77) : BV:8
164 : ite(161, 73, 163) : BV:8
165 : ite(160, 71, 164) : BV:8
166 : ite(159, 68, 165) : BV:8
167 : ite(158, 65, 166) : BV:8
168 : ite(157, 63, 167) : BV:8
169 : ite(156, 61, 168) : BV:8
170 : ite(155, 58, 169) : BV:8
171 : bvadd(14, 54, 136) : BV:32
172 : eq(171, 1) : BOOL
173 : eq(171, 59) : BOOL
174 : eq(171, 52) : BOOL
175 : eq(171, 14) : BOOL
176 : eq(171, 66) : BOOL
177 : eq(171, 69) : BOOL
178 : eq(171, 32) : BOOL
179 : eq(171, 74) : BOOL
180 : ite(179, 76, 77) : BV:8
181 : ite(178, 73, 180) : BV:8
182 : ite(177, 71, 181) : BV:8
183 : ite(176, 68, 182) : BV:8
184 : ite(175, 65, 183) : BV:8
185 : ite(174, 63, 184) : BV:8
186 : ite(173, 61, 185) : BV:8
187 : ite(172, 58, 186) : BV:8
188 : bvadd(54, 136) : BV:32
189 : eq(188, 1) : BOOL
190 : eq(188, 59) : BOOL
191 : eq(188, 52) : BOOL
192 : eq(188, 14) : BOOL
193 : eq(188, 66) : BOOL
194 : eq(188, 69) : BOOL
195 : eq(188, 32) : BOOL
196 : eq(188, 74) : BOOL
197 : ite(196, 76, 77) : BV:8
198 : ite(195, 73, 197) : BV:8
199 : ite(194, 71, 198) : BV:8
200 : ite(193, 68, 199) : BV:8
201 : ite(192, 65, 200) : BV:8
202 : ite(191, 63, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 58, 203) : BV:8
205 : bvconcat(153, 170, 187, 204) : BV:32
206 : ite(51, 1, 205) : BV:32
207 : ite(49, 1, 206) : BV:32
208 : lambda(46, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(45, 208) : MAP[BV:32 -> BV:32]
210 : sum(15, 16, 209) : SUM[UNIT,MAP[BV:32 -> BV:32]]
211 : sym_const(210) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda34380Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3663098499 { 0xda567283 -631868797 -1.67536962e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 740395011 { 0x2c218803 +1.26196324e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1061322759 { 0x3f428007 +1.51953208e255 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda34196Var : BV:32
2 : Lambda34197Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : bvule(1, 3) : BOOL
12 : and(10, 11) : BOOL
13 : 1 { 0x1 } : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(14, 1) : BOOL
16 : bvule(1, 14) : BOOL
17 : and(15, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 18, 18) : BOOL
20 : ite(12, 13, 19) : BOOL
21 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(10, 22) : BOOL
24 : bvule(3, 1) : BOOL
25 : and(24, 11) : BOOL
26 : ite(25, 3, 3) : BV:32
27 : ite(17, 14, 26) : BV:32
28 : ite(23, 5, 27) : BV:32
29 : eq(28, 3) : BOOL
30 : bvule(5, 2) : BOOL
31 : bvule(2, 5) : BOOL
32 : and(30, 31) : BOOL
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 5, 42) : BV:32
44 : eq(43, 5) : BOOL
45 : and(29, 44) : BOOL
46 : eq(28, 5) : BOOL
47 : and(46, 44) : BOOL
48 : ite(47, 13, 18) : BOOL
49 : ite(45, 13, 48) : BOOL
50 : and(20, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 2) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 5) : BOOL
57 : 168 { 0xa8 -88 } : BV:8
58 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
59 : eq(55, 58) : BOOL
60 : 235 { 0xeb -21 } : BV:8
61 : eq(55, 51) : BOOL
62 : 27 { 0x1b } : BV:8
63 : eq(55, 33) : BOOL
64 : 223 { 0xdf -33 } : BV:8
65 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
66 : eq(55, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
69 : eq(55, 68) : BOOL
70 : 114 { 0x72 } : BV:8
71 : eq(55, 37) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
74 : eq(55, 73) : BOOL
75 : 164 { 0xa4 -92 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(59, 60, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : bvadd(37, 54) : BV:32
86 : eq(85, 5) : BOOL
87 : eq(85, 58) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 37) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 62, 98) : BV:8
100 : ite(87, 60, 99) : BV:8
101 : ite(86, 57, 100) : BV:8
102 : bvadd(33, 54) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 58) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 33) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 37) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 62, 115) : BV:8
117 : ite(104, 60, 116) : BV:8
118 : ite(103, 57, 117) : BV:8
119 : eq(54, 5) : BOOL
120 : eq(54, 58) : BOOL
121 : eq(54, 51) : BOOL
122 : eq(54, 33) : BOOL
123 : eq(54, 65) : BOOL
124 : eq(54, 68) : BOOL
125 : eq(54, 37) : BOOL
126 : eq(54, 73) : BOOL
127 : ite(126, 75, 76) : BV:8
128 : ite(125, 72, 127) : BV:8
129 : ite(124, 70, 128) : BV:8
130 : ite(123, 67, 129) : BV:8
131 : ite(122, 64, 130) : BV:8
132 : ite(121, 62, 131) : BV:8
133 : ite(120, 60, 132) : BV:8
134 : ite(119, 57, 133) : BV:8
135 : bvconcat(84, 101, 118, 134) : BV:32
136 : bvadd(51, 53, 135) : BV:32
137 : eq(136, 5) : BOOL
138 : eq(136, 58) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 33) : BOOL
141 : eq(136, 65) : BOOL
142 : eq(136, 68) : BOOL
143 : eq(136, 37) : BOOL
144 : eq(136, 73) : BOOL
145 : ite(144, 75, 76) : BV:8
146 : ite(143, 72, 145) : BV:8
147 : ite(142, 70, 146) : BV:8
148 : ite(141, 67, 147) : BV:8
149 : ite(140, 64, 148) : BV:8
150 : ite(139, 62, 149) : BV:8
151 : ite(138, 60, 150) : BV:8
152 : ite(137, 57, 151) : BV:8
153 : bvadd(37, 53, 135) : BV:32
154 : eq(153, 5) : BOOL
155 : eq(153, 58) : BOOL
156 : eq(153, 51) : BOOL
157 : eq(153, 33) : BOOL
158 : eq(153, 65) : BOOL
159 : eq(153, 68) : BOOL
160 : eq(153, 37) : BOOL
161 : eq(153, 73) : BOOL
162 : ite(161, 75, 76) : BV:8
163 : ite(160, 72, 162) : BV:8
164 : ite(159, 70, 163) : BV:8
165 : ite(158, 67, 164) : BV:8
166 : ite(157, 64, 165) : BV:8
167 : ite(156, 62, 166) : BV:8
168 : ite(155, 60, 167) : BV:8
169 : ite(154, 57, 168) : BV:8
170 : bvadd(33, 53, 135) : BV:32
171 : eq(170, 5) : BOOL
172 : eq(170, 58) : BOOL
173 : eq(170, 51) : BOOL
174 : eq(170, 33) : BOOL
175 : eq(170, 65) : BOOL
176 : eq(170, 68) : BOOL
177 : eq(170, 37) : BOOL
178 : eq(170, 73) : BOOL
179 : ite(178, 75, 76) : BV:8
180 : ite(177, 72, 179) : BV:8
181 : ite(176, 70, 180) : BV:8
182 : ite(175, 67, 181) : BV:8
183 : ite(174, 64, 182) : BV:8
184 : ite(173, 62, 183) : BV:8
185 : ite(172, 60, 184) : BV:8
186 : ite(171, 57, 185) : BV:8
187 : bvadd(53, 135) : BV:32
188 : eq(187, 5) : BOOL
189 : eq(187, 58) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 33) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 37) : BOOL
195 : eq(187, 73) : BOOL
196 : ite(195, 75, 76) : BV:8
197 : ite(194, 72, 196) : BV:8
198 : ite(193, 70, 197) : BV:8
199 : ite(192, 67, 198) : BV:8
200 : ite(191, 64, 199) : BV:8
201 : ite(190, 62, 200) : BV:8
202 : ite(189, 60, 201) : BV:8
203 : ite(188, 57, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(9, 5, 204) : BV:32
206 : ite(7, 5, 205) : BV:32
207 : ite(50, 204, 206) : BV:32
208 : ite(9, 5, 207) : BV:32
209 : ite(7, 5, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda34206Var : BV:32
2 : Lambda34207Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 5) : BOOL
16 : 168 { 0xa8 -88 } : BV:8
17 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
18 : eq(14, 17) : BOOL
19 : 235 { 0xeb -21 } : BV:8
20 : eq(14, 10) : BOOL
21 : 27 { 0x1b } : BV:8
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(14, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 68 { 0x44 } : BV:8
28 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
29 : eq(14, 28) : BOOL
30 : 114 { 0x72 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 104 { 0x68 } : BV:8
34 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
35 : eq(14, 34) : BOOL
36 : 164 { 0xa4 -92 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 17) : BOOL
49 : eq(46, 10) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 21, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 16, 61) : BV:8
63 : bvadd(22, 13) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 17) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 22) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 21, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 16, 78) : BV:8
80 : eq(13, 5) : BOOL
81 : eq(13, 17) : BOOL
82 : eq(13, 10) : BOOL
83 : eq(13, 22) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 21, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 16, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 17) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 22) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 21, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 16, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 5) : BOOL
116 : eq(114, 17) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 22) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 21, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 16, 129) : BV:8
131 : bvadd(22, 12, 96) : BV:32
132 : eq(131, 5) : BOOL
133 : eq(131, 17) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 21, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 16, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 5) : BOOL
150 : eq(148, 17) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 22) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 21, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 16, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda34210Var : BV:32
2 : Lambda34211Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda34201Var : BV:32
2 : Lambda34202Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
434460746
=counter_example_end
=global nodece 38 num_edges_traversed 1
=global nodece 38 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce3728.num_edges_traversed1
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce3728 ec10bfbe68d5972e1b78a74b477d6e7
=input.spec-%var-x-1
1 : Lambda36020Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda36021Var : BV:32
17 : Lambda36022Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda36023Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36045Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda36046Var : BV:32
17 : Lambda36047Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda36048Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 35284407 { 0x21a65b7 +1.20622909e133 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda36053Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36054Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda36030Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda36031Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda36059Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36060Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 62254119 { 0x3b5ec27 +1.42126929e136 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
828080854
=counter_example_end
=global nodece 39 num_edges_traversed 1
=global nodece 39 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 40
=global nodece 40 nodece z3.ce3774.num_edges_traversed0
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce3774 5040907713d0db21acf1c990b9c8b21
=input.spec-%var-x-1
1 : Lambda37119Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 92004707 { 0x57be163 +1.96781575e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 92004708 { 0x57be164 +1.96781587e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37120Var : BV:32
18 : Lambda37121Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 92004709 { 0x57be165 +1.96781599e139 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8191 { 0x1fff +1.97644e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8192 { 0x2000 +1.97656e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 8193 { 0x2001 +1.97668e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37122Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
82 : eq(80, 81) : BOOL
83 : 144 { 0x90 -112 } : BV:8
84 : eq(80, 78) : BOOL
85 : 255 { 0xff -1 } : BV:8
86 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
87 : eq(80, 86) : BOOL
88 : 15 { 0xf } : BV:8
89 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
93 : eq(80, 92) : BOOL
94 : 32 { 0x20 } : BV:8
95 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
96 : eq(80, 95) : BOOL
97 : 214 { 0xd6 -42 } : BV:8
98 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
99 : eq(80, 98) : BOOL
100 : 157 { 0x9d -99 } : BV:8
101 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
102 : eq(80, 101) : BOOL
103 : 248 { 0xf8 -8 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37139Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 92004707 { 0x57be163 +1.96781575e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 92004708 { 0x57be164 +1.96781587e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37140Var : BV:32
18 : Lambda37141Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 92004709 { 0x57be165 +1.96781599e139 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8191 { 0x1fff +1.97644e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8192 { 0x2000 +1.97656e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 8193 { 0x2001 +1.97668e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37142Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
63 : eq(61, 62) : BOOL
64 : 144 { 0x90 -112 } : BV:8
65 : eq(61, 59) : BOOL
66 : 255 { 0xff -1 } : BV:8
67 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
68 : eq(61, 67) : BOOL
69 : 15 { 0xf } : BV:8
70 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
71 : eq(61, 70) : BOOL
72 : 127 { 0x7f } : BV:8
73 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
74 : eq(61, 73) : BOOL
75 : 32 { 0x20 } : BV:8
76 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
77 : eq(61, 76) : BOOL
78 : 214 { 0xd6 -42 } : BV:8
79 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
80 : eq(61, 79) : BOOL
81 : 157 { 0x9d -99 } : BV:8
82 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
83 : eq(61, 82) : BOOL
84 : 248 { 0xf8 -8 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 134217723 ] -> 0, [ 134217724; 134217724 ] -> 144, [ 134217725; 134217725 ] -> 214, [ 134217726; 134217726 ] -> 15, [ 134217727; 134217727 ] -> 32, [ 134217728; 4160749567 ] -> 0, [ 4160749568; 4160749568 ] -> 127, [ 4160749569; 4160749569 ] -> 248, [ 4160749570; 4160749570 ] -> 157, [ 4160749571; 4160749571 ] -> 255, [ 4160749572; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 403561699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 403561700; 403561703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 403561704; 1181413083 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1181413084; 1181413087 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1181413088; 2254822391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2254822392; 2254822395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2254822396; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 403561700 { 0x180ddce4 +1.10830354e177 } : BV:32
=input.dst.llvm-%m
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2254822392 { 0x8665dbf8 -2040144904 -1.79577541e141 } : BV:32
=input.dst.llvm-%n
1 : 92004708 { 0x57be164 +1.96781587e139 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1181413084 { 0x466aeedc +1.83541440e13 } : BV:32
=input.dst.llvm-%x
1 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37146Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37147Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 537908880 { 0x200fd690 +1.12373542e193 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
25 : eq(23, 24) : BOOL
26 : 144 { 0x90 -112 } : BV:8
27 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
31 : eq(23, 30) : BOOL
32 : 15 { 0xf } : BV:8
33 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
37 : eq(23, 36) : BOOL
38 : 32 { 0x20 } : BV:8
39 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
40 : eq(23, 39) : BOOL
41 : 214 { 0xd6 -42 } : BV:8
42 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
43 : eq(23, 42) : BOOL
44 : 157 { 0x9d -99 } : BV:8
45 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
46 : eq(23, 45) : BOOL
47 : 248 { 0xf8 -8 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda37128Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 8191 { 0x1fff +1.97644e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8192 { 0x2000 +1.97656e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda37129Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 537908880 { 0x200fd690 +1.12373542e193 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
27 : eq(25, 26) : BOOL
28 : 144 { 0x90 -112 } : BV:8
29 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
30 : eq(25, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
33 : eq(25, 32) : BOOL
34 : 15 { 0xf } : BV:8
35 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
36 : eq(25, 35) : BOOL
37 : 127 { 0x7f } : BV:8
38 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
39 : eq(25, 38) : BOOL
40 : 32 { 0x20 } : BV:8
41 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
42 : eq(25, 41) : BOOL
43 : 214 { 0xd6 -42 } : BV:8
44 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
45 : eq(25, 44) : BOOL
46 : 157 { 0x9d -99 } : BV:8
47 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
48 : eq(25, 47) : BOOL
49 : 248 { 0xf8 -8 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 34, 73) : BV:8
75 : ite(62, 31, 74) : BV:8
76 : ite(61, 28, 75) : BV:8
77 : bvadd(1, 23, 24) : BV:32
78 : eq(77, 26) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : eq(77, 35) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 47) : BOOL
86 : ite(85, 49, 50) : BV:8
87 : ite(84, 46, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 37, 89) : BV:8
91 : ite(80, 34, 90) : BV:8
92 : ite(79, 31, 91) : BV:8
93 : ite(78, 28, 92) : BV:8
94 : bvadd(23, 24) : BV:32
95 : eq(94, 26) : BOOL
96 : eq(94, 29) : BOOL
97 : eq(94, 32) : BOOL
98 : eq(94, 35) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 47) : BOOL
103 : ite(102, 49, 50) : BV:8
104 : ite(101, 46, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 37, 106) : BV:8
108 : ite(97, 34, 107) : BV:8
109 : ite(96, 31, 108) : BV:8
110 : ite(95, 28, 109) : BV:8
111 : bvconcat(58, 76, 93, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(19, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(18, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37151Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37152Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 537908880 { 0x200fd690 +1.12373542e193 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
25 : eq(23, 24) : BOOL
26 : 144 { 0x90 -112 } : BV:8
27 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
31 : eq(23, 30) : BOOL
32 : 15 { 0xf } : BV:8
33 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
34 : eq(23, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
37 : eq(23, 36) : BOOL
38 : 32 { 0x20 } : BV:8
39 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
40 : eq(23, 39) : BOOL
41 : 214 { 0xd6 -42 } : BV:8
42 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
43 : eq(23, 42) : BOOL
44 : 157 { 0x9d -99 } : BV:8
45 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
46 : eq(23, 45) : BOOL
47 : 248 { 0xf8 -8 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2254822392 { 0x8665dbf8 -2040144904 -1.79577541e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2254822395 { 0x8665dbfb -2040144901 -1.79577577e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1181413084 { 0x466aeedc +1.83541440e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1181413087 { 0x466aeedf +1.83541476e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 403561700 { 0x180ddce4 +1.10830354e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 403561703 { 0x180ddce7 +1.10830390e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda37011Var : BV:32
2 : Lambda37012Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 92004707 { 0x57be163 +1.96781575e139 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 92004708 { 0x57be164 +1.96781587e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 92004709 { 0x57be165 +1.96781599e139 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 8191 { 0x1fff +1.97644e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8192 { 0x2000 +1.97656e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 8193 { 0x2001 +1.97668e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
55 : eq(53, 54) : BOOL
56 : 144 { 0x90 -112 } : BV:8
57 : eq(53, 51) : BOOL
58 : 255 { 0xff -1 } : BV:8
59 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
60 : eq(53, 59) : BOOL
61 : 15 { 0xf } : BV:8
62 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
66 : eq(53, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
69 : eq(53, 68) : BOOL
70 : 214 { 0xd6 -42 } : BV:8
71 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
72 : eq(53, 71) : BOOL
73 : 157 { 0x9d -99 } : BV:8
74 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
75 : eq(53, 74) : BOOL
76 : 248 { 0xf8 -8 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda37021Var : BV:32
2 : Lambda37022Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
14 : eq(12, 13) : BOOL
15 : 144 { 0x90 -112 } : BV:8
16 : eq(12, 10) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
19 : eq(12, 18) : BOOL
20 : 15 { 0xf } : BV:8
21 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
22 : eq(12, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
25 : eq(12, 24) : BOOL
26 : 32 { 0x20 } : BV:8
27 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
28 : eq(12, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
31 : eq(12, 30) : BOOL
32 : 157 { 0x9d -99 } : BV:8
33 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
34 : eq(12, 33) : BOOL
35 : 248 { 0xf8 -8 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 92004707 ] -> true, [ 92004708; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 92004707 ] -> true, [ 92004708; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda37025Var : BV:32
2 : Lambda37026Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 92004707 { 0x57be163 +1.96781575e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 92004708 { 0x57be164 +1.96781587e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 92004709 { 0x57be165 +1.96781599e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8191 { 0x1fff +1.97644e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8192 { 0x2000 +1.97656e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 8193 { 0x2001 +1.97668e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda37016Var : BV:32
2 : Lambda37017Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 92004707 { 0x57be163 +1.96781575e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 92004708 { 0x57be164 +1.96781587e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 92004709 { 0x57be165 +1.96781599e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8191 { 0x1fff +1.97644e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8192 { 0x2000 +1.97656e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 8193 { 0x2001 +1.97668e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda37032Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 537908880 { 0x200fd690 +1.12373542e193 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
10 : eq(8, 9) : BOOL
11 : 144 { 0x90 -112 } : BV:8
12 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
16 : eq(8, 15) : BOOL
17 : 15 { 0xf } : BV:8
18 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
22 : eq(8, 21) : BOOL
23 : 32 { 0x20 } : BV:8
24 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
25 : eq(8, 24) : BOOL
26 : 214 { 0xd6 -42 } : BV:8
27 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
28 : eq(8, 27) : BOOL
29 : 157 { 0x9d -99 } : BV:8
30 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
31 : eq(8, 30) : BOOL
32 : 248 { 0xf8 -8 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda37036Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 537908880 { 0x200fd690 +1.12373542e193 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
10 : eq(8, 9) : BOOL
11 : 144 { 0x90 -112 } : BV:8
12 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
16 : eq(8, 15) : BOOL
17 : 15 { 0xf } : BV:8
18 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
22 : eq(8, 21) : BOOL
23 : 32 { 0x20 } : BV:8
24 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
25 : eq(8, 24) : BOOL
26 : 214 { 0xd6 -42 } : BV:8
27 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
28 : eq(8, 27) : BOOL
29 : 157 { 0x9d -99 } : BV:8
30 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
31 : eq(8, 30) : BOOL
32 : 248 { 0xf8 -8 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda37040Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 537908880 { 0x200fd690 +1.12373542e193 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 134217724 { 0x7fffffc +1.99999952e144 } : BV:32
10 : eq(8, 9) : BOOL
11 : 144 { 0x90 -112 } : BV:8
12 : 4160749571 { 0xf8000003 -134217725 -1.35e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 134217726 { 0x7fffffe +1.99999976e144 } : BV:32
16 : eq(8, 15) : BOOL
17 : 15 { 0xf } : BV:8
18 : 4160749568 { 0xf8000000 -134217728 -1.0e113 } : BV:32
19 : eq(8, 18) : BOOL
20 : 127 { 0x7f } : BV:8
21 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
22 : eq(8, 21) : BOOL
23 : 32 { 0x20 } : BV:8
24 : 134217725 { 0x7fffffd +1.99999964e144 } : BV:32
25 : eq(8, 24) : BOOL
26 : 214 { 0xd6 -42 } : BV:8
27 : 4160749570 { 0xf8000002 -134217726 -1.23e113 } : BV:32
28 : eq(8, 27) : BOOL
29 : 157 { 0x9d -99 } : BV:8
30 : 4160749569 { 0xf8000001 -134217727 -1.11e113 } : BV:32
31 : eq(8, 30) : BOOL
32 : 248 { 0xf8 -8 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2729008931
=counter_example_end
=global nodece 40 num_edges_traversed 0
=global nodece 40 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce3775.num_edges_traversed0
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce3775 34fdcea59e44d8ab41d94f3469bea09e
=input.spec-%var-x-1
1 : Lambda37200Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37201Var : BV:32
18 : Lambda37202Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37203Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
62 : eq(60, 61) : BOOL
63 : 16 { 0x10 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 59) : BV:32
68 : eq(67, 61) : BOOL
69 : ite(68, 63, 64) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 59) : BV:32
72 : eq(71, 61) : BOOL
73 : ite(72, 63, 64) : BV:8
74 : eq(59, 61) : BOOL
75 : ite(74, 63, 64) : BV:8
76 : bvconcat(65, 69, 73, 75) : BV:32
77 : bvadd(56, 58, 76) : BV:32
78 : eq(77, 61) : BOOL
79 : ite(78, 63, 64) : BV:8
80 : bvadd(66, 58, 76) : BV:32
81 : eq(80, 61) : BOOL
82 : ite(81, 63, 64) : BV:8
83 : bvadd(70, 58, 76) : BV:32
84 : eq(83, 61) : BOOL
85 : ite(84, 63, 64) : BV:8
86 : bvadd(58, 76) : BV:32
87 : eq(86, 61) : BOOL
88 : ite(87, 63, 64) : BV:8
89 : bvconcat(79, 82, 85, 88) : BV:32
90 : ite(55, 2, 89) : BV:32
91 : lambda(52, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(51, 91) : MAP[BV:32 -> BV:32]
93 : lambda(17, 92) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
94 : map(16, 93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
95 : sym_const(94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37220Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37221Var : BV:32
18 : Lambda37222Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37223Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
81 : eq(79, 80) : BOOL
82 : 16 { 0x10 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : bvadd(85, 78) : BV:32
87 : eq(86, 80) : BOOL
88 : ite(87, 82, 83) : BV:8
89 : 1 { 0x1 +1.11e129 } : BV:32
90 : bvadd(89, 78) : BV:32
91 : eq(90, 80) : BOOL
92 : ite(91, 82, 83) : BV:8
93 : eq(78, 80) : BOOL
94 : ite(93, 82, 83) : BV:8
95 : bvconcat(84, 88, 92, 94) : BV:32
96 : bvadd(75, 77, 95) : BV:32
97 : eq(96, 80) : BOOL
98 : ite(97, 82, 83) : BV:8
99 : bvadd(85, 77, 95) : BV:32
100 : eq(99, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : bvadd(89, 77, 95) : BV:32
103 : eq(102, 80) : BOOL
104 : ite(103, 82, 83) : BV:8
105 : bvadd(77, 95) : BV:32
106 : eq(105, 80) : BOOL
107 : ite(106, 82, 83) : BV:8
108 : bvconcat(98, 101, 104, 107) : BV:32
109 : ite(55, 2, 108) : BV:32
110 : ite(74, 108, 109) : BV:32
111 : ite(55, 2, 110) : BV:32
112 : lambda(52, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(51, 112) : MAP[BV:32 -> BV:32]
114 : lambda(17, 113) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
115 : map(16, 114) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
116 : sym_const(115) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 16, [ 1073741824; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 28311659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 28311660; 28311663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 28311664; 290234543 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 290234544; 290234547 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 290234548; 564479075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 564479076; 564479079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 564479080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 28311660 { 0x1b0006c +1.37501287e132 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 290234544 { 0x114ca0b0 +1.59865379e163 } : BV:32
=input.dst.llvm-%n
1 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 564479076 { 0x21a54464 +1.29114961e196 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37227Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37228Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda37209Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 256 { 0x100 +1.3051e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda37210Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 268435456 { 0x10000000 +1.0e161 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37232Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37233Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 290234544 { 0x114ca0b0 +1.59865379e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 290234547 { 0x114ca0b3 +1.59865415e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 564479076 { 0x21a54464 +1.29114961e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 564479079 { 0x21a54467 +1.29114997e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 28311660 { 0x1b0006c +1.37501287e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 28311663 { 0x1b0006f +1.37501323e132 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda37042Var : BV:32
2 : Lambda37043Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
13 : eq(11, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvadd(21, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : ite(23, 14, 15) : BV:8
25 : eq(10, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 24, 26) : BV:32
28 : bvadd(7, 9, 27) : BV:32
29 : eq(28, 12) : BOOL
30 : ite(29, 14, 15) : BV:8
31 : bvadd(17, 9, 27) : BV:32
32 : eq(31, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : bvadd(21, 9, 27) : BV:32
35 : eq(34, 12) : BOOL
36 : ite(35, 14, 15) : BV:8
37 : bvadd(9, 27) : BV:32
38 : eq(37, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : ite(6, 3, 40) : BV:32
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BV:32]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda37044Var : BV:32
2 : Lambda37045Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
54 : eq(52, 53) : BOOL
55 : 16 { 0x10 } : BV:8
56 : 0 { 0x0 } : BV:8
57 : ite(54, 55, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 51) : BV:32
60 : eq(59, 53) : BOOL
61 : ite(60, 55, 56) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 51) : BV:32
64 : eq(63, 53) : BOOL
65 : ite(64, 55, 56) : BV:8
66 : eq(51, 53) : BOOL
67 : ite(66, 55, 56) : BV:8
68 : bvconcat(57, 61, 65, 67) : BV:32
69 : bvadd(48, 50, 68) : BV:32
70 : eq(69, 53) : BOOL
71 : ite(70, 55, 56) : BV:8
72 : bvadd(58, 50, 68) : BV:32
73 : eq(72, 53) : BOOL
74 : ite(73, 55, 56) : BV:8
75 : bvadd(62, 50, 68) : BV:32
76 : eq(75, 53) : BOOL
77 : ite(76, 55, 56) : BV:8
78 : bvadd(50, 68) : BV:32
79 : eq(78, 53) : BOOL
80 : ite(79, 55, 56) : BV:8
81 : bvconcat(71, 74, 77, 80) : BV:32
82 : ite(6, 3, 81) : BV:32
83 : ite(47, 81, 82) : BV:32
84 : ite(6, 3, 83) : BV:32
85 : lambda(1, 2, 84) : FUNCTION[BV:32,BV:32 -> BV:32]
86 : sym_const(85) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 402193397 ] -> true, [ 402193398; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 402193397 ] -> true, [ 402193398; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda37049Var : BV:32
2 : Lambda37050Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda37056Var : BV:32
2 : Lambda37057Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda37063Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda37067Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda37071Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2951189257
=counter_example_end
=global nodece 41 num_edges_traversed 0
=global nodece 41 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce3890.num_edges_traversed2
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce3890 9b6731450ae54149896ec67913551b7
=input.spec-%var-x-1
1 : Lambda11419Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11420Var : BV:32
18 : Lambda11421Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11422Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11432Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11433Var : BV:32
18 : Lambda11434Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11435Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16560Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16561Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16550Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16551Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16567Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11318Var : BV:32
2 : Lambda11319Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11323Var : BV:32
2 : Lambda11324Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11330Var : BV:32
2 : Lambda11331Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
4259449193
=counter_example_end
=global nodece 42 num_edges_traversed 2
=global nodece 42 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 43
=global nodece 43 nodece z3v487.ce3937.num_edges_traversed3
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3v487.ce3937 837e9d8283e13ecc912cb705865f24
=input.spec-%var-x-1
1 : Lambda11419Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11420Var : BV:32
18 : Lambda11421Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11422Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11432Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11433Var : BV:32
18 : Lambda11434Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11435Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16560Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16561Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16550Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16551Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16567Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11318Var : BV:32
2 : Lambda11319Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11323Var : BV:32
2 : Lambda11324Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11330Var : BV:32
2 : Lambda11331Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
4259449193
=counter_example_end
=global nodece 43 num_edges_traversed 3
=global nodece 43 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3v487.ce3967.num_edges_traversed4
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce3967 9cb82183d0cbde7b1c1d1cc96062d4f7
=input.spec-%var-x-1
1 : Lambda11419Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11420Var : BV:32
18 : Lambda11421Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11422Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11432Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11433Var : BV:32
18 : Lambda11434Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11435Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16560Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16561Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16550Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16551Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16567Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11318Var : BV:32
2 : Lambda11319Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11323Var : BV:32
2 : Lambda11324Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11330Var : BV:32
2 : Lambda11331Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
4259449193
=counter_example_end
=global nodece 44 num_edges_traversed 4
=global nodece 44 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 45
=global nodece 45 nodece z3v487.ce3875.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3v487.ce3875 42874aba8fa71927dd737308277648e
=input.spec-%var-x-1
1 : Lambda11735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11736Var : BV:32
18 : Lambda11737Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11738Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11749Var : BV:32
18 : Lambda11750Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11751Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16663Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 3, 1) : BV:32
16 : unit : UNIT
17 : Lambda16652Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvule(18, 1) : BOOL
20 : and(19, 10) : BOOL
21 : bvule(1, 7) : BOOL
22 : and(8, 21) : BOOL
23 : ite(22, 7, 7) : BV:32
24 : ite(20, 18, 23) : BV:32
25 : ite(5, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 17) : BOOL
28 : bvule(17, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(18, 17) : BOOL
31 : bvule(17, 9) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(7, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 7, 7) : BV:32
37 : ite(32, 18, 36) : BV:32
38 : ite(29, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(26, 39) : BOOL
41 : ite(40, 6, 12) : BOOL
42 : lambda(17, 41) : FUNCTION[BV:32 -> BOOL]
43 : Lambda16653Var : BV:32
44 : eq(1, 1) : BOOL
45 : eq(43, 1) : BOOL
46 : and(44, 45) : BOOL
47 : bvule(1, 43) : BOOL
48 : bvule(43, 3) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 43) : BOOL
51 : bvule(43, 9) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(7, 43) : BOOL
54 : bvule(43, 7) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 7, 7) : BV:32
57 : ite(52, 18, 56) : BV:32
58 : ite(49, 1, 57) : BV:32
59 : eq(58, 1) : BOOL
60 : and(26, 59) : BOOL
61 : ite(60, 6, 12) : BOOL
62 : and(14, 61) : BOOL
63 : ite(46, 1, 1) : BV:32
64 : ite(62, 1, 63) : BV:32
65 : ite(46, 1, 64) : BV:32
66 : lambda(43, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(42, 66) : MAP[BV:32 -> BV:32]
68 : sum(15, 16, 67) : SUM[UNIT,MAP[BV:32 -> BV:32]]
69 : sym_const(68) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16668Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16669Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11634Var : BV:32
2 : Lambda11635Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11639Var : BV:32
2 : Lambda11640Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11646Var : BV:32
2 : Lambda11647Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1639329293
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3v487.ce3997.num_edges_traversed3
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3v487.ce3997 986c787739236d2de55bf68034a54dd9
=input.spec-%var-x-1
1 : Lambda11735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11736Var : BV:32
18 : Lambda11737Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11738Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11749Var : BV:32
18 : Lambda11750Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11751Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16663Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 3, 1) : BV:32
16 : unit : UNIT
17 : Lambda16652Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvule(18, 1) : BOOL
20 : and(19, 10) : BOOL
21 : bvule(1, 7) : BOOL
22 : and(8, 21) : BOOL
23 : ite(22, 7, 7) : BV:32
24 : ite(20, 18, 23) : BV:32
25 : ite(5, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 17) : BOOL
28 : bvule(17, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(18, 17) : BOOL
31 : bvule(17, 9) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(7, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 7, 7) : BV:32
37 : ite(32, 18, 36) : BV:32
38 : ite(29, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(26, 39) : BOOL
41 : ite(40, 6, 12) : BOOL
42 : lambda(17, 41) : FUNCTION[BV:32 -> BOOL]
43 : Lambda16653Var : BV:32
44 : eq(1, 1) : BOOL
45 : eq(43, 1) : BOOL
46 : and(44, 45) : BOOL
47 : bvule(1, 43) : BOOL
48 : bvule(43, 3) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 43) : BOOL
51 : bvule(43, 9) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(7, 43) : BOOL
54 : bvule(43, 7) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 7, 7) : BV:32
57 : ite(52, 18, 56) : BV:32
58 : ite(49, 1, 57) : BV:32
59 : eq(58, 1) : BOOL
60 : and(26, 59) : BOOL
61 : ite(60, 6, 12) : BOOL
62 : and(14, 61) : BOOL
63 : ite(46, 1, 1) : BV:32
64 : ite(62, 1, 63) : BV:32
65 : ite(46, 1, 64) : BV:32
66 : lambda(43, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(42, 66) : MAP[BV:32 -> BV:32]
68 : sum(15, 16, 67) : SUM[UNIT,MAP[BV:32 -> BV:32]]
69 : sym_const(68) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16668Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16669Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11634Var : BV:32
2 : Lambda11635Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11639Var : BV:32
2 : Lambda11640Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11646Var : BV:32
2 : Lambda11647Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1639329293
=counter_example_end
=global nodece 46 num_edges_traversed 3
=global nodece 46 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3v487.ce4023.num_edges_traversed4
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce4023 59a4d9b32bc70dfc23eec85ce3cbe6
=input.spec-%var-x-1
1 : Lambda11735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11736Var : BV:32
18 : Lambda11737Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11738Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11748Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11749Var : BV:32
18 : Lambda11750Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11751Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1815337194 { 0x6c33d8ea +1.40505719e89 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2054556414 { 0x7a760afe +1.92221045e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11634Var : BV:32
2 : Lambda11635Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11639Var : BV:32
2 : Lambda11640Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11646Var : BV:32
2 : Lambda11647Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3461477941
=counter_example_end
=global nodece 47 num_edges_traversed 4
=global nodece 47 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 48
=global nodece 48 nodece z3.ce3865.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce3865 cd7da68c51f59b24b66ba5787637fd
=input.spec-%var-x-1
1 : Lambda11999Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12000Var : BV:32
18 : Lambda12001Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12002Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 4 { 0x4 } : BV:8
81 : eq(78, 74) : BOOL
82 : 190 { 0xbe -66 } : BV:8
83 : eq(78, 40) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(81, 82, 86) : BV:8
88 : ite(79, 80, 87) : BV:8
89 : bvadd(40, 77) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 74) : BOOL
92 : eq(89, 40) : BOOL
93 : ite(92, 84, 85) : BV:8
94 : ite(91, 82, 93) : BV:8
95 : ite(90, 80, 94) : BV:8
96 : bvadd(36, 77) : BV:32
97 : eq(96, 2) : BOOL
98 : eq(96, 74) : BOOL
99 : eq(96, 40) : BOOL
100 : ite(99, 84, 85) : BV:8
101 : ite(98, 82, 100) : BV:8
102 : ite(97, 80, 101) : BV:8
103 : eq(77, 2) : BOOL
104 : eq(77, 74) : BOOL
105 : eq(77, 40) : BOOL
106 : ite(105, 84, 85) : BV:8
107 : ite(104, 82, 106) : BV:8
108 : ite(103, 80, 107) : BV:8
109 : bvconcat(88, 95, 102, 108) : BV:32
110 : bvadd(74, 76, 109) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 74) : BOOL
113 : eq(110, 40) : BOOL
114 : ite(113, 84, 85) : BV:8
115 : ite(112, 82, 114) : BV:8
116 : ite(111, 80, 115) : BV:8
117 : bvadd(40, 76, 109) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 74) : BOOL
120 : eq(117, 40) : BOOL
121 : ite(120, 84, 85) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : bvadd(36, 76, 109) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 74) : BOOL
127 : eq(124, 40) : BOOL
128 : ite(127, 84, 85) : BV:8
129 : ite(126, 82, 128) : BV:8
130 : ite(125, 80, 129) : BV:8
131 : bvadd(76, 109) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 74) : BOOL
134 : eq(131, 40) : BOOL
135 : ite(134, 84, 85) : BV:8
136 : ite(133, 82, 135) : BV:8
137 : ite(132, 80, 136) : BV:8
138 : bvconcat(116, 123, 130, 137) : BV:32
139 : ite(54, 2, 138) : BV:32
140 : ite(73, 138, 139) : BV:32
141 : ite(54, 2, 140) : BV:32
142 : lambda(51, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(50, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12012Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12013Var : BV:32
18 : Lambda12014Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12015Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 4 { 0x4 } : BV:8
62 : eq(59, 55) : BOOL
63 : 190 { 0xbe -66 } : BV:8
64 : eq(59, 40) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(60, 61, 68) : BV:8
70 : bvadd(40, 58) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 55) : BOOL
73 : eq(70, 40) : BOOL
74 : ite(73, 65, 66) : BV:8
75 : ite(72, 63, 74) : BV:8
76 : ite(71, 61, 75) : BV:8
77 : bvadd(36, 58) : BV:32
78 : eq(77, 2) : BOOL
79 : eq(77, 55) : BOOL
80 : eq(77, 40) : BOOL
81 : ite(80, 65, 66) : BV:8
82 : ite(79, 63, 81) : BV:8
83 : ite(78, 61, 82) : BV:8
84 : eq(58, 2) : BOOL
85 : eq(58, 55) : BOOL
86 : eq(58, 40) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 63, 87) : BV:8
89 : ite(84, 61, 88) : BV:8
90 : bvconcat(69, 76, 83, 89) : BV:32
91 : bvadd(55, 57, 90) : BV:32
92 : eq(91, 2) : BOOL
93 : eq(91, 55) : BOOL
94 : eq(91, 40) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : ite(92, 61, 96) : BV:8
98 : bvadd(40, 57, 90) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 40) : BOOL
102 : ite(101, 65, 66) : BV:8
103 : ite(100, 63, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : bvadd(36, 57, 90) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 40) : BOOL
109 : ite(108, 65, 66) : BV:8
110 : ite(107, 63, 109) : BV:8
111 : ite(106, 61, 110) : BV:8
112 : bvadd(57, 90) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 55) : BOOL
115 : eq(112, 40) : BOOL
116 : ite(115, 65, 66) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 61, 117) : BV:8
119 : bvconcat(97, 104, 111, 118) : BV:32
120 : ite(54, 2, 119) : BV:32
121 : lambda(51, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(50, 121) : MAP[BV:32 -> BV:32]
123 : lambda(17, 122) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
124 : map(16, 123) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
125 : sym_const(124) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 4, [ 1; 1 ] -> 0, [ 2; 2 ] -> 223, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 161866995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 161866996; 161866999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 161867000; 544929879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 544929880; 544929883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 544929884; 3094983655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094983656; 3094983659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3094983660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.llvm-%n
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16716Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 32769 { 0x8001 +1.390636e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16717Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 32767 { 0x7fff +1.390613e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16706Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 32769 { 0x8001 +1.390636e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16707Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : 3 { 0x3 +1.35e129 } : BV:32
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 45) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(49, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 4 { 0x4 } : BV:8
56 : eq(53, 49) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : eq(53, 34) : BOOL
59 : 223 { 0xdf -33 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : bvadd(34, 52) : BV:32
65 : eq(64, 1) : BOOL
66 : eq(64, 49) : BOOL
67 : eq(64, 34) : BOOL
68 : ite(67, 59, 60) : BV:8
69 : ite(66, 57, 68) : BV:8
70 : ite(65, 55, 69) : BV:8
71 : bvadd(15, 52) : BV:32
72 : eq(71, 1) : BOOL
73 : eq(71, 49) : BOOL
74 : eq(71, 34) : BOOL
75 : ite(74, 59, 60) : BV:8
76 : ite(73, 57, 75) : BV:8
77 : ite(72, 55, 76) : BV:8
78 : eq(52, 1) : BOOL
79 : eq(52, 49) : BOOL
80 : eq(52, 34) : BOOL
81 : ite(80, 59, 60) : BV:8
82 : ite(79, 57, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : bvconcat(63, 70, 77, 83) : BV:32
85 : bvadd(49, 51, 84) : BV:32
86 : eq(85, 1) : BOOL
87 : eq(85, 49) : BOOL
88 : eq(85, 34) : BOOL
89 : ite(88, 59, 60) : BV:8
90 : ite(87, 57, 89) : BV:8
91 : ite(86, 55, 90) : BV:8
92 : bvadd(34, 51, 84) : BV:32
93 : eq(92, 1) : BOOL
94 : eq(92, 49) : BOOL
95 : eq(92, 34) : BOOL
96 : ite(95, 59, 60) : BV:8
97 : ite(94, 57, 96) : BV:8
98 : ite(93, 55, 97) : BV:8
99 : bvadd(15, 51, 84) : BV:32
100 : eq(99, 1) : BOOL
101 : eq(99, 49) : BOOL
102 : eq(99, 34) : BOOL
103 : ite(102, 59, 60) : BV:8
104 : ite(101, 57, 103) : BV:8
105 : ite(100, 55, 104) : BV:8
106 : bvadd(51, 84) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 49) : BOOL
109 : eq(106, 34) : BOOL
110 : ite(109, 59, 60) : BV:8
111 : ite(108, 57, 110) : BV:8
112 : ite(107, 55, 111) : BV:8
113 : bvconcat(91, 98, 105, 112) : BV:32
114 : ite(48, 1, 113) : BV:32
115 : lambda(45, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(44, 115) : MAP[BV:32 -> BV:32]
117 : sum(16, 17, 116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
118 : sym_const(117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16722Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 32769 { 0x8001 +1.390636e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16723Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 161866999 { 0x9a5e4f7 +1.29604995e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 544929883 { 0x207af85b +1.96070420e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3094983659 { 0xb879b3eb -1199983637 -1.95080316e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11929Var : BV:32
2 : Lambda11930Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 32767 { 0x7fff +1.390613e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 32769 { 0x8001 +1.390636e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 4 { 0x4 } : BV:8
54 : eq(51, 47) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : eq(51, 36) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : bvadd(36, 50) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 47) : BOOL
65 : eq(62, 36) : BOOL
66 : ite(65, 57, 58) : BV:8
67 : ite(64, 55, 66) : BV:8
68 : ite(63, 53, 67) : BV:8
69 : bvadd(32, 50) : BV:32
70 : eq(69, 3) : BOOL
71 : eq(69, 47) : BOOL
72 : eq(69, 36) : BOOL
73 : ite(72, 57, 58) : BV:8
74 : ite(71, 55, 73) : BV:8
75 : ite(70, 53, 74) : BV:8
76 : eq(50, 3) : BOOL
77 : eq(50, 47) : BOOL
78 : eq(50, 36) : BOOL
79 : ite(78, 57, 58) : BV:8
80 : ite(77, 55, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : bvconcat(61, 68, 75, 81) : BV:32
83 : bvadd(47, 49, 82) : BV:32
84 : eq(83, 3) : BOOL
85 : eq(83, 47) : BOOL
86 : eq(83, 36) : BOOL
87 : ite(86, 57, 58) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : bvadd(36, 49, 82) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 47) : BOOL
93 : eq(90, 36) : BOOL
94 : ite(93, 57, 58) : BV:8
95 : ite(92, 55, 94) : BV:8
96 : ite(91, 53, 95) : BV:8
97 : bvadd(32, 49, 82) : BV:32
98 : eq(97, 3) : BOOL
99 : eq(97, 47) : BOOL
100 : eq(97, 36) : BOOL
101 : ite(100, 57, 58) : BV:8
102 : ite(99, 55, 101) : BV:8
103 : ite(98, 53, 102) : BV:8
104 : bvadd(49, 82) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 47) : BOOL
107 : eq(104, 36) : BOOL
108 : ite(107, 57, 58) : BV:8
109 : ite(106, 55, 108) : BV:8
110 : ite(105, 53, 109) : BV:8
111 : bvconcat(89, 96, 103, 110) : BV:32
112 : ite(6, 3, 111) : BV:32
113 : ite(46, 111, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11939Var : BV:32
2 : Lambda11940Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 4 { 0x4 } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(12, 13, 21) : BV:8
23 : bvadd(16, 10) : BV:32
24 : eq(23, 3) : BOOL
25 : eq(23, 7) : BOOL
26 : eq(23, 16) : BOOL
27 : ite(26, 18, 19) : BV:8
28 : ite(25, 15, 27) : BV:8
29 : ite(24, 13, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 10) : BV:32
32 : eq(31, 3) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 16) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 15, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 3) : BOOL
39 : eq(10, 7) : BOOL
40 : eq(10, 16) : BOOL
41 : ite(40, 18, 19) : BV:8
42 : ite(39, 15, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(22, 29, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 7) : BOOL
48 : eq(45, 16) : BOOL
49 : ite(48, 18, 19) : BV:8
50 : ite(47, 15, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(16, 9, 44) : BV:32
53 : eq(52, 3) : BOOL
54 : eq(52, 7) : BOOL
55 : eq(52, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(30, 9, 44) : BV:32
60 : eq(59, 3) : BOOL
61 : eq(59, 7) : BOOL
62 : eq(59, 16) : BOOL
63 : ite(62, 18, 19) : BV:8
64 : ite(61, 15, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 7) : BOOL
69 : eq(66, 16) : BOOL
70 : ite(69, 18, 19) : BV:8
71 : ite(68, 15, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11943Var : BV:32
2 : Lambda11944Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 32769 { 0x8001 +1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11934Var : BV:32
2 : Lambda11935Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 32769 { 0x8001 +1.390636e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3533613032
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3.ce3855.num_edges_traversed2
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(epsilon)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce3855 4abac4553f725a35f484927b22ed1ff
=input.spec-%var-x-1
1 : Lambda12419Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12420Var : BV:32
18 : Lambda12421Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12422Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12432Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12433Var : BV:32
18 : Lambda12434Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12435Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17240Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17241Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17230Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17231Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17246Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17247Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12349Var : BV:32
2 : Lambda12350Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12359Var : BV:32
2 : Lambda12360Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12363Var : BV:32
2 : Lambda12364Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12354Var : BV:32
2 : Lambda12355Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3245672291
=counter_example_end
=global nodece 49 num_edges_traversed 2
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3v487.ce3799.num_edges_traversed1
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce3799 8ce322c36e556af2944d6876170d
=input.spec-%var-x-1
1 : Lambda37200Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37201Var : BV:32
18 : Lambda37202Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37203Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
62 : eq(60, 61) : BOOL
63 : 16 { 0x10 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 59) : BV:32
68 : eq(67, 61) : BOOL
69 : ite(68, 63, 64) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 59) : BV:32
72 : eq(71, 61) : BOOL
73 : ite(72, 63, 64) : BV:8
74 : eq(59, 61) : BOOL
75 : ite(74, 63, 64) : BV:8
76 : bvconcat(65, 69, 73, 75) : BV:32
77 : bvadd(56, 58, 76) : BV:32
78 : eq(77, 61) : BOOL
79 : ite(78, 63, 64) : BV:8
80 : bvadd(66, 58, 76) : BV:32
81 : eq(80, 61) : BOOL
82 : ite(81, 63, 64) : BV:8
83 : bvadd(70, 58, 76) : BV:32
84 : eq(83, 61) : BOOL
85 : ite(84, 63, 64) : BV:8
86 : bvadd(58, 76) : BV:32
87 : eq(86, 61) : BOOL
88 : ite(87, 63, 64) : BV:8
89 : bvconcat(79, 82, 85, 88) : BV:32
90 : ite(55, 2, 89) : BV:32
91 : lambda(52, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(51, 91) : MAP[BV:32 -> BV:32]
93 : lambda(17, 92) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
94 : map(16, 93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
95 : sym_const(94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37220Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37221Var : BV:32
18 : Lambda37222Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37223Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
81 : eq(79, 80) : BOOL
82 : 16 { 0x10 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : bvadd(85, 78) : BV:32
87 : eq(86, 80) : BOOL
88 : ite(87, 82, 83) : BV:8
89 : 1 { 0x1 +1.11e129 } : BV:32
90 : bvadd(89, 78) : BV:32
91 : eq(90, 80) : BOOL
92 : ite(91, 82, 83) : BV:8
93 : eq(78, 80) : BOOL
94 : ite(93, 82, 83) : BV:8
95 : bvconcat(84, 88, 92, 94) : BV:32
96 : bvadd(75, 77, 95) : BV:32
97 : eq(96, 80) : BOOL
98 : ite(97, 82, 83) : BV:8
99 : bvadd(85, 77, 95) : BV:32
100 : eq(99, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : bvadd(89, 77, 95) : BV:32
103 : eq(102, 80) : BOOL
104 : ite(103, 82, 83) : BV:8
105 : bvadd(77, 95) : BV:32
106 : eq(105, 80) : BOOL
107 : ite(106, 82, 83) : BV:8
108 : bvconcat(98, 101, 104, 107) : BV:32
109 : ite(55, 2, 108) : BV:32
110 : ite(74, 108, 109) : BV:32
111 : ite(55, 2, 110) : BV:32
112 : lambda(52, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(51, 112) : MAP[BV:32 -> BV:32]
114 : lambda(17, 113) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
115 : map(16, 114) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
116 : sym_const(115) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 16, [ 1073741824; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 28311659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 28311660; 28311663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 28311664; 290234543 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 290234544; 290234547 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 290234548; 564479075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 564479076; 564479079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 564479080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 28311660 { 0x1b0006c +1.37501287e132 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 290234544 { 0x114ca0b0 +1.59865379e163 } : BV:32
=input.dst.llvm-%n
1 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 564479076 { 0x21a54464 +1.29114961e196 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37227Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37228Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda37209Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 256 { 0x100 +1.3051e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda37210Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 268435456 { 0x10000000 +1.0e161 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 233904702 { 0xdf11a3e +1.88361334e156 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37232Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37233Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1707602207 { 0x65c7f11f +1.56204593e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 290234544 { 0x114ca0b0 +1.59865379e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 290234547 { 0x114ca0b3 +1.59865415e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 564479076 { 0x21a54464 +1.29114961e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 564479079 { 0x21a54467 +1.29114997e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 28311660 { 0x1b0006c +1.37501287e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 28311663 { 0x1b0006f +1.37501323e132 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda37042Var : BV:32
2 : Lambda37043Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
13 : eq(11, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvadd(21, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : ite(23, 14, 15) : BV:8
25 : eq(10, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 24, 26) : BV:32
28 : bvadd(7, 9, 27) : BV:32
29 : eq(28, 12) : BOOL
30 : ite(29, 14, 15) : BV:8
31 : bvadd(17, 9, 27) : BV:32
32 : eq(31, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : bvadd(21, 9, 27) : BV:32
35 : eq(34, 12) : BOOL
36 : ite(35, 14, 15) : BV:8
37 : bvadd(9, 27) : BV:32
38 : eq(37, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : ite(6, 3, 40) : BV:32
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BV:32]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda37044Var : BV:32
2 : Lambda37045Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
54 : eq(52, 53) : BOOL
55 : 16 { 0x10 } : BV:8
56 : 0 { 0x0 } : BV:8
57 : ite(54, 55, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 51) : BV:32
60 : eq(59, 53) : BOOL
61 : ite(60, 55, 56) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 51) : BV:32
64 : eq(63, 53) : BOOL
65 : ite(64, 55, 56) : BV:8
66 : eq(51, 53) : BOOL
67 : ite(66, 55, 56) : BV:8
68 : bvconcat(57, 61, 65, 67) : BV:32
69 : bvadd(48, 50, 68) : BV:32
70 : eq(69, 53) : BOOL
71 : ite(70, 55, 56) : BV:8
72 : bvadd(58, 50, 68) : BV:32
73 : eq(72, 53) : BOOL
74 : ite(73, 55, 56) : BV:8
75 : bvadd(62, 50, 68) : BV:32
76 : eq(75, 53) : BOOL
77 : ite(76, 55, 56) : BV:8
78 : bvadd(50, 68) : BV:32
79 : eq(78, 53) : BOOL
80 : ite(79, 55, 56) : BV:8
81 : bvconcat(71, 74, 77, 80) : BV:32
82 : ite(6, 3, 81) : BV:32
83 : ite(47, 81, 82) : BV:32
84 : ite(6, 3, 83) : BV:32
85 : lambda(1, 2, 84) : FUNCTION[BV:32,BV:32 -> BV:32]
86 : sym_const(85) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 402193397 ] -> true, [ 402193398; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 402193397 ] -> true, [ 402193398; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda37049Var : BV:32
2 : Lambda37050Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda37056Var : BV:32
2 : Lambda37057Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda37063Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda37067Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda37071Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1997837745
=counter_example_end
=global nodece 50 num_edges_traversed 1
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3v487.ce4144.num_edges_traversed2
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce4144 903e7ecd7596dd05e4654d032aae4db
=input.spec-%var-x-1
1 : Lambda37200Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37201Var : BV:32
18 : Lambda37202Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37203Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
62 : eq(60, 61) : BOOL
63 : 16 { 0x10 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 59) : BV:32
68 : eq(67, 61) : BOOL
69 : ite(68, 63, 64) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 59) : BV:32
72 : eq(71, 61) : BOOL
73 : ite(72, 63, 64) : BV:8
74 : eq(59, 61) : BOOL
75 : ite(74, 63, 64) : BV:8
76 : bvconcat(65, 69, 73, 75) : BV:32
77 : bvadd(56, 58, 76) : BV:32
78 : eq(77, 61) : BOOL
79 : ite(78, 63, 64) : BV:8
80 : bvadd(66, 58, 76) : BV:32
81 : eq(80, 61) : BOOL
82 : ite(81, 63, 64) : BV:8
83 : bvadd(70, 58, 76) : BV:32
84 : eq(83, 61) : BOOL
85 : ite(84, 63, 64) : BV:8
86 : bvadd(58, 76) : BV:32
87 : eq(86, 61) : BOOL
88 : ite(87, 63, 64) : BV:8
89 : bvconcat(79, 82, 85, 88) : BV:32
90 : ite(55, 2, 89) : BV:32
91 : lambda(52, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(51, 91) : MAP[BV:32 -> BV:32]
93 : lambda(17, 92) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
94 : map(16, 93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
95 : sym_const(94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37220Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37221Var : BV:32
18 : Lambda37222Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda37223Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
81 : eq(79, 80) : BOOL
82 : 16 { 0x10 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : bvadd(85, 78) : BV:32
87 : eq(86, 80) : BOOL
88 : ite(87, 82, 83) : BV:8
89 : 1 { 0x1 +1.11e129 } : BV:32
90 : bvadd(89, 78) : BV:32
91 : eq(90, 80) : BOOL
92 : ite(91, 82, 83) : BV:8
93 : eq(78, 80) : BOOL
94 : ite(93, 82, 83) : BV:8
95 : bvconcat(84, 88, 92, 94) : BV:32
96 : bvadd(75, 77, 95) : BV:32
97 : eq(96, 80) : BOOL
98 : ite(97, 82, 83) : BV:8
99 : bvadd(85, 77, 95) : BV:32
100 : eq(99, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : bvadd(89, 77, 95) : BV:32
103 : eq(102, 80) : BOOL
104 : ite(103, 82, 83) : BV:8
105 : bvadd(77, 95) : BV:32
106 : eq(105, 80) : BOOL
107 : ite(106, 82, 83) : BV:8
108 : bvconcat(98, 101, 104, 107) : BV:32
109 : ite(55, 2, 108) : BV:32
110 : ite(74, 108, 109) : BV:32
111 : ite(55, 2, 110) : BV:32
112 : lambda(52, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(51, 112) : MAP[BV:32 -> BV:32]
114 : lambda(17, 113) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
115 : map(16, 114) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
116 : sym_const(115) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 16, [ 1073741824; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 28311659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 28311660; 28311663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 28311664; 290234543 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 290234544; 290234547 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 290234548; 564479075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 564479076; 564479079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 564479080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 28311660 { 0x1b0006c +1.37501287e132 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 290234544 { 0x114ca0b0 +1.59865379e163 } : BV:32
=input.dst.llvm-%n
1 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 564479076 { 0x21a54464 +1.29114961e196 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37227Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37228Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda37209Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 256 { 0x100 +1.3051e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda37210Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 268435456 { 0x10000000 +1.0e161 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 23, 24) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(23, 24) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : ite(20, 4, 42) : BV:32
44 : lambda(19, 43) : FUNCTION[BV:32 -> BV:32]
45 : map(18, 44) : MAP[BV:32 -> BV:32]
46 : sum(1, 2, 45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
47 : sym_const(46) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 233904703 { 0xdf11a3f +1.88361346e156 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37232Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37233Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 268435456 { 0x10000000 +1.0e161 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1707602208 { 0x65c7f120 +1.56204605e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 290234544 { 0x114ca0b0 +1.59865379e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 290234547 { 0x114ca0b3 +1.59865415e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 564479076 { 0x21a54464 +1.29114961e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 564479079 { 0x21a54467 +1.29114997e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 28311660 { 0x1b0006c +1.37501287e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 28311663 { 0x1b0006f +1.37501323e132 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda37042Var : BV:32
2 : Lambda37043Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
13 : eq(11, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvadd(21, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : ite(23, 14, 15) : BV:8
25 : eq(10, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 24, 26) : BV:32
28 : bvadd(7, 9, 27) : BV:32
29 : eq(28, 12) : BOOL
30 : ite(29, 14, 15) : BV:8
31 : bvadd(17, 9, 27) : BV:32
32 : eq(31, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : bvadd(21, 9, 27) : BV:32
35 : eq(34, 12) : BOOL
36 : ite(35, 14, 15) : BV:8
37 : bvadd(9, 27) : BV:32
38 : eq(37, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : ite(6, 3, 40) : BV:32
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BV:32]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda37044Var : BV:32
2 : Lambda37045Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
54 : eq(52, 53) : BOOL
55 : 16 { 0x10 } : BV:8
56 : 0 { 0x0 } : BV:8
57 : ite(54, 55, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 51) : BV:32
60 : eq(59, 53) : BOOL
61 : ite(60, 55, 56) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 51) : BV:32
64 : eq(63, 53) : BOOL
65 : ite(64, 55, 56) : BV:8
66 : eq(51, 53) : BOOL
67 : ite(66, 55, 56) : BV:8
68 : bvconcat(57, 61, 65, 67) : BV:32
69 : bvadd(48, 50, 68) : BV:32
70 : eq(69, 53) : BOOL
71 : ite(70, 55, 56) : BV:8
72 : bvadd(58, 50, 68) : BV:32
73 : eq(72, 53) : BOOL
74 : ite(73, 55, 56) : BV:8
75 : bvadd(62, 50, 68) : BV:32
76 : eq(75, 53) : BOOL
77 : ite(76, 55, 56) : BV:8
78 : bvadd(50, 68) : BV:32
79 : eq(78, 53) : BOOL
80 : ite(79, 55, 56) : BV:8
81 : bvconcat(71, 74, 77, 80) : BV:32
82 : ite(6, 3, 81) : BV:32
83 : ite(47, 81, 82) : BV:32
84 : ite(6, 3, 83) : BV:32
85 : lambda(1, 2, 84) : FUNCTION[BV:32,BV:32 -> BV:32]
86 : sym_const(85) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 402193397 ] -> true, [ 402193398; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 402193397 ] -> true, [ 402193398; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda37049Var : BV:32
2 : Lambda37050Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda37056Var : BV:32
2 : Lambda37057Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 402193397 { 0x17f8fbf5 +1.94518911e176 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 402193399 { 0x17f8fbf7 +1.94518935e176 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 402193398 { 0x17f8fbf6 +1.94518923e176 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda37063Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda37067Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda37071Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1997837745
=counter_example_end
=global nodece 51 num_edges_traversed 2
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3v487.ce4155.num_edges_traversed1
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3v487.ce4155 d9201d30ce8ea7b1db2242df581ad846
=input.spec-%var-x-1
1 : Lambda38744Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38745Var : BV:32
18 : Lambda38746Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda38747Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
61 : eq(59, 60) : BOOL
62 : 4 { 0x4 } : BV:8
63 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
64 : eq(59, 63) : BOOL
65 : 128 { 0x80 -128 } : BV:8
66 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
67 : eq(59, 66) : BOOL
68 : 2 { 0x2 } : BV:8
69 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
70 : eq(59, 69) : BOOL
71 : 193 { 0xc1 -63 } : BV:8
72 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
73 : eq(59, 72) : BOOL
74 : 100 { 0x64 } : BV:8
75 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
76 : eq(59, 75) : BOOL
77 : 54 { 0x36 } : BV:8
78 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
79 : eq(59, 78) : BOOL
80 : 246 { 0xf6 -10 } : BV:8
81 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
82 : eq(59, 81) : BOOL
83 : 32 { 0x20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(67, 68, 89) : BV:8
91 : ite(64, 65, 90) : BV:8
92 : ite(61, 62, 91) : BV:8
93 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
94 : bvadd(93, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : eq(94, 75) : BOOL
101 : eq(94, 78) : BOOL
102 : eq(94, 81) : BOOL
103 : ite(102, 83, 84) : BV:8
104 : ite(101, 80, 103) : BV:8
105 : ite(100, 77, 104) : BV:8
106 : ite(99, 74, 105) : BV:8
107 : ite(98, 71, 106) : BV:8
108 : ite(97, 68, 107) : BV:8
109 : ite(96, 65, 108) : BV:8
110 : ite(95, 62, 109) : BV:8
111 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
112 : bvadd(111, 58) : BV:32
113 : eq(112, 60) : BOOL
114 : eq(112, 63) : BOOL
115 : eq(112, 66) : BOOL
116 : eq(112, 69) : BOOL
117 : eq(112, 72) : BOOL
118 : eq(112, 75) : BOOL
119 : eq(112, 78) : BOOL
120 : eq(112, 81) : BOOL
121 : ite(120, 83, 84) : BV:8
122 : ite(119, 80, 121) : BV:8
123 : ite(118, 77, 122) : BV:8
124 : ite(117, 74, 123) : BV:8
125 : ite(116, 71, 124) : BV:8
126 : ite(115, 68, 125) : BV:8
127 : ite(114, 65, 126) : BV:8
128 : ite(113, 62, 127) : BV:8
129 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
130 : bvadd(129, 58) : BV:32
131 : eq(130, 60) : BOOL
132 : eq(130, 63) : BOOL
133 : eq(130, 66) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : eq(130, 75) : BOOL
137 : eq(130, 78) : BOOL
138 : eq(130, 81) : BOOL
139 : ite(138, 83, 84) : BV:8
140 : ite(137, 80, 139) : BV:8
141 : ite(136, 77, 140) : BV:8
142 : ite(135, 74, 141) : BV:8
143 : ite(134, 71, 142) : BV:8
144 : ite(133, 68, 143) : BV:8
145 : ite(132, 65, 144) : BV:8
146 : ite(131, 62, 145) : BV:8
147 : bvconcat(92, 110, 128, 146) : BV:32
148 : bvadd(34, 56, 147) : BV:32
149 : eq(148, 60) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 69) : BOOL
153 : eq(148, 72) : BOOL
154 : eq(148, 75) : BOOL
155 : eq(148, 78) : BOOL
156 : eq(148, 81) : BOOL
157 : ite(156, 83, 84) : BV:8
158 : ite(155, 80, 157) : BV:8
159 : ite(154, 77, 158) : BV:8
160 : ite(153, 74, 159) : BV:8
161 : ite(152, 71, 160) : BV:8
162 : ite(151, 68, 161) : BV:8
163 : ite(150, 65, 162) : BV:8
164 : ite(149, 62, 163) : BV:8
165 : 2 { 0x2 +1.23e129 } : BV:32
166 : bvadd(165, 56, 147) : BV:32
167 : eq(166, 60) : BOOL
168 : eq(166, 63) : BOOL
169 : eq(166, 66) : BOOL
170 : eq(166, 69) : BOOL
171 : eq(166, 72) : BOOL
172 : eq(166, 75) : BOOL
173 : eq(166, 78) : BOOL
174 : eq(166, 81) : BOOL
175 : ite(174, 83, 84) : BV:8
176 : ite(173, 80, 175) : BV:8
177 : ite(172, 77, 176) : BV:8
178 : ite(171, 74, 177) : BV:8
179 : ite(170, 71, 178) : BV:8
180 : ite(169, 68, 179) : BV:8
181 : ite(168, 65, 180) : BV:8
182 : ite(167, 62, 181) : BV:8
183 : 1 { 0x1 +1.11e129 } : BV:32
184 : bvadd(183, 56, 147) : BV:32
185 : eq(184, 60) : BOOL
186 : eq(184, 63) : BOOL
187 : eq(184, 66) : BOOL
188 : eq(184, 69) : BOOL
189 : eq(184, 72) : BOOL
190 : eq(184, 75) : BOOL
191 : eq(184, 78) : BOOL
192 : eq(184, 81) : BOOL
193 : ite(192, 83, 84) : BV:8
194 : ite(191, 80, 193) : BV:8
195 : ite(190, 77, 194) : BV:8
196 : ite(189, 74, 195) : BV:8
197 : ite(188, 71, 196) : BV:8
198 : ite(187, 68, 197) : BV:8
199 : ite(186, 65, 198) : BV:8
200 : ite(185, 62, 199) : BV:8
201 : bvadd(56, 147) : BV:32
202 : eq(201, 60) : BOOL
203 : eq(201, 63) : BOOL
204 : eq(201, 66) : BOOL
205 : eq(201, 69) : BOOL
206 : eq(201, 72) : BOOL
207 : eq(201, 75) : BOOL
208 : eq(201, 78) : BOOL
209 : eq(201, 81) : BOOL
210 : ite(209, 83, 84) : BV:8
211 : ite(208, 80, 210) : BV:8
212 : ite(207, 77, 211) : BV:8
213 : ite(206, 74, 212) : BV:8
214 : ite(205, 71, 213) : BV:8
215 : ite(204, 68, 214) : BV:8
216 : ite(203, 65, 215) : BV:8
217 : ite(202, 62, 216) : BV:8
218 : bvconcat(164, 182, 200, 217) : BV:32
219 : ite(55, 2, 218) : BV:32
220 : lambda(52, 219) : FUNCTION[BV:32 -> BV:32]
221 : map(51, 220) : MAP[BV:32 -> BV:32]
222 : lambda(17, 221) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
223 : map(16, 222) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
224 : sym_const(223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda38764Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38765Var : BV:32
18 : Lambda38766Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda38767Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(2, 52) : BOOL
57 : bvule(52, 34) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(37, 52) : BOOL
60 : bvule(52, 37) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(41, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 41, 41) : BV:32
66 : ite(61, 37, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(22, 27) : BOOL
72 : ite(71, 13, 13) : BOOL
73 : ite(21, 7, 72) : BOOL
74 : and(70, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
80 : eq(78, 79) : BOOL
81 : 4 { 0x4 } : BV:8
82 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
83 : eq(78, 82) : BOOL
84 : 128 { 0x80 -128 } : BV:8
85 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
86 : eq(78, 85) : BOOL
87 : 2 { 0x2 } : BV:8
88 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
89 : eq(78, 88) : BOOL
90 : 193 { 0xc1 -63 } : BV:8
91 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
92 : eq(78, 91) : BOOL
93 : 100 { 0x64 } : BV:8
94 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
95 : eq(78, 94) : BOOL
96 : 54 { 0x36 } : BV:8
97 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
98 : eq(78, 97) : BOOL
99 : 246 { 0xf6 -10 } : BV:8
100 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
101 : eq(78, 100) : BOOL
102 : 32 { 0x20 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(86, 87, 108) : BV:8
110 : ite(83, 84, 109) : BV:8
111 : ite(80, 81, 110) : BV:8
112 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
113 : bvadd(112, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 85) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : eq(113, 94) : BOOL
120 : eq(113, 97) : BOOL
121 : eq(113, 100) : BOOL
122 : ite(121, 102, 103) : BV:8
123 : ite(120, 99, 122) : BV:8
124 : ite(119, 96, 123) : BV:8
125 : ite(118, 93, 124) : BV:8
126 : ite(117, 90, 125) : BV:8
127 : ite(116, 87, 126) : BV:8
128 : ite(115, 84, 127) : BV:8
129 : ite(114, 81, 128) : BV:8
130 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
131 : bvadd(130, 77) : BV:32
132 : eq(131, 79) : BOOL
133 : eq(131, 82) : BOOL
134 : eq(131, 85) : BOOL
135 : eq(131, 88) : BOOL
136 : eq(131, 91) : BOOL
137 : eq(131, 94) : BOOL
138 : eq(131, 97) : BOOL
139 : eq(131, 100) : BOOL
140 : ite(139, 102, 103) : BV:8
141 : ite(138, 99, 140) : BV:8
142 : ite(137, 96, 141) : BV:8
143 : ite(136, 93, 142) : BV:8
144 : ite(135, 90, 143) : BV:8
145 : ite(134, 87, 144) : BV:8
146 : ite(133, 84, 145) : BV:8
147 : ite(132, 81, 146) : BV:8
148 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
149 : bvadd(148, 77) : BV:32
150 : eq(149, 79) : BOOL
151 : eq(149, 82) : BOOL
152 : eq(149, 85) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : eq(149, 94) : BOOL
156 : eq(149, 97) : BOOL
157 : eq(149, 100) : BOOL
158 : ite(157, 102, 103) : BV:8
159 : ite(156, 99, 158) : BV:8
160 : ite(155, 96, 159) : BV:8
161 : ite(154, 93, 160) : BV:8
162 : ite(153, 90, 161) : BV:8
163 : ite(152, 87, 162) : BV:8
164 : ite(151, 84, 163) : BV:8
165 : ite(150, 81, 164) : BV:8
166 : bvconcat(111, 129, 147, 165) : BV:32
167 : bvadd(34, 75, 166) : BV:32
168 : eq(167, 79) : BOOL
169 : eq(167, 82) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 88) : BOOL
172 : eq(167, 91) : BOOL
173 : eq(167, 94) : BOOL
174 : eq(167, 97) : BOOL
175 : eq(167, 100) : BOOL
176 : ite(175, 102, 103) : BV:8
177 : ite(174, 99, 176) : BV:8
178 : ite(173, 96, 177) : BV:8
179 : ite(172, 93, 178) : BV:8
180 : ite(171, 90, 179) : BV:8
181 : ite(170, 87, 180) : BV:8
182 : ite(169, 84, 181) : BV:8
183 : ite(168, 81, 182) : BV:8
184 : 2 { 0x2 +1.23e129 } : BV:32
185 : bvadd(184, 75, 166) : BV:32
186 : eq(185, 79) : BOOL
187 : eq(185, 82) : BOOL
188 : eq(185, 85) : BOOL
189 : eq(185, 88) : BOOL
190 : eq(185, 91) : BOOL
191 : eq(185, 94) : BOOL
192 : eq(185, 97) : BOOL
193 : eq(185, 100) : BOOL
194 : ite(193, 102, 103) : BV:8
195 : ite(192, 99, 194) : BV:8
196 : ite(191, 96, 195) : BV:8
197 : ite(190, 93, 196) : BV:8
198 : ite(189, 90, 197) : BV:8
199 : ite(188, 87, 198) : BV:8
200 : ite(187, 84, 199) : BV:8
201 : ite(186, 81, 200) : BV:8
202 : 1 { 0x1 +1.11e129 } : BV:32
203 : bvadd(202, 75, 166) : BV:32
204 : eq(203, 79) : BOOL
205 : eq(203, 82) : BOOL
206 : eq(203, 85) : BOOL
207 : eq(203, 88) : BOOL
208 : eq(203, 91) : BOOL
209 : eq(203, 94) : BOOL
210 : eq(203, 97) : BOOL
211 : eq(203, 100) : BOOL
212 : ite(211, 102, 103) : BV:8
213 : ite(210, 99, 212) : BV:8
214 : ite(209, 96, 213) : BV:8
215 : ite(208, 93, 214) : BV:8
216 : ite(207, 90, 215) : BV:8
217 : ite(206, 87, 216) : BV:8
218 : ite(205, 84, 217) : BV:8
219 : ite(204, 81, 218) : BV:8
220 : bvadd(75, 166) : BV:32
221 : eq(220, 79) : BOOL
222 : eq(220, 82) : BOOL
223 : eq(220, 85) : BOOL
224 : eq(220, 88) : BOOL
225 : eq(220, 91) : BOOL
226 : eq(220, 94) : BOOL
227 : eq(220, 97) : BOOL
228 : eq(220, 100) : BOOL
229 : ite(228, 102, 103) : BV:8
230 : ite(227, 99, 229) : BV:8
231 : ite(226, 96, 230) : BV:8
232 : ite(225, 93, 231) : BV:8
233 : ite(224, 90, 232) : BV:8
234 : ite(223, 87, 233) : BV:8
235 : ite(222, 84, 234) : BV:8
236 : ite(221, 81, 235) : BV:8
237 : bvconcat(183, 201, 219, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : ite(74, 237, 238) : BV:32
240 : ite(55, 2, 239) : BV:32
241 : lambda(52, 240) : FUNCTION[BV:32 -> BV:32]
242 : map(51, 241) : MAP[BV:32 -> BV:32]
243 : lambda(17, 242) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
244 : map(16, 243) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
245 : sym_const(244) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483655 ] -> 0, [ 2147483656; 2147483656 ] -> 100, [ 2147483657; 2147483657 ] -> 54, [ 2147483658; 2147483658 ] -> 246, [ 2147483659; 2147483659 ] -> 193, [ 2147483660; 3254138467 ] -> 0, [ 3254138468; 3254138468 ] -> 32, [ 3254138469; 3254138469 ] -> 2, [ 3254138470; 3254138470 ] -> 128, [ 3254138471; 3254138471 ] -> 4, [ 3254138472; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8404995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8404996; 8404999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8405000; 536904703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536904704; 536904707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 536904708; 2298112703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2298112704; 2298112707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2298112708; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2298112704 { 0x88fa6ac0 -1996854592 -1.95638275e146 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8404996 { 0x804004 +1.195360e130 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 536904704 { 0x20008400 +1.402832e193 } : BV:32
=input.dst.llvm-%x
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda38771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38772Var : BV:32
18 : eq(17, 2) : BOOL
19 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
24 : eq(22, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
30 : eq(22, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
33 : eq(22, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
36 : eq(22, 35) : BOOL
37 : 100 { 0x64 } : BV:8
38 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : 54 { 0x36 } : BV:8
41 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
42 : eq(22, 41) : BOOL
43 : 246 { 0xf6 -10 } : BV:8
44 : eq(22, 21) : BOOL
45 : 32 { 0x20 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 43, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 21) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 43, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 34, 68) : BV:8
70 : ite(59, 31, 69) : BV:8
71 : ite(58, 28, 70) : BV:8
72 : ite(57, 25, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 20, 21) : BV:32
75 : eq(74, 23) : BOOL
76 : eq(74, 26) : BOOL
77 : eq(74, 29) : BOOL
78 : eq(74, 32) : BOOL
79 : eq(74, 35) : BOOL
80 : eq(74, 38) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 21) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 43, 83) : BV:8
85 : ite(80, 40, 84) : BV:8
86 : ite(79, 37, 85) : BV:8
87 : ite(78, 34, 86) : BV:8
88 : ite(77, 31, 87) : BV:8
89 : ite(76, 28, 88) : BV:8
90 : ite(75, 25, 89) : BV:8
91 : bvadd(20, 21) : BV:32
92 : eq(91, 23) : BOOL
93 : eq(91, 26) : BOOL
94 : eq(91, 29) : BOOL
95 : eq(91, 32) : BOOL
96 : eq(91, 35) : BOOL
97 : eq(91, 38) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 21) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 43, 100) : BV:8
102 : ite(97, 40, 101) : BV:8
103 : ite(96, 37, 102) : BV:8
104 : ite(95, 34, 103) : BV:8
105 : ite(94, 31, 104) : BV:8
106 : ite(93, 28, 105) : BV:8
107 : ite(92, 25, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(18, 19, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda38753Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda38754Var : BV:32
20 : eq(19, 4) : BOOL
21 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
22 : bvmul(10, 19) : BV:32
23 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
24 : bvadd(6, 22, 23) : BV:32
25 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
26 : eq(24, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
29 : eq(24, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
32 : eq(24, 31) : BOOL
33 : 2 { 0x2 } : BV:8
34 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 193 { 0xc1 -63 } : BV:8
37 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 100 { 0x64 } : BV:8
40 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 54 { 0x36 } : BV:8
43 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 246 { 0xf6 -10 } : BV:8
46 : eq(24, 23) : BOOL
47 : 32 { 0x20 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(41, 42, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(35, 36, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : ite(26, 27, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 22, 23) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 43) : BOOL
66 : eq(58, 23) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 45, 67) : BV:8
69 : ite(64, 42, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 33, 71) : BV:8
73 : ite(60, 30, 72) : BV:8
74 : ite(59, 27, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 22, 23) : BV:32
77 : eq(76, 25) : BOOL
78 : eq(76, 28) : BOOL
79 : eq(76, 31) : BOOL
80 : eq(76, 34) : BOOL
81 : eq(76, 37) : BOOL
82 : eq(76, 40) : BOOL
83 : eq(76, 43) : BOOL
84 : eq(76, 23) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 45, 85) : BV:8
87 : ite(82, 42, 86) : BV:8
88 : ite(81, 39, 87) : BV:8
89 : ite(80, 36, 88) : BV:8
90 : ite(79, 33, 89) : BV:8
91 : ite(78, 30, 90) : BV:8
92 : ite(77, 27, 91) : BV:8
93 : bvadd(22, 23) : BV:32
94 : eq(93, 25) : BOOL
95 : eq(93, 28) : BOOL
96 : eq(93, 31) : BOOL
97 : eq(93, 34) : BOOL
98 : eq(93, 37) : BOOL
99 : eq(93, 40) : BOOL
100 : eq(93, 43) : BOOL
101 : eq(93, 23) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 45, 102) : BV:8
104 : ite(99, 42, 103) : BV:8
105 : ite(98, 39, 104) : BV:8
106 : ite(97, 36, 105) : BV:8
107 : ite(96, 33, 106) : BV:8
108 : ite(95, 30, 107) : BV:8
109 : ite(94, 27, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(20, 21, 110) : BV:32
112 : lambda(19, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(18, 112) : MAP[BV:32 -> BV:32]
114 : sum(1, 2, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(1, 1) : BOOL
19 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
20 : bvmul(7, 1) : BV:32
21 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
22 : bvadd(3, 20, 21) : BV:32
23 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
24 : eq(22, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
30 : eq(22, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
33 : eq(22, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
36 : eq(22, 35) : BOOL
37 : 100 { 0x64 } : BV:8
38 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : 54 { 0x36 } : BV:8
41 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
42 : eq(22, 41) : BOOL
43 : 246 { 0xf6 -10 } : BV:8
44 : eq(22, 21) : BOOL
45 : 32 { 0x20 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 43, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 21) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 43, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 34, 68) : BV:8
70 : ite(59, 31, 69) : BV:8
71 : ite(58, 28, 70) : BV:8
72 : ite(57, 25, 71) : BV:8
73 : bvadd(15, 20, 21) : BV:32
74 : eq(73, 23) : BOOL
75 : eq(73, 26) : BOOL
76 : eq(73, 29) : BOOL
77 : eq(73, 32) : BOOL
78 : eq(73, 35) : BOOL
79 : eq(73, 38) : BOOL
80 : eq(73, 41) : BOOL
81 : eq(73, 21) : BOOL
82 : ite(81, 45, 46) : BV:8
83 : ite(80, 43, 82) : BV:8
84 : ite(79, 40, 83) : BV:8
85 : ite(78, 37, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 31, 86) : BV:8
88 : ite(75, 28, 87) : BV:8
89 : ite(74, 25, 88) : BV:8
90 : bvadd(20, 21) : BV:32
91 : eq(90, 23) : BOOL
92 : eq(90, 26) : BOOL
93 : eq(90, 29) : BOOL
94 : eq(90, 32) : BOOL
95 : eq(90, 35) : BOOL
96 : eq(90, 38) : BOOL
97 : eq(90, 41) : BOOL
98 : eq(90, 21) : BOOL
99 : ite(98, 45, 46) : BV:8
100 : ite(97, 43, 99) : BV:8
101 : ite(96, 40, 100) : BV:8
102 : ite(95, 37, 101) : BV:8
103 : ite(94, 34, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 25, 105) : BV:8
107 : bvconcat(54, 72, 89, 106) : BV:32
108 : ite(18, 19, 107) : BV:32
109 : sum(16, 17, 108) : SUM[UNIT,BV:32]
110 : sym_const(109) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 983251509 { 0x3a9b3a35 +1.21271383e246 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda38776Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38777Var : BV:32
18 : eq(17, 2) : BOOL
19 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
24 : eq(22, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
30 : eq(22, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
33 : eq(22, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
36 : eq(22, 35) : BOOL
37 : 100 { 0x64 } : BV:8
38 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : 54 { 0x36 } : BV:8
41 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
42 : eq(22, 41) : BOOL
43 : 246 { 0xf6 -10 } : BV:8
44 : eq(22, 21) : BOOL
45 : 32 { 0x20 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 43, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 21) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 43, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 34, 68) : BV:8
70 : ite(59, 31, 69) : BV:8
71 : ite(58, 28, 70) : BV:8
72 : ite(57, 25, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 20, 21) : BV:32
75 : eq(74, 23) : BOOL
76 : eq(74, 26) : BOOL
77 : eq(74, 29) : BOOL
78 : eq(74, 32) : BOOL
79 : eq(74, 35) : BOOL
80 : eq(74, 38) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 21) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 43, 83) : BV:8
85 : ite(80, 40, 84) : BV:8
86 : ite(79, 37, 85) : BV:8
87 : ite(78, 34, 86) : BV:8
88 : ite(77, 31, 87) : BV:8
89 : ite(76, 28, 88) : BV:8
90 : ite(75, 25, 89) : BV:8
91 : bvadd(20, 21) : BV:32
92 : eq(91, 23) : BOOL
93 : eq(91, 26) : BOOL
94 : eq(91, 29) : BOOL
95 : eq(91, 32) : BOOL
96 : eq(91, 35) : BOOL
97 : eq(91, 38) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 21) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 43, 100) : BV:8
102 : ite(97, 40, 101) : BV:8
103 : ite(96, 37, 102) : BV:8
104 : ite(95, 34, 103) : BV:8
105 : ite(94, 31, 104) : BV:8
106 : ite(93, 28, 105) : BV:8
107 : ite(92, 25, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(18, 19, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 577107445 { 0x2265f5f5 +1.79656851e197 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8404996 { 0x804004 +1.195360e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 8404999 { 0x804007 +1.195395e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 536904704 { 0x20008400 +1.402832e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 536904707 { 0x20008403 +1.402867e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2298112704 { 0x88fa6ac0 -1996854592 -1.95638275e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2298112707 { 0x88fa6ac3 -1996854589 -1.95638310e146 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda38667Var : BV:32
2 : Lambda38668Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
20 : eq(12, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 193 { 0xc1 -63 } : BV:8
25 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
26 : eq(12, 25) : BOOL
27 : 100 { 0x64 } : BV:8
28 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
29 : eq(12, 28) : BOOL
30 : 54 { 0x36 } : BV:8
31 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 246 { 0xf6 -10 } : BV:8
34 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
35 : eq(12, 34) : BOOL
36 : 32 { 0x20 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
47 : bvadd(46, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
65 : bvadd(64, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
83 : bvadd(82, 11) : BV:32
84 : eq(83, 13) : BOOL
85 : eq(83, 16) : BOOL
86 : eq(83, 19) : BOOL
87 : eq(83, 22) : BOOL
88 : eq(83, 25) : BOOL
89 : eq(83, 28) : BOOL
90 : eq(83, 31) : BOOL
91 : eq(83, 34) : BOOL
92 : ite(91, 36, 37) : BV:8
93 : ite(90, 33, 92) : BV:8
94 : ite(89, 30, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : ite(87, 24, 95) : BV:8
97 : ite(86, 21, 96) : BV:8
98 : ite(85, 18, 97) : BV:8
99 : ite(84, 15, 98) : BV:8
100 : bvconcat(45, 63, 81, 99) : BV:32
101 : bvadd(7, 9, 100) : BV:32
102 : eq(101, 13) : BOOL
103 : eq(101, 16) : BOOL
104 : eq(101, 19) : BOOL
105 : eq(101, 22) : BOOL
106 : eq(101, 25) : BOOL
107 : eq(101, 28) : BOOL
108 : eq(101, 31) : BOOL
109 : eq(101, 34) : BOOL
110 : ite(109, 36, 37) : BV:8
111 : ite(108, 33, 110) : BV:8
112 : ite(107, 30, 111) : BV:8
113 : ite(106, 27, 112) : BV:8
114 : ite(105, 24, 113) : BV:8
115 : ite(104, 21, 114) : BV:8
116 : ite(103, 18, 115) : BV:8
117 : ite(102, 15, 116) : BV:8
118 : 2 { 0x2 +1.23e129 } : BV:32
119 : bvadd(118, 9, 100) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 16) : BOOL
122 : eq(119, 19) : BOOL
123 : eq(119, 22) : BOOL
124 : eq(119, 25) : BOOL
125 : eq(119, 28) : BOOL
126 : eq(119, 31) : BOOL
127 : eq(119, 34) : BOOL
128 : ite(127, 36, 37) : BV:8
129 : ite(126, 33, 128) : BV:8
130 : ite(125, 30, 129) : BV:8
131 : ite(124, 27, 130) : BV:8
132 : ite(123, 24, 131) : BV:8
133 : ite(122, 21, 132) : BV:8
134 : ite(121, 18, 133) : BV:8
135 : ite(120, 15, 134) : BV:8
136 : 1 { 0x1 +1.11e129 } : BV:32
137 : bvadd(136, 9, 100) : BV:32
138 : eq(137, 13) : BOOL
139 : eq(137, 16) : BOOL
140 : eq(137, 19) : BOOL
141 : eq(137, 22) : BOOL
142 : eq(137, 25) : BOOL
143 : eq(137, 28) : BOOL
144 : eq(137, 31) : BOOL
145 : eq(137, 34) : BOOL
146 : ite(145, 36, 37) : BV:8
147 : ite(144, 33, 146) : BV:8
148 : ite(143, 30, 147) : BV:8
149 : ite(142, 27, 148) : BV:8
150 : ite(141, 24, 149) : BV:8
151 : ite(140, 21, 150) : BV:8
152 : ite(139, 18, 151) : BV:8
153 : ite(138, 15, 152) : BV:8
154 : bvadd(9, 100) : BV:32
155 : eq(154, 13) : BOOL
156 : eq(154, 16) : BOOL
157 : eq(154, 19) : BOOL
158 : eq(154, 22) : BOOL
159 : eq(154, 25) : BOOL
160 : eq(154, 28) : BOOL
161 : eq(154, 31) : BOOL
162 : eq(154, 34) : BOOL
163 : ite(162, 36, 37) : BV:8
164 : ite(161, 33, 163) : BV:8
165 : ite(160, 30, 164) : BV:8
166 : ite(159, 27, 165) : BV:8
167 : ite(158, 24, 166) : BV:8
168 : ite(157, 21, 167) : BV:8
169 : ite(156, 18, 168) : BV:8
170 : ite(155, 15, 169) : BV:8
171 : bvconcat(117, 135, 153, 170) : BV:32
172 : ite(6, 3, 171) : BV:32
173 : lambda(1, 2, 172) : FUNCTION[BV:32,BV:32 -> BV:32]
174 : sym_const(173) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda38669Var : BV:32
2 : Lambda38670Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
12 : bvule(11, 1) : BOOL
13 : bvule(1, 11) : BOOL
14 : and(12, 13) : BOOL
15 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 15, 15) : BV:32
21 : ite(14, 11, 20) : BV:32
22 : ite(10, 3, 21) : BV:32
23 : eq(22, 3) : BOOL
24 : bvule(3, 2) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(2, 25) : BOOL
27 : and(24, 26) : BOOL
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 28, 36) : BV:32
38 : ite(27, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(23, 39) : BOOL
41 : 1 { 0x1 } : BOOL
42 : 0 { 0x0 } : BOOL
43 : ite(40, 41, 42) : BOOL
44 : and(12, 18) : BOOL
45 : ite(44, 42, 42) : BOOL
46 : ite(10, 41, 45) : BOOL
47 : and(43, 46) : BOOL
48 : bvmul(28, 2) : BV:32
49 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
50 : bvmul(28, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
53 : eq(51, 52) : BOOL
54 : 4 { 0x4 } : BV:8
55 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
56 : eq(51, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
59 : eq(51, 58) : BOOL
60 : 2 { 0x2 } : BV:8
61 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
62 : eq(51, 61) : BOOL
63 : 193 { 0xc1 -63 } : BV:8
64 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
65 : eq(51, 64) : BOOL
66 : 100 { 0x64 } : BV:8
67 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
68 : eq(51, 67) : BOOL
69 : 54 { 0x36 } : BV:8
70 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
71 : eq(51, 70) : BOOL
72 : 246 { 0xf6 -10 } : BV:8
73 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
74 : eq(51, 73) : BOOL
75 : 32 { 0x20 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(56, 57, 82) : BV:8
84 : ite(53, 54, 83) : BV:8
85 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
86 : bvadd(85, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 58) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : eq(86, 67) : BOOL
93 : eq(86, 70) : BOOL
94 : eq(86, 73) : BOOL
95 : ite(94, 75, 76) : BV:8
96 : ite(93, 72, 95) : BV:8
97 : ite(92, 69, 96) : BV:8
98 : ite(91, 66, 97) : BV:8
99 : ite(90, 63, 98) : BV:8
100 : ite(89, 60, 99) : BV:8
101 : ite(88, 57, 100) : BV:8
102 : ite(87, 54, 101) : BV:8
103 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
104 : bvadd(103, 50) : BV:32
105 : eq(104, 52) : BOOL
106 : eq(104, 55) : BOOL
107 : eq(104, 58) : BOOL
108 : eq(104, 61) : BOOL
109 : eq(104, 64) : BOOL
110 : eq(104, 67) : BOOL
111 : eq(104, 70) : BOOL
112 : eq(104, 73) : BOOL
113 : ite(112, 75, 76) : BV:8
114 : ite(111, 72, 113) : BV:8
115 : ite(110, 69, 114) : BV:8
116 : ite(109, 66, 115) : BV:8
117 : ite(108, 63, 116) : BV:8
118 : ite(107, 60, 117) : BV:8
119 : ite(106, 57, 118) : BV:8
120 : ite(105, 54, 119) : BV:8
121 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
122 : bvadd(121, 50) : BV:32
123 : eq(122, 52) : BOOL
124 : eq(122, 55) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : eq(122, 67) : BOOL
129 : eq(122, 70) : BOOL
130 : eq(122, 73) : BOOL
131 : ite(130, 75, 76) : BV:8
132 : ite(129, 72, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 66, 133) : BV:8
135 : ite(126, 63, 134) : BV:8
136 : ite(125, 60, 135) : BV:8
137 : ite(124, 57, 136) : BV:8
138 : ite(123, 54, 137) : BV:8
139 : bvconcat(84, 102, 120, 138) : BV:32
140 : bvadd(25, 48, 139) : BV:32
141 : eq(140, 52) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 61) : BOOL
145 : eq(140, 64) : BOOL
146 : eq(140, 67) : BOOL
147 : eq(140, 70) : BOOL
148 : eq(140, 73) : BOOL
149 : ite(148, 75, 76) : BV:8
150 : ite(147, 72, 149) : BV:8
151 : ite(146, 69, 150) : BV:8
152 : ite(145, 66, 151) : BV:8
153 : ite(144, 63, 152) : BV:8
154 : ite(143, 60, 153) : BV:8
155 : ite(142, 57, 154) : BV:8
156 : ite(141, 54, 155) : BV:8
157 : 2 { 0x2 +1.23e129 } : BV:32
158 : bvadd(157, 48, 139) : BV:32
159 : eq(158, 52) : BOOL
160 : eq(158, 55) : BOOL
161 : eq(158, 58) : BOOL
162 : eq(158, 61) : BOOL
163 : eq(158, 64) : BOOL
164 : eq(158, 67) : BOOL
165 : eq(158, 70) : BOOL
166 : eq(158, 73) : BOOL
167 : ite(166, 75, 76) : BV:8
168 : ite(165, 72, 167) : BV:8
169 : ite(164, 69, 168) : BV:8
170 : ite(163, 66, 169) : BV:8
171 : ite(162, 63, 170) : BV:8
172 : ite(161, 60, 171) : BV:8
173 : ite(160, 57, 172) : BV:8
174 : ite(159, 54, 173) : BV:8
175 : 1 { 0x1 +1.11e129 } : BV:32
176 : bvadd(175, 48, 139) : BV:32
177 : eq(176, 52) : BOOL
178 : eq(176, 55) : BOOL
179 : eq(176, 58) : BOOL
180 : eq(176, 61) : BOOL
181 : eq(176, 64) : BOOL
182 : eq(176, 67) : BOOL
183 : eq(176, 70) : BOOL
184 : eq(176, 73) : BOOL
185 : ite(184, 75, 76) : BV:8
186 : ite(183, 72, 185) : BV:8
187 : ite(182, 69, 186) : BV:8
188 : ite(181, 66, 187) : BV:8
189 : ite(180, 63, 188) : BV:8
190 : ite(179, 60, 189) : BV:8
191 : ite(178, 57, 190) : BV:8
192 : ite(177, 54, 191) : BV:8
193 : bvadd(48, 139) : BV:32
194 : eq(193, 52) : BOOL
195 : eq(193, 55) : BOOL
196 : eq(193, 58) : BOOL
197 : eq(193, 61) : BOOL
198 : eq(193, 64) : BOOL
199 : eq(193, 67) : BOOL
200 : eq(193, 70) : BOOL
201 : eq(193, 73) : BOOL
202 : ite(201, 75, 76) : BV:8
203 : ite(200, 72, 202) : BV:8
204 : ite(199, 69, 203) : BV:8
205 : ite(198, 66, 204) : BV:8
206 : ite(197, 63, 205) : BV:8
207 : ite(196, 60, 206) : BV:8
208 : ite(195, 57, 207) : BV:8
209 : ite(194, 54, 208) : BV:8
210 : bvconcat(156, 174, 192, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(47, 210, 211) : BV:32
213 : ite(6, 3, 212) : BV:32
214 : lambda(1, 2, 213) : FUNCTION[BV:32,BV:32 -> BV:32]
215 : sym_const(214) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda38671Var : BV:32
2 : Lambda38672Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda38681Var : BV:32
2 : Lambda38682Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda38688Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2 { 0x2 } : BV:8
19 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 193 { 0xc1 -63 } : BV:8
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 100 { 0x64 } : BV:8
25 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 54 { 0x36 } : BV:8
28 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 246 { 0xf6 -10 } : BV:8
31 : eq(9, 8) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 8) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 28) : BOOL
69 : eq(61, 8) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 28) : BOOL
86 : eq(78, 8) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 30, 87) : BV:8
89 : ite(84, 27, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda38692Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2 { 0x2 } : BV:8
19 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 193 { 0xc1 -63 } : BV:8
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 100 { 0x64 } : BV:8
25 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 54 { 0x36 } : BV:8
28 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 246 { 0xf6 -10 } : BV:8
31 : eq(9, 8) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 8) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 28) : BOOL
69 : eq(61, 8) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 28) : BOOL
86 : eq(78, 8) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 30, 87) : BV:8
89 : ite(84, 27, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda38696Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2 { 0x2 } : BV:8
19 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 193 { 0xc1 -63 } : BV:8
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 100 { 0x64 } : BV:8
25 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 54 { 0x36 } : BV:8
28 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 246 { 0xf6 -10 } : BV:8
31 : eq(9, 8) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 8) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 28) : BOOL
69 : eq(61, 8) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 28) : BOOL
86 : eq(78, 8) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 30, 87) : BV:8
89 : ite(84, 27, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
70418392
=counter_example_end
=global nodece 52 num_edges_traversed 1
=global nodece 52 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3v487.ce4194.num_edges_traversed2
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce4194 fa3b2e2b708704f1aa2f5e7953b4a9d
=input.spec-%var-x-1
1 : Lambda38744Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38745Var : BV:32
18 : Lambda38746Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda38747Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
61 : eq(59, 60) : BOOL
62 : 4 { 0x4 } : BV:8
63 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
64 : eq(59, 63) : BOOL
65 : 128 { 0x80 -128 } : BV:8
66 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
67 : eq(59, 66) : BOOL
68 : 2 { 0x2 } : BV:8
69 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
70 : eq(59, 69) : BOOL
71 : 193 { 0xc1 -63 } : BV:8
72 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
73 : eq(59, 72) : BOOL
74 : 100 { 0x64 } : BV:8
75 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
76 : eq(59, 75) : BOOL
77 : 54 { 0x36 } : BV:8
78 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
79 : eq(59, 78) : BOOL
80 : 246 { 0xf6 -10 } : BV:8
81 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
82 : eq(59, 81) : BOOL
83 : 32 { 0x20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(67, 68, 89) : BV:8
91 : ite(64, 65, 90) : BV:8
92 : ite(61, 62, 91) : BV:8
93 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
94 : bvadd(93, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : eq(94, 75) : BOOL
101 : eq(94, 78) : BOOL
102 : eq(94, 81) : BOOL
103 : ite(102, 83, 84) : BV:8
104 : ite(101, 80, 103) : BV:8
105 : ite(100, 77, 104) : BV:8
106 : ite(99, 74, 105) : BV:8
107 : ite(98, 71, 106) : BV:8
108 : ite(97, 68, 107) : BV:8
109 : ite(96, 65, 108) : BV:8
110 : ite(95, 62, 109) : BV:8
111 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
112 : bvadd(111, 58) : BV:32
113 : eq(112, 60) : BOOL
114 : eq(112, 63) : BOOL
115 : eq(112, 66) : BOOL
116 : eq(112, 69) : BOOL
117 : eq(112, 72) : BOOL
118 : eq(112, 75) : BOOL
119 : eq(112, 78) : BOOL
120 : eq(112, 81) : BOOL
121 : ite(120, 83, 84) : BV:8
122 : ite(119, 80, 121) : BV:8
123 : ite(118, 77, 122) : BV:8
124 : ite(117, 74, 123) : BV:8
125 : ite(116, 71, 124) : BV:8
126 : ite(115, 68, 125) : BV:8
127 : ite(114, 65, 126) : BV:8
128 : ite(113, 62, 127) : BV:8
129 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
130 : bvadd(129, 58) : BV:32
131 : eq(130, 60) : BOOL
132 : eq(130, 63) : BOOL
133 : eq(130, 66) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : eq(130, 75) : BOOL
137 : eq(130, 78) : BOOL
138 : eq(130, 81) : BOOL
139 : ite(138, 83, 84) : BV:8
140 : ite(137, 80, 139) : BV:8
141 : ite(136, 77, 140) : BV:8
142 : ite(135, 74, 141) : BV:8
143 : ite(134, 71, 142) : BV:8
144 : ite(133, 68, 143) : BV:8
145 : ite(132, 65, 144) : BV:8
146 : ite(131, 62, 145) : BV:8
147 : bvconcat(92, 110, 128, 146) : BV:32
148 : bvadd(34, 56, 147) : BV:32
149 : eq(148, 60) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 69) : BOOL
153 : eq(148, 72) : BOOL
154 : eq(148, 75) : BOOL
155 : eq(148, 78) : BOOL
156 : eq(148, 81) : BOOL
157 : ite(156, 83, 84) : BV:8
158 : ite(155, 80, 157) : BV:8
159 : ite(154, 77, 158) : BV:8
160 : ite(153, 74, 159) : BV:8
161 : ite(152, 71, 160) : BV:8
162 : ite(151, 68, 161) : BV:8
163 : ite(150, 65, 162) : BV:8
164 : ite(149, 62, 163) : BV:8
165 : 2 { 0x2 +1.23e129 } : BV:32
166 : bvadd(165, 56, 147) : BV:32
167 : eq(166, 60) : BOOL
168 : eq(166, 63) : BOOL
169 : eq(166, 66) : BOOL
170 : eq(166, 69) : BOOL
171 : eq(166, 72) : BOOL
172 : eq(166, 75) : BOOL
173 : eq(166, 78) : BOOL
174 : eq(166, 81) : BOOL
175 : ite(174, 83, 84) : BV:8
176 : ite(173, 80, 175) : BV:8
177 : ite(172, 77, 176) : BV:8
178 : ite(171, 74, 177) : BV:8
179 : ite(170, 71, 178) : BV:8
180 : ite(169, 68, 179) : BV:8
181 : ite(168, 65, 180) : BV:8
182 : ite(167, 62, 181) : BV:8
183 : 1 { 0x1 +1.11e129 } : BV:32
184 : bvadd(183, 56, 147) : BV:32
185 : eq(184, 60) : BOOL
186 : eq(184, 63) : BOOL
187 : eq(184, 66) : BOOL
188 : eq(184, 69) : BOOL
189 : eq(184, 72) : BOOL
190 : eq(184, 75) : BOOL
191 : eq(184, 78) : BOOL
192 : eq(184, 81) : BOOL
193 : ite(192, 83, 84) : BV:8
194 : ite(191, 80, 193) : BV:8
195 : ite(190, 77, 194) : BV:8
196 : ite(189, 74, 195) : BV:8
197 : ite(188, 71, 196) : BV:8
198 : ite(187, 68, 197) : BV:8
199 : ite(186, 65, 198) : BV:8
200 : ite(185, 62, 199) : BV:8
201 : bvadd(56, 147) : BV:32
202 : eq(201, 60) : BOOL
203 : eq(201, 63) : BOOL
204 : eq(201, 66) : BOOL
205 : eq(201, 69) : BOOL
206 : eq(201, 72) : BOOL
207 : eq(201, 75) : BOOL
208 : eq(201, 78) : BOOL
209 : eq(201, 81) : BOOL
210 : ite(209, 83, 84) : BV:8
211 : ite(208, 80, 210) : BV:8
212 : ite(207, 77, 211) : BV:8
213 : ite(206, 74, 212) : BV:8
214 : ite(205, 71, 213) : BV:8
215 : ite(204, 68, 214) : BV:8
216 : ite(203, 65, 215) : BV:8
217 : ite(202, 62, 216) : BV:8
218 : bvconcat(164, 182, 200, 217) : BV:32
219 : ite(55, 2, 218) : BV:32
220 : lambda(52, 219) : FUNCTION[BV:32 -> BV:32]
221 : map(51, 220) : MAP[BV:32 -> BV:32]
222 : lambda(17, 221) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
223 : map(16, 222) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
224 : sym_const(223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda38764Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38765Var : BV:32
18 : Lambda38766Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda38767Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(2, 52) : BOOL
57 : bvule(52, 34) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(37, 52) : BOOL
60 : bvule(52, 37) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(41, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 41, 41) : BV:32
66 : ite(61, 37, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(22, 27) : BOOL
72 : ite(71, 13, 13) : BOOL
73 : ite(21, 7, 72) : BOOL
74 : and(70, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
80 : eq(78, 79) : BOOL
81 : 4 { 0x4 } : BV:8
82 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
83 : eq(78, 82) : BOOL
84 : 128 { 0x80 -128 } : BV:8
85 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
86 : eq(78, 85) : BOOL
87 : 2 { 0x2 } : BV:8
88 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
89 : eq(78, 88) : BOOL
90 : 193 { 0xc1 -63 } : BV:8
91 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
92 : eq(78, 91) : BOOL
93 : 100 { 0x64 } : BV:8
94 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
95 : eq(78, 94) : BOOL
96 : 54 { 0x36 } : BV:8
97 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
98 : eq(78, 97) : BOOL
99 : 246 { 0xf6 -10 } : BV:8
100 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
101 : eq(78, 100) : BOOL
102 : 32 { 0x20 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(86, 87, 108) : BV:8
110 : ite(83, 84, 109) : BV:8
111 : ite(80, 81, 110) : BV:8
112 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
113 : bvadd(112, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 85) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : eq(113, 94) : BOOL
120 : eq(113, 97) : BOOL
121 : eq(113, 100) : BOOL
122 : ite(121, 102, 103) : BV:8
123 : ite(120, 99, 122) : BV:8
124 : ite(119, 96, 123) : BV:8
125 : ite(118, 93, 124) : BV:8
126 : ite(117, 90, 125) : BV:8
127 : ite(116, 87, 126) : BV:8
128 : ite(115, 84, 127) : BV:8
129 : ite(114, 81, 128) : BV:8
130 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
131 : bvadd(130, 77) : BV:32
132 : eq(131, 79) : BOOL
133 : eq(131, 82) : BOOL
134 : eq(131, 85) : BOOL
135 : eq(131, 88) : BOOL
136 : eq(131, 91) : BOOL
137 : eq(131, 94) : BOOL
138 : eq(131, 97) : BOOL
139 : eq(131, 100) : BOOL
140 : ite(139, 102, 103) : BV:8
141 : ite(138, 99, 140) : BV:8
142 : ite(137, 96, 141) : BV:8
143 : ite(136, 93, 142) : BV:8
144 : ite(135, 90, 143) : BV:8
145 : ite(134, 87, 144) : BV:8
146 : ite(133, 84, 145) : BV:8
147 : ite(132, 81, 146) : BV:8
148 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
149 : bvadd(148, 77) : BV:32
150 : eq(149, 79) : BOOL
151 : eq(149, 82) : BOOL
152 : eq(149, 85) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : eq(149, 94) : BOOL
156 : eq(149, 97) : BOOL
157 : eq(149, 100) : BOOL
158 : ite(157, 102, 103) : BV:8
159 : ite(156, 99, 158) : BV:8
160 : ite(155, 96, 159) : BV:8
161 : ite(154, 93, 160) : BV:8
162 : ite(153, 90, 161) : BV:8
163 : ite(152, 87, 162) : BV:8
164 : ite(151, 84, 163) : BV:8
165 : ite(150, 81, 164) : BV:8
166 : bvconcat(111, 129, 147, 165) : BV:32
167 : bvadd(34, 75, 166) : BV:32
168 : eq(167, 79) : BOOL
169 : eq(167, 82) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 88) : BOOL
172 : eq(167, 91) : BOOL
173 : eq(167, 94) : BOOL
174 : eq(167, 97) : BOOL
175 : eq(167, 100) : BOOL
176 : ite(175, 102, 103) : BV:8
177 : ite(174, 99, 176) : BV:8
178 : ite(173, 96, 177) : BV:8
179 : ite(172, 93, 178) : BV:8
180 : ite(171, 90, 179) : BV:8
181 : ite(170, 87, 180) : BV:8
182 : ite(169, 84, 181) : BV:8
183 : ite(168, 81, 182) : BV:8
184 : 2 { 0x2 +1.23e129 } : BV:32
185 : bvadd(184, 75, 166) : BV:32
186 : eq(185, 79) : BOOL
187 : eq(185, 82) : BOOL
188 : eq(185, 85) : BOOL
189 : eq(185, 88) : BOOL
190 : eq(185, 91) : BOOL
191 : eq(185, 94) : BOOL
192 : eq(185, 97) : BOOL
193 : eq(185, 100) : BOOL
194 : ite(193, 102, 103) : BV:8
195 : ite(192, 99, 194) : BV:8
196 : ite(191, 96, 195) : BV:8
197 : ite(190, 93, 196) : BV:8
198 : ite(189, 90, 197) : BV:8
199 : ite(188, 87, 198) : BV:8
200 : ite(187, 84, 199) : BV:8
201 : ite(186, 81, 200) : BV:8
202 : 1 { 0x1 +1.11e129 } : BV:32
203 : bvadd(202, 75, 166) : BV:32
204 : eq(203, 79) : BOOL
205 : eq(203, 82) : BOOL
206 : eq(203, 85) : BOOL
207 : eq(203, 88) : BOOL
208 : eq(203, 91) : BOOL
209 : eq(203, 94) : BOOL
210 : eq(203, 97) : BOOL
211 : eq(203, 100) : BOOL
212 : ite(211, 102, 103) : BV:8
213 : ite(210, 99, 212) : BV:8
214 : ite(209, 96, 213) : BV:8
215 : ite(208, 93, 214) : BV:8
216 : ite(207, 90, 215) : BV:8
217 : ite(206, 87, 216) : BV:8
218 : ite(205, 84, 217) : BV:8
219 : ite(204, 81, 218) : BV:8
220 : bvadd(75, 166) : BV:32
221 : eq(220, 79) : BOOL
222 : eq(220, 82) : BOOL
223 : eq(220, 85) : BOOL
224 : eq(220, 88) : BOOL
225 : eq(220, 91) : BOOL
226 : eq(220, 94) : BOOL
227 : eq(220, 97) : BOOL
228 : eq(220, 100) : BOOL
229 : ite(228, 102, 103) : BV:8
230 : ite(227, 99, 229) : BV:8
231 : ite(226, 96, 230) : BV:8
232 : ite(225, 93, 231) : BV:8
233 : ite(224, 90, 232) : BV:8
234 : ite(223, 87, 233) : BV:8
235 : ite(222, 84, 234) : BV:8
236 : ite(221, 81, 235) : BV:8
237 : bvconcat(183, 201, 219, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : ite(74, 237, 238) : BV:32
240 : ite(55, 2, 239) : BV:32
241 : lambda(52, 240) : FUNCTION[BV:32 -> BV:32]
242 : map(51, 241) : MAP[BV:32 -> BV:32]
243 : lambda(17, 242) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
244 : map(16, 243) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
245 : sym_const(244) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483655 ] -> 0, [ 2147483656; 2147483656 ] -> 100, [ 2147483657; 2147483657 ] -> 54, [ 2147483658; 2147483658 ] -> 246, [ 2147483659; 2147483659 ] -> 193, [ 2147483660; 3254138467 ] -> 0, [ 3254138468; 3254138468 ] -> 32, [ 3254138469; 3254138469 ] -> 2, [ 3254138470; 3254138470 ] -> 128, [ 3254138471; 3254138471 ] -> 4, [ 3254138472; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8404995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8404996; 8404999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8405000; 536904703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536904704; 536904707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 536904708; 2298112703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2298112704; 2298112707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2298112708; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2298112704 { 0x88fa6ac0 -1996854592 -1.95638275e146 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8404996 { 0x804004 +1.195360e130 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 536904704 { 0x20008400 +1.402832e193 } : BV:32
=input.dst.llvm-%x
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda38771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38772Var : BV:32
18 : eq(17, 2) : BOOL
19 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
24 : eq(22, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
30 : eq(22, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
33 : eq(22, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
36 : eq(22, 35) : BOOL
37 : 100 { 0x64 } : BV:8
38 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : 54 { 0x36 } : BV:8
41 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
42 : eq(22, 41) : BOOL
43 : 246 { 0xf6 -10 } : BV:8
44 : eq(22, 21) : BOOL
45 : 32 { 0x20 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 43, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 21) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 43, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 34, 68) : BV:8
70 : ite(59, 31, 69) : BV:8
71 : ite(58, 28, 70) : BV:8
72 : ite(57, 25, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 20, 21) : BV:32
75 : eq(74, 23) : BOOL
76 : eq(74, 26) : BOOL
77 : eq(74, 29) : BOOL
78 : eq(74, 32) : BOOL
79 : eq(74, 35) : BOOL
80 : eq(74, 38) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 21) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 43, 83) : BV:8
85 : ite(80, 40, 84) : BV:8
86 : ite(79, 37, 85) : BV:8
87 : ite(78, 34, 86) : BV:8
88 : ite(77, 31, 87) : BV:8
89 : ite(76, 28, 88) : BV:8
90 : ite(75, 25, 89) : BV:8
91 : bvadd(20, 21) : BV:32
92 : eq(91, 23) : BOOL
93 : eq(91, 26) : BOOL
94 : eq(91, 29) : BOOL
95 : eq(91, 32) : BOOL
96 : eq(91, 35) : BOOL
97 : eq(91, 38) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 21) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 43, 100) : BV:8
102 : ite(97, 40, 101) : BV:8
103 : ite(96, 37, 102) : BV:8
104 : ite(95, 34, 103) : BV:8
105 : ite(94, 31, 104) : BV:8
106 : ite(93, 28, 105) : BV:8
107 : ite(92, 25, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(18, 19, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda38753Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda38754Var : BV:32
20 : eq(19, 4) : BOOL
21 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
22 : bvmul(10, 19) : BV:32
23 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
24 : bvadd(6, 22, 23) : BV:32
25 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
26 : eq(24, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
29 : eq(24, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
32 : eq(24, 31) : BOOL
33 : 2 { 0x2 } : BV:8
34 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 193 { 0xc1 -63 } : BV:8
37 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 100 { 0x64 } : BV:8
40 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 54 { 0x36 } : BV:8
43 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 246 { 0xf6 -10 } : BV:8
46 : eq(24, 23) : BOOL
47 : 32 { 0x20 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(41, 42, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(35, 36, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : ite(26, 27, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 22, 23) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 43) : BOOL
66 : eq(58, 23) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 45, 67) : BV:8
69 : ite(64, 42, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 33, 71) : BV:8
73 : ite(60, 30, 72) : BV:8
74 : ite(59, 27, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 22, 23) : BV:32
77 : eq(76, 25) : BOOL
78 : eq(76, 28) : BOOL
79 : eq(76, 31) : BOOL
80 : eq(76, 34) : BOOL
81 : eq(76, 37) : BOOL
82 : eq(76, 40) : BOOL
83 : eq(76, 43) : BOOL
84 : eq(76, 23) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 45, 85) : BV:8
87 : ite(82, 42, 86) : BV:8
88 : ite(81, 39, 87) : BV:8
89 : ite(80, 36, 88) : BV:8
90 : ite(79, 33, 89) : BV:8
91 : ite(78, 30, 90) : BV:8
92 : ite(77, 27, 91) : BV:8
93 : bvadd(22, 23) : BV:32
94 : eq(93, 25) : BOOL
95 : eq(93, 28) : BOOL
96 : eq(93, 31) : BOOL
97 : eq(93, 34) : BOOL
98 : eq(93, 37) : BOOL
99 : eq(93, 40) : BOOL
100 : eq(93, 43) : BOOL
101 : eq(93, 23) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 45, 102) : BV:8
104 : ite(99, 42, 103) : BV:8
105 : ite(98, 39, 104) : BV:8
106 : ite(97, 36, 105) : BV:8
107 : ite(96, 33, 106) : BV:8
108 : ite(95, 30, 107) : BV:8
109 : ite(94, 27, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(20, 21, 110) : BV:32
112 : lambda(19, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(18, 112) : MAP[BV:32 -> BV:32]
114 : sum(1, 2, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 983251510 { 0x3a9b3a36 +1.21271395e246 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda38776Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda38777Var : BV:32
18 : eq(17, 2) : BOOL
19 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
24 : eq(22, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
27 : eq(22, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
30 : eq(22, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
33 : eq(22, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
36 : eq(22, 35) : BOOL
37 : 100 { 0x64 } : BV:8
38 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : 54 { 0x36 } : BV:8
41 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
42 : eq(22, 41) : BOOL
43 : 246 { 0xf6 -10 } : BV:8
44 : eq(22, 21) : BOOL
45 : 32 { 0x20 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(42, 43, 47) : BV:8
49 : ite(39, 40, 48) : BV:8
50 : ite(36, 37, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 21) : BOOL
65 : ite(64, 45, 46) : BV:8
66 : ite(63, 43, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 34, 68) : BV:8
70 : ite(59, 31, 69) : BV:8
71 : ite(58, 28, 70) : BV:8
72 : ite(57, 25, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 20, 21) : BV:32
75 : eq(74, 23) : BOOL
76 : eq(74, 26) : BOOL
77 : eq(74, 29) : BOOL
78 : eq(74, 32) : BOOL
79 : eq(74, 35) : BOOL
80 : eq(74, 38) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 21) : BOOL
83 : ite(82, 45, 46) : BV:8
84 : ite(81, 43, 83) : BV:8
85 : ite(80, 40, 84) : BV:8
86 : ite(79, 37, 85) : BV:8
87 : ite(78, 34, 86) : BV:8
88 : ite(77, 31, 87) : BV:8
89 : ite(76, 28, 88) : BV:8
90 : ite(75, 25, 89) : BV:8
91 : bvadd(20, 21) : BV:32
92 : eq(91, 23) : BOOL
93 : eq(91, 26) : BOOL
94 : eq(91, 29) : BOOL
95 : eq(91, 32) : BOOL
96 : eq(91, 35) : BOOL
97 : eq(91, 38) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 21) : BOOL
100 : ite(99, 45, 46) : BV:8
101 : ite(98, 43, 100) : BV:8
102 : ite(97, 40, 101) : BV:8
103 : ite(96, 37, 102) : BV:8
104 : ite(95, 34, 103) : BV:8
105 : ite(94, 31, 104) : BV:8
106 : ite(93, 28, 105) : BV:8
107 : ite(92, 25, 106) : BV:8
108 : bvconcat(54, 72, 90, 107) : BV:32
109 : ite(18, 19, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 577107446 { 0x2265f5f6 +1.79656863e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8404996 { 0x804004 +1.195360e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 8404999 { 0x804007 +1.195395e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 536904704 { 0x20008400 +1.402832e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 536904707 { 0x20008403 +1.402867e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2298112704 { 0x88fa6ac0 -1996854592 -1.95638275e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2298112707 { 0x88fa6ac3 -1996854589 -1.95638310e146 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda38667Var : BV:32
2 : Lambda38668Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
20 : eq(12, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 193 { 0xc1 -63 } : BV:8
25 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
26 : eq(12, 25) : BOOL
27 : 100 { 0x64 } : BV:8
28 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
29 : eq(12, 28) : BOOL
30 : 54 { 0x36 } : BV:8
31 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 246 { 0xf6 -10 } : BV:8
34 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
35 : eq(12, 34) : BOOL
36 : 32 { 0x20 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
47 : bvadd(46, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
65 : bvadd(64, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
83 : bvadd(82, 11) : BV:32
84 : eq(83, 13) : BOOL
85 : eq(83, 16) : BOOL
86 : eq(83, 19) : BOOL
87 : eq(83, 22) : BOOL
88 : eq(83, 25) : BOOL
89 : eq(83, 28) : BOOL
90 : eq(83, 31) : BOOL
91 : eq(83, 34) : BOOL
92 : ite(91, 36, 37) : BV:8
93 : ite(90, 33, 92) : BV:8
94 : ite(89, 30, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : ite(87, 24, 95) : BV:8
97 : ite(86, 21, 96) : BV:8
98 : ite(85, 18, 97) : BV:8
99 : ite(84, 15, 98) : BV:8
100 : bvconcat(45, 63, 81, 99) : BV:32
101 : bvadd(7, 9, 100) : BV:32
102 : eq(101, 13) : BOOL
103 : eq(101, 16) : BOOL
104 : eq(101, 19) : BOOL
105 : eq(101, 22) : BOOL
106 : eq(101, 25) : BOOL
107 : eq(101, 28) : BOOL
108 : eq(101, 31) : BOOL
109 : eq(101, 34) : BOOL
110 : ite(109, 36, 37) : BV:8
111 : ite(108, 33, 110) : BV:8
112 : ite(107, 30, 111) : BV:8
113 : ite(106, 27, 112) : BV:8
114 : ite(105, 24, 113) : BV:8
115 : ite(104, 21, 114) : BV:8
116 : ite(103, 18, 115) : BV:8
117 : ite(102, 15, 116) : BV:8
118 : 2 { 0x2 +1.23e129 } : BV:32
119 : bvadd(118, 9, 100) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 16) : BOOL
122 : eq(119, 19) : BOOL
123 : eq(119, 22) : BOOL
124 : eq(119, 25) : BOOL
125 : eq(119, 28) : BOOL
126 : eq(119, 31) : BOOL
127 : eq(119, 34) : BOOL
128 : ite(127, 36, 37) : BV:8
129 : ite(126, 33, 128) : BV:8
130 : ite(125, 30, 129) : BV:8
131 : ite(124, 27, 130) : BV:8
132 : ite(123, 24, 131) : BV:8
133 : ite(122, 21, 132) : BV:8
134 : ite(121, 18, 133) : BV:8
135 : ite(120, 15, 134) : BV:8
136 : 1 { 0x1 +1.11e129 } : BV:32
137 : bvadd(136, 9, 100) : BV:32
138 : eq(137, 13) : BOOL
139 : eq(137, 16) : BOOL
140 : eq(137, 19) : BOOL
141 : eq(137, 22) : BOOL
142 : eq(137, 25) : BOOL
143 : eq(137, 28) : BOOL
144 : eq(137, 31) : BOOL
145 : eq(137, 34) : BOOL
146 : ite(145, 36, 37) : BV:8
147 : ite(144, 33, 146) : BV:8
148 : ite(143, 30, 147) : BV:8
149 : ite(142, 27, 148) : BV:8
150 : ite(141, 24, 149) : BV:8
151 : ite(140, 21, 150) : BV:8
152 : ite(139, 18, 151) : BV:8
153 : ite(138, 15, 152) : BV:8
154 : bvadd(9, 100) : BV:32
155 : eq(154, 13) : BOOL
156 : eq(154, 16) : BOOL
157 : eq(154, 19) : BOOL
158 : eq(154, 22) : BOOL
159 : eq(154, 25) : BOOL
160 : eq(154, 28) : BOOL
161 : eq(154, 31) : BOOL
162 : eq(154, 34) : BOOL
163 : ite(162, 36, 37) : BV:8
164 : ite(161, 33, 163) : BV:8
165 : ite(160, 30, 164) : BV:8
166 : ite(159, 27, 165) : BV:8
167 : ite(158, 24, 166) : BV:8
168 : ite(157, 21, 167) : BV:8
169 : ite(156, 18, 168) : BV:8
170 : ite(155, 15, 169) : BV:8
171 : bvconcat(117, 135, 153, 170) : BV:32
172 : ite(6, 3, 171) : BV:32
173 : lambda(1, 2, 172) : FUNCTION[BV:32,BV:32 -> BV:32]
174 : sym_const(173) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda38669Var : BV:32
2 : Lambda38670Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
12 : bvule(11, 1) : BOOL
13 : bvule(1, 11) : BOOL
14 : and(12, 13) : BOOL
15 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : ite(19, 15, 15) : BV:32
21 : ite(14, 11, 20) : BV:32
22 : ite(10, 3, 21) : BV:32
23 : eq(22, 3) : BOOL
24 : bvule(3, 2) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(2, 25) : BOOL
27 : and(24, 26) : BOOL
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 17) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 28, 36) : BV:32
38 : ite(27, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(23, 39) : BOOL
41 : 1 { 0x1 } : BOOL
42 : 0 { 0x0 } : BOOL
43 : ite(40, 41, 42) : BOOL
44 : and(12, 18) : BOOL
45 : ite(44, 42, 42) : BOOL
46 : ite(10, 41, 45) : BOOL
47 : and(43, 46) : BOOL
48 : bvmul(28, 2) : BV:32
49 : 2147483663 { 0x8000000f -2147483633 -1.178e129 } : BV:32
50 : bvmul(28, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
53 : eq(51, 52) : BOOL
54 : 4 { 0x4 } : BV:8
55 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
56 : eq(51, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
59 : eq(51, 58) : BOOL
60 : 2 { 0x2 } : BV:8
61 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
62 : eq(51, 61) : BOOL
63 : 193 { 0xc1 -63 } : BV:8
64 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
65 : eq(51, 64) : BOOL
66 : 100 { 0x64 } : BV:8
67 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
68 : eq(51, 67) : BOOL
69 : 54 { 0x36 } : BV:8
70 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
71 : eq(51, 70) : BOOL
72 : 246 { 0xf6 -10 } : BV:8
73 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
74 : eq(51, 73) : BOOL
75 : 32 { 0x20 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(56, 57, 82) : BV:8
84 : ite(53, 54, 83) : BV:8
85 : 2147483662 { 0x8000000e -2147483634 -1.166e129 } : BV:32
86 : bvadd(85, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 58) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : eq(86, 67) : BOOL
93 : eq(86, 70) : BOOL
94 : eq(86, 73) : BOOL
95 : ite(94, 75, 76) : BV:8
96 : ite(93, 72, 95) : BV:8
97 : ite(92, 69, 96) : BV:8
98 : ite(91, 66, 97) : BV:8
99 : ite(90, 63, 98) : BV:8
100 : ite(89, 60, 99) : BV:8
101 : ite(88, 57, 100) : BV:8
102 : ite(87, 54, 101) : BV:8
103 : 2147483661 { 0x8000000d -2147483635 -1.154e129 } : BV:32
104 : bvadd(103, 50) : BV:32
105 : eq(104, 52) : BOOL
106 : eq(104, 55) : BOOL
107 : eq(104, 58) : BOOL
108 : eq(104, 61) : BOOL
109 : eq(104, 64) : BOOL
110 : eq(104, 67) : BOOL
111 : eq(104, 70) : BOOL
112 : eq(104, 73) : BOOL
113 : ite(112, 75, 76) : BV:8
114 : ite(111, 72, 113) : BV:8
115 : ite(110, 69, 114) : BV:8
116 : ite(109, 66, 115) : BV:8
117 : ite(108, 63, 116) : BV:8
118 : ite(107, 60, 117) : BV:8
119 : ite(106, 57, 118) : BV:8
120 : ite(105, 54, 119) : BV:8
121 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
122 : bvadd(121, 50) : BV:32
123 : eq(122, 52) : BOOL
124 : eq(122, 55) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : eq(122, 67) : BOOL
129 : eq(122, 70) : BOOL
130 : eq(122, 73) : BOOL
131 : ite(130, 75, 76) : BV:8
132 : ite(129, 72, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 66, 133) : BV:8
135 : ite(126, 63, 134) : BV:8
136 : ite(125, 60, 135) : BV:8
137 : ite(124, 57, 136) : BV:8
138 : ite(123, 54, 137) : BV:8
139 : bvconcat(84, 102, 120, 138) : BV:32
140 : bvadd(25, 48, 139) : BV:32
141 : eq(140, 52) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 61) : BOOL
145 : eq(140, 64) : BOOL
146 : eq(140, 67) : BOOL
147 : eq(140, 70) : BOOL
148 : eq(140, 73) : BOOL
149 : ite(148, 75, 76) : BV:8
150 : ite(147, 72, 149) : BV:8
151 : ite(146, 69, 150) : BV:8
152 : ite(145, 66, 151) : BV:8
153 : ite(144, 63, 152) : BV:8
154 : ite(143, 60, 153) : BV:8
155 : ite(142, 57, 154) : BV:8
156 : ite(141, 54, 155) : BV:8
157 : 2 { 0x2 +1.23e129 } : BV:32
158 : bvadd(157, 48, 139) : BV:32
159 : eq(158, 52) : BOOL
160 : eq(158, 55) : BOOL
161 : eq(158, 58) : BOOL
162 : eq(158, 61) : BOOL
163 : eq(158, 64) : BOOL
164 : eq(158, 67) : BOOL
165 : eq(158, 70) : BOOL
166 : eq(158, 73) : BOOL
167 : ite(166, 75, 76) : BV:8
168 : ite(165, 72, 167) : BV:8
169 : ite(164, 69, 168) : BV:8
170 : ite(163, 66, 169) : BV:8
171 : ite(162, 63, 170) : BV:8
172 : ite(161, 60, 171) : BV:8
173 : ite(160, 57, 172) : BV:8
174 : ite(159, 54, 173) : BV:8
175 : 1 { 0x1 +1.11e129 } : BV:32
176 : bvadd(175, 48, 139) : BV:32
177 : eq(176, 52) : BOOL
178 : eq(176, 55) : BOOL
179 : eq(176, 58) : BOOL
180 : eq(176, 61) : BOOL
181 : eq(176, 64) : BOOL
182 : eq(176, 67) : BOOL
183 : eq(176, 70) : BOOL
184 : eq(176, 73) : BOOL
185 : ite(184, 75, 76) : BV:8
186 : ite(183, 72, 185) : BV:8
187 : ite(182, 69, 186) : BV:8
188 : ite(181, 66, 187) : BV:8
189 : ite(180, 63, 188) : BV:8
190 : ite(179, 60, 189) : BV:8
191 : ite(178, 57, 190) : BV:8
192 : ite(177, 54, 191) : BV:8
193 : bvadd(48, 139) : BV:32
194 : eq(193, 52) : BOOL
195 : eq(193, 55) : BOOL
196 : eq(193, 58) : BOOL
197 : eq(193, 61) : BOOL
198 : eq(193, 64) : BOOL
199 : eq(193, 67) : BOOL
200 : eq(193, 70) : BOOL
201 : eq(193, 73) : BOOL
202 : ite(201, 75, 76) : BV:8
203 : ite(200, 72, 202) : BV:8
204 : ite(199, 69, 203) : BV:8
205 : ite(198, 66, 204) : BV:8
206 : ite(197, 63, 205) : BV:8
207 : ite(196, 60, 206) : BV:8
208 : ite(195, 57, 207) : BV:8
209 : ite(194, 54, 208) : BV:8
210 : bvconcat(156, 174, 192, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(47, 210, 211) : BV:32
213 : ite(6, 3, 212) : BV:32
214 : lambda(1, 2, 213) : FUNCTION[BV:32,BV:32 -> BV:32]
215 : sym_const(214) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda38671Var : BV:32
2 : Lambda38672Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda38681Var : BV:32
2 : Lambda38682Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda38688Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2 { 0x2 } : BV:8
19 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 193 { 0xc1 -63 } : BV:8
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 100 { 0x64 } : BV:8
25 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 54 { 0x36 } : BV:8
28 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 246 { 0xf6 -10 } : BV:8
31 : eq(9, 8) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 8) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 28) : BOOL
69 : eq(61, 8) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 28) : BOOL
86 : eq(78, 8) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 30, 87) : BV:8
89 : ite(84, 27, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda38692Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2 { 0x2 } : BV:8
19 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 193 { 0xc1 -63 } : BV:8
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 100 { 0x64 } : BV:8
25 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 54 { 0x36 } : BV:8
28 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 246 { 0xf6 -10 } : BV:8
31 : eq(9, 8) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 8) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 28) : BOOL
69 : eq(61, 8) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 28) : BOOL
86 : eq(78, 8) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 30, 87) : BV:8
89 : ite(84, 27, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda38696Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 75498016 { 0x4800220 +1.6484e138 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3254138468 { 0xc1f63664 -1040828828 -1.92353487e4 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3254138471 { 0xc1f63667 -1040828825 -1.92353522e4 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 3254138470 { 0xc1f63666 -1040828826 -1.92353510e4 } : BV:32
14 : eq(9, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3254138469 { 0xc1f63665 -1040828827 -1.92353498e4 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2 { 0x2 } : BV:8
19 : 2147483659 { 0x8000000b -2147483637 -1.131e129 } : BV:32
20 : eq(9, 19) : BOOL
21 : 193 { 0xc1 -63 } : BV:8
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(9, 22) : BOOL
24 : 100 { 0x64 } : BV:8
25 : 2147483657 { 0x80000009 -2147483639 -1.107e129 } : BV:32
26 : eq(9, 25) : BOOL
27 : 54 { 0x36 } : BV:8
28 : 2147483658 { 0x8000000a -2147483638 -1.119e129 } : BV:32
29 : eq(9, 28) : BOOL
30 : 246 { 0xf6 -10 } : BV:8
31 : eq(9, 8) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 8) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 28) : BOOL
69 : eq(61, 8) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 28) : BOOL
86 : eq(78, 8) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 30, 87) : BV:8
89 : ite(84, 27, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
70418392
=counter_example_end
=global nodece 53 num_edges_traversed 2
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3.ce4205.num_edges_traversed1
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce4205 c233d3247d95fd1472c98c8094194d
=input.spec-%var-x-1
1 : Lambda39503Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39504Var : BV:32
18 : Lambda39505Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39506Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 185 { 0xb9 -71 } : BV:8
82 : eq(79, 10) : BOOL
83 : 64 { 0x40 } : BV:8
84 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
85 : eq(79, 84) : BOOL
86 : 16 { 0x10 } : BV:8
87 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 189 { 0xbd -67 } : BV:8
90 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
91 : eq(79, 90) : BOOL
92 : 174 { 0xae -82 } : BV:8
93 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
94 : eq(79, 93) : BOOL
95 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
96 : eq(79, 95) : BOOL
97 : 136 { 0x88 -120 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(94, 89, 99) : BV:8
101 : ite(91, 92, 100) : BV:8
102 : ite(88, 89, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : ite(80, 81, 104) : BV:8
106 : bvadd(90, 78) : BV:32
107 : eq(106, 77) : BOOL
108 : eq(106, 10) : BOOL
109 : eq(106, 84) : BOOL
110 : eq(106, 87) : BOOL
111 : eq(106, 90) : BOOL
112 : eq(106, 93) : BOOL
113 : eq(106, 95) : BOOL
114 : ite(113, 97, 98) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : ite(107, 81, 119) : BV:8
121 : bvadd(93, 78) : BV:32
122 : eq(121, 77) : BOOL
123 : eq(121, 10) : BOOL
124 : eq(121, 84) : BOOL
125 : eq(121, 87) : BOOL
126 : eq(121, 90) : BOOL
127 : eq(121, 93) : BOOL
128 : eq(121, 95) : BOOL
129 : ite(128, 97, 98) : BV:8
130 : ite(127, 89, 129) : BV:8
131 : ite(126, 92, 130) : BV:8
132 : ite(125, 89, 131) : BV:8
133 : ite(124, 86, 132) : BV:8
134 : ite(123, 83, 133) : BV:8
135 : ite(122, 81, 134) : BV:8
136 : bvadd(87, 78) : BV:32
137 : eq(136, 77) : BOOL
138 : eq(136, 10) : BOOL
139 : eq(136, 84) : BOOL
140 : eq(136, 87) : BOOL
141 : eq(136, 90) : BOOL
142 : eq(136, 93) : BOOL
143 : eq(136, 95) : BOOL
144 : ite(143, 97, 98) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 86, 147) : BV:8
149 : ite(138, 83, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(105, 120, 135, 150) : BV:32
152 : bvadd(74, 76, 151) : BV:32
153 : eq(152, 77) : BOOL
154 : eq(152, 10) : BOOL
155 : eq(152, 84) : BOOL
156 : eq(152, 87) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 95) : BOOL
160 : ite(159, 97, 98) : BV:8
161 : ite(158, 89, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 86, 163) : BV:8
165 : ite(154, 83, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(40, 76, 151) : BV:32
168 : eq(167, 77) : BOOL
169 : eq(167, 10) : BOOL
170 : eq(167, 84) : BOOL
171 : eq(167, 87) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 95) : BOOL
175 : ite(174, 97, 98) : BV:8
176 : ite(173, 89, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 86, 178) : BV:8
180 : ite(169, 83, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(36, 76, 151) : BV:32
183 : eq(182, 77) : BOOL
184 : eq(182, 10) : BOOL
185 : eq(182, 84) : BOOL
186 : eq(182, 87) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 95) : BOOL
190 : ite(189, 97, 98) : BV:8
191 : ite(188, 89, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 86, 193) : BV:8
195 : ite(184, 83, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(76, 151) : BV:32
198 : eq(197, 77) : BOOL
199 : eq(197, 10) : BOOL
200 : eq(197, 84) : BOOL
201 : eq(197, 87) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 95) : BOOL
205 : ite(204, 97, 98) : BV:8
206 : ite(203, 89, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 86, 208) : BV:8
210 : ite(199, 83, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(54, 2, 212) : BV:32
214 : ite(73, 212, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : lambda(51, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(50, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39523Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39524Var : BV:32
18 : Lambda39525Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39526Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 185 { 0xb9 -71 } : BV:8
63 : eq(60, 10) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
66 : eq(60, 65) : BOOL
67 : 16 { 0x10 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 189 { 0xbd -67 } : BV:8
71 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
72 : eq(60, 71) : BOOL
73 : 174 { 0xae -82 } : BV:8
74 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
77 : eq(60, 76) : BOOL
78 : 136 { 0x88 -120 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(75, 70, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : ite(61, 62, 85) : BV:8
87 : bvadd(71, 59) : BV:32
88 : eq(87, 58) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 65) : BOOL
91 : eq(87, 68) : BOOL
92 : eq(87, 71) : BOOL
93 : eq(87, 74) : BOOL
94 : eq(87, 76) : BOOL
95 : ite(94, 78, 79) : BV:8
96 : ite(93, 70, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : ite(88, 62, 100) : BV:8
102 : bvadd(74, 59) : BV:32
103 : eq(102, 58) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 65) : BOOL
106 : eq(102, 68) : BOOL
107 : eq(102, 71) : BOOL
108 : eq(102, 74) : BOOL
109 : eq(102, 76) : BOOL
110 : ite(109, 78, 79) : BV:8
111 : ite(108, 70, 110) : BV:8
112 : ite(107, 73, 111) : BV:8
113 : ite(106, 70, 112) : BV:8
114 : ite(105, 67, 113) : BV:8
115 : ite(104, 64, 114) : BV:8
116 : ite(103, 62, 115) : BV:8
117 : bvadd(68, 59) : BV:32
118 : eq(117, 58) : BOOL
119 : eq(117, 10) : BOOL
120 : eq(117, 65) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 71) : BOOL
123 : eq(117, 74) : BOOL
124 : eq(117, 76) : BOOL
125 : ite(124, 78, 79) : BV:8
126 : ite(123, 70, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 67, 128) : BV:8
130 : ite(119, 64, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(86, 101, 116, 131) : BV:32
133 : bvadd(55, 57, 132) : BV:32
134 : eq(133, 58) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 65) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 76) : BOOL
141 : ite(140, 78, 79) : BV:8
142 : ite(139, 70, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 67, 144) : BV:8
146 : ite(135, 64, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(40, 57, 132) : BV:32
149 : eq(148, 58) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 65) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 76) : BOOL
156 : ite(155, 78, 79) : BV:8
157 : ite(154, 70, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 67, 159) : BV:8
161 : ite(150, 64, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(36, 57, 132) : BV:32
164 : eq(163, 58) : BOOL
165 : eq(163, 10) : BOOL
166 : eq(163, 65) : BOOL
167 : eq(163, 68) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 76) : BOOL
171 : ite(170, 78, 79) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 67, 174) : BV:8
176 : ite(165, 64, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(57, 132) : BV:32
179 : eq(178, 58) : BOOL
180 : eq(178, 10) : BOOL
181 : eq(178, 65) : BOOL
182 : eq(178, 68) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 76) : BOOL
186 : ite(185, 78, 79) : BV:8
187 : ite(184, 70, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 67, 189) : BV:8
191 : ite(180, 64, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(54, 2, 193) : BV:32
195 : lambda(51, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(50, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741959 ] -> 0, [ 1073741960; 1073741960 ] -> 16, [ 1073741961; 2147483647 ] -> 0, [ 2147483648; 2147483649 ] -> 189, [ 2147483650; 2147483650 ] -> 174, [ 2147483651; 2147483651 ] -> 185, [ 2147483652; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 136, [ 4294967293; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 64, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 64995323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64995324; 64995327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 64995328; 3118841719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3118841720; 3118841723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3118841724; 3119218043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3119218044; 3119218047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3119218048; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.llvm-%n
1 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39530Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda39531Var : BV:32
17 : eq(16, 2) : BOOL
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 16) : BV:32
22 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 185 { 0xb9 -71 } : BV:8
27 : eq(23, 9) : BOOL
28 : 64 { 0x40 } : BV:8
29 : eq(23, 22) : BOOL
30 : 16 { 0x10 } : BV:8
31 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
32 : eq(23, 31) : BOOL
33 : 189 { 0xbd -67 } : BV:8
34 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
35 : eq(23, 34) : BOOL
36 : 174 { 0xae -82 } : BV:8
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : eq(23, 37) : BOOL
39 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
40 : eq(23, 39) : BOOL
41 : 136 { 0x88 -120 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(38, 33, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : ite(27, 28, 47) : BV:8
49 : ite(25, 26, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 21, 22) : BV:32
52 : eq(51, 24) : BOOL
53 : eq(51, 9) : BOOL
54 : eq(51, 22) : BOOL
55 : eq(51, 31) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 39) : BOOL
59 : ite(58, 41, 42) : BV:8
60 : ite(57, 33, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 30, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 26, 64) : BV:8
66 : bvadd(7, 21, 22) : BV:32
67 : eq(66, 24) : BOOL
68 : eq(66, 9) : BOOL
69 : eq(66, 22) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 39) : BOOL
74 : ite(73, 41, 42) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 30, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 24) : BOOL
83 : eq(81, 9) : BOOL
84 : eq(81, 22) : BOOL
85 : eq(81, 31) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 39) : BOOL
89 : ite(88, 41, 42) : BV:8
90 : ite(87, 33, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 30, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 26, 94) : BV:8
96 : bvconcat(49, 65, 80, 95) : BV:32
97 : ite(17, 18, 96) : BV:32
98 : lambda(16, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(15, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : unit : UNIT
3 : Lambda39512Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda39513Var : BV:32
19 : eq(18, 4) : BOOL
20 : 16 { 0x10 +1.190e129 } : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(1, 18) : BV:32
23 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 185 { 0xb9 -71 } : BV:8
28 : eq(24, 11) : BOOL
29 : 64 { 0x40 } : BV:8
30 : eq(24, 23) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
33 : eq(24, 32) : BOOL
34 : 189 { 0xbd -67 } : BV:8
35 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
36 : eq(24, 35) : BOOL
37 : 174 { 0xae -82 } : BV:8
38 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
39 : eq(24, 38) : BOOL
40 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
41 : eq(24, 40) : BOOL
42 : 136 { 0x88 -120 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 34, 44) : BV:8
46 : ite(36, 37, 45) : BV:8
47 : ite(33, 34, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(26, 27, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 22, 23) : BV:32
53 : eq(52, 25) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 23) : BOOL
56 : eq(52, 32) : BOOL
57 : eq(52, 35) : BOOL
58 : eq(52, 38) : BOOL
59 : eq(52, 40) : BOOL
60 : ite(59, 42, 43) : BV:8
61 : ite(58, 34, 60) : BV:8
62 : ite(57, 37, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : ite(55, 31, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : ite(53, 27, 65) : BV:8
67 : bvadd(9, 22, 23) : BV:32
68 : eq(67, 25) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 23) : BOOL
71 : eq(67, 32) : BOOL
72 : eq(67, 35) : BOOL
73 : eq(67, 38) : BOOL
74 : eq(67, 40) : BOOL
75 : ite(74, 42, 43) : BV:8
76 : ite(73, 34, 75) : BV:8
77 : ite(72, 37, 76) : BV:8
78 : ite(71, 34, 77) : BV:8
79 : ite(70, 31, 78) : BV:8
80 : ite(69, 29, 79) : BV:8
81 : ite(68, 27, 80) : BV:8
82 : bvadd(22, 23) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 11) : BOOL
85 : eq(82, 23) : BOOL
86 : eq(82, 32) : BOOL
87 : eq(82, 35) : BOOL
88 : eq(82, 38) : BOOL
89 : eq(82, 40) : BOOL
90 : ite(89, 42, 43) : BV:8
91 : ite(88, 34, 90) : BV:8
92 : ite(87, 37, 91) : BV:8
93 : ite(86, 34, 92) : BV:8
94 : ite(85, 31, 93) : BV:8
95 : ite(84, 29, 94) : BV:8
96 : ite(83, 27, 95) : BV:8
97 : bvconcat(50, 66, 81, 96) : BV:32
98 : ite(19, 20, 97) : BV:32
99 : lambda(18, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(17, 99) : MAP[BV:32 -> BV:32]
101 : sum(1, 2, 100) : SUM[UNIT,MAP[BV:32 -> BV:32]]
102 : sym_const(101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : eq(1, 1) : BOOL
16 : 16 { 0x10 +1.190e129 } : BV:32
17 : 3 { 0x3 +1.35e129 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
21 : bvadd(17, 19, 20) : BV:32
22 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 185 { 0xb9 -71 } : BV:8
25 : eq(21, 7) : BOOL
26 : 64 { 0x40 } : BV:8
27 : eq(21, 20) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : eq(21, 29) : BOOL
31 : 189 { 0xbd -67 } : BV:8
32 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
33 : eq(21, 32) : BOOL
34 : 174 { 0xae -82 } : BV:8
35 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
36 : eq(21, 35) : BOOL
37 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
38 : eq(21, 37) : BOOL
39 : 136 { 0x88 -120 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 31, 41) : BV:8
43 : ite(33, 34, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(25, 26, 45) : BV:8
47 : ite(23, 24, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 19, 20) : BV:32
50 : eq(49, 22) : BOOL
51 : eq(49, 7) : BOOL
52 : eq(49, 20) : BOOL
53 : eq(49, 29) : BOOL
54 : eq(49, 32) : BOOL
55 : eq(49, 35) : BOOL
56 : eq(49, 37) : BOOL
57 : ite(56, 39, 40) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 34, 58) : BV:8
60 : ite(53, 31, 59) : BV:8
61 : ite(52, 28, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : ite(50, 24, 62) : BV:8
64 : bvadd(5, 19, 20) : BV:32
65 : eq(64, 22) : BOOL
66 : eq(64, 7) : BOOL
67 : eq(64, 20) : BOOL
68 : eq(64, 29) : BOOL
69 : eq(64, 32) : BOOL
70 : eq(64, 35) : BOOL
71 : eq(64, 37) : BOOL
72 : ite(71, 39, 40) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 31, 74) : BV:8
76 : ite(67, 28, 75) : BV:8
77 : ite(66, 26, 76) : BV:8
78 : ite(65, 24, 77) : BV:8
79 : bvadd(19, 20) : BV:32
80 : eq(79, 22) : BOOL
81 : eq(79, 7) : BOOL
82 : eq(79, 20) : BOOL
83 : eq(79, 29) : BOOL
84 : eq(79, 32) : BOOL
85 : eq(79, 35) : BOOL
86 : eq(79, 37) : BOOL
87 : ite(86, 39, 40) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 34, 88) : BV:8
90 : ite(83, 31, 89) : BV:8
91 : ite(82, 28, 90) : BV:8
92 : ite(81, 26, 91) : BV:8
93 : ite(80, 24, 92) : BV:8
94 : bvconcat(47, 63, 78, 93) : BV:32
95 : ite(15, 16, 94) : BV:32
96 : sum(13, 14, 95) : SUM[UNIT,BV:32]
97 : sym_const(96) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1174720853 { 0x4604d155 +1.3763830e13 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39535Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda39536Var : BV:32
17 : eq(16, 2) : BOOL
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 16) : BV:32
22 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 185 { 0xb9 -71 } : BV:8
27 : eq(23, 9) : BOOL
28 : 64 { 0x40 } : BV:8
29 : eq(23, 22) : BOOL
30 : 16 { 0x10 } : BV:8
31 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
32 : eq(23, 31) : BOOL
33 : 189 { 0xbd -67 } : BV:8
34 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
35 : eq(23, 34) : BOOL
36 : 174 { 0xae -82 } : BV:8
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : eq(23, 37) : BOOL
39 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
40 : eq(23, 39) : BOOL
41 : 136 { 0x88 -120 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(38, 33, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : ite(27, 28, 47) : BV:8
49 : ite(25, 26, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 21, 22) : BV:32
52 : eq(51, 24) : BOOL
53 : eq(51, 9) : BOOL
54 : eq(51, 22) : BOOL
55 : eq(51, 31) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 39) : BOOL
59 : ite(58, 41, 42) : BV:8
60 : ite(57, 33, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 30, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 26, 64) : BV:8
66 : bvadd(7, 21, 22) : BV:32
67 : eq(66, 24) : BOOL
68 : eq(66, 9) : BOOL
69 : eq(66, 22) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 39) : BOOL
74 : ite(73, 41, 42) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 30, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 26, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 24) : BOOL
83 : eq(81, 9) : BOOL
84 : eq(81, 22) : BOOL
85 : eq(81, 31) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 39) : BOOL
89 : ite(88, 41, 42) : BV:8
90 : ite(87, 33, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 30, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 26, 94) : BV:8
96 : bvconcat(49, 65, 80, 95) : BV:32
97 : ite(17, 18, 96) : BV:32
98 : lambda(16, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(15, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 587660075 { 0x2306fb2b +1.5454003e199 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 64995327 { 0x3dfbfff +1.74804675e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3118841723 { 0xb9e5bf7b -1176125573 -1.79490602e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3119218047 { 0xb9eb7d7f -1175749249 -1.83976733e244 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39395Var : BV:32
2 : Lambda39396Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 185 { 0xb9 -71 } : BV:8
55 : eq(52, 14) : BOOL
56 : 64 { 0x40 } : BV:8
57 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
58 : eq(52, 57) : BOOL
59 : 16 { 0x10 } : BV:8
60 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 189 { 0xbd -67 } : BV:8
63 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
64 : eq(52, 63) : BOOL
65 : 174 { 0xae -82 } : BV:8
66 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
67 : eq(52, 66) : BOOL
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(52, 68) : BOOL
70 : 136 { 0x88 -120 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 62, 72) : BV:8
74 : ite(64, 65, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : ite(53, 54, 77) : BV:8
79 : bvadd(63, 51) : BV:32
80 : eq(79, 50) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 57) : BOOL
83 : eq(79, 60) : BOOL
84 : eq(79, 63) : BOOL
85 : eq(79, 66) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : ite(80, 54, 92) : BV:8
94 : bvadd(66, 51) : BV:32
95 : eq(94, 50) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 60) : BOOL
99 : eq(94, 63) : BOOL
100 : eq(94, 66) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 62, 102) : BV:8
104 : ite(99, 65, 103) : BV:8
105 : ite(98, 62, 104) : BV:8
106 : ite(97, 59, 105) : BV:8
107 : ite(96, 56, 106) : BV:8
108 : ite(95, 54, 107) : BV:8
109 : bvadd(60, 51) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 14) : BOOL
112 : eq(109, 57) : BOOL
113 : eq(109, 60) : BOOL
114 : eq(109, 63) : BOOL
115 : eq(109, 66) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 59, 120) : BV:8
122 : ite(111, 56, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(47, 49, 124) : BV:32
126 : eq(125, 50) : BOOL
127 : eq(125, 14) : BOOL
128 : eq(125, 57) : BOOL
129 : eq(125, 60) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 62, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 59, 136) : BV:8
138 : ite(127, 56, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(36, 49, 124) : BV:32
141 : eq(140, 50) : BOOL
142 : eq(140, 14) : BOOL
143 : eq(140, 57) : BOOL
144 : eq(140, 60) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 62, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 59, 151) : BV:8
153 : ite(142, 56, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(32, 49, 124) : BV:32
156 : eq(155, 50) : BOOL
157 : eq(155, 14) : BOOL
158 : eq(155, 57) : BOOL
159 : eq(155, 60) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 62, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 59, 166) : BV:8
168 : ite(157, 56, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(49, 124) : BV:32
171 : eq(170, 50) : BOOL
172 : eq(170, 14) : BOOL
173 : eq(170, 57) : BOOL
174 : eq(170, 60) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 62, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 59, 181) : BV:8
183 : ite(172, 56, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(46, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39405Var : BV:32
2 : Lambda39406Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 185 { 0xb9 -71 } : BV:8
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 16 { 0x10 } : BV:8
21 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 189 { 0xbd -67 } : BV:8
24 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 174 { 0xae -82 } : BV:8
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 136 { 0x88 -120 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : bvadd(24, 11) : BV:32
41 : eq(40, 10) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : eq(40, 21) : BOOL
45 : eq(40, 24) : BOOL
46 : eq(40, 27) : BOOL
47 : eq(40, 29) : BOOL
48 : ite(47, 31, 32) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 26, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : ite(43, 20, 51) : BV:8
53 : ite(42, 17, 52) : BV:8
54 : ite(41, 14, 53) : BV:8
55 : bvadd(27, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : eq(55, 27) : BOOL
62 : eq(55, 29) : BOOL
63 : ite(62, 31, 32) : BV:8
64 : ite(61, 23, 63) : BV:8
65 : ite(60, 26, 64) : BV:8
66 : ite(59, 23, 65) : BV:8
67 : ite(58, 20, 66) : BV:8
68 : ite(57, 17, 67) : BV:8
69 : ite(56, 14, 68) : BV:8
70 : bvadd(21, 11) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 15) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : eq(70, 24) : BOOL
76 : eq(70, 27) : BOOL
77 : eq(70, 29) : BOOL
78 : ite(77, 31, 32) : BV:8
79 : ite(76, 23, 78) : BV:8
80 : ite(75, 26, 79) : BV:8
81 : ite(74, 23, 80) : BV:8
82 : ite(73, 20, 81) : BV:8
83 : ite(72, 17, 82) : BV:8
84 : ite(71, 14, 83) : BV:8
85 : bvconcat(39, 54, 69, 84) : BV:32
86 : bvadd(7, 9, 85) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 29) : BOOL
94 : ite(93, 31, 32) : BV:8
95 : ite(92, 23, 94) : BV:8
96 : ite(91, 26, 95) : BV:8
97 : ite(90, 23, 96) : BV:8
98 : ite(89, 20, 97) : BV:8
99 : ite(88, 17, 98) : BV:8
100 : ite(87, 14, 99) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 9, 85) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : eq(102, 27) : BOOL
109 : eq(102, 29) : BOOL
110 : ite(109, 31, 32) : BV:8
111 : ite(108, 23, 110) : BV:8
112 : ite(107, 26, 111) : BV:8
113 : ite(106, 23, 112) : BV:8
114 : ite(105, 20, 113) : BV:8
115 : ite(104, 17, 114) : BV:8
116 : ite(103, 14, 115) : BV:8
117 : 1 { 0x1 +1.11e129 } : BV:32
118 : bvadd(117, 9, 85) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 29) : BOOL
126 : ite(125, 31, 32) : BV:8
127 : ite(124, 23, 126) : BV:8
128 : ite(123, 26, 127) : BV:8
129 : ite(122, 23, 128) : BV:8
130 : ite(121, 20, 129) : BV:8
131 : ite(120, 17, 130) : BV:8
132 : ite(119, 14, 131) : BV:8
133 : bvadd(9, 85) : BV:32
134 : eq(133, 10) : BOOL
135 : eq(133, 15) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 29) : BOOL
141 : ite(140, 31, 32) : BV:8
142 : ite(139, 23, 141) : BV:8
143 : ite(138, 26, 142) : BV:8
144 : ite(137, 23, 143) : BV:8
145 : ite(136, 20, 144) : BV:8
146 : ite(135, 17, 145) : BV:8
147 : ite(134, 14, 146) : BV:8
148 : bvconcat(100, 116, 132, 147) : BV:32
149 : ite(6, 3, 148) : BV:32
150 : lambda(1, 2, 149) : FUNCTION[BV:32,BV:32 -> BV:32]
151 : sym_const(150) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39409Var : BV:32
2 : Lambda39410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39400Var : BV:32
2 : Lambda39401Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda39416Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda39420Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda39424Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2578097535
=counter_example_end
=global nodece 54 num_edges_traversed 1
=global nodece 54 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce4241.num_edges_traversed3
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce4241 d7aa4740b96d3670ab575c2bec5a1656
=input.spec-%var-x-1
1 : Lambda39503Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39504Var : BV:32
18 : Lambda39505Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39506Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 185 { 0xb9 -71 } : BV:8
82 : eq(79, 10) : BOOL
83 : 64 { 0x40 } : BV:8
84 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
85 : eq(79, 84) : BOOL
86 : 16 { 0x10 } : BV:8
87 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 189 { 0xbd -67 } : BV:8
90 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
91 : eq(79, 90) : BOOL
92 : 174 { 0xae -82 } : BV:8
93 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
94 : eq(79, 93) : BOOL
95 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
96 : eq(79, 95) : BOOL
97 : 136 { 0x88 -120 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(94, 89, 99) : BV:8
101 : ite(91, 92, 100) : BV:8
102 : ite(88, 89, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : ite(80, 81, 104) : BV:8
106 : bvadd(90, 78) : BV:32
107 : eq(106, 77) : BOOL
108 : eq(106, 10) : BOOL
109 : eq(106, 84) : BOOL
110 : eq(106, 87) : BOOL
111 : eq(106, 90) : BOOL
112 : eq(106, 93) : BOOL
113 : eq(106, 95) : BOOL
114 : ite(113, 97, 98) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : ite(107, 81, 119) : BV:8
121 : bvadd(93, 78) : BV:32
122 : eq(121, 77) : BOOL
123 : eq(121, 10) : BOOL
124 : eq(121, 84) : BOOL
125 : eq(121, 87) : BOOL
126 : eq(121, 90) : BOOL
127 : eq(121, 93) : BOOL
128 : eq(121, 95) : BOOL
129 : ite(128, 97, 98) : BV:8
130 : ite(127, 89, 129) : BV:8
131 : ite(126, 92, 130) : BV:8
132 : ite(125, 89, 131) : BV:8
133 : ite(124, 86, 132) : BV:8
134 : ite(123, 83, 133) : BV:8
135 : ite(122, 81, 134) : BV:8
136 : bvadd(87, 78) : BV:32
137 : eq(136, 77) : BOOL
138 : eq(136, 10) : BOOL
139 : eq(136, 84) : BOOL
140 : eq(136, 87) : BOOL
141 : eq(136, 90) : BOOL
142 : eq(136, 93) : BOOL
143 : eq(136, 95) : BOOL
144 : ite(143, 97, 98) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 86, 147) : BV:8
149 : ite(138, 83, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(105, 120, 135, 150) : BV:32
152 : bvadd(74, 76, 151) : BV:32
153 : eq(152, 77) : BOOL
154 : eq(152, 10) : BOOL
155 : eq(152, 84) : BOOL
156 : eq(152, 87) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 95) : BOOL
160 : ite(159, 97, 98) : BV:8
161 : ite(158, 89, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 86, 163) : BV:8
165 : ite(154, 83, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(40, 76, 151) : BV:32
168 : eq(167, 77) : BOOL
169 : eq(167, 10) : BOOL
170 : eq(167, 84) : BOOL
171 : eq(167, 87) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 95) : BOOL
175 : ite(174, 97, 98) : BV:8
176 : ite(173, 89, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 86, 178) : BV:8
180 : ite(169, 83, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(36, 76, 151) : BV:32
183 : eq(182, 77) : BOOL
184 : eq(182, 10) : BOOL
185 : eq(182, 84) : BOOL
186 : eq(182, 87) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 95) : BOOL
190 : ite(189, 97, 98) : BV:8
191 : ite(188, 89, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 86, 193) : BV:8
195 : ite(184, 83, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(76, 151) : BV:32
198 : eq(197, 77) : BOOL
199 : eq(197, 10) : BOOL
200 : eq(197, 84) : BOOL
201 : eq(197, 87) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 95) : BOOL
205 : ite(204, 97, 98) : BV:8
206 : ite(203, 89, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 86, 208) : BV:8
210 : ite(199, 83, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(54, 2, 212) : BV:32
214 : ite(73, 212, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : lambda(51, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(50, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39523Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39524Var : BV:32
18 : Lambda39525Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39526Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 185 { 0xb9 -71 } : BV:8
63 : eq(60, 10) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
66 : eq(60, 65) : BOOL
67 : 16 { 0x10 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 189 { 0xbd -67 } : BV:8
71 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
72 : eq(60, 71) : BOOL
73 : 174 { 0xae -82 } : BV:8
74 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
77 : eq(60, 76) : BOOL
78 : 136 { 0x88 -120 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(75, 70, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : ite(61, 62, 85) : BV:8
87 : bvadd(71, 59) : BV:32
88 : eq(87, 58) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 65) : BOOL
91 : eq(87, 68) : BOOL
92 : eq(87, 71) : BOOL
93 : eq(87, 74) : BOOL
94 : eq(87, 76) : BOOL
95 : ite(94, 78, 79) : BV:8
96 : ite(93, 70, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : ite(88, 62, 100) : BV:8
102 : bvadd(74, 59) : BV:32
103 : eq(102, 58) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 65) : BOOL
106 : eq(102, 68) : BOOL
107 : eq(102, 71) : BOOL
108 : eq(102, 74) : BOOL
109 : eq(102, 76) : BOOL
110 : ite(109, 78, 79) : BV:8
111 : ite(108, 70, 110) : BV:8
112 : ite(107, 73, 111) : BV:8
113 : ite(106, 70, 112) : BV:8
114 : ite(105, 67, 113) : BV:8
115 : ite(104, 64, 114) : BV:8
116 : ite(103, 62, 115) : BV:8
117 : bvadd(68, 59) : BV:32
118 : eq(117, 58) : BOOL
119 : eq(117, 10) : BOOL
120 : eq(117, 65) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 71) : BOOL
123 : eq(117, 74) : BOOL
124 : eq(117, 76) : BOOL
125 : ite(124, 78, 79) : BV:8
126 : ite(123, 70, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 67, 128) : BV:8
130 : ite(119, 64, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(86, 101, 116, 131) : BV:32
133 : bvadd(55, 57, 132) : BV:32
134 : eq(133, 58) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 65) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 76) : BOOL
141 : ite(140, 78, 79) : BV:8
142 : ite(139, 70, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 67, 144) : BV:8
146 : ite(135, 64, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(40, 57, 132) : BV:32
149 : eq(148, 58) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 65) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 76) : BOOL
156 : ite(155, 78, 79) : BV:8
157 : ite(154, 70, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 67, 159) : BV:8
161 : ite(150, 64, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(36, 57, 132) : BV:32
164 : eq(163, 58) : BOOL
165 : eq(163, 10) : BOOL
166 : eq(163, 65) : BOOL
167 : eq(163, 68) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 76) : BOOL
171 : ite(170, 78, 79) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 67, 174) : BV:8
176 : ite(165, 64, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(57, 132) : BV:32
179 : eq(178, 58) : BOOL
180 : eq(178, 10) : BOOL
181 : eq(178, 65) : BOOL
182 : eq(178, 68) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 76) : BOOL
186 : ite(185, 78, 79) : BV:8
187 : ite(184, 70, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 67, 189) : BV:8
191 : ite(180, 64, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(54, 2, 193) : BV:32
195 : lambda(51, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(50, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741959 ] -> 0, [ 1073741960; 1073741960 ] -> 16, [ 1073741961; 2147483647 ] -> 0, [ 2147483648; 2147483649 ] -> 189, [ 2147483650; 2147483650 ] -> 174, [ 2147483651; 2147483651 ] -> 185, [ 2147483652; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 136, [ 4294967293; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 64, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 64995323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64995324; 64995327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 64995328; 3118841719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3118841720; 3118841723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3118841724; 3119218043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3119218044; 3119218047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3119218048; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.llvm-%n
1 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1811906023 { 0x6bff7de7 +1.99602973e88 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39736Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 536870912 { 0x20000000 +1.0e193 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda39737Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : eq(50, 48) : BOOL
52 : 185 { 0xb9 -71 } : BV:8
53 : eq(50, 14) : BOOL
54 : 64 { 0x40 } : BV:8
55 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
56 : eq(50, 55) : BOOL
57 : 16 { 0x10 } : BV:8
58 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 189 { 0xbd -67 } : BV:8
61 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
62 : eq(50, 61) : BOOL
63 : 174 { 0xae -82 } : BV:8
64 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
65 : eq(50, 64) : BOOL
66 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
67 : eq(50, 66) : BOOL
68 : 136 { 0x88 -120 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(65, 60, 70) : BV:8
72 : ite(62, 63, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : ite(56, 57, 73) : BV:8
75 : ite(53, 54, 74) : BV:8
76 : ite(51, 52, 75) : BV:8
77 : bvadd(61, 49) : BV:32
78 : eq(77, 48) : BOOL
79 : eq(77, 14) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : eq(77, 61) : BOOL
83 : eq(77, 64) : BOOL
84 : eq(77, 66) : BOOL
85 : ite(84, 68, 69) : BV:8
86 : ite(83, 60, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(81, 60, 87) : BV:8
89 : ite(80, 57, 88) : BV:8
90 : ite(79, 54, 89) : BV:8
91 : ite(78, 52, 90) : BV:8
92 : bvadd(64, 49) : BV:32
93 : eq(92, 48) : BOOL
94 : eq(92, 14) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : eq(92, 64) : BOOL
99 : eq(92, 66) : BOOL
100 : ite(99, 68, 69) : BV:8
101 : ite(98, 60, 100) : BV:8
102 : ite(97, 63, 101) : BV:8
103 : ite(96, 60, 102) : BV:8
104 : ite(95, 57, 103) : BV:8
105 : ite(94, 54, 104) : BV:8
106 : ite(93, 52, 105) : BV:8
107 : bvadd(58, 49) : BV:32
108 : eq(107, 48) : BOOL
109 : eq(107, 14) : BOOL
110 : eq(107, 55) : BOOL
111 : eq(107, 58) : BOOL
112 : eq(107, 61) : BOOL
113 : eq(107, 64) : BOOL
114 : eq(107, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 60, 115) : BV:8
117 : ite(112, 63, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 54, 119) : BV:8
121 : ite(108, 52, 120) : BV:8
122 : bvconcat(76, 91, 106, 121) : BV:32
123 : bvadd(45, 47, 122) : BV:32
124 : eq(123, 48) : BOOL
125 : eq(123, 14) : BOOL
126 : eq(123, 55) : BOOL
127 : eq(123, 58) : BOOL
128 : eq(123, 61) : BOOL
129 : eq(123, 64) : BOOL
130 : eq(123, 66) : BOOL
131 : ite(130, 68, 69) : BV:8
132 : ite(129, 60, 131) : BV:8
133 : ite(128, 63, 132) : BV:8
134 : ite(127, 60, 133) : BV:8
135 : ite(126, 57, 134) : BV:8
136 : ite(125, 54, 135) : BV:8
137 : ite(124, 52, 136) : BV:8
138 : bvadd(28, 47, 122) : BV:32
139 : eq(138, 48) : BOOL
140 : eq(138, 14) : BOOL
141 : eq(138, 55) : BOOL
142 : eq(138, 58) : BOOL
143 : eq(138, 61) : BOOL
144 : eq(138, 64) : BOOL
145 : eq(138, 66) : BOOL
146 : ite(145, 68, 69) : BV:8
147 : ite(144, 60, 146) : BV:8
148 : ite(143, 63, 147) : BV:8
149 : ite(142, 60, 148) : BV:8
150 : ite(141, 57, 149) : BV:8
151 : ite(140, 54, 150) : BV:8
152 : ite(139, 52, 151) : BV:8
153 : bvadd(24, 47, 122) : BV:32
154 : eq(153, 48) : BOOL
155 : eq(153, 14) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 58) : BOOL
158 : eq(153, 61) : BOOL
159 : eq(153, 64) : BOOL
160 : eq(153, 66) : BOOL
161 : ite(160, 68, 69) : BV:8
162 : ite(159, 60, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 60, 163) : BV:8
165 : ite(156, 57, 164) : BV:8
166 : ite(155, 54, 165) : BV:8
167 : ite(154, 52, 166) : BV:8
168 : bvadd(47, 122) : BV:32
169 : eq(168, 48) : BOOL
170 : eq(168, 14) : BOOL
171 : eq(168, 55) : BOOL
172 : eq(168, 58) : BOOL
173 : eq(168, 61) : BOOL
174 : eq(168, 64) : BOOL
175 : eq(168, 66) : BOOL
176 : ite(175, 68, 69) : BV:8
177 : ite(174, 60, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 60, 178) : BV:8
180 : ite(171, 57, 179) : BV:8
181 : ite(170, 54, 180) : BV:8
182 : ite(169, 52, 181) : BV:8
183 : bvconcat(137, 152, 167, 182) : BV:32
184 : ite(44, 2, 183) : BV:32
185 : lambda(41, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(40, 185) : MAP[BV:32 -> BV:32]
187 : sym_const(186) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda39726Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : bvule(19, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(16, 19) : BOOL
33 : bvule(19, 16) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 19) : BOOL
37 : bvule(19, 10) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 16, 39) : BV:32
41 : ite(31, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(19, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda39727Var : BV:32
47 : eq(2, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
54 : bvmul(51, 2) : BV:32
55 : bvadd(53, 54) : BV:32
56 : eq(55, 53) : BOOL
57 : 185 { 0xb9 -71 } : BV:8
58 : eq(55, 10) : BOOL
59 : 64 { 0x40 } : BV:8
60 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
61 : eq(55, 60) : BOOL
62 : 16 { 0x10 } : BV:8
63 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
64 : eq(55, 63) : BOOL
65 : 189 { 0xbd -67 } : BV:8
66 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
67 : eq(55, 66) : BOOL
68 : 174 { 0xae -82 } : BV:8
69 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
70 : eq(55, 69) : BOOL
71 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
72 : eq(55, 71) : BOOL
73 : 136 { 0x88 -120 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(70, 65, 75) : BV:8
77 : ite(67, 68, 76) : BV:8
78 : ite(64, 65, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(58, 59, 79) : BV:8
81 : ite(56, 57, 80) : BV:8
82 : bvadd(66, 54) : BV:32
83 : eq(82, 53) : BOOL
84 : eq(82, 10) : BOOL
85 : eq(82, 60) : BOOL
86 : eq(82, 63) : BOOL
87 : eq(82, 66) : BOOL
88 : eq(82, 69) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 65, 90) : BV:8
92 : ite(87, 68, 91) : BV:8
93 : ite(86, 65, 92) : BV:8
94 : ite(85, 62, 93) : BV:8
95 : ite(84, 59, 94) : BV:8
96 : ite(83, 57, 95) : BV:8
97 : bvadd(69, 54) : BV:32
98 : eq(97, 53) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 60) : BOOL
101 : eq(97, 63) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 69) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 68, 106) : BV:8
108 : ite(101, 65, 107) : BV:8
109 : ite(100, 62, 108) : BV:8
110 : ite(99, 59, 109) : BV:8
111 : ite(98, 57, 110) : BV:8
112 : bvadd(63, 54) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 10) : BOOL
115 : eq(112, 60) : BOOL
116 : eq(112, 63) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 69) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 65, 120) : BV:8
122 : ite(117, 68, 121) : BV:8
123 : ite(116, 65, 122) : BV:8
124 : ite(115, 62, 123) : BV:8
125 : ite(114, 59, 124) : BV:8
126 : ite(113, 57, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(50, 52, 127) : BV:32
129 : eq(128, 53) : BOOL
130 : eq(128, 10) : BOOL
131 : eq(128, 60) : BOOL
132 : eq(128, 63) : BOOL
133 : eq(128, 66) : BOOL
134 : eq(128, 69) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 65, 136) : BV:8
138 : ite(133, 68, 137) : BV:8
139 : ite(132, 65, 138) : BV:8
140 : ite(131, 62, 139) : BV:8
141 : ite(130, 59, 140) : BV:8
142 : ite(129, 57, 141) : BV:8
143 : bvadd(35, 52, 127) : BV:32
144 : eq(143, 53) : BOOL
145 : eq(143, 10) : BOOL
146 : eq(143, 60) : BOOL
147 : eq(143, 63) : BOOL
148 : eq(143, 66) : BOOL
149 : eq(143, 69) : BOOL
150 : eq(143, 71) : BOOL
151 : ite(150, 73, 74) : BV:8
152 : ite(149, 65, 151) : BV:8
153 : ite(148, 68, 152) : BV:8
154 : ite(147, 65, 153) : BV:8
155 : ite(146, 62, 154) : BV:8
156 : ite(145, 59, 155) : BV:8
157 : ite(144, 57, 156) : BV:8
158 : bvadd(16, 52, 127) : BV:32
159 : eq(158, 53) : BOOL
160 : eq(158, 10) : BOOL
161 : eq(158, 60) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 66) : BOOL
164 : eq(158, 69) : BOOL
165 : eq(158, 71) : BOOL
166 : ite(165, 73, 74) : BV:8
167 : ite(164, 65, 166) : BV:8
168 : ite(163, 68, 167) : BV:8
169 : ite(162, 65, 168) : BV:8
170 : ite(161, 62, 169) : BV:8
171 : ite(160, 59, 170) : BV:8
172 : ite(159, 57, 171) : BV:8
173 : bvadd(52, 127) : BV:32
174 : eq(173, 53) : BOOL
175 : eq(173, 10) : BOOL
176 : eq(173, 60) : BOOL
177 : eq(173, 63) : BOOL
178 : eq(173, 66) : BOOL
179 : eq(173, 69) : BOOL
180 : eq(173, 71) : BOOL
181 : ite(180, 73, 74) : BV:8
182 : ite(179, 65, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : bvconcat(142, 157, 172, 187) : BV:32
189 : ite(49, 1, 188) : BV:32
190 : lambda(46, 189) : FUNCTION[BV:32 -> BV:32]
191 : map(45, 190) : MAP[BV:32 -> BV:32]
192 : sum(17, 18, 191) : SUM[UNIT,MAP[BV:32 -> BV:32]]
193 : sym_const(192) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39742Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 536870912 { 0x20000000 +1.0e193 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda39743Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : eq(50, 48) : BOOL
52 : 185 { 0xb9 -71 } : BV:8
53 : eq(50, 14) : BOOL
54 : 64 { 0x40 } : BV:8
55 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
56 : eq(50, 55) : BOOL
57 : 16 { 0x10 } : BV:8
58 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 189 { 0xbd -67 } : BV:8
61 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
62 : eq(50, 61) : BOOL
63 : 174 { 0xae -82 } : BV:8
64 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
65 : eq(50, 64) : BOOL
66 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
67 : eq(50, 66) : BOOL
68 : 136 { 0x88 -120 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(65, 60, 70) : BV:8
72 : ite(62, 63, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : ite(56, 57, 73) : BV:8
75 : ite(53, 54, 74) : BV:8
76 : ite(51, 52, 75) : BV:8
77 : bvadd(61, 49) : BV:32
78 : eq(77, 48) : BOOL
79 : eq(77, 14) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : eq(77, 61) : BOOL
83 : eq(77, 64) : BOOL
84 : eq(77, 66) : BOOL
85 : ite(84, 68, 69) : BV:8
86 : ite(83, 60, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(81, 60, 87) : BV:8
89 : ite(80, 57, 88) : BV:8
90 : ite(79, 54, 89) : BV:8
91 : ite(78, 52, 90) : BV:8
92 : bvadd(64, 49) : BV:32
93 : eq(92, 48) : BOOL
94 : eq(92, 14) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : eq(92, 64) : BOOL
99 : eq(92, 66) : BOOL
100 : ite(99, 68, 69) : BV:8
101 : ite(98, 60, 100) : BV:8
102 : ite(97, 63, 101) : BV:8
103 : ite(96, 60, 102) : BV:8
104 : ite(95, 57, 103) : BV:8
105 : ite(94, 54, 104) : BV:8
106 : ite(93, 52, 105) : BV:8
107 : bvadd(58, 49) : BV:32
108 : eq(107, 48) : BOOL
109 : eq(107, 14) : BOOL
110 : eq(107, 55) : BOOL
111 : eq(107, 58) : BOOL
112 : eq(107, 61) : BOOL
113 : eq(107, 64) : BOOL
114 : eq(107, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 60, 115) : BV:8
117 : ite(112, 63, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 54, 119) : BV:8
121 : ite(108, 52, 120) : BV:8
122 : bvconcat(76, 91, 106, 121) : BV:32
123 : bvadd(45, 47, 122) : BV:32
124 : eq(123, 48) : BOOL
125 : eq(123, 14) : BOOL
126 : eq(123, 55) : BOOL
127 : eq(123, 58) : BOOL
128 : eq(123, 61) : BOOL
129 : eq(123, 64) : BOOL
130 : eq(123, 66) : BOOL
131 : ite(130, 68, 69) : BV:8
132 : ite(129, 60, 131) : BV:8
133 : ite(128, 63, 132) : BV:8
134 : ite(127, 60, 133) : BV:8
135 : ite(126, 57, 134) : BV:8
136 : ite(125, 54, 135) : BV:8
137 : ite(124, 52, 136) : BV:8
138 : bvadd(28, 47, 122) : BV:32
139 : eq(138, 48) : BOOL
140 : eq(138, 14) : BOOL
141 : eq(138, 55) : BOOL
142 : eq(138, 58) : BOOL
143 : eq(138, 61) : BOOL
144 : eq(138, 64) : BOOL
145 : eq(138, 66) : BOOL
146 : ite(145, 68, 69) : BV:8
147 : ite(144, 60, 146) : BV:8
148 : ite(143, 63, 147) : BV:8
149 : ite(142, 60, 148) : BV:8
150 : ite(141, 57, 149) : BV:8
151 : ite(140, 54, 150) : BV:8
152 : ite(139, 52, 151) : BV:8
153 : bvadd(24, 47, 122) : BV:32
154 : eq(153, 48) : BOOL
155 : eq(153, 14) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 58) : BOOL
158 : eq(153, 61) : BOOL
159 : eq(153, 64) : BOOL
160 : eq(153, 66) : BOOL
161 : ite(160, 68, 69) : BV:8
162 : ite(159, 60, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 60, 163) : BV:8
165 : ite(156, 57, 164) : BV:8
166 : ite(155, 54, 165) : BV:8
167 : ite(154, 52, 166) : BV:8
168 : bvadd(47, 122) : BV:32
169 : eq(168, 48) : BOOL
170 : eq(168, 14) : BOOL
171 : eq(168, 55) : BOOL
172 : eq(168, 58) : BOOL
173 : eq(168, 61) : BOOL
174 : eq(168, 64) : BOOL
175 : eq(168, 66) : BOOL
176 : ite(175, 68, 69) : BV:8
177 : ite(174, 60, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 60, 178) : BV:8
180 : ite(171, 57, 179) : BV:8
181 : ite(170, 54, 180) : BV:8
182 : ite(169, 52, 181) : BV:8
183 : bvconcat(137, 152, 167, 182) : BV:32
184 : ite(44, 2, 183) : BV:32
185 : lambda(41, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(40, 185) : MAP[BV:32 -> BV:32]
187 : sym_const(186) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 888871224 { 0x34fb1938 +1.96170711e234 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 64995327 { 0x3dfbfff +1.74804675e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3118841723 { 0xb9e5bf7b -1176125573 -1.79490602e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3119218047 { 0xb9eb7d7f -1175749249 -1.83976733e244 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39395Var : BV:32
2 : Lambda39396Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 185 { 0xb9 -71 } : BV:8
55 : eq(52, 14) : BOOL
56 : 64 { 0x40 } : BV:8
57 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
58 : eq(52, 57) : BOOL
59 : 16 { 0x10 } : BV:8
60 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 189 { 0xbd -67 } : BV:8
63 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
64 : eq(52, 63) : BOOL
65 : 174 { 0xae -82 } : BV:8
66 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
67 : eq(52, 66) : BOOL
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(52, 68) : BOOL
70 : 136 { 0x88 -120 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 62, 72) : BV:8
74 : ite(64, 65, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : ite(53, 54, 77) : BV:8
79 : bvadd(63, 51) : BV:32
80 : eq(79, 50) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 57) : BOOL
83 : eq(79, 60) : BOOL
84 : eq(79, 63) : BOOL
85 : eq(79, 66) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : ite(80, 54, 92) : BV:8
94 : bvadd(66, 51) : BV:32
95 : eq(94, 50) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 60) : BOOL
99 : eq(94, 63) : BOOL
100 : eq(94, 66) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 62, 102) : BV:8
104 : ite(99, 65, 103) : BV:8
105 : ite(98, 62, 104) : BV:8
106 : ite(97, 59, 105) : BV:8
107 : ite(96, 56, 106) : BV:8
108 : ite(95, 54, 107) : BV:8
109 : bvadd(60, 51) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 14) : BOOL
112 : eq(109, 57) : BOOL
113 : eq(109, 60) : BOOL
114 : eq(109, 63) : BOOL
115 : eq(109, 66) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 59, 120) : BV:8
122 : ite(111, 56, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(47, 49, 124) : BV:32
126 : eq(125, 50) : BOOL
127 : eq(125, 14) : BOOL
128 : eq(125, 57) : BOOL
129 : eq(125, 60) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 62, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 59, 136) : BV:8
138 : ite(127, 56, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(36, 49, 124) : BV:32
141 : eq(140, 50) : BOOL
142 : eq(140, 14) : BOOL
143 : eq(140, 57) : BOOL
144 : eq(140, 60) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 62, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 59, 151) : BV:8
153 : ite(142, 56, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(32, 49, 124) : BV:32
156 : eq(155, 50) : BOOL
157 : eq(155, 14) : BOOL
158 : eq(155, 57) : BOOL
159 : eq(155, 60) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 62, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 59, 166) : BV:8
168 : ite(157, 56, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(49, 124) : BV:32
171 : eq(170, 50) : BOOL
172 : eq(170, 14) : BOOL
173 : eq(170, 57) : BOOL
174 : eq(170, 60) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 62, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 59, 181) : BV:8
183 : ite(172, 56, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(46, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39405Var : BV:32
2 : Lambda39406Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 185 { 0xb9 -71 } : BV:8
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 16 { 0x10 } : BV:8
21 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 189 { 0xbd -67 } : BV:8
24 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 174 { 0xae -82 } : BV:8
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 136 { 0x88 -120 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : bvadd(24, 11) : BV:32
41 : eq(40, 10) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : eq(40, 21) : BOOL
45 : eq(40, 24) : BOOL
46 : eq(40, 27) : BOOL
47 : eq(40, 29) : BOOL
48 : ite(47, 31, 32) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 26, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : ite(43, 20, 51) : BV:8
53 : ite(42, 17, 52) : BV:8
54 : ite(41, 14, 53) : BV:8
55 : bvadd(27, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : eq(55, 27) : BOOL
62 : eq(55, 29) : BOOL
63 : ite(62, 31, 32) : BV:8
64 : ite(61, 23, 63) : BV:8
65 : ite(60, 26, 64) : BV:8
66 : ite(59, 23, 65) : BV:8
67 : ite(58, 20, 66) : BV:8
68 : ite(57, 17, 67) : BV:8
69 : ite(56, 14, 68) : BV:8
70 : bvadd(21, 11) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 15) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : eq(70, 24) : BOOL
76 : eq(70, 27) : BOOL
77 : eq(70, 29) : BOOL
78 : ite(77, 31, 32) : BV:8
79 : ite(76, 23, 78) : BV:8
80 : ite(75, 26, 79) : BV:8
81 : ite(74, 23, 80) : BV:8
82 : ite(73, 20, 81) : BV:8
83 : ite(72, 17, 82) : BV:8
84 : ite(71, 14, 83) : BV:8
85 : bvconcat(39, 54, 69, 84) : BV:32
86 : bvadd(7, 9, 85) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 29) : BOOL
94 : ite(93, 31, 32) : BV:8
95 : ite(92, 23, 94) : BV:8
96 : ite(91, 26, 95) : BV:8
97 : ite(90, 23, 96) : BV:8
98 : ite(89, 20, 97) : BV:8
99 : ite(88, 17, 98) : BV:8
100 : ite(87, 14, 99) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 9, 85) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : eq(102, 27) : BOOL
109 : eq(102, 29) : BOOL
110 : ite(109, 31, 32) : BV:8
111 : ite(108, 23, 110) : BV:8
112 : ite(107, 26, 111) : BV:8
113 : ite(106, 23, 112) : BV:8
114 : ite(105, 20, 113) : BV:8
115 : ite(104, 17, 114) : BV:8
116 : ite(103, 14, 115) : BV:8
117 : 1 { 0x1 +1.11e129 } : BV:32
118 : bvadd(117, 9, 85) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 29) : BOOL
126 : ite(125, 31, 32) : BV:8
127 : ite(124, 23, 126) : BV:8
128 : ite(123, 26, 127) : BV:8
129 : ite(122, 23, 128) : BV:8
130 : ite(121, 20, 129) : BV:8
131 : ite(120, 17, 130) : BV:8
132 : ite(119, 14, 131) : BV:8
133 : bvadd(9, 85) : BV:32
134 : eq(133, 10) : BOOL
135 : eq(133, 15) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 29) : BOOL
141 : ite(140, 31, 32) : BV:8
142 : ite(139, 23, 141) : BV:8
143 : ite(138, 26, 142) : BV:8
144 : ite(137, 23, 143) : BV:8
145 : ite(136, 20, 144) : BV:8
146 : ite(135, 17, 145) : BV:8
147 : ite(134, 14, 146) : BV:8
148 : bvconcat(100, 116, 132, 147) : BV:32
149 : ite(6, 3, 148) : BV:32
150 : lambda(1, 2, 149) : FUNCTION[BV:32,BV:32 -> BV:32]
151 : sym_const(150) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39409Var : BV:32
2 : Lambda39410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39400Var : BV:32
2 : Lambda39401Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda39416Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda39420Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda39424Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
178322023
=counter_example_end
=global nodece 55 num_edges_traversed 3
=global nodece 55 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce4283.num_edges_traversed4
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce4283 53816120a6bab593c69f444eea3b964f
=input.spec-%var-x-1
1 : Lambda39503Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39504Var : BV:32
18 : Lambda39505Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39506Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 185 { 0xb9 -71 } : BV:8
82 : eq(79, 10) : BOOL
83 : 64 { 0x40 } : BV:8
84 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
85 : eq(79, 84) : BOOL
86 : 16 { 0x10 } : BV:8
87 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 189 { 0xbd -67 } : BV:8
90 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
91 : eq(79, 90) : BOOL
92 : 174 { 0xae -82 } : BV:8
93 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
94 : eq(79, 93) : BOOL
95 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
96 : eq(79, 95) : BOOL
97 : 136 { 0x88 -120 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(94, 89, 99) : BV:8
101 : ite(91, 92, 100) : BV:8
102 : ite(88, 89, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : ite(80, 81, 104) : BV:8
106 : bvadd(90, 78) : BV:32
107 : eq(106, 77) : BOOL
108 : eq(106, 10) : BOOL
109 : eq(106, 84) : BOOL
110 : eq(106, 87) : BOOL
111 : eq(106, 90) : BOOL
112 : eq(106, 93) : BOOL
113 : eq(106, 95) : BOOL
114 : ite(113, 97, 98) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : ite(107, 81, 119) : BV:8
121 : bvadd(93, 78) : BV:32
122 : eq(121, 77) : BOOL
123 : eq(121, 10) : BOOL
124 : eq(121, 84) : BOOL
125 : eq(121, 87) : BOOL
126 : eq(121, 90) : BOOL
127 : eq(121, 93) : BOOL
128 : eq(121, 95) : BOOL
129 : ite(128, 97, 98) : BV:8
130 : ite(127, 89, 129) : BV:8
131 : ite(126, 92, 130) : BV:8
132 : ite(125, 89, 131) : BV:8
133 : ite(124, 86, 132) : BV:8
134 : ite(123, 83, 133) : BV:8
135 : ite(122, 81, 134) : BV:8
136 : bvadd(87, 78) : BV:32
137 : eq(136, 77) : BOOL
138 : eq(136, 10) : BOOL
139 : eq(136, 84) : BOOL
140 : eq(136, 87) : BOOL
141 : eq(136, 90) : BOOL
142 : eq(136, 93) : BOOL
143 : eq(136, 95) : BOOL
144 : ite(143, 97, 98) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 86, 147) : BV:8
149 : ite(138, 83, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(105, 120, 135, 150) : BV:32
152 : bvadd(74, 76, 151) : BV:32
153 : eq(152, 77) : BOOL
154 : eq(152, 10) : BOOL
155 : eq(152, 84) : BOOL
156 : eq(152, 87) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 95) : BOOL
160 : ite(159, 97, 98) : BV:8
161 : ite(158, 89, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 86, 163) : BV:8
165 : ite(154, 83, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(40, 76, 151) : BV:32
168 : eq(167, 77) : BOOL
169 : eq(167, 10) : BOOL
170 : eq(167, 84) : BOOL
171 : eq(167, 87) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 95) : BOOL
175 : ite(174, 97, 98) : BV:8
176 : ite(173, 89, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 86, 178) : BV:8
180 : ite(169, 83, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(36, 76, 151) : BV:32
183 : eq(182, 77) : BOOL
184 : eq(182, 10) : BOOL
185 : eq(182, 84) : BOOL
186 : eq(182, 87) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 95) : BOOL
190 : ite(189, 97, 98) : BV:8
191 : ite(188, 89, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 86, 193) : BV:8
195 : ite(184, 83, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(76, 151) : BV:32
198 : eq(197, 77) : BOOL
199 : eq(197, 10) : BOOL
200 : eq(197, 84) : BOOL
201 : eq(197, 87) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 95) : BOOL
205 : ite(204, 97, 98) : BV:8
206 : ite(203, 89, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 86, 208) : BV:8
210 : ite(199, 83, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(54, 2, 212) : BV:32
214 : ite(73, 212, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : lambda(51, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(50, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39523Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39524Var : BV:32
18 : Lambda39525Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39526Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 185 { 0xb9 -71 } : BV:8
63 : eq(60, 10) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
66 : eq(60, 65) : BOOL
67 : 16 { 0x10 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 189 { 0xbd -67 } : BV:8
71 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
72 : eq(60, 71) : BOOL
73 : 174 { 0xae -82 } : BV:8
74 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
77 : eq(60, 76) : BOOL
78 : 136 { 0x88 -120 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(75, 70, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : ite(61, 62, 85) : BV:8
87 : bvadd(71, 59) : BV:32
88 : eq(87, 58) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 65) : BOOL
91 : eq(87, 68) : BOOL
92 : eq(87, 71) : BOOL
93 : eq(87, 74) : BOOL
94 : eq(87, 76) : BOOL
95 : ite(94, 78, 79) : BV:8
96 : ite(93, 70, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : ite(88, 62, 100) : BV:8
102 : bvadd(74, 59) : BV:32
103 : eq(102, 58) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 65) : BOOL
106 : eq(102, 68) : BOOL
107 : eq(102, 71) : BOOL
108 : eq(102, 74) : BOOL
109 : eq(102, 76) : BOOL
110 : ite(109, 78, 79) : BV:8
111 : ite(108, 70, 110) : BV:8
112 : ite(107, 73, 111) : BV:8
113 : ite(106, 70, 112) : BV:8
114 : ite(105, 67, 113) : BV:8
115 : ite(104, 64, 114) : BV:8
116 : ite(103, 62, 115) : BV:8
117 : bvadd(68, 59) : BV:32
118 : eq(117, 58) : BOOL
119 : eq(117, 10) : BOOL
120 : eq(117, 65) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 71) : BOOL
123 : eq(117, 74) : BOOL
124 : eq(117, 76) : BOOL
125 : ite(124, 78, 79) : BV:8
126 : ite(123, 70, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 67, 128) : BV:8
130 : ite(119, 64, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(86, 101, 116, 131) : BV:32
133 : bvadd(55, 57, 132) : BV:32
134 : eq(133, 58) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 65) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 76) : BOOL
141 : ite(140, 78, 79) : BV:8
142 : ite(139, 70, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 67, 144) : BV:8
146 : ite(135, 64, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(40, 57, 132) : BV:32
149 : eq(148, 58) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 65) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 76) : BOOL
156 : ite(155, 78, 79) : BV:8
157 : ite(154, 70, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 67, 159) : BV:8
161 : ite(150, 64, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(36, 57, 132) : BV:32
164 : eq(163, 58) : BOOL
165 : eq(163, 10) : BOOL
166 : eq(163, 65) : BOOL
167 : eq(163, 68) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 76) : BOOL
171 : ite(170, 78, 79) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 67, 174) : BV:8
176 : ite(165, 64, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(57, 132) : BV:32
179 : eq(178, 58) : BOOL
180 : eq(178, 10) : BOOL
181 : eq(178, 65) : BOOL
182 : eq(178, 68) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 76) : BOOL
186 : ite(185, 78, 79) : BV:8
187 : ite(184, 70, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 67, 189) : BV:8
191 : ite(180, 64, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(54, 2, 193) : BV:32
195 : lambda(51, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(50, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741959 ] -> 0, [ 1073741960; 1073741960 ] -> 16, [ 1073741961; 2147483647 ] -> 0, [ 2147483648; 2147483649 ] -> 189, [ 2147483650; 2147483650 ] -> 174, [ 2147483651; 2147483651 ] -> 185, [ 2147483652; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 136, [ 4294967293; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 64, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 64995323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64995324; 64995327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 64995328; 3118841719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3118841720; 3118841723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3118841724; 3119218043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3119218044; 3119218047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3119218048; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.llvm-%n
1 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1811906023 { 0x6bff7de7 +1.99602973e88 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39736Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 536870912 { 0x20000000 +1.0e193 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda39737Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : eq(50, 48) : BOOL
52 : 185 { 0xb9 -71 } : BV:8
53 : eq(50, 14) : BOOL
54 : 64 { 0x40 } : BV:8
55 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
56 : eq(50, 55) : BOOL
57 : 16 { 0x10 } : BV:8
58 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 189 { 0xbd -67 } : BV:8
61 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
62 : eq(50, 61) : BOOL
63 : 174 { 0xae -82 } : BV:8
64 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
65 : eq(50, 64) : BOOL
66 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
67 : eq(50, 66) : BOOL
68 : 136 { 0x88 -120 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(65, 60, 70) : BV:8
72 : ite(62, 63, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : ite(56, 57, 73) : BV:8
75 : ite(53, 54, 74) : BV:8
76 : ite(51, 52, 75) : BV:8
77 : bvadd(61, 49) : BV:32
78 : eq(77, 48) : BOOL
79 : eq(77, 14) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : eq(77, 61) : BOOL
83 : eq(77, 64) : BOOL
84 : eq(77, 66) : BOOL
85 : ite(84, 68, 69) : BV:8
86 : ite(83, 60, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(81, 60, 87) : BV:8
89 : ite(80, 57, 88) : BV:8
90 : ite(79, 54, 89) : BV:8
91 : ite(78, 52, 90) : BV:8
92 : bvadd(64, 49) : BV:32
93 : eq(92, 48) : BOOL
94 : eq(92, 14) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : eq(92, 64) : BOOL
99 : eq(92, 66) : BOOL
100 : ite(99, 68, 69) : BV:8
101 : ite(98, 60, 100) : BV:8
102 : ite(97, 63, 101) : BV:8
103 : ite(96, 60, 102) : BV:8
104 : ite(95, 57, 103) : BV:8
105 : ite(94, 54, 104) : BV:8
106 : ite(93, 52, 105) : BV:8
107 : bvadd(58, 49) : BV:32
108 : eq(107, 48) : BOOL
109 : eq(107, 14) : BOOL
110 : eq(107, 55) : BOOL
111 : eq(107, 58) : BOOL
112 : eq(107, 61) : BOOL
113 : eq(107, 64) : BOOL
114 : eq(107, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 60, 115) : BV:8
117 : ite(112, 63, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 54, 119) : BV:8
121 : ite(108, 52, 120) : BV:8
122 : bvconcat(76, 91, 106, 121) : BV:32
123 : bvadd(45, 47, 122) : BV:32
124 : eq(123, 48) : BOOL
125 : eq(123, 14) : BOOL
126 : eq(123, 55) : BOOL
127 : eq(123, 58) : BOOL
128 : eq(123, 61) : BOOL
129 : eq(123, 64) : BOOL
130 : eq(123, 66) : BOOL
131 : ite(130, 68, 69) : BV:8
132 : ite(129, 60, 131) : BV:8
133 : ite(128, 63, 132) : BV:8
134 : ite(127, 60, 133) : BV:8
135 : ite(126, 57, 134) : BV:8
136 : ite(125, 54, 135) : BV:8
137 : ite(124, 52, 136) : BV:8
138 : bvadd(28, 47, 122) : BV:32
139 : eq(138, 48) : BOOL
140 : eq(138, 14) : BOOL
141 : eq(138, 55) : BOOL
142 : eq(138, 58) : BOOL
143 : eq(138, 61) : BOOL
144 : eq(138, 64) : BOOL
145 : eq(138, 66) : BOOL
146 : ite(145, 68, 69) : BV:8
147 : ite(144, 60, 146) : BV:8
148 : ite(143, 63, 147) : BV:8
149 : ite(142, 60, 148) : BV:8
150 : ite(141, 57, 149) : BV:8
151 : ite(140, 54, 150) : BV:8
152 : ite(139, 52, 151) : BV:8
153 : bvadd(24, 47, 122) : BV:32
154 : eq(153, 48) : BOOL
155 : eq(153, 14) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 58) : BOOL
158 : eq(153, 61) : BOOL
159 : eq(153, 64) : BOOL
160 : eq(153, 66) : BOOL
161 : ite(160, 68, 69) : BV:8
162 : ite(159, 60, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 60, 163) : BV:8
165 : ite(156, 57, 164) : BV:8
166 : ite(155, 54, 165) : BV:8
167 : ite(154, 52, 166) : BV:8
168 : bvadd(47, 122) : BV:32
169 : eq(168, 48) : BOOL
170 : eq(168, 14) : BOOL
171 : eq(168, 55) : BOOL
172 : eq(168, 58) : BOOL
173 : eq(168, 61) : BOOL
174 : eq(168, 64) : BOOL
175 : eq(168, 66) : BOOL
176 : ite(175, 68, 69) : BV:8
177 : ite(174, 60, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 60, 178) : BV:8
180 : ite(171, 57, 179) : BV:8
181 : ite(170, 54, 180) : BV:8
182 : ite(169, 52, 181) : BV:8
183 : bvconcat(137, 152, 167, 182) : BV:32
184 : ite(44, 2, 183) : BV:32
185 : lambda(41, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(40, 185) : MAP[BV:32 -> BV:32]
187 : sym_const(186) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda39726Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : bvule(19, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(16, 19) : BOOL
33 : bvule(19, 16) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 19) : BOOL
37 : bvule(19, 10) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 16, 39) : BV:32
41 : ite(31, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(19, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda39727Var : BV:32
47 : eq(2, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
54 : bvmul(51, 2) : BV:32
55 : bvadd(53, 54) : BV:32
56 : eq(55, 53) : BOOL
57 : 185 { 0xb9 -71 } : BV:8
58 : eq(55, 10) : BOOL
59 : 64 { 0x40 } : BV:8
60 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
61 : eq(55, 60) : BOOL
62 : 16 { 0x10 } : BV:8
63 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
64 : eq(55, 63) : BOOL
65 : 189 { 0xbd -67 } : BV:8
66 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
67 : eq(55, 66) : BOOL
68 : 174 { 0xae -82 } : BV:8
69 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
70 : eq(55, 69) : BOOL
71 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
72 : eq(55, 71) : BOOL
73 : 136 { 0x88 -120 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(70, 65, 75) : BV:8
77 : ite(67, 68, 76) : BV:8
78 : ite(64, 65, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(58, 59, 79) : BV:8
81 : ite(56, 57, 80) : BV:8
82 : bvadd(66, 54) : BV:32
83 : eq(82, 53) : BOOL
84 : eq(82, 10) : BOOL
85 : eq(82, 60) : BOOL
86 : eq(82, 63) : BOOL
87 : eq(82, 66) : BOOL
88 : eq(82, 69) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 65, 90) : BV:8
92 : ite(87, 68, 91) : BV:8
93 : ite(86, 65, 92) : BV:8
94 : ite(85, 62, 93) : BV:8
95 : ite(84, 59, 94) : BV:8
96 : ite(83, 57, 95) : BV:8
97 : bvadd(69, 54) : BV:32
98 : eq(97, 53) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 60) : BOOL
101 : eq(97, 63) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 69) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 68, 106) : BV:8
108 : ite(101, 65, 107) : BV:8
109 : ite(100, 62, 108) : BV:8
110 : ite(99, 59, 109) : BV:8
111 : ite(98, 57, 110) : BV:8
112 : bvadd(63, 54) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 10) : BOOL
115 : eq(112, 60) : BOOL
116 : eq(112, 63) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 69) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 65, 120) : BV:8
122 : ite(117, 68, 121) : BV:8
123 : ite(116, 65, 122) : BV:8
124 : ite(115, 62, 123) : BV:8
125 : ite(114, 59, 124) : BV:8
126 : ite(113, 57, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(50, 52, 127) : BV:32
129 : eq(128, 53) : BOOL
130 : eq(128, 10) : BOOL
131 : eq(128, 60) : BOOL
132 : eq(128, 63) : BOOL
133 : eq(128, 66) : BOOL
134 : eq(128, 69) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 65, 136) : BV:8
138 : ite(133, 68, 137) : BV:8
139 : ite(132, 65, 138) : BV:8
140 : ite(131, 62, 139) : BV:8
141 : ite(130, 59, 140) : BV:8
142 : ite(129, 57, 141) : BV:8
143 : bvadd(35, 52, 127) : BV:32
144 : eq(143, 53) : BOOL
145 : eq(143, 10) : BOOL
146 : eq(143, 60) : BOOL
147 : eq(143, 63) : BOOL
148 : eq(143, 66) : BOOL
149 : eq(143, 69) : BOOL
150 : eq(143, 71) : BOOL
151 : ite(150, 73, 74) : BV:8
152 : ite(149, 65, 151) : BV:8
153 : ite(148, 68, 152) : BV:8
154 : ite(147, 65, 153) : BV:8
155 : ite(146, 62, 154) : BV:8
156 : ite(145, 59, 155) : BV:8
157 : ite(144, 57, 156) : BV:8
158 : bvadd(16, 52, 127) : BV:32
159 : eq(158, 53) : BOOL
160 : eq(158, 10) : BOOL
161 : eq(158, 60) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 66) : BOOL
164 : eq(158, 69) : BOOL
165 : eq(158, 71) : BOOL
166 : ite(165, 73, 74) : BV:8
167 : ite(164, 65, 166) : BV:8
168 : ite(163, 68, 167) : BV:8
169 : ite(162, 65, 168) : BV:8
170 : ite(161, 62, 169) : BV:8
171 : ite(160, 59, 170) : BV:8
172 : ite(159, 57, 171) : BV:8
173 : bvadd(52, 127) : BV:32
174 : eq(173, 53) : BOOL
175 : eq(173, 10) : BOOL
176 : eq(173, 60) : BOOL
177 : eq(173, 63) : BOOL
178 : eq(173, 66) : BOOL
179 : eq(173, 69) : BOOL
180 : eq(173, 71) : BOOL
181 : ite(180, 73, 74) : BV:8
182 : ite(179, 65, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : bvconcat(142, 157, 172, 187) : BV:32
189 : ite(49, 1, 188) : BV:32
190 : lambda(46, 189) : FUNCTION[BV:32 -> BV:32]
191 : map(45, 190) : MAP[BV:32 -> BV:32]
192 : sum(17, 18, 191) : SUM[UNIT,MAP[BV:32 -> BV:32]]
193 : sym_const(192) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39742Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 536870912 { 0x20000000 +1.0e193 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda39743Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : eq(50, 48) : BOOL
52 : 185 { 0xb9 -71 } : BV:8
53 : eq(50, 14) : BOOL
54 : 64 { 0x40 } : BV:8
55 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
56 : eq(50, 55) : BOOL
57 : 16 { 0x10 } : BV:8
58 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 189 { 0xbd -67 } : BV:8
61 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
62 : eq(50, 61) : BOOL
63 : 174 { 0xae -82 } : BV:8
64 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
65 : eq(50, 64) : BOOL
66 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
67 : eq(50, 66) : BOOL
68 : 136 { 0x88 -120 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(65, 60, 70) : BV:8
72 : ite(62, 63, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : ite(56, 57, 73) : BV:8
75 : ite(53, 54, 74) : BV:8
76 : ite(51, 52, 75) : BV:8
77 : bvadd(61, 49) : BV:32
78 : eq(77, 48) : BOOL
79 : eq(77, 14) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : eq(77, 61) : BOOL
83 : eq(77, 64) : BOOL
84 : eq(77, 66) : BOOL
85 : ite(84, 68, 69) : BV:8
86 : ite(83, 60, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(81, 60, 87) : BV:8
89 : ite(80, 57, 88) : BV:8
90 : ite(79, 54, 89) : BV:8
91 : ite(78, 52, 90) : BV:8
92 : bvadd(64, 49) : BV:32
93 : eq(92, 48) : BOOL
94 : eq(92, 14) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : eq(92, 64) : BOOL
99 : eq(92, 66) : BOOL
100 : ite(99, 68, 69) : BV:8
101 : ite(98, 60, 100) : BV:8
102 : ite(97, 63, 101) : BV:8
103 : ite(96, 60, 102) : BV:8
104 : ite(95, 57, 103) : BV:8
105 : ite(94, 54, 104) : BV:8
106 : ite(93, 52, 105) : BV:8
107 : bvadd(58, 49) : BV:32
108 : eq(107, 48) : BOOL
109 : eq(107, 14) : BOOL
110 : eq(107, 55) : BOOL
111 : eq(107, 58) : BOOL
112 : eq(107, 61) : BOOL
113 : eq(107, 64) : BOOL
114 : eq(107, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 60, 115) : BV:8
117 : ite(112, 63, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 54, 119) : BV:8
121 : ite(108, 52, 120) : BV:8
122 : bvconcat(76, 91, 106, 121) : BV:32
123 : bvadd(45, 47, 122) : BV:32
124 : eq(123, 48) : BOOL
125 : eq(123, 14) : BOOL
126 : eq(123, 55) : BOOL
127 : eq(123, 58) : BOOL
128 : eq(123, 61) : BOOL
129 : eq(123, 64) : BOOL
130 : eq(123, 66) : BOOL
131 : ite(130, 68, 69) : BV:8
132 : ite(129, 60, 131) : BV:8
133 : ite(128, 63, 132) : BV:8
134 : ite(127, 60, 133) : BV:8
135 : ite(126, 57, 134) : BV:8
136 : ite(125, 54, 135) : BV:8
137 : ite(124, 52, 136) : BV:8
138 : bvadd(28, 47, 122) : BV:32
139 : eq(138, 48) : BOOL
140 : eq(138, 14) : BOOL
141 : eq(138, 55) : BOOL
142 : eq(138, 58) : BOOL
143 : eq(138, 61) : BOOL
144 : eq(138, 64) : BOOL
145 : eq(138, 66) : BOOL
146 : ite(145, 68, 69) : BV:8
147 : ite(144, 60, 146) : BV:8
148 : ite(143, 63, 147) : BV:8
149 : ite(142, 60, 148) : BV:8
150 : ite(141, 57, 149) : BV:8
151 : ite(140, 54, 150) : BV:8
152 : ite(139, 52, 151) : BV:8
153 : bvadd(24, 47, 122) : BV:32
154 : eq(153, 48) : BOOL
155 : eq(153, 14) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 58) : BOOL
158 : eq(153, 61) : BOOL
159 : eq(153, 64) : BOOL
160 : eq(153, 66) : BOOL
161 : ite(160, 68, 69) : BV:8
162 : ite(159, 60, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 60, 163) : BV:8
165 : ite(156, 57, 164) : BV:8
166 : ite(155, 54, 165) : BV:8
167 : ite(154, 52, 166) : BV:8
168 : bvadd(47, 122) : BV:32
169 : eq(168, 48) : BOOL
170 : eq(168, 14) : BOOL
171 : eq(168, 55) : BOOL
172 : eq(168, 58) : BOOL
173 : eq(168, 61) : BOOL
174 : eq(168, 64) : BOOL
175 : eq(168, 66) : BOOL
176 : ite(175, 68, 69) : BV:8
177 : ite(174, 60, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 60, 178) : BV:8
180 : ite(171, 57, 179) : BV:8
181 : ite(170, 54, 180) : BV:8
182 : ite(169, 52, 181) : BV:8
183 : bvconcat(137, 152, 167, 182) : BV:32
184 : ite(44, 2, 183) : BV:32
185 : lambda(41, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(40, 185) : MAP[BV:32 -> BV:32]
187 : sym_const(186) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 888871224 { 0x34fb1938 +1.96170711e234 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 64995327 { 0x3dfbfff +1.74804675e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3118841723 { 0xb9e5bf7b -1176125573 -1.79490602e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3119218047 { 0xb9eb7d7f -1175749249 -1.83976733e244 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39395Var : BV:32
2 : Lambda39396Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 185 { 0xb9 -71 } : BV:8
55 : eq(52, 14) : BOOL
56 : 64 { 0x40 } : BV:8
57 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
58 : eq(52, 57) : BOOL
59 : 16 { 0x10 } : BV:8
60 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 189 { 0xbd -67 } : BV:8
63 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
64 : eq(52, 63) : BOOL
65 : 174 { 0xae -82 } : BV:8
66 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
67 : eq(52, 66) : BOOL
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(52, 68) : BOOL
70 : 136 { 0x88 -120 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 62, 72) : BV:8
74 : ite(64, 65, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : ite(53, 54, 77) : BV:8
79 : bvadd(63, 51) : BV:32
80 : eq(79, 50) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 57) : BOOL
83 : eq(79, 60) : BOOL
84 : eq(79, 63) : BOOL
85 : eq(79, 66) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : ite(80, 54, 92) : BV:8
94 : bvadd(66, 51) : BV:32
95 : eq(94, 50) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 60) : BOOL
99 : eq(94, 63) : BOOL
100 : eq(94, 66) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 62, 102) : BV:8
104 : ite(99, 65, 103) : BV:8
105 : ite(98, 62, 104) : BV:8
106 : ite(97, 59, 105) : BV:8
107 : ite(96, 56, 106) : BV:8
108 : ite(95, 54, 107) : BV:8
109 : bvadd(60, 51) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 14) : BOOL
112 : eq(109, 57) : BOOL
113 : eq(109, 60) : BOOL
114 : eq(109, 63) : BOOL
115 : eq(109, 66) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 59, 120) : BV:8
122 : ite(111, 56, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(47, 49, 124) : BV:32
126 : eq(125, 50) : BOOL
127 : eq(125, 14) : BOOL
128 : eq(125, 57) : BOOL
129 : eq(125, 60) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 62, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 59, 136) : BV:8
138 : ite(127, 56, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(36, 49, 124) : BV:32
141 : eq(140, 50) : BOOL
142 : eq(140, 14) : BOOL
143 : eq(140, 57) : BOOL
144 : eq(140, 60) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 62, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 59, 151) : BV:8
153 : ite(142, 56, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(32, 49, 124) : BV:32
156 : eq(155, 50) : BOOL
157 : eq(155, 14) : BOOL
158 : eq(155, 57) : BOOL
159 : eq(155, 60) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 62, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 59, 166) : BV:8
168 : ite(157, 56, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(49, 124) : BV:32
171 : eq(170, 50) : BOOL
172 : eq(170, 14) : BOOL
173 : eq(170, 57) : BOOL
174 : eq(170, 60) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 62, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 59, 181) : BV:8
183 : ite(172, 56, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(46, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39405Var : BV:32
2 : Lambda39406Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 185 { 0xb9 -71 } : BV:8
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 16 { 0x10 } : BV:8
21 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 189 { 0xbd -67 } : BV:8
24 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 174 { 0xae -82 } : BV:8
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 136 { 0x88 -120 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : bvadd(24, 11) : BV:32
41 : eq(40, 10) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : eq(40, 21) : BOOL
45 : eq(40, 24) : BOOL
46 : eq(40, 27) : BOOL
47 : eq(40, 29) : BOOL
48 : ite(47, 31, 32) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 26, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : ite(43, 20, 51) : BV:8
53 : ite(42, 17, 52) : BV:8
54 : ite(41, 14, 53) : BV:8
55 : bvadd(27, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : eq(55, 27) : BOOL
62 : eq(55, 29) : BOOL
63 : ite(62, 31, 32) : BV:8
64 : ite(61, 23, 63) : BV:8
65 : ite(60, 26, 64) : BV:8
66 : ite(59, 23, 65) : BV:8
67 : ite(58, 20, 66) : BV:8
68 : ite(57, 17, 67) : BV:8
69 : ite(56, 14, 68) : BV:8
70 : bvadd(21, 11) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 15) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : eq(70, 24) : BOOL
76 : eq(70, 27) : BOOL
77 : eq(70, 29) : BOOL
78 : ite(77, 31, 32) : BV:8
79 : ite(76, 23, 78) : BV:8
80 : ite(75, 26, 79) : BV:8
81 : ite(74, 23, 80) : BV:8
82 : ite(73, 20, 81) : BV:8
83 : ite(72, 17, 82) : BV:8
84 : ite(71, 14, 83) : BV:8
85 : bvconcat(39, 54, 69, 84) : BV:32
86 : bvadd(7, 9, 85) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 29) : BOOL
94 : ite(93, 31, 32) : BV:8
95 : ite(92, 23, 94) : BV:8
96 : ite(91, 26, 95) : BV:8
97 : ite(90, 23, 96) : BV:8
98 : ite(89, 20, 97) : BV:8
99 : ite(88, 17, 98) : BV:8
100 : ite(87, 14, 99) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 9, 85) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : eq(102, 27) : BOOL
109 : eq(102, 29) : BOOL
110 : ite(109, 31, 32) : BV:8
111 : ite(108, 23, 110) : BV:8
112 : ite(107, 26, 111) : BV:8
113 : ite(106, 23, 112) : BV:8
114 : ite(105, 20, 113) : BV:8
115 : ite(104, 17, 114) : BV:8
116 : ite(103, 14, 115) : BV:8
117 : 1 { 0x1 +1.11e129 } : BV:32
118 : bvadd(117, 9, 85) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 29) : BOOL
126 : ite(125, 31, 32) : BV:8
127 : ite(124, 23, 126) : BV:8
128 : ite(123, 26, 127) : BV:8
129 : ite(122, 23, 128) : BV:8
130 : ite(121, 20, 129) : BV:8
131 : ite(120, 17, 130) : BV:8
132 : ite(119, 14, 131) : BV:8
133 : bvadd(9, 85) : BV:32
134 : eq(133, 10) : BOOL
135 : eq(133, 15) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 29) : BOOL
141 : ite(140, 31, 32) : BV:8
142 : ite(139, 23, 141) : BV:8
143 : ite(138, 26, 142) : BV:8
144 : ite(137, 23, 143) : BV:8
145 : ite(136, 20, 144) : BV:8
146 : ite(135, 17, 145) : BV:8
147 : ite(134, 14, 146) : BV:8
148 : bvconcat(100, 116, 132, 147) : BV:32
149 : ite(6, 3, 148) : BV:32
150 : lambda(1, 2, 149) : FUNCTION[BV:32,BV:32 -> BV:32]
151 : sym_const(150) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39409Var : BV:32
2 : Lambda39410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39400Var : BV:32
2 : Lambda39401Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda39416Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda39420Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda39424Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
178322023
=counter_example_end
=global nodece 56 num_edges_traversed 4
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce4299.num_edges_traversed5
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce4299 c0b3fb35713c58f339b56d229bb3380
=input.spec-%var-x-1
1 : Lambda39503Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39504Var : BV:32
18 : Lambda39505Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39506Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 185 { 0xb9 -71 } : BV:8
82 : eq(79, 10) : BOOL
83 : 64 { 0x40 } : BV:8
84 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
85 : eq(79, 84) : BOOL
86 : 16 { 0x10 } : BV:8
87 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 189 { 0xbd -67 } : BV:8
90 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
91 : eq(79, 90) : BOOL
92 : 174 { 0xae -82 } : BV:8
93 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
94 : eq(79, 93) : BOOL
95 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
96 : eq(79, 95) : BOOL
97 : 136 { 0x88 -120 } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(94, 89, 99) : BV:8
101 : ite(91, 92, 100) : BV:8
102 : ite(88, 89, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : ite(80, 81, 104) : BV:8
106 : bvadd(90, 78) : BV:32
107 : eq(106, 77) : BOOL
108 : eq(106, 10) : BOOL
109 : eq(106, 84) : BOOL
110 : eq(106, 87) : BOOL
111 : eq(106, 90) : BOOL
112 : eq(106, 93) : BOOL
113 : eq(106, 95) : BOOL
114 : ite(113, 97, 98) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : ite(107, 81, 119) : BV:8
121 : bvadd(93, 78) : BV:32
122 : eq(121, 77) : BOOL
123 : eq(121, 10) : BOOL
124 : eq(121, 84) : BOOL
125 : eq(121, 87) : BOOL
126 : eq(121, 90) : BOOL
127 : eq(121, 93) : BOOL
128 : eq(121, 95) : BOOL
129 : ite(128, 97, 98) : BV:8
130 : ite(127, 89, 129) : BV:8
131 : ite(126, 92, 130) : BV:8
132 : ite(125, 89, 131) : BV:8
133 : ite(124, 86, 132) : BV:8
134 : ite(123, 83, 133) : BV:8
135 : ite(122, 81, 134) : BV:8
136 : bvadd(87, 78) : BV:32
137 : eq(136, 77) : BOOL
138 : eq(136, 10) : BOOL
139 : eq(136, 84) : BOOL
140 : eq(136, 87) : BOOL
141 : eq(136, 90) : BOOL
142 : eq(136, 93) : BOOL
143 : eq(136, 95) : BOOL
144 : ite(143, 97, 98) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 86, 147) : BV:8
149 : ite(138, 83, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(105, 120, 135, 150) : BV:32
152 : bvadd(74, 76, 151) : BV:32
153 : eq(152, 77) : BOOL
154 : eq(152, 10) : BOOL
155 : eq(152, 84) : BOOL
156 : eq(152, 87) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 95) : BOOL
160 : ite(159, 97, 98) : BV:8
161 : ite(158, 89, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 86, 163) : BV:8
165 : ite(154, 83, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(40, 76, 151) : BV:32
168 : eq(167, 77) : BOOL
169 : eq(167, 10) : BOOL
170 : eq(167, 84) : BOOL
171 : eq(167, 87) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 95) : BOOL
175 : ite(174, 97, 98) : BV:8
176 : ite(173, 89, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 86, 178) : BV:8
180 : ite(169, 83, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(36, 76, 151) : BV:32
183 : eq(182, 77) : BOOL
184 : eq(182, 10) : BOOL
185 : eq(182, 84) : BOOL
186 : eq(182, 87) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 95) : BOOL
190 : ite(189, 97, 98) : BV:8
191 : ite(188, 89, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 86, 193) : BV:8
195 : ite(184, 83, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(76, 151) : BV:32
198 : eq(197, 77) : BOOL
199 : eq(197, 10) : BOOL
200 : eq(197, 84) : BOOL
201 : eq(197, 87) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 95) : BOOL
205 : ite(204, 97, 98) : BV:8
206 : ite(203, 89, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 86, 208) : BV:8
210 : ite(199, 83, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(54, 2, 212) : BV:32
214 : ite(73, 212, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : lambda(51, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(50, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39523Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39524Var : BV:32
18 : Lambda39525Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda39526Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 185 { 0xb9 -71 } : BV:8
63 : eq(60, 10) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
66 : eq(60, 65) : BOOL
67 : 16 { 0x10 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 189 { 0xbd -67 } : BV:8
71 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
72 : eq(60, 71) : BOOL
73 : 174 { 0xae -82 } : BV:8
74 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
77 : eq(60, 76) : BOOL
78 : 136 { 0x88 -120 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(75, 70, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : ite(61, 62, 85) : BV:8
87 : bvadd(71, 59) : BV:32
88 : eq(87, 58) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 65) : BOOL
91 : eq(87, 68) : BOOL
92 : eq(87, 71) : BOOL
93 : eq(87, 74) : BOOL
94 : eq(87, 76) : BOOL
95 : ite(94, 78, 79) : BV:8
96 : ite(93, 70, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : ite(88, 62, 100) : BV:8
102 : bvadd(74, 59) : BV:32
103 : eq(102, 58) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 65) : BOOL
106 : eq(102, 68) : BOOL
107 : eq(102, 71) : BOOL
108 : eq(102, 74) : BOOL
109 : eq(102, 76) : BOOL
110 : ite(109, 78, 79) : BV:8
111 : ite(108, 70, 110) : BV:8
112 : ite(107, 73, 111) : BV:8
113 : ite(106, 70, 112) : BV:8
114 : ite(105, 67, 113) : BV:8
115 : ite(104, 64, 114) : BV:8
116 : ite(103, 62, 115) : BV:8
117 : bvadd(68, 59) : BV:32
118 : eq(117, 58) : BOOL
119 : eq(117, 10) : BOOL
120 : eq(117, 65) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 71) : BOOL
123 : eq(117, 74) : BOOL
124 : eq(117, 76) : BOOL
125 : ite(124, 78, 79) : BV:8
126 : ite(123, 70, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 67, 128) : BV:8
130 : ite(119, 64, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(86, 101, 116, 131) : BV:32
133 : bvadd(55, 57, 132) : BV:32
134 : eq(133, 58) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 65) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 76) : BOOL
141 : ite(140, 78, 79) : BV:8
142 : ite(139, 70, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 67, 144) : BV:8
146 : ite(135, 64, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(40, 57, 132) : BV:32
149 : eq(148, 58) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 65) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 76) : BOOL
156 : ite(155, 78, 79) : BV:8
157 : ite(154, 70, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 67, 159) : BV:8
161 : ite(150, 64, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(36, 57, 132) : BV:32
164 : eq(163, 58) : BOOL
165 : eq(163, 10) : BOOL
166 : eq(163, 65) : BOOL
167 : eq(163, 68) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 76) : BOOL
171 : ite(170, 78, 79) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 67, 174) : BV:8
176 : ite(165, 64, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(57, 132) : BV:32
179 : eq(178, 58) : BOOL
180 : eq(178, 10) : BOOL
181 : eq(178, 65) : BOOL
182 : eq(178, 68) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 76) : BOOL
186 : ite(185, 78, 79) : BV:8
187 : ite(184, 70, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 67, 189) : BV:8
191 : ite(180, 64, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(54, 2, 193) : BV:32
195 : lambda(51, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(50, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1073741959 ] -> 0, [ 1073741960; 1073741960 ] -> 16, [ 1073741961; 2147483647 ] -> 0, [ 2147483648; 2147483649 ] -> 189, [ 2147483650; 2147483650 ] -> 174, [ 2147483651; 2147483651 ] -> 185, [ 2147483652; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 136, [ 4294967293; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 64, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 64995323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64995324; 64995327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 64995328; 3118841719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3118841720; 3118841723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3118841724; 3119218043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3119218044; 3119218047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3119218048; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.llvm-%n
1 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1811906024 { 0x6bff7de8 +1.99602985e88 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 888871225 { 0x34fb1939 +1.96170723e234 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 64995324 { 0x3dfbffc +1.74804639e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 64995327 { 0x3dfbfff +1.74804675e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3118841720 { 0xb9e5bf78 -1176125576 -1.79490566e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3118841723 { 0xb9e5bf7b -1176125573 -1.79490602e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3119218044 { 0xb9eb7d7c -1175749252 -1.83976697e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3119218047 { 0xb9eb7d7f -1175749249 -1.83976733e244 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39395Var : BV:32
2 : Lambda39396Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 185 { 0xb9 -71 } : BV:8
55 : eq(52, 14) : BOOL
56 : 64 { 0x40 } : BV:8
57 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
58 : eq(52, 57) : BOOL
59 : 16 { 0x10 } : BV:8
60 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 189 { 0xbd -67 } : BV:8
63 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
64 : eq(52, 63) : BOOL
65 : 174 { 0xae -82 } : BV:8
66 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
67 : eq(52, 66) : BOOL
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(52, 68) : BOOL
70 : 136 { 0x88 -120 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 62, 72) : BV:8
74 : ite(64, 65, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : ite(53, 54, 77) : BV:8
79 : bvadd(63, 51) : BV:32
80 : eq(79, 50) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 57) : BOOL
83 : eq(79, 60) : BOOL
84 : eq(79, 63) : BOOL
85 : eq(79, 66) : BOOL
86 : eq(79, 68) : BOOL
87 : ite(86, 70, 71) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : ite(80, 54, 92) : BV:8
94 : bvadd(66, 51) : BV:32
95 : eq(94, 50) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 60) : BOOL
99 : eq(94, 63) : BOOL
100 : eq(94, 66) : BOOL
101 : eq(94, 68) : BOOL
102 : ite(101, 70, 71) : BV:8
103 : ite(100, 62, 102) : BV:8
104 : ite(99, 65, 103) : BV:8
105 : ite(98, 62, 104) : BV:8
106 : ite(97, 59, 105) : BV:8
107 : ite(96, 56, 106) : BV:8
108 : ite(95, 54, 107) : BV:8
109 : bvadd(60, 51) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 14) : BOOL
112 : eq(109, 57) : BOOL
113 : eq(109, 60) : BOOL
114 : eq(109, 63) : BOOL
115 : eq(109, 66) : BOOL
116 : eq(109, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 59, 120) : BV:8
122 : ite(111, 56, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(78, 93, 108, 123) : BV:32
125 : bvadd(47, 49, 124) : BV:32
126 : eq(125, 50) : BOOL
127 : eq(125, 14) : BOOL
128 : eq(125, 57) : BOOL
129 : eq(125, 60) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 68) : BOOL
133 : ite(132, 70, 71) : BV:8
134 : ite(131, 62, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 59, 136) : BV:8
138 : ite(127, 56, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(36, 49, 124) : BV:32
141 : eq(140, 50) : BOOL
142 : eq(140, 14) : BOOL
143 : eq(140, 57) : BOOL
144 : eq(140, 60) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 68) : BOOL
148 : ite(147, 70, 71) : BV:8
149 : ite(146, 62, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 59, 151) : BV:8
153 : ite(142, 56, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(32, 49, 124) : BV:32
156 : eq(155, 50) : BOOL
157 : eq(155, 14) : BOOL
158 : eq(155, 57) : BOOL
159 : eq(155, 60) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 68) : BOOL
163 : ite(162, 70, 71) : BV:8
164 : ite(161, 62, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 59, 166) : BV:8
168 : ite(157, 56, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(49, 124) : BV:32
171 : eq(170, 50) : BOOL
172 : eq(170, 14) : BOOL
173 : eq(170, 57) : BOOL
174 : eq(170, 60) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 68) : BOOL
178 : ite(177, 70, 71) : BV:8
179 : ite(176, 62, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 59, 181) : BV:8
183 : ite(172, 56, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(46, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39405Var : BV:32
2 : Lambda39406Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 185 { 0xb9 -71 } : BV:8
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 16 { 0x10 } : BV:8
21 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 189 { 0xbd -67 } : BV:8
24 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 174 { 0xae -82 } : BV:8
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
30 : eq(12, 29) : BOOL
31 : 136 { 0x88 -120 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 23, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : bvadd(24, 11) : BV:32
41 : eq(40, 10) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : eq(40, 21) : BOOL
45 : eq(40, 24) : BOOL
46 : eq(40, 27) : BOOL
47 : eq(40, 29) : BOOL
48 : ite(47, 31, 32) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 26, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : ite(43, 20, 51) : BV:8
53 : ite(42, 17, 52) : BV:8
54 : ite(41, 14, 53) : BV:8
55 : bvadd(27, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : eq(55, 27) : BOOL
62 : eq(55, 29) : BOOL
63 : ite(62, 31, 32) : BV:8
64 : ite(61, 23, 63) : BV:8
65 : ite(60, 26, 64) : BV:8
66 : ite(59, 23, 65) : BV:8
67 : ite(58, 20, 66) : BV:8
68 : ite(57, 17, 67) : BV:8
69 : ite(56, 14, 68) : BV:8
70 : bvadd(21, 11) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 15) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : eq(70, 24) : BOOL
76 : eq(70, 27) : BOOL
77 : eq(70, 29) : BOOL
78 : ite(77, 31, 32) : BV:8
79 : ite(76, 23, 78) : BV:8
80 : ite(75, 26, 79) : BV:8
81 : ite(74, 23, 80) : BV:8
82 : ite(73, 20, 81) : BV:8
83 : ite(72, 17, 82) : BV:8
84 : ite(71, 14, 83) : BV:8
85 : bvconcat(39, 54, 69, 84) : BV:32
86 : bvadd(7, 9, 85) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : eq(86, 24) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 29) : BOOL
94 : ite(93, 31, 32) : BV:8
95 : ite(92, 23, 94) : BV:8
96 : ite(91, 26, 95) : BV:8
97 : ite(90, 23, 96) : BV:8
98 : ite(89, 20, 97) : BV:8
99 : ite(88, 17, 98) : BV:8
100 : ite(87, 14, 99) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 9, 85) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : eq(102, 27) : BOOL
109 : eq(102, 29) : BOOL
110 : ite(109, 31, 32) : BV:8
111 : ite(108, 23, 110) : BV:8
112 : ite(107, 26, 111) : BV:8
113 : ite(106, 23, 112) : BV:8
114 : ite(105, 20, 113) : BV:8
115 : ite(104, 17, 114) : BV:8
116 : ite(103, 14, 115) : BV:8
117 : 1 { 0x1 +1.11e129 } : BV:32
118 : bvadd(117, 9, 85) : BV:32
119 : eq(118, 10) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 18) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 29) : BOOL
126 : ite(125, 31, 32) : BV:8
127 : ite(124, 23, 126) : BV:8
128 : ite(123, 26, 127) : BV:8
129 : ite(122, 23, 128) : BV:8
130 : ite(121, 20, 129) : BV:8
131 : ite(120, 17, 130) : BV:8
132 : ite(119, 14, 131) : BV:8
133 : bvadd(9, 85) : BV:32
134 : eq(133, 10) : BOOL
135 : eq(133, 15) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 29) : BOOL
141 : ite(140, 31, 32) : BV:8
142 : ite(139, 23, 141) : BV:8
143 : ite(138, 26, 142) : BV:8
144 : ite(137, 23, 143) : BV:8
145 : ite(136, 20, 144) : BV:8
146 : ite(135, 17, 145) : BV:8
147 : ite(134, 14, 146) : BV:8
148 : bvconcat(100, 116, 132, 147) : BV:32
149 : ite(6, 3, 148) : BV:32
150 : lambda(1, 2, 149) : FUNCTION[BV:32,BV:32 -> BV:32]
151 : sym_const(150) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 710621151 ] -> true, [ 710621152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39409Var : BV:32
2 : Lambda39410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39400Var : BV:32
2 : Lambda39401Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 710621151 { 0x2a5b37df +1.71264255e213 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 710621152 { 0x2a5b37e0 +1.71264266e213 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 710621153 { 0x2a5b37e1 +1.71264278e213 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda39416Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda39420Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda39424Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1073741960 { 0x40000088 +1.1621e1 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 185 { 0xb9 -71 } : BV:8
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : eq(9, 8) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 189 { 0xbd -67 } : BV:8
21 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
22 : eq(9, 21) : BOOL
23 : 174 { 0xae -82 } : BV:8
24 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
27 : eq(9, 26) : BOOL
28 : 136 { 0x88 -120 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 20, 30) : BV:8
32 : ite(22, 23, 31) : BV:8
33 : ite(19, 20, 32) : BV:8
34 : ite(16, 17, 33) : BV:8
35 : ite(14, 15, 34) : BV:8
36 : ite(11, 12, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 7, 8) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 8) : BOOL
42 : eq(38, 18) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 20, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 17, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 8) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : eq(54, 24) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 23, 63) : BV:8
65 : ite(58, 20, 64) : BV:8
66 : ite(57, 17, 65) : BV:8
67 : ite(56, 15, 66) : BV:8
68 : ite(55, 12, 67) : BV:8
69 : bvadd(7, 8) : BV:32
70 : eq(69, 10) : BOOL
71 : eq(69, 13) : BOOL
72 : eq(69, 8) : BOOL
73 : eq(69, 18) : BOOL
74 : eq(69, 21) : BOOL
75 : eq(69, 24) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 20, 77) : BV:8
79 : ite(74, 23, 78) : BV:8
80 : ite(73, 20, 79) : BV:8
81 : ite(72, 17, 80) : BV:8
82 : ite(71, 15, 81) : BV:8
83 : ite(70, 12, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
178322023
=counter_example_end
=global nodece 57 num_edges_traversed 5
=global nodece 57 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 58
=global nodece 58 nodece z3v487.ce4206.num_edges_traversed1
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3v487.ce4206 9e798776d9115ceb50a6de3b30c4a0ae
=input.spec-%var-x-1
1 : Lambda39584Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39585Var : BV:32
18 : Lambda39586Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda39587Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 33554435 { 0x2000003 +1.35e133 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
61 : eq(59, 60) : BOOL
62 : 4 { 0x4 } : BV:8
63 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
64 : eq(59, 63) : BOOL
65 : 127 { 0x7f } : BV:8
66 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
67 : eq(59, 66) : BOOL
68 : 252 { 0xfc -4 } : BV:8
69 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
70 : eq(59, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
73 : eq(59, 72) : BOOL
74 : 0 { 0x0 } : BV:8
75 : ite(73, 71, 74) : BV:8
76 : ite(70, 71, 75) : BV:8
77 : ite(67, 68, 76) : BV:8
78 : ite(64, 65, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : 33554434 { 0x2000002 +1.23e133 } : BV:32
81 : bvadd(80, 58) : BV:32
82 : eq(81, 60) : BOOL
83 : eq(81, 63) : BOOL
84 : eq(81, 66) : BOOL
85 : eq(81, 69) : BOOL
86 : eq(81, 72) : BOOL
87 : ite(86, 71, 74) : BV:8
88 : ite(85, 71, 87) : BV:8
89 : ite(84, 68, 88) : BV:8
90 : ite(83, 65, 89) : BV:8
91 : ite(82, 62, 90) : BV:8
92 : 33554433 { 0x2000001 +1.11e133 } : BV:32
93 : bvadd(92, 58) : BV:32
94 : eq(93, 60) : BOOL
95 : eq(93, 63) : BOOL
96 : eq(93, 66) : BOOL
97 : eq(93, 69) : BOOL
98 : eq(93, 72) : BOOL
99 : ite(98, 71, 74) : BV:8
100 : ite(97, 71, 99) : BV:8
101 : ite(96, 68, 100) : BV:8
102 : ite(95, 65, 101) : BV:8
103 : ite(94, 62, 102) : BV:8
104 : 33554432 { 0x2000000 +1.0e133 } : BV:32
105 : bvadd(104, 58) : BV:32
106 : eq(105, 60) : BOOL
107 : eq(105, 63) : BOOL
108 : eq(105, 66) : BOOL
109 : eq(105, 69) : BOOL
110 : eq(105, 72) : BOOL
111 : ite(110, 71, 74) : BV:8
112 : ite(109, 71, 111) : BV:8
113 : ite(108, 68, 112) : BV:8
114 : ite(107, 65, 113) : BV:8
115 : ite(106, 62, 114) : BV:8
116 : bvconcat(79, 91, 103, 115) : BV:32
117 : bvadd(34, 56, 116) : BV:32
118 : eq(117, 60) : BOOL
119 : eq(117, 63) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 69) : BOOL
122 : eq(117, 72) : BOOL
123 : ite(122, 71, 74) : BV:8
124 : ite(121, 71, 123) : BV:8
125 : ite(120, 68, 124) : BV:8
126 : ite(119, 65, 125) : BV:8
127 : ite(118, 62, 126) : BV:8
128 : 2 { 0x2 +1.23e129 } : BV:32
129 : bvadd(128, 56, 116) : BV:32
130 : eq(129, 60) : BOOL
131 : eq(129, 63) : BOOL
132 : eq(129, 66) : BOOL
133 : eq(129, 69) : BOOL
134 : eq(129, 72) : BOOL
135 : ite(134, 71, 74) : BV:8
136 : ite(133, 71, 135) : BV:8
137 : ite(132, 68, 136) : BV:8
138 : ite(131, 65, 137) : BV:8
139 : ite(130, 62, 138) : BV:8
140 : 1 { 0x1 +1.11e129 } : BV:32
141 : bvadd(140, 56, 116) : BV:32
142 : eq(141, 60) : BOOL
143 : eq(141, 63) : BOOL
144 : eq(141, 66) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : ite(146, 71, 74) : BV:8
148 : ite(145, 71, 147) : BV:8
149 : ite(144, 68, 148) : BV:8
150 : ite(143, 65, 149) : BV:8
151 : ite(142, 62, 150) : BV:8
152 : bvadd(56, 116) : BV:32
153 : eq(152, 60) : BOOL
154 : eq(152, 63) : BOOL
155 : eq(152, 66) : BOOL
156 : eq(152, 69) : BOOL
157 : eq(152, 72) : BOOL
158 : ite(157, 71, 74) : BV:8
159 : ite(156, 71, 158) : BV:8
160 : ite(155, 68, 159) : BV:8
161 : ite(154, 65, 160) : BV:8
162 : ite(153, 62, 161) : BV:8
163 : bvconcat(127, 139, 151, 162) : BV:32
164 : ite(55, 2, 163) : BV:32
165 : lambda(52, 164) : FUNCTION[BV:32 -> BV:32]
166 : map(51, 165) : MAP[BV:32 -> BV:32]
167 : lambda(17, 166) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
168 : map(16, 167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
169 : sym_const(168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39605Var : BV:32
18 : Lambda39606Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda39607Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 33554435 { 0x2000003 +1.35e133 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
80 : eq(78, 79) : BOOL
81 : 4 { 0x4 } : BV:8
82 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
83 : eq(78, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
86 : eq(78, 85) : BOOL
87 : 252 { 0xfc -4 } : BV:8
88 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
89 : eq(78, 88) : BOOL
90 : 255 { 0xff -1 } : BV:8
91 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
92 : eq(78, 91) : BOOL
93 : 0 { 0x0 } : BV:8
94 : ite(92, 90, 93) : BV:8
95 : ite(89, 90, 94) : BV:8
96 : ite(86, 87, 95) : BV:8
97 : ite(83, 84, 96) : BV:8
98 : ite(80, 81, 97) : BV:8
99 : 33554434 { 0x2000002 +1.23e133 } : BV:32
100 : bvadd(99, 77) : BV:32
101 : eq(100, 79) : BOOL
102 : eq(100, 82) : BOOL
103 : eq(100, 85) : BOOL
104 : eq(100, 88) : BOOL
105 : eq(100, 91) : BOOL
106 : ite(105, 90, 93) : BV:8
107 : ite(104, 90, 106) : BV:8
108 : ite(103, 87, 107) : BV:8
109 : ite(102, 84, 108) : BV:8
110 : ite(101, 81, 109) : BV:8
111 : 33554433 { 0x2000001 +1.11e133 } : BV:32
112 : bvadd(111, 77) : BV:32
113 : eq(112, 79) : BOOL
114 : eq(112, 82) : BOOL
115 : eq(112, 85) : BOOL
116 : eq(112, 88) : BOOL
117 : eq(112, 91) : BOOL
118 : ite(117, 90, 93) : BV:8
119 : ite(116, 90, 118) : BV:8
120 : ite(115, 87, 119) : BV:8
121 : ite(114, 84, 120) : BV:8
122 : ite(113, 81, 121) : BV:8
123 : 33554432 { 0x2000000 +1.0e133 } : BV:32
124 : bvadd(123, 77) : BV:32
125 : eq(124, 79) : BOOL
126 : eq(124, 82) : BOOL
127 : eq(124, 85) : BOOL
128 : eq(124, 88) : BOOL
129 : eq(124, 91) : BOOL
130 : ite(129, 90, 93) : BV:8
131 : ite(128, 90, 130) : BV:8
132 : ite(127, 87, 131) : BV:8
133 : ite(126, 84, 132) : BV:8
134 : ite(125, 81, 133) : BV:8
135 : bvconcat(98, 110, 122, 134) : BV:32
136 : bvadd(34, 75, 135) : BV:32
137 : eq(136, 79) : BOOL
138 : eq(136, 82) : BOOL
139 : eq(136, 85) : BOOL
140 : eq(136, 88) : BOOL
141 : eq(136, 91) : BOOL
142 : ite(141, 90, 93) : BV:8
143 : ite(140, 90, 142) : BV:8
144 : ite(139, 87, 143) : BV:8
145 : ite(138, 84, 144) : BV:8
146 : ite(137, 81, 145) : BV:8
147 : 2 { 0x2 +1.23e129 } : BV:32
148 : bvadd(147, 75, 135) : BV:32
149 : eq(148, 79) : BOOL
150 : eq(148, 82) : BOOL
151 : eq(148, 85) : BOOL
152 : eq(148, 88) : BOOL
153 : eq(148, 91) : BOOL
154 : ite(153, 90, 93) : BV:8
155 : ite(152, 90, 154) : BV:8
156 : ite(151, 87, 155) : BV:8
157 : ite(150, 84, 156) : BV:8
158 : ite(149, 81, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 75, 135) : BV:32
161 : eq(160, 79) : BOOL
162 : eq(160, 82) : BOOL
163 : eq(160, 85) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : ite(165, 90, 93) : BV:8
167 : ite(164, 90, 166) : BV:8
168 : ite(163, 87, 167) : BV:8
169 : ite(162, 84, 168) : BV:8
170 : ite(161, 81, 169) : BV:8
171 : bvadd(75, 135) : BV:32
172 : eq(171, 79) : BOOL
173 : eq(171, 82) : BOOL
174 : eq(171, 85) : BOOL
175 : eq(171, 88) : BOOL
176 : eq(171, 91) : BOOL
177 : ite(176, 90, 93) : BV:8
178 : ite(175, 90, 177) : BV:8
179 : ite(174, 87, 178) : BV:8
180 : ite(173, 84, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : bvconcat(146, 158, 170, 181) : BV:32
183 : ite(55, 2, 182) : BV:32
184 : ite(74, 182, 183) : BV:32
185 : ite(55, 2, 184) : BV:32
186 : lambda(52, 185) : FUNCTION[BV:32 -> BV:32]
187 : map(51, 186) : MAP[BV:32 -> BV:32]
188 : lambda(17, 187) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
189 : map(16, 188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
190 : sym_const(189) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554427 ] -> 0, [ 33554428; 33554428 ] -> 252, [ 33554429; 33554430 ] -> 255, [ 33554431; 33554431 ] -> 127, [ 33554432; 2147483655 ] -> 0, [ 2147483656; 2147483656 ] -> 4, [ 2147483657; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65536059 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65536060; 65536063 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 65536064; 70555651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 70555652; 70555655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 70555656; 555518975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555518976; 555518979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 555518980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 555518976 { 0x211c8c00 +1.22302246e195 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 65536060 { 0x3e8003c +1.81250715e136 } : BV:32
=input.dst.llvm-%n
1 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 70555652 { 0x4349804 +1.41088914e137 } : BV:32
=input.dst.llvm-%x
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39611Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39612Var : BV:32
18 : eq(17, 4) : BOOL
19 : bvmul(8, 17) : BV:32
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : bvadd(4, 19, 20) : BV:32
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
26 : eq(21, 25) : BOOL
27 : 127 { 0x7f } : BV:8
28 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
29 : eq(21, 28) : BOOL
30 : 252 { 0xfc -4 } : BV:8
31 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
32 : eq(21, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
35 : eq(21, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 33, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(23, 24, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 19, 20) : BV:32
44 : eq(43, 22) : BOOL
45 : eq(43, 25) : BOOL
46 : eq(43, 28) : BOOL
47 : eq(43, 31) : BOOL
48 : eq(43, 34) : BOOL
49 : ite(48, 33, 36) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 30, 50) : BV:8
52 : ite(45, 27, 51) : BV:8
53 : ite(44, 24, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 19, 20) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 25) : BOOL
58 : eq(55, 28) : BOOL
59 : eq(55, 31) : BOOL
60 : eq(55, 34) : BOOL
61 : ite(60, 33, 36) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 30, 62) : BV:8
64 : ite(57, 27, 63) : BV:8
65 : ite(56, 24, 64) : BV:8
66 : bvadd(19, 20) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 25) : BOOL
69 : eq(66, 28) : BOOL
70 : eq(66, 31) : BOOL
71 : eq(66, 34) : BOOL
72 : ite(71, 33, 36) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : bvconcat(41, 53, 65, 76) : BV:32
78 : ite(18, 8, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda39593Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda39594Var : BV:32
20 : eq(19, 6) : BOOL
21 : eq(19, 4) : BOOL
22 : bvmul(10, 19) : BV:32
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : bvadd(6, 22, 23) : BV:32
25 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
29 : eq(24, 28) : BOOL
30 : 127 { 0x7f } : BV:8
31 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
32 : eq(24, 31) : BOOL
33 : 252 { 0xfc -4 } : BV:8
34 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
35 : eq(24, 34) : BOOL
36 : 255 { 0xff -1 } : BV:8
37 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
38 : eq(24, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : ite(38, 36, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(32, 33, 41) : BV:8
43 : ite(29, 30, 42) : BV:8
44 : ite(26, 27, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 34) : BOOL
51 : eq(46, 37) : BOOL
52 : ite(51, 36, 39) : BV:8
53 : ite(50, 36, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 22, 23) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : ite(63, 36, 39) : BV:8
65 : ite(62, 36, 64) : BV:8
66 : ite(61, 33, 65) : BV:8
67 : ite(60, 30, 66) : BV:8
68 : ite(59, 27, 67) : BV:8
69 : bvadd(22, 23) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 31) : BOOL
73 : eq(69, 34) : BOOL
74 : eq(69, 37) : BOOL
75 : ite(74, 36, 39) : BV:8
76 : ite(73, 36, 75) : BV:8
77 : ite(72, 33, 76) : BV:8
78 : ite(71, 30, 77) : BV:8
79 : ite(70, 27, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(21, 4, 80) : BV:32
82 : ite(20, 10, 81) : BV:32
83 : lambda(19, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(18, 83) : MAP[BV:32 -> BV:32]
85 : sum(1, 2, 84) : SUM[UNIT,MAP[BV:32 -> BV:32]]
86 : sym_const(85) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(2, 2) : BOOL
19 : bvmul(7, 2) : BV:32
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : bvadd(2, 19, 20) : BV:32
22 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
26 : eq(21, 25) : BOOL
27 : 127 { 0x7f } : BV:8
28 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
29 : eq(21, 28) : BOOL
30 : 252 { 0xfc -4 } : BV:8
31 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
32 : eq(21, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
35 : eq(21, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 33, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(23, 24, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 19, 20) : BV:32
44 : eq(43, 22) : BOOL
45 : eq(43, 25) : BOOL
46 : eq(43, 28) : BOOL
47 : eq(43, 31) : BOOL
48 : eq(43, 34) : BOOL
49 : ite(48, 33, 36) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 30, 50) : BV:8
52 : ite(45, 27, 51) : BV:8
53 : ite(44, 24, 52) : BV:8
54 : bvadd(15, 19, 20) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 25) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 31) : BOOL
59 : eq(54, 34) : BOOL
60 : ite(59, 33, 36) : BV:8
61 : ite(58, 33, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 27, 62) : BV:8
64 : ite(55, 24, 63) : BV:8
65 : bvadd(19, 20) : BV:32
66 : eq(65, 22) : BOOL
67 : eq(65, 25) : BOOL
68 : eq(65, 28) : BOOL
69 : eq(65, 31) : BOOL
70 : eq(65, 34) : BOOL
71 : ite(70, 33, 36) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 30, 72) : BV:8
74 : ite(67, 27, 73) : BV:8
75 : ite(66, 24, 74) : BV:8
76 : bvconcat(41, 53, 64, 75) : BV:32
77 : ite(18, 7, 76) : BV:32
78 : sum(16, 17, 77) : SUM[UNIT,BV:32]
79 : sym_const(78) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1077364289 { 0x40374641 +1.43183147e1 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39616Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39617Var : BV:32
18 : eq(17, 4) : BOOL
19 : eq(17, 2) : BOOL
20 : bvmul(8, 17) : BV:32
21 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
27 : eq(22, 26) : BOOL
28 : 127 { 0x7f } : BV:8
29 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
30 : eq(22, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
33 : eq(22, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
36 : eq(22, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : ite(36, 34, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 32) : BOOL
49 : eq(44, 35) : BOOL
50 : ite(49, 34, 37) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : ite(61, 34, 37) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 31, 63) : BV:8
65 : ite(58, 28, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : bvadd(20, 21) : BV:32
68 : eq(67, 23) : BOOL
69 : eq(67, 26) : BOOL
70 : eq(67, 29) : BOOL
71 : eq(67, 32) : BOOL
72 : eq(67, 35) : BOOL
73 : ite(72, 34, 37) : BV:8
74 : ite(71, 34, 73) : BV:8
75 : ite(70, 31, 74) : BV:8
76 : ite(69, 28, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : bvconcat(42, 54, 66, 77) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : ite(18, 8, 79) : BV:32
81 : lambda(17, 80) : FUNCTION[BV:32 -> BV:32]
82 : map(16, 81) : MAP[BV:32 -> BV:32]
83 : sym_const(82) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 57770564 { 0x3718244 +1.88678789e135 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 65536060 { 0x3e8003c +1.81250715e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 65536063 { 0x3e8003f +1.81250751e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 70555652 { 0x4349804 +1.41088914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 70555655 { 0x4349807 +1.41088950e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 555518976 { 0x211c8c00 +1.22302246e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 555518979 { 0x211c8c03 +1.22302281e195 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39426Var : BV:32
2 : Lambda39427Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 33554435 { 0x2000003 +1.35e133 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
17 : eq(12, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
20 : eq(12, 19) : BOOL
21 : 252 { 0xfc -4 } : BV:8
22 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
23 : eq(12, 22) : BOOL
24 : 255 { 0xff -1 } : BV:8
25 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
26 : eq(12, 25) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 24, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : 33554434 { 0x2000002 +1.23e133 } : BV:32
34 : bvadd(33, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 24, 27) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : 33554433 { 0x2000001 +1.11e133 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : ite(51, 24, 27) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 21, 53) : BV:8
55 : ite(48, 18, 54) : BV:8
56 : ite(47, 15, 55) : BV:8
57 : 33554432 { 0x2000000 +1.0e133 } : BV:32
58 : bvadd(57, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 22) : BOOL
63 : eq(58, 25) : BOOL
64 : ite(63, 24, 27) : BV:8
65 : ite(62, 24, 64) : BV:8
66 : ite(61, 21, 65) : BV:8
67 : ite(60, 18, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(32, 44, 56, 68) : BV:32
70 : bvadd(7, 9, 69) : BV:32
71 : eq(70, 13) : BOOL
72 : eq(70, 16) : BOOL
73 : eq(70, 19) : BOOL
74 : eq(70, 22) : BOOL
75 : eq(70, 25) : BOOL
76 : ite(75, 24, 27) : BV:8
77 : ite(74, 24, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 18, 78) : BV:8
80 : ite(71, 15, 79) : BV:8
81 : 2 { 0x2 +1.23e129 } : BV:32
82 : bvadd(81, 9, 69) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : ite(87, 24, 27) : BV:8
89 : ite(86, 24, 88) : BV:8
90 : ite(85, 21, 89) : BV:8
91 : ite(84, 18, 90) : BV:8
92 : ite(83, 15, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 9, 69) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 19) : BOOL
98 : eq(94, 22) : BOOL
99 : eq(94, 25) : BOOL
100 : ite(99, 24, 27) : BV:8
101 : ite(98, 24, 100) : BV:8
102 : ite(97, 21, 101) : BV:8
103 : ite(96, 18, 102) : BV:8
104 : ite(95, 15, 103) : BV:8
105 : bvadd(9, 69) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 19) : BOOL
109 : eq(105, 22) : BOOL
110 : eq(105, 25) : BOOL
111 : ite(110, 24, 27) : BV:8
112 : ite(109, 24, 111) : BV:8
113 : ite(108, 21, 112) : BV:8
114 : ite(107, 18, 113) : BV:8
115 : ite(106, 15, 114) : BV:8
116 : bvconcat(80, 92, 104, 115) : BV:32
117 : ite(6, 3, 116) : BV:32
118 : lambda(1, 2, 117) : FUNCTION[BV:32,BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39428Var : BV:32
2 : Lambda39429Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 33554435 { 0x2000003 +1.35e133 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
53 : eq(51, 52) : BOOL
54 : 4 { 0x4 } : BV:8
55 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
56 : eq(51, 55) : BOOL
57 : 127 { 0x7f } : BV:8
58 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
59 : eq(51, 58) : BOOL
60 : 252 { 0xfc -4 } : BV:8
61 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
62 : eq(51, 61) : BOOL
63 : 255 { 0xff -1 } : BV:8
64 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
65 : eq(51, 64) : BOOL
66 : 0 { 0x0 } : BV:8
67 : ite(65, 63, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(59, 60, 68) : BV:8
70 : ite(56, 57, 69) : BV:8
71 : ite(53, 54, 70) : BV:8
72 : 33554434 { 0x2000002 +1.23e133 } : BV:32
73 : bvadd(72, 50) : BV:32
74 : eq(73, 52) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 58) : BOOL
77 : eq(73, 61) : BOOL
78 : eq(73, 64) : BOOL
79 : ite(78, 63, 66) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : ite(76, 60, 80) : BV:8
82 : ite(75, 57, 81) : BV:8
83 : ite(74, 54, 82) : BV:8
84 : 33554433 { 0x2000001 +1.11e133 } : BV:32
85 : bvadd(84, 50) : BV:32
86 : eq(85, 52) : BOOL
87 : eq(85, 55) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 61) : BOOL
90 : eq(85, 64) : BOOL
91 : ite(90, 63, 66) : BV:8
92 : ite(89, 63, 91) : BV:8
93 : ite(88, 60, 92) : BV:8
94 : ite(87, 57, 93) : BV:8
95 : ite(86, 54, 94) : BV:8
96 : 33554432 { 0x2000000 +1.0e133 } : BV:32
97 : bvadd(96, 50) : BV:32
98 : eq(97, 52) : BOOL
99 : eq(97, 55) : BOOL
100 : eq(97, 58) : BOOL
101 : eq(97, 61) : BOOL
102 : eq(97, 64) : BOOL
103 : ite(102, 63, 66) : BV:8
104 : ite(101, 63, 103) : BV:8
105 : ite(100, 60, 104) : BV:8
106 : ite(99, 57, 105) : BV:8
107 : ite(98, 54, 106) : BV:8
108 : bvconcat(71, 83, 95, 107) : BV:32
109 : bvadd(30, 48, 108) : BV:32
110 : eq(109, 52) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 58) : BOOL
113 : eq(109, 61) : BOOL
114 : eq(109, 64) : BOOL
115 : ite(114, 63, 66) : BV:8
116 : ite(113, 63, 115) : BV:8
117 : ite(112, 60, 116) : BV:8
118 : ite(111, 57, 117) : BV:8
119 : ite(110, 54, 118) : BV:8
120 : 2 { 0x2 +1.23e129 } : BV:32
121 : bvadd(120, 48, 108) : BV:32
122 : eq(121, 52) : BOOL
123 : eq(121, 55) : BOOL
124 : eq(121, 58) : BOOL
125 : eq(121, 61) : BOOL
126 : eq(121, 64) : BOOL
127 : ite(126, 63, 66) : BV:8
128 : ite(125, 63, 127) : BV:8
129 : ite(124, 60, 128) : BV:8
130 : ite(123, 57, 129) : BV:8
131 : ite(122, 54, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 48, 108) : BV:32
134 : eq(133, 52) : BOOL
135 : eq(133, 55) : BOOL
136 : eq(133, 58) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : ite(138, 63, 66) : BV:8
140 : ite(137, 63, 139) : BV:8
141 : ite(136, 60, 140) : BV:8
142 : ite(135, 57, 141) : BV:8
143 : ite(134, 54, 142) : BV:8
144 : bvadd(48, 108) : BV:32
145 : eq(144, 52) : BOOL
146 : eq(144, 55) : BOOL
147 : eq(144, 58) : BOOL
148 : eq(144, 61) : BOOL
149 : eq(144, 64) : BOOL
150 : ite(149, 63, 66) : BV:8
151 : ite(148, 63, 150) : BV:8
152 : ite(147, 60, 151) : BV:8
153 : ite(146, 57, 152) : BV:8
154 : ite(145, 54, 153) : BV:8
155 : bvconcat(119, 131, 143, 154) : BV:32
156 : ite(6, 3, 155) : BV:32
157 : ite(47, 155, 156) : BV:32
158 : ite(6, 3, 157) : BV:32
159 : lambda(1, 2, 158) : FUNCTION[BV:32,BV:32 -> BV:32]
160 : sym_const(159) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3141396271 ] -> true, [ 3141396272; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3141396271 ] -> true, [ 3141396272; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39433Var : BV:32
2 : Lambda39434Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39440Var : BV:32
2 : Lambda39441Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda39447Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : bvmul(4, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
14 : eq(9, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
17 : eq(9, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
20 : eq(9, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
23 : eq(9, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : ite(23, 21, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 22) : BOOL
37 : ite(36, 21, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : ite(48, 21, 24) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 18, 50) : BV:8
52 : ite(45, 15, 51) : BV:8
53 : ite(44, 12, 52) : BV:8
54 : bvadd(7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : eq(54, 22) : BOOL
60 : ite(59, 21, 24) : BV:8
61 : ite(58, 21, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 15, 62) : BV:8
64 : ite(55, 12, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(6, 5, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda39451Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : bvmul(4, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
14 : eq(9, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
17 : eq(9, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
20 : eq(9, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
23 : eq(9, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : ite(23, 21, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 22) : BOOL
37 : ite(36, 21, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : ite(48, 21, 24) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 18, 50) : BV:8
52 : ite(45, 15, 51) : BV:8
53 : ite(44, 12, 52) : BV:8
54 : bvadd(7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : eq(54, 22) : BOOL
60 : ite(59, 21, 24) : BV:8
61 : ite(58, 21, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 15, 62) : BV:8
64 : ite(55, 12, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(6, 5, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda39455Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
7 : bvadd(2, 5, 6) : BV:32
8 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : eq(7, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
15 : eq(7, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
18 : eq(7, 17) : BOOL
19 : 255 { 0xff -1 } : BV:8
20 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
21 : eq(7, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : ite(21, 19, 22) : BV:8
24 : ite(18, 19, 23) : BV:8
25 : ite(15, 16, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : ite(9, 10, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 5, 6) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : eq(29, 14) : BOOL
33 : eq(29, 17) : BOOL
34 : eq(29, 20) : BOOL
35 : ite(34, 19, 22) : BV:8
36 : ite(33, 19, 35) : BV:8
37 : ite(32, 16, 36) : BV:8
38 : ite(31, 13, 37) : BV:8
39 : ite(30, 10, 38) : BV:8
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvadd(40, 5, 6) : BV:32
42 : eq(41, 8) : BOOL
43 : eq(41, 11) : BOOL
44 : eq(41, 14) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 20) : BOOL
47 : ite(46, 19, 22) : BV:8
48 : ite(45, 19, 47) : BV:8
49 : ite(44, 16, 48) : BV:8
50 : ite(43, 13, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : bvadd(5, 6) : BV:32
53 : eq(52, 8) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 17) : BOOL
57 : eq(52, 20) : BOOL
58 : ite(57, 19, 22) : BV:8
59 : ite(56, 19, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 13, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : bvconcat(27, 39, 51, 62) : BV:32
64 : ite(3, 4, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2018434363
=counter_example_end
=global nodece 58 num_edges_traversed 1
=global nodece 58 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3v487.ce4371.num_edges_traversed3
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3v487.ce4371 6d31ca3178e09c296ba939d4225c655
=input.spec-%var-x-1
1 : Lambda39584Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39585Var : BV:32
18 : Lambda39586Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda39587Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 33554435 { 0x2000003 +1.35e133 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
61 : eq(59, 60) : BOOL
62 : 4 { 0x4 } : BV:8
63 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
64 : eq(59, 63) : BOOL
65 : 127 { 0x7f } : BV:8
66 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
67 : eq(59, 66) : BOOL
68 : 252 { 0xfc -4 } : BV:8
69 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
70 : eq(59, 69) : BOOL
71 : 255 { 0xff -1 } : BV:8
72 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
73 : eq(59, 72) : BOOL
74 : 0 { 0x0 } : BV:8
75 : ite(73, 71, 74) : BV:8
76 : ite(70, 71, 75) : BV:8
77 : ite(67, 68, 76) : BV:8
78 : ite(64, 65, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : 33554434 { 0x2000002 +1.23e133 } : BV:32
81 : bvadd(80, 58) : BV:32
82 : eq(81, 60) : BOOL
83 : eq(81, 63) : BOOL
84 : eq(81, 66) : BOOL
85 : eq(81, 69) : BOOL
86 : eq(81, 72) : BOOL
87 : ite(86, 71, 74) : BV:8
88 : ite(85, 71, 87) : BV:8
89 : ite(84, 68, 88) : BV:8
90 : ite(83, 65, 89) : BV:8
91 : ite(82, 62, 90) : BV:8
92 : 33554433 { 0x2000001 +1.11e133 } : BV:32
93 : bvadd(92, 58) : BV:32
94 : eq(93, 60) : BOOL
95 : eq(93, 63) : BOOL
96 : eq(93, 66) : BOOL
97 : eq(93, 69) : BOOL
98 : eq(93, 72) : BOOL
99 : ite(98, 71, 74) : BV:8
100 : ite(97, 71, 99) : BV:8
101 : ite(96, 68, 100) : BV:8
102 : ite(95, 65, 101) : BV:8
103 : ite(94, 62, 102) : BV:8
104 : 33554432 { 0x2000000 +1.0e133 } : BV:32
105 : bvadd(104, 58) : BV:32
106 : eq(105, 60) : BOOL
107 : eq(105, 63) : BOOL
108 : eq(105, 66) : BOOL
109 : eq(105, 69) : BOOL
110 : eq(105, 72) : BOOL
111 : ite(110, 71, 74) : BV:8
112 : ite(109, 71, 111) : BV:8
113 : ite(108, 68, 112) : BV:8
114 : ite(107, 65, 113) : BV:8
115 : ite(106, 62, 114) : BV:8
116 : bvconcat(79, 91, 103, 115) : BV:32
117 : bvadd(34, 56, 116) : BV:32
118 : eq(117, 60) : BOOL
119 : eq(117, 63) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 69) : BOOL
122 : eq(117, 72) : BOOL
123 : ite(122, 71, 74) : BV:8
124 : ite(121, 71, 123) : BV:8
125 : ite(120, 68, 124) : BV:8
126 : ite(119, 65, 125) : BV:8
127 : ite(118, 62, 126) : BV:8
128 : 2 { 0x2 +1.23e129 } : BV:32
129 : bvadd(128, 56, 116) : BV:32
130 : eq(129, 60) : BOOL
131 : eq(129, 63) : BOOL
132 : eq(129, 66) : BOOL
133 : eq(129, 69) : BOOL
134 : eq(129, 72) : BOOL
135 : ite(134, 71, 74) : BV:8
136 : ite(133, 71, 135) : BV:8
137 : ite(132, 68, 136) : BV:8
138 : ite(131, 65, 137) : BV:8
139 : ite(130, 62, 138) : BV:8
140 : 1 { 0x1 +1.11e129 } : BV:32
141 : bvadd(140, 56, 116) : BV:32
142 : eq(141, 60) : BOOL
143 : eq(141, 63) : BOOL
144 : eq(141, 66) : BOOL
145 : eq(141, 69) : BOOL
146 : eq(141, 72) : BOOL
147 : ite(146, 71, 74) : BV:8
148 : ite(145, 71, 147) : BV:8
149 : ite(144, 68, 148) : BV:8
150 : ite(143, 65, 149) : BV:8
151 : ite(142, 62, 150) : BV:8
152 : bvadd(56, 116) : BV:32
153 : eq(152, 60) : BOOL
154 : eq(152, 63) : BOOL
155 : eq(152, 66) : BOOL
156 : eq(152, 69) : BOOL
157 : eq(152, 72) : BOOL
158 : ite(157, 71, 74) : BV:8
159 : ite(156, 71, 158) : BV:8
160 : ite(155, 68, 159) : BV:8
161 : ite(154, 65, 160) : BV:8
162 : ite(153, 62, 161) : BV:8
163 : bvconcat(127, 139, 151, 162) : BV:32
164 : ite(55, 2, 163) : BV:32
165 : lambda(52, 164) : FUNCTION[BV:32 -> BV:32]
166 : map(51, 165) : MAP[BV:32 -> BV:32]
167 : lambda(17, 166) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
168 : map(16, 167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
169 : sym_const(168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39605Var : BV:32
18 : Lambda39606Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda39607Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 33554435 { 0x2000003 +1.35e133 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
80 : eq(78, 79) : BOOL
81 : 4 { 0x4 } : BV:8
82 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
83 : eq(78, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
86 : eq(78, 85) : BOOL
87 : 252 { 0xfc -4 } : BV:8
88 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
89 : eq(78, 88) : BOOL
90 : 255 { 0xff -1 } : BV:8
91 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
92 : eq(78, 91) : BOOL
93 : 0 { 0x0 } : BV:8
94 : ite(92, 90, 93) : BV:8
95 : ite(89, 90, 94) : BV:8
96 : ite(86, 87, 95) : BV:8
97 : ite(83, 84, 96) : BV:8
98 : ite(80, 81, 97) : BV:8
99 : 33554434 { 0x2000002 +1.23e133 } : BV:32
100 : bvadd(99, 77) : BV:32
101 : eq(100, 79) : BOOL
102 : eq(100, 82) : BOOL
103 : eq(100, 85) : BOOL
104 : eq(100, 88) : BOOL
105 : eq(100, 91) : BOOL
106 : ite(105, 90, 93) : BV:8
107 : ite(104, 90, 106) : BV:8
108 : ite(103, 87, 107) : BV:8
109 : ite(102, 84, 108) : BV:8
110 : ite(101, 81, 109) : BV:8
111 : 33554433 { 0x2000001 +1.11e133 } : BV:32
112 : bvadd(111, 77) : BV:32
113 : eq(112, 79) : BOOL
114 : eq(112, 82) : BOOL
115 : eq(112, 85) : BOOL
116 : eq(112, 88) : BOOL
117 : eq(112, 91) : BOOL
118 : ite(117, 90, 93) : BV:8
119 : ite(116, 90, 118) : BV:8
120 : ite(115, 87, 119) : BV:8
121 : ite(114, 84, 120) : BV:8
122 : ite(113, 81, 121) : BV:8
123 : 33554432 { 0x2000000 +1.0e133 } : BV:32
124 : bvadd(123, 77) : BV:32
125 : eq(124, 79) : BOOL
126 : eq(124, 82) : BOOL
127 : eq(124, 85) : BOOL
128 : eq(124, 88) : BOOL
129 : eq(124, 91) : BOOL
130 : ite(129, 90, 93) : BV:8
131 : ite(128, 90, 130) : BV:8
132 : ite(127, 87, 131) : BV:8
133 : ite(126, 84, 132) : BV:8
134 : ite(125, 81, 133) : BV:8
135 : bvconcat(98, 110, 122, 134) : BV:32
136 : bvadd(34, 75, 135) : BV:32
137 : eq(136, 79) : BOOL
138 : eq(136, 82) : BOOL
139 : eq(136, 85) : BOOL
140 : eq(136, 88) : BOOL
141 : eq(136, 91) : BOOL
142 : ite(141, 90, 93) : BV:8
143 : ite(140, 90, 142) : BV:8
144 : ite(139, 87, 143) : BV:8
145 : ite(138, 84, 144) : BV:8
146 : ite(137, 81, 145) : BV:8
147 : 2 { 0x2 +1.23e129 } : BV:32
148 : bvadd(147, 75, 135) : BV:32
149 : eq(148, 79) : BOOL
150 : eq(148, 82) : BOOL
151 : eq(148, 85) : BOOL
152 : eq(148, 88) : BOOL
153 : eq(148, 91) : BOOL
154 : ite(153, 90, 93) : BV:8
155 : ite(152, 90, 154) : BV:8
156 : ite(151, 87, 155) : BV:8
157 : ite(150, 84, 156) : BV:8
158 : ite(149, 81, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 75, 135) : BV:32
161 : eq(160, 79) : BOOL
162 : eq(160, 82) : BOOL
163 : eq(160, 85) : BOOL
164 : eq(160, 88) : BOOL
165 : eq(160, 91) : BOOL
166 : ite(165, 90, 93) : BV:8
167 : ite(164, 90, 166) : BV:8
168 : ite(163, 87, 167) : BV:8
169 : ite(162, 84, 168) : BV:8
170 : ite(161, 81, 169) : BV:8
171 : bvadd(75, 135) : BV:32
172 : eq(171, 79) : BOOL
173 : eq(171, 82) : BOOL
174 : eq(171, 85) : BOOL
175 : eq(171, 88) : BOOL
176 : eq(171, 91) : BOOL
177 : ite(176, 90, 93) : BV:8
178 : ite(175, 90, 177) : BV:8
179 : ite(174, 87, 178) : BV:8
180 : ite(173, 84, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : bvconcat(146, 158, 170, 181) : BV:32
183 : ite(55, 2, 182) : BV:32
184 : ite(74, 182, 183) : BV:32
185 : ite(55, 2, 184) : BV:32
186 : lambda(52, 185) : FUNCTION[BV:32 -> BV:32]
187 : map(51, 186) : MAP[BV:32 -> BV:32]
188 : lambda(17, 187) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
189 : map(16, 188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
190 : sym_const(189) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554427 ] -> 0, [ 33554428; 33554428 ] -> 252, [ 33554429; 33554430 ] -> 255, [ 33554431; 33554431 ] -> 127, [ 33554432; 2147483655 ] -> 0, [ 2147483656; 2147483656 ] -> 4, [ 2147483657; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65536059 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65536060; 65536063 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 65536064; 70555651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 70555652; 70555655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 70555656; 555518975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555518976; 555518979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 555518980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 555518976 { 0x211c8c00 +1.22302246e195 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 65536060 { 0x3e8003c +1.81250715e136 } : BV:32
=input.dst.llvm-%n
1 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 70555652 { 0x4349804 +1.41088914e137 } : BV:32
=input.dst.llvm-%x
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1565508164 { 0x5d4fc244 +1.62311601e59 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda40044Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda40045Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : and(14, 11) : BOOL
47 : ite(46, 39, 39) : BOOL
48 : ite(7, 38, 47) : BOOL
49 : bvule(2, 42) : BOOL
50 : bvule(42, 22) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 25) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(29, 42) : BOOL
56 : bvule(42, 10) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 29, 29) : BV:32
59 : ite(54, 25, 58) : BV:32
60 : ite(51, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(20, 61) : BOOL
63 : ite(62, 38, 39) : BOOL
64 : and(48, 63) : BOOL
65 : bvmul(25, 42) : BV:32
66 : 33554435 { 0x2000003 +1.35e133 } : BV:32
67 : bvmul(25, 3) : BV:32
68 : bvadd(66, 67) : BV:32
69 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
70 : eq(68, 69) : BOOL
71 : 4 { 0x4 } : BV:8
72 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
73 : eq(68, 72) : BOOL
74 : 127 { 0x7f } : BV:8
75 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
76 : eq(68, 75) : BOOL
77 : 252 { 0xfc -4 } : BV:8
78 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
79 : eq(68, 78) : BOOL
80 : 255 { 0xff -1 } : BV:8
81 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
82 : eq(68, 81) : BOOL
83 : 0 { 0x0 } : BV:8
84 : ite(82, 80, 83) : BV:8
85 : ite(79, 80, 84) : BV:8
86 : ite(76, 77, 85) : BV:8
87 : ite(73, 74, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : 33554434 { 0x2000002 +1.23e133 } : BV:32
90 : bvadd(89, 67) : BV:32
91 : eq(90, 69) : BOOL
92 : eq(90, 72) : BOOL
93 : eq(90, 75) : BOOL
94 : eq(90, 78) : BOOL
95 : eq(90, 81) : BOOL
96 : ite(95, 80, 83) : BV:8
97 : ite(94, 80, 96) : BV:8
98 : ite(93, 77, 97) : BV:8
99 : ite(92, 74, 98) : BV:8
100 : ite(91, 71, 99) : BV:8
101 : 33554433 { 0x2000001 +1.11e133 } : BV:32
102 : bvadd(101, 67) : BV:32
103 : eq(102, 69) : BOOL
104 : eq(102, 72) : BOOL
105 : eq(102, 75) : BOOL
106 : eq(102, 78) : BOOL
107 : eq(102, 81) : BOOL
108 : ite(107, 80, 83) : BV:8
109 : ite(106, 80, 108) : BV:8
110 : ite(105, 77, 109) : BV:8
111 : ite(104, 74, 110) : BV:8
112 : ite(103, 71, 111) : BV:8
113 : 33554432 { 0x2000000 +1.0e133 } : BV:32
114 : bvadd(113, 67) : BV:32
115 : eq(114, 69) : BOOL
116 : eq(114, 72) : BOOL
117 : eq(114, 75) : BOOL
118 : eq(114, 78) : BOOL
119 : eq(114, 81) : BOOL
120 : ite(119, 80, 83) : BV:8
121 : ite(118, 80, 120) : BV:8
122 : ite(117, 77, 121) : BV:8
123 : ite(116, 74, 122) : BV:8
124 : ite(115, 71, 123) : BV:8
125 : bvconcat(88, 100, 112, 124) : BV:32
126 : bvadd(22, 65, 125) : BV:32
127 : eq(126, 69) : BOOL
128 : eq(126, 72) : BOOL
129 : eq(126, 75) : BOOL
130 : eq(126, 78) : BOOL
131 : eq(126, 81) : BOOL
132 : ite(131, 80, 83) : BV:8
133 : ite(130, 80, 132) : BV:8
134 : ite(129, 77, 133) : BV:8
135 : ite(128, 74, 134) : BV:8
136 : ite(127, 71, 135) : BV:8
137 : 2 { 0x2 +1.23e129 } : BV:32
138 : bvadd(137, 65, 125) : BV:32
139 : eq(138, 69) : BOOL
140 : eq(138, 72) : BOOL
141 : eq(138, 75) : BOOL
142 : eq(138, 78) : BOOL
143 : eq(138, 81) : BOOL
144 : ite(143, 80, 83) : BV:8
145 : ite(142, 80, 144) : BV:8
146 : ite(141, 77, 145) : BV:8
147 : ite(140, 74, 146) : BV:8
148 : ite(139, 71, 147) : BV:8
149 : 1 { 0x1 +1.11e129 } : BV:32
150 : bvadd(149, 65, 125) : BV:32
151 : eq(150, 69) : BOOL
152 : eq(150, 72) : BOOL
153 : eq(150, 75) : BOOL
154 : eq(150, 78) : BOOL
155 : eq(150, 81) : BOOL
156 : ite(155, 80, 83) : BV:8
157 : ite(154, 80, 156) : BV:8
158 : ite(153, 77, 157) : BV:8
159 : ite(152, 74, 158) : BV:8
160 : ite(151, 71, 159) : BV:8
161 : bvadd(65, 125) : BV:32
162 : eq(161, 69) : BOOL
163 : eq(161, 72) : BOOL
164 : eq(161, 75) : BOOL
165 : eq(161, 78) : BOOL
166 : eq(161, 81) : BOOL
167 : ite(166, 80, 83) : BV:8
168 : ite(165, 80, 167) : BV:8
169 : ite(164, 77, 168) : BV:8
170 : ite(163, 74, 169) : BV:8
171 : ite(162, 71, 170) : BV:8
172 : bvconcat(136, 148, 160, 171) : BV:32
173 : ite(45, 2, 172) : BV:32
174 : ite(64, 172, 173) : BV:32
175 : ite(45, 2, 174) : BV:32
176 : lambda(42, 175) : FUNCTION[BV:32 -> BV:32]
177 : map(41, 176) : MAP[BV:32 -> BV:32]
178 : sym_const(177) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda40034Var : BV:32
20 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
21 : bvule(20, 2) : BOOL
22 : and(21, 11) : BOOL
23 : bvule(2, 8) : BOOL
24 : and(9, 23) : BOOL
25 : ite(24, 8, 8) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(19, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 19) : BOOL
35 : bvule(19, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 19) : BOOL
39 : bvule(19, 10) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 1, 42) : BV:32
44 : eq(43, 1) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 7, 13) : BOOL
47 : lambda(19, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda40035Var : BV:32
49 : eq(2, 1) : BOOL
50 : eq(48, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(1, 48) : BOOL
53 : bvule(48, 30) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(33, 48) : BOOL
56 : bvule(48, 33) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(37, 48) : BOOL
59 : bvule(48, 10) : BOOL
60 : and(58, 59) : BOOL
61 : ite(60, 37, 37) : BV:32
62 : ite(57, 33, 61) : BV:32
63 : ite(54, 1, 62) : BV:32
64 : eq(63, 1) : BOOL
65 : and(28, 64) : BOOL
66 : ite(65, 7, 13) : BOOL
67 : and(15, 66) : BOOL
68 : bvmul(33, 48) : BV:32
69 : 33554435 { 0x2000003 +1.35e133 } : BV:32
70 : bvmul(33, 2) : BV:32
71 : bvadd(69, 70) : BV:32
72 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
73 : eq(71, 72) : BOOL
74 : 4 { 0x4 } : BV:8
75 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
76 : eq(71, 75) : BOOL
77 : 127 { 0x7f } : BV:8
78 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
79 : eq(71, 78) : BOOL
80 : 252 { 0xfc -4 } : BV:8
81 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
82 : eq(71, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
85 : eq(71, 84) : BOOL
86 : 0 { 0x0 } : BV:8
87 : ite(85, 83, 86) : BV:8
88 : ite(82, 83, 87) : BV:8
89 : ite(79, 80, 88) : BV:8
90 : ite(76, 77, 89) : BV:8
91 : ite(73, 74, 90) : BV:8
92 : 33554434 { 0x2000002 +1.23e133 } : BV:32
93 : bvadd(92, 70) : BV:32
94 : eq(93, 72) : BOOL
95 : eq(93, 75) : BOOL
96 : eq(93, 78) : BOOL
97 : eq(93, 81) : BOOL
98 : eq(93, 84) : BOOL
99 : ite(98, 83, 86) : BV:8
100 : ite(97, 83, 99) : BV:8
101 : ite(96, 80, 100) : BV:8
102 : ite(95, 77, 101) : BV:8
103 : ite(94, 74, 102) : BV:8
104 : 33554433 { 0x2000001 +1.11e133 } : BV:32
105 : bvadd(104, 70) : BV:32
106 : eq(105, 72) : BOOL
107 : eq(105, 75) : BOOL
108 : eq(105, 78) : BOOL
109 : eq(105, 81) : BOOL
110 : eq(105, 84) : BOOL
111 : ite(110, 83, 86) : BV:8
112 : ite(109, 83, 111) : BV:8
113 : ite(108, 80, 112) : BV:8
114 : ite(107, 77, 113) : BV:8
115 : ite(106, 74, 114) : BV:8
116 : 33554432 { 0x2000000 +1.0e133 } : BV:32
117 : bvadd(116, 70) : BV:32
118 : eq(117, 72) : BOOL
119 : eq(117, 75) : BOOL
120 : eq(117, 78) : BOOL
121 : eq(117, 81) : BOOL
122 : eq(117, 84) : BOOL
123 : ite(122, 83, 86) : BV:8
124 : ite(121, 83, 123) : BV:8
125 : ite(120, 80, 124) : BV:8
126 : ite(119, 77, 125) : BV:8
127 : ite(118, 74, 126) : BV:8
128 : bvconcat(91, 103, 115, 127) : BV:32
129 : bvadd(30, 68, 128) : BV:32
130 : eq(129, 72) : BOOL
131 : eq(129, 75) : BOOL
132 : eq(129, 78) : BOOL
133 : eq(129, 81) : BOOL
134 : eq(129, 84) : BOOL
135 : ite(134, 83, 86) : BV:8
136 : ite(133, 83, 135) : BV:8
137 : ite(132, 80, 136) : BV:8
138 : ite(131, 77, 137) : BV:8
139 : ite(130, 74, 138) : BV:8
140 : 2 { 0x2 +1.23e129 } : BV:32
141 : bvadd(140, 68, 128) : BV:32
142 : eq(141, 72) : BOOL
143 : eq(141, 75) : BOOL
144 : eq(141, 78) : BOOL
145 : eq(141, 81) : BOOL
146 : eq(141, 84) : BOOL
147 : ite(146, 83, 86) : BV:8
148 : ite(145, 83, 147) : BV:8
149 : ite(144, 80, 148) : BV:8
150 : ite(143, 77, 149) : BV:8
151 : ite(142, 74, 150) : BV:8
152 : bvadd(16, 68, 128) : BV:32
153 : eq(152, 72) : BOOL
154 : eq(152, 75) : BOOL
155 : eq(152, 78) : BOOL
156 : eq(152, 81) : BOOL
157 : eq(152, 84) : BOOL
158 : ite(157, 83, 86) : BV:8
159 : ite(156, 83, 158) : BV:8
160 : ite(155, 80, 159) : BV:8
161 : ite(154, 77, 160) : BV:8
162 : ite(153, 74, 161) : BV:8
163 : bvadd(68, 128) : BV:32
164 : eq(163, 72) : BOOL
165 : eq(163, 75) : BOOL
166 : eq(163, 78) : BOOL
167 : eq(163, 81) : BOOL
168 : eq(163, 84) : BOOL
169 : ite(168, 83, 86) : BV:8
170 : ite(167, 83, 169) : BV:8
171 : ite(166, 80, 170) : BV:8
172 : ite(165, 77, 171) : BV:8
173 : ite(164, 74, 172) : BV:8
174 : bvconcat(139, 151, 162, 173) : BV:32
175 : ite(51, 1, 174) : BV:32
176 : ite(67, 174, 175) : BV:32
177 : ite(51, 1, 176) : BV:32
178 : lambda(48, 177) : FUNCTION[BV:32 -> BV:32]
179 : map(47, 178) : MAP[BV:32 -> BV:32]
180 : sum(17, 18, 179) : SUM[UNIT,MAP[BV:32 -> BV:32]]
181 : sym_const(180) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda40050Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda40051Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : and(14, 11) : BOOL
47 : ite(46, 39, 39) : BOOL
48 : ite(7, 38, 47) : BOOL
49 : bvule(2, 42) : BOOL
50 : bvule(42, 22) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 25) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(29, 42) : BOOL
56 : bvule(42, 10) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 29, 29) : BV:32
59 : ite(54, 25, 58) : BV:32
60 : ite(51, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(20, 61) : BOOL
63 : ite(62, 38, 39) : BOOL
64 : and(48, 63) : BOOL
65 : bvmul(25, 42) : BV:32
66 : 33554435 { 0x2000003 +1.35e133 } : BV:32
67 : bvmul(25, 3) : BV:32
68 : bvadd(66, 67) : BV:32
69 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
70 : eq(68, 69) : BOOL
71 : 4 { 0x4 } : BV:8
72 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
73 : eq(68, 72) : BOOL
74 : 127 { 0x7f } : BV:8
75 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
76 : eq(68, 75) : BOOL
77 : 252 { 0xfc -4 } : BV:8
78 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
79 : eq(68, 78) : BOOL
80 : 255 { 0xff -1 } : BV:8
81 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
82 : eq(68, 81) : BOOL
83 : 0 { 0x0 } : BV:8
84 : ite(82, 80, 83) : BV:8
85 : ite(79, 80, 84) : BV:8
86 : ite(76, 77, 85) : BV:8
87 : ite(73, 74, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : 33554434 { 0x2000002 +1.23e133 } : BV:32
90 : bvadd(89, 67) : BV:32
91 : eq(90, 69) : BOOL
92 : eq(90, 72) : BOOL
93 : eq(90, 75) : BOOL
94 : eq(90, 78) : BOOL
95 : eq(90, 81) : BOOL
96 : ite(95, 80, 83) : BV:8
97 : ite(94, 80, 96) : BV:8
98 : ite(93, 77, 97) : BV:8
99 : ite(92, 74, 98) : BV:8
100 : ite(91, 71, 99) : BV:8
101 : 33554433 { 0x2000001 +1.11e133 } : BV:32
102 : bvadd(101, 67) : BV:32
103 : eq(102, 69) : BOOL
104 : eq(102, 72) : BOOL
105 : eq(102, 75) : BOOL
106 : eq(102, 78) : BOOL
107 : eq(102, 81) : BOOL
108 : ite(107, 80, 83) : BV:8
109 : ite(106, 80, 108) : BV:8
110 : ite(105, 77, 109) : BV:8
111 : ite(104, 74, 110) : BV:8
112 : ite(103, 71, 111) : BV:8
113 : 33554432 { 0x2000000 +1.0e133 } : BV:32
114 : bvadd(113, 67) : BV:32
115 : eq(114, 69) : BOOL
116 : eq(114, 72) : BOOL
117 : eq(114, 75) : BOOL
118 : eq(114, 78) : BOOL
119 : eq(114, 81) : BOOL
120 : ite(119, 80, 83) : BV:8
121 : ite(118, 80, 120) : BV:8
122 : ite(117, 77, 121) : BV:8
123 : ite(116, 74, 122) : BV:8
124 : ite(115, 71, 123) : BV:8
125 : bvconcat(88, 100, 112, 124) : BV:32
126 : bvadd(22, 65, 125) : BV:32
127 : eq(126, 69) : BOOL
128 : eq(126, 72) : BOOL
129 : eq(126, 75) : BOOL
130 : eq(126, 78) : BOOL
131 : eq(126, 81) : BOOL
132 : ite(131, 80, 83) : BV:8
133 : ite(130, 80, 132) : BV:8
134 : ite(129, 77, 133) : BV:8
135 : ite(128, 74, 134) : BV:8
136 : ite(127, 71, 135) : BV:8
137 : 2 { 0x2 +1.23e129 } : BV:32
138 : bvadd(137, 65, 125) : BV:32
139 : eq(138, 69) : BOOL
140 : eq(138, 72) : BOOL
141 : eq(138, 75) : BOOL
142 : eq(138, 78) : BOOL
143 : eq(138, 81) : BOOL
144 : ite(143, 80, 83) : BV:8
145 : ite(142, 80, 144) : BV:8
146 : ite(141, 77, 145) : BV:8
147 : ite(140, 74, 146) : BV:8
148 : ite(139, 71, 147) : BV:8
149 : 1 { 0x1 +1.11e129 } : BV:32
150 : bvadd(149, 65, 125) : BV:32
151 : eq(150, 69) : BOOL
152 : eq(150, 72) : BOOL
153 : eq(150, 75) : BOOL
154 : eq(150, 78) : BOOL
155 : eq(150, 81) : BOOL
156 : ite(155, 80, 83) : BV:8
157 : ite(154, 80, 156) : BV:8
158 : ite(153, 77, 157) : BV:8
159 : ite(152, 74, 158) : BV:8
160 : ite(151, 71, 159) : BV:8
161 : bvadd(65, 125) : BV:32
162 : eq(161, 69) : BOOL
163 : eq(161, 72) : BOOL
164 : eq(161, 75) : BOOL
165 : eq(161, 78) : BOOL
166 : eq(161, 81) : BOOL
167 : ite(166, 80, 83) : BV:8
168 : ite(165, 80, 167) : BV:8
169 : ite(164, 77, 168) : BV:8
170 : ite(163, 74, 169) : BV:8
171 : ite(162, 71, 170) : BV:8
172 : bvconcat(136, 148, 160, 171) : BV:32
173 : ite(45, 2, 172) : BV:32
174 : ite(64, 172, 173) : BV:32
175 : ite(45, 2, 174) : BV:32
176 : lambda(42, 175) : FUNCTION[BV:32 -> BV:32]
177 : map(41, 176) : MAP[BV:32 -> BV:32]
178 : sym_const(177) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2045412109 { 0x79ea830d +1.83212435e116 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 65536060 { 0x3e8003c +1.81250715e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 65536063 { 0x3e8003f +1.81250751e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 70555652 { 0x4349804 +1.41088914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 70555655 { 0x4349807 +1.41088950e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 555518976 { 0x211c8c00 +1.22302246e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 555518979 { 0x211c8c03 +1.22302281e195 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda39426Var : BV:32
2 : Lambda39427Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 33554435 { 0x2000003 +1.35e133 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
17 : eq(12, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
20 : eq(12, 19) : BOOL
21 : 252 { 0xfc -4 } : BV:8
22 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
23 : eq(12, 22) : BOOL
24 : 255 { 0xff -1 } : BV:8
25 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
26 : eq(12, 25) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 24, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : 33554434 { 0x2000002 +1.23e133 } : BV:32
34 : bvadd(33, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 24, 27) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 15, 43) : BV:8
45 : 33554433 { 0x2000001 +1.11e133 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : ite(51, 24, 27) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 21, 53) : BV:8
55 : ite(48, 18, 54) : BV:8
56 : ite(47, 15, 55) : BV:8
57 : 33554432 { 0x2000000 +1.0e133 } : BV:32
58 : bvadd(57, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 22) : BOOL
63 : eq(58, 25) : BOOL
64 : ite(63, 24, 27) : BV:8
65 : ite(62, 24, 64) : BV:8
66 : ite(61, 21, 65) : BV:8
67 : ite(60, 18, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(32, 44, 56, 68) : BV:32
70 : bvadd(7, 9, 69) : BV:32
71 : eq(70, 13) : BOOL
72 : eq(70, 16) : BOOL
73 : eq(70, 19) : BOOL
74 : eq(70, 22) : BOOL
75 : eq(70, 25) : BOOL
76 : ite(75, 24, 27) : BV:8
77 : ite(74, 24, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 18, 78) : BV:8
80 : ite(71, 15, 79) : BV:8
81 : 2 { 0x2 +1.23e129 } : BV:32
82 : bvadd(81, 9, 69) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : ite(87, 24, 27) : BV:8
89 : ite(86, 24, 88) : BV:8
90 : ite(85, 21, 89) : BV:8
91 : ite(84, 18, 90) : BV:8
92 : ite(83, 15, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 9, 69) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 19) : BOOL
98 : eq(94, 22) : BOOL
99 : eq(94, 25) : BOOL
100 : ite(99, 24, 27) : BV:8
101 : ite(98, 24, 100) : BV:8
102 : ite(97, 21, 101) : BV:8
103 : ite(96, 18, 102) : BV:8
104 : ite(95, 15, 103) : BV:8
105 : bvadd(9, 69) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 19) : BOOL
109 : eq(105, 22) : BOOL
110 : eq(105, 25) : BOOL
111 : ite(110, 24, 27) : BV:8
112 : ite(109, 24, 111) : BV:8
113 : ite(108, 21, 112) : BV:8
114 : ite(107, 18, 113) : BV:8
115 : ite(106, 15, 114) : BV:8
116 : bvconcat(80, 92, 104, 115) : BV:32
117 : ite(6, 3, 116) : BV:32
118 : lambda(1, 2, 117) : FUNCTION[BV:32,BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda39428Var : BV:32
2 : Lambda39429Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 33554435 { 0x2000003 +1.35e133 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
53 : eq(51, 52) : BOOL
54 : 4 { 0x4 } : BV:8
55 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
56 : eq(51, 55) : BOOL
57 : 127 { 0x7f } : BV:8
58 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
59 : eq(51, 58) : BOOL
60 : 252 { 0xfc -4 } : BV:8
61 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
62 : eq(51, 61) : BOOL
63 : 255 { 0xff -1 } : BV:8
64 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
65 : eq(51, 64) : BOOL
66 : 0 { 0x0 } : BV:8
67 : ite(65, 63, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(59, 60, 68) : BV:8
70 : ite(56, 57, 69) : BV:8
71 : ite(53, 54, 70) : BV:8
72 : 33554434 { 0x2000002 +1.23e133 } : BV:32
73 : bvadd(72, 50) : BV:32
74 : eq(73, 52) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 58) : BOOL
77 : eq(73, 61) : BOOL
78 : eq(73, 64) : BOOL
79 : ite(78, 63, 66) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : ite(76, 60, 80) : BV:8
82 : ite(75, 57, 81) : BV:8
83 : ite(74, 54, 82) : BV:8
84 : 33554433 { 0x2000001 +1.11e133 } : BV:32
85 : bvadd(84, 50) : BV:32
86 : eq(85, 52) : BOOL
87 : eq(85, 55) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 61) : BOOL
90 : eq(85, 64) : BOOL
91 : ite(90, 63, 66) : BV:8
92 : ite(89, 63, 91) : BV:8
93 : ite(88, 60, 92) : BV:8
94 : ite(87, 57, 93) : BV:8
95 : ite(86, 54, 94) : BV:8
96 : 33554432 { 0x2000000 +1.0e133 } : BV:32
97 : bvadd(96, 50) : BV:32
98 : eq(97, 52) : BOOL
99 : eq(97, 55) : BOOL
100 : eq(97, 58) : BOOL
101 : eq(97, 61) : BOOL
102 : eq(97, 64) : BOOL
103 : ite(102, 63, 66) : BV:8
104 : ite(101, 63, 103) : BV:8
105 : ite(100, 60, 104) : BV:8
106 : ite(99, 57, 105) : BV:8
107 : ite(98, 54, 106) : BV:8
108 : bvconcat(71, 83, 95, 107) : BV:32
109 : bvadd(30, 48, 108) : BV:32
110 : eq(109, 52) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 58) : BOOL
113 : eq(109, 61) : BOOL
114 : eq(109, 64) : BOOL
115 : ite(114, 63, 66) : BV:8
116 : ite(113, 63, 115) : BV:8
117 : ite(112, 60, 116) : BV:8
118 : ite(111, 57, 117) : BV:8
119 : ite(110, 54, 118) : BV:8
120 : 2 { 0x2 +1.23e129 } : BV:32
121 : bvadd(120, 48, 108) : BV:32
122 : eq(121, 52) : BOOL
123 : eq(121, 55) : BOOL
124 : eq(121, 58) : BOOL
125 : eq(121, 61) : BOOL
126 : eq(121, 64) : BOOL
127 : ite(126, 63, 66) : BV:8
128 : ite(125, 63, 127) : BV:8
129 : ite(124, 60, 128) : BV:8
130 : ite(123, 57, 129) : BV:8
131 : ite(122, 54, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 48, 108) : BV:32
134 : eq(133, 52) : BOOL
135 : eq(133, 55) : BOOL
136 : eq(133, 58) : BOOL
137 : eq(133, 61) : BOOL
138 : eq(133, 64) : BOOL
139 : ite(138, 63, 66) : BV:8
140 : ite(137, 63, 139) : BV:8
141 : ite(136, 60, 140) : BV:8
142 : ite(135, 57, 141) : BV:8
143 : ite(134, 54, 142) : BV:8
144 : bvadd(48, 108) : BV:32
145 : eq(144, 52) : BOOL
146 : eq(144, 55) : BOOL
147 : eq(144, 58) : BOOL
148 : eq(144, 61) : BOOL
149 : eq(144, 64) : BOOL
150 : ite(149, 63, 66) : BV:8
151 : ite(148, 63, 150) : BV:8
152 : ite(147, 60, 151) : BV:8
153 : ite(146, 57, 152) : BV:8
154 : ite(145, 54, 153) : BV:8
155 : bvconcat(119, 131, 143, 154) : BV:32
156 : ite(6, 3, 155) : BV:32
157 : ite(47, 155, 156) : BV:32
158 : ite(6, 3, 157) : BV:32
159 : lambda(1, 2, 158) : FUNCTION[BV:32,BV:32 -> BV:32]
160 : sym_const(159) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3141396271 ] -> true, [ 3141396272; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3141396271 ] -> true, [ 3141396272; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda39433Var : BV:32
2 : Lambda39434Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda39440Var : BV:32
2 : Lambda39441Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3141396271 { 0xbb3de72f -1153571025 -1.48361766e247 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3141396273 { 0xbb3de731 -1153571023 -1.48361790e247 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3141396272 { 0xbb3de730 -1153571024 -1.48361778e247 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda39447Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : bvmul(4, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
14 : eq(9, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
17 : eq(9, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
20 : eq(9, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
23 : eq(9, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : ite(23, 21, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 22) : BOOL
37 : ite(36, 21, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : ite(48, 21, 24) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 18, 50) : BV:8
52 : ite(45, 15, 51) : BV:8
53 : ite(44, 12, 52) : BV:8
54 : bvadd(7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : eq(54, 22) : BOOL
60 : ite(59, 21, 24) : BV:8
61 : ite(58, 21, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 15, 62) : BV:8
64 : ite(55, 12, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(6, 5, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda39451Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : bvmul(4, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
14 : eq(9, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
17 : eq(9, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
20 : eq(9, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
23 : eq(9, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : ite(23, 21, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 19) : BOOL
36 : eq(31, 22) : BOOL
37 : ite(36, 21, 24) : BV:8
38 : ite(35, 21, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : ite(48, 21, 24) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 18, 50) : BV:8
52 : ite(45, 15, 51) : BV:8
53 : ite(44, 12, 52) : BV:8
54 : bvadd(7, 8) : BV:32
55 : eq(54, 10) : BOOL
56 : eq(54, 13) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : eq(54, 22) : BOOL
60 : ite(59, 21, 24) : BV:8
61 : ite(58, 21, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 15, 62) : BV:8
64 : ite(55, 12, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(6, 5, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda39455Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
7 : bvadd(2, 5, 6) : BV:32
8 : 2147483656 { 0x80000008 -2147483640 -1.95e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : eq(7, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 33554428 { 0x1fffffc +1.99999952e132 } : BV:32
15 : eq(7, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 33554429 { 0x1fffffd +1.99999964e132 } : BV:32
18 : eq(7, 17) : BOOL
19 : 255 { 0xff -1 } : BV:8
20 : 33554430 { 0x1fffffe +1.99999976e132 } : BV:32
21 : eq(7, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : ite(21, 19, 22) : BV:8
24 : ite(18, 19, 23) : BV:8
25 : ite(15, 16, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : ite(9, 10, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 5, 6) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : eq(29, 14) : BOOL
33 : eq(29, 17) : BOOL
34 : eq(29, 20) : BOOL
35 : ite(34, 19, 22) : BV:8
36 : ite(33, 19, 35) : BV:8
37 : ite(32, 16, 36) : BV:8
38 : ite(31, 13, 37) : BV:8
39 : ite(30, 10, 38) : BV:8
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvadd(40, 5, 6) : BV:32
42 : eq(41, 8) : BOOL
43 : eq(41, 11) : BOOL
44 : eq(41, 14) : BOOL
45 : eq(41, 17) : BOOL
46 : eq(41, 20) : BOOL
47 : ite(46, 19, 22) : BV:8
48 : ite(45, 19, 47) : BV:8
49 : ite(44, 16, 48) : BV:8
50 : ite(43, 13, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : bvadd(5, 6) : BV:32
53 : eq(52, 8) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 17) : BOOL
57 : eq(52, 20) : BOOL
58 : ite(57, 19, 22) : BV:8
59 : ite(56, 19, 58) : BV:8
60 : ite(55, 16, 59) : BV:8
61 : ite(54, 13, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : bvconcat(27, 39, 51, 62) : BV:32
64 : ite(3, 4, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2840999075
=counter_example_end
=global nodece 59 num_edges_traversed 3
=global nodece 59 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce4409.num_edges_traversed1
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce4409 3731e8aa53443325510f7903f91ecf5
=input.spec-%var-x-1
1 : Lambda40379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda40380Var : BV:32
18 : Lambda40381Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda40382Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 671088647 { 0x28000007 +1.83e209 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 671088640 { 0x28000000 +1.0e209 } : BV:32
81 : eq(79, 80) : BOOL
82 : 252 { 0xfc -4 } : BV:8
83 : eq(79, 77) : BOOL
84 : 254 { 0xfe -2 } : BV:8
85 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 671088642 { 0x28000002 +1.23e209 } : BV:32
89 : eq(79, 88) : BOOL
90 : 191 { 0xbf -65 } : BV:8
91 : 671088643 { 0x28000003 +1.35e209 } : BV:32
92 : eq(79, 91) : BOOL
93 : 40 { 0x28 } : BV:8
94 : 671088641 { 0x28000001 +1.11e209 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 671088646 { 0x28000006 +1.71e209 } : BV:32
98 : eq(79, 97) : BOOL
99 : 86 { 0x56 } : BV:8
100 : 671088645 { 0x28000005 +1.59e209 } : BV:32
101 : eq(79, 100) : BOOL
102 : 188 { 0xbc -68 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(86, 87, 108) : BV:8
110 : ite(83, 84, 109) : BV:8
111 : ite(81, 82, 110) : BV:8
112 : bvadd(97, 78) : BV:32
113 : eq(112, 80) : BOOL
114 : eq(112, 77) : BOOL
115 : eq(112, 85) : BOOL
116 : eq(112, 88) : BOOL
117 : eq(112, 91) : BOOL
118 : eq(112, 94) : BOOL
119 : eq(112, 97) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 99, 121) : BV:8
123 : ite(118, 96, 122) : BV:8
124 : ite(117, 93, 123) : BV:8
125 : ite(116, 90, 124) : BV:8
126 : ite(115, 87, 125) : BV:8
127 : ite(114, 84, 126) : BV:8
128 : ite(113, 82, 127) : BV:8
129 : bvadd(100, 78) : BV:32
130 : eq(129, 80) : BOOL
131 : eq(129, 77) : BOOL
132 : eq(129, 85) : BOOL
133 : eq(129, 88) : BOOL
134 : eq(129, 91) : BOOL
135 : eq(129, 94) : BOOL
136 : eq(129, 97) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 99, 138) : BV:8
140 : ite(135, 96, 139) : BV:8
141 : ite(134, 93, 140) : BV:8
142 : ite(133, 90, 141) : BV:8
143 : ite(132, 87, 142) : BV:8
144 : ite(131, 84, 143) : BV:8
145 : ite(130, 82, 144) : BV:8
146 : 671088644 { 0x28000004 +1.47e209 } : BV:32
147 : bvadd(146, 78) : BV:32
148 : eq(147, 80) : BOOL
149 : eq(147, 77) : BOOL
150 : eq(147, 85) : BOOL
151 : eq(147, 88) : BOOL
152 : eq(147, 91) : BOOL
153 : eq(147, 94) : BOOL
154 : eq(147, 97) : BOOL
155 : eq(147, 100) : BOOL
156 : ite(155, 102, 103) : BV:8
157 : ite(154, 99, 156) : BV:8
158 : ite(153, 96, 157) : BV:8
159 : ite(152, 93, 158) : BV:8
160 : ite(151, 90, 159) : BV:8
161 : ite(150, 87, 160) : BV:8
162 : ite(149, 84, 161) : BV:8
163 : ite(148, 82, 162) : BV:8
164 : bvconcat(111, 128, 145, 163) : BV:32
165 : bvadd(37, 76, 164) : BV:32
166 : eq(165, 80) : BOOL
167 : eq(165, 77) : BOOL
168 : eq(165, 85) : BOOL
169 : eq(165, 88) : BOOL
170 : eq(165, 91) : BOOL
171 : eq(165, 94) : BOOL
172 : eq(165, 97) : BOOL
173 : eq(165, 100) : BOOL
174 : ite(173, 102, 103) : BV:8
175 : ite(172, 99, 174) : BV:8
176 : ite(171, 96, 175) : BV:8
177 : ite(170, 93, 176) : BV:8
178 : ite(169, 90, 177) : BV:8
179 : ite(168, 87, 178) : BV:8
180 : ite(167, 84, 179) : BV:8
181 : ite(166, 82, 180) : BV:8
182 : bvadd(41, 76, 164) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 77) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 88) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 94) : BOOL
189 : eq(182, 97) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 99, 191) : BV:8
193 : ite(188, 96, 192) : BV:8
194 : ite(187, 93, 193) : BV:8
195 : ite(186, 90, 194) : BV:8
196 : ite(185, 87, 195) : BV:8
197 : ite(184, 84, 196) : BV:8
198 : ite(183, 82, 197) : BV:8
199 : bvadd(34, 76, 164) : BV:32
200 : eq(199, 80) : BOOL
201 : eq(199, 77) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : eq(199, 100) : BOOL
208 : ite(207, 102, 103) : BV:8
209 : ite(206, 99, 208) : BV:8
210 : ite(205, 96, 209) : BV:8
211 : ite(204, 93, 210) : BV:8
212 : ite(203, 90, 211) : BV:8
213 : ite(202, 87, 212) : BV:8
214 : ite(201, 84, 213) : BV:8
215 : ite(200, 82, 214) : BV:8
216 : bvadd(76, 164) : BV:32
217 : eq(216, 80) : BOOL
218 : eq(216, 77) : BOOL
219 : eq(216, 85) : BOOL
220 : eq(216, 88) : BOOL
221 : eq(216, 91) : BOOL
222 : eq(216, 94) : BOOL
223 : eq(216, 97) : BOOL
224 : eq(216, 100) : BOOL
225 : ite(224, 102, 103) : BV:8
226 : ite(223, 99, 225) : BV:8
227 : ite(222, 96, 226) : BV:8
228 : ite(221, 93, 227) : BV:8
229 : ite(220, 90, 228) : BV:8
230 : ite(219, 87, 229) : BV:8
231 : ite(218, 84, 230) : BV:8
232 : ite(217, 82, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 671088640 { 0x28000000 +1.0e209 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda40399Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda40400Var : BV:32
18 : Lambda40401Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda40402Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 671088647 { 0x28000007 +1.83e209 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 671088640 { 0x28000000 +1.0e209 } : BV:32
62 : eq(60, 61) : BOOL
63 : 252 { 0xfc -4 } : BV:8
64 : eq(60, 58) : BOOL
65 : 254 { 0xfe -2 } : BV:8
66 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 671088642 { 0x28000002 +1.23e209 } : BV:32
70 : eq(60, 69) : BOOL
71 : 191 { 0xbf -65 } : BV:8
72 : 671088643 { 0x28000003 +1.35e209 } : BV:32
73 : eq(60, 72) : BOOL
74 : 40 { 0x28 } : BV:8
75 : 671088641 { 0x28000001 +1.11e209 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 671088646 { 0x28000006 +1.71e209 } : BV:32
79 : eq(60, 78) : BOOL
80 : 86 { 0x56 } : BV:8
81 : 671088645 { 0x28000005 +1.59e209 } : BV:32
82 : eq(60, 81) : BOOL
83 : 188 { 0xbc -68 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(67, 68, 89) : BV:8
91 : ite(64, 65, 90) : BV:8
92 : ite(62, 63, 91) : BV:8
93 : bvadd(78, 59) : BV:32
94 : eq(93, 61) : BOOL
95 : eq(93, 58) : BOOL
96 : eq(93, 66) : BOOL
97 : eq(93, 69) : BOOL
98 : eq(93, 72) : BOOL
99 : eq(93, 75) : BOOL
100 : eq(93, 78) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 77, 103) : BV:8
105 : ite(98, 74, 104) : BV:8
106 : ite(97, 71, 105) : BV:8
107 : ite(96, 68, 106) : BV:8
108 : ite(95, 65, 107) : BV:8
109 : ite(94, 63, 108) : BV:8
110 : bvadd(81, 59) : BV:32
111 : eq(110, 61) : BOOL
112 : eq(110, 58) : BOOL
113 : eq(110, 66) : BOOL
114 : eq(110, 69) : BOOL
115 : eq(110, 72) : BOOL
116 : eq(110, 75) : BOOL
117 : eq(110, 78) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 77, 120) : BV:8
122 : ite(115, 74, 121) : BV:8
123 : ite(114, 71, 122) : BV:8
124 : ite(113, 68, 123) : BV:8
125 : ite(112, 65, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : 671088644 { 0x28000004 +1.47e209 } : BV:32
128 : bvadd(127, 59) : BV:32
129 : eq(128, 61) : BOOL
130 : eq(128, 58) : BOOL
131 : eq(128, 66) : BOOL
132 : eq(128, 69) : BOOL
133 : eq(128, 72) : BOOL
134 : eq(128, 75) : BOOL
135 : eq(128, 78) : BOOL
136 : eq(128, 81) : BOOL
137 : ite(136, 83, 84) : BV:8
138 : ite(135, 80, 137) : BV:8
139 : ite(134, 77, 138) : BV:8
140 : ite(133, 74, 139) : BV:8
141 : ite(132, 71, 140) : BV:8
142 : ite(131, 68, 141) : BV:8
143 : ite(130, 65, 142) : BV:8
144 : ite(129, 63, 143) : BV:8
145 : bvconcat(92, 109, 126, 144) : BV:32
146 : bvadd(37, 57, 145) : BV:32
147 : eq(146, 61) : BOOL
148 : eq(146, 58) : BOOL
149 : eq(146, 66) : BOOL
150 : eq(146, 69) : BOOL
151 : eq(146, 72) : BOOL
152 : eq(146, 75) : BOOL
153 : eq(146, 78) : BOOL
154 : eq(146, 81) : BOOL
155 : ite(154, 83, 84) : BV:8
156 : ite(153, 80, 155) : BV:8
157 : ite(152, 77, 156) : BV:8
158 : ite(151, 74, 157) : BV:8
159 : ite(150, 71, 158) : BV:8
160 : ite(149, 68, 159) : BV:8
161 : ite(148, 65, 160) : BV:8
162 : ite(147, 63, 161) : BV:8
163 : bvadd(41, 57, 145) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 58) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 69) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 75) : BOOL
170 : eq(163, 78) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 80, 172) : BV:8
174 : ite(169, 77, 173) : BV:8
175 : ite(168, 74, 174) : BV:8
176 : ite(167, 71, 175) : BV:8
177 : ite(166, 68, 176) : BV:8
178 : ite(165, 65, 177) : BV:8
179 : ite(164, 63, 178) : BV:8
180 : bvadd(34, 57, 145) : BV:32
181 : eq(180, 61) : BOOL
182 : eq(180, 58) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : eq(180, 81) : BOOL
189 : ite(188, 83, 84) : BV:8
190 : ite(187, 80, 189) : BV:8
191 : ite(186, 77, 190) : BV:8
192 : ite(185, 74, 191) : BV:8
193 : ite(184, 71, 192) : BV:8
194 : ite(183, 68, 193) : BV:8
195 : ite(182, 65, 194) : BV:8
196 : ite(181, 63, 195) : BV:8
197 : bvadd(57, 145) : BV:32
198 : eq(197, 61) : BOOL
199 : eq(197, 58) : BOOL
200 : eq(197, 66) : BOOL
201 : eq(197, 69) : BOOL
202 : eq(197, 72) : BOOL
203 : eq(197, 75) : BOOL
204 : eq(197, 78) : BOOL
205 : eq(197, 81) : BOOL
206 : ite(205, 83, 84) : BV:8
207 : ite(204, 80, 206) : BV:8
208 : ite(203, 77, 207) : BV:8
209 : ite(202, 74, 208) : BV:8
210 : ite(201, 71, 209) : BV:8
211 : ite(200, 68, 210) : BV:8
212 : ite(199, 65, 211) : BV:8
213 : ite(198, 63, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 671088639 ] -> 0, [ 671088640; 671088640 ] -> 252, [ 671088641; 671088641 ] -> 255, [ 671088642; 671088642 ] -> 191, [ 671088643; 671088643 ] -> 40, [ 671088644; 671088644 ] -> 0, [ 671088645; 671088645 ] -> 188, [ 671088646; 671088646 ] -> 86, [ 671088647; 671088647 ] -> 254, [ 671088648; 683671551 ] -> 0, [ 683671552; 683671552 ] -> 1, [ 683671553; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1006591991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1006591992; 1006591995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1006591996; 2773664155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2773664156; 2773664159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2773664160; 2885144571 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2885144572; 2885144575 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2885144576; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2885144572 { 0xabf7cffc -1409822724 -1.93603467e216 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1006591992 { 0x3bff5ff8 +1.99511623e248 } : BV:32
=input.dst.llvm-%n
1 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2773664156 { 0xa552c19c -1521303140 -1.64653348e203 } : BV:32
=input.dst.llvm-%x
1 : 671088644 { 0x28000004 +1.47e209 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1757175280 { 0x68bc5df0 +1.47161674e82 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda40406Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda40407Var : BV:32
18 : eq(17, 4) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 671088640 { 0x28000000 +1.0e209 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 671088647 { 0x28000007 +1.83e209 } : BV:32
28 : eq(23, 27) : BOOL
29 : 254 { 0xfe -2 } : BV:8
30 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
31 : eq(23, 30) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 671088642 { 0x28000002 +1.23e209 } : BV:32
34 : eq(23, 33) : BOOL
35 : 191 { 0xbf -65 } : BV:8
36 : 671088643 { 0x28000003 +1.35e209 } : BV:32
37 : eq(23, 36) : BOOL
38 : 40 { 0x28 } : BV:8
39 : 671088641 { 0x28000001 +1.11e209 } : BV:32
40 : eq(23, 39) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 671088646 { 0x28000006 +1.71e209 } : BV:32
43 : eq(23, 42) : BOOL
44 : 86 { 0x56 } : BV:8
45 : 671088645 { 0x28000005 +1.59e209 } : BV:32
46 : eq(23, 45) : BOOL
47 : 188 { 0xbc -68 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : bvadd(8, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 45) : BOOL
66 : ite(65, 47, 48) : BV:8
67 : ite(64, 44, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : bvadd(4, 21, 22) : BV:32
75 : eq(74, 24) : BOOL
76 : eq(74, 27) : BOOL
77 : eq(74, 30) : BOOL
78 : eq(74, 33) : BOOL
79 : eq(74, 36) : BOOL
80 : eq(74, 39) : BOOL
81 : eq(74, 42) : BOOL
82 : eq(74, 45) : BOOL
83 : ite(82, 47, 48) : BV:8
84 : ite(81, 44, 83) : BV:8
85 : ite(80, 41, 84) : BV:8
86 : ite(79, 38, 85) : BV:8
87 : ite(78, 35, 86) : BV:8
88 : ite(77, 32, 87) : BV:8
89 : ite(76, 29, 88) : BV:8
90 : ite(75, 26, 89) : BV:8
91 : bvadd(21, 22) : BV:32
92 : eq(91, 24) : BOOL
93 : eq(91, 27) : BOOL
94 : eq(91, 30) : BOOL
95 : eq(91, 33) : BOOL
96 : eq(91, 36) : BOOL
97 : eq(91, 39) : BOOL
98 : eq(91, 42) : BOOL
99 : eq(91, 45) : BOOL
100 : ite(99, 47, 48) : BV:8
101 : ite(98, 44, 100) : BV:8
102 : ite(97, 41, 101) : BV:8
103 : ite(96, 38, 102) : BV:8
104 : ite(95, 35, 103) : BV:8
105 : ite(94, 32, 104) : BV:8
106 : ite(93, 29, 105) : BV:8
107 : ite(92, 26, 106) : BV:8
108 : bvconcat(56, 73, 90, 107) : BV:32
109 : ite(18, 4, 108) : BV:32
110 : lambda(17, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(16, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
2 : unit : UNIT
3 : Lambda40388Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2 { 0x2 +1.23e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda40389Var : BV:32
20 : eq(19, 6) : BOOL
21 : eq(19, 4) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 671088640 { 0x28000000 +1.0e209 } : BV:32
28 : eq(26, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 671088647 { 0x28000007 +1.83e209 } : BV:32
31 : eq(26, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
34 : eq(26, 33) : BOOL
35 : 1 { 0x1 } : BV:8
36 : 671088642 { 0x28000002 +1.23e209 } : BV:32
37 : eq(26, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 671088643 { 0x28000003 +1.35e209 } : BV:32
40 : eq(26, 39) : BOOL
41 : 40 { 0x28 } : BV:8
42 : 671088641 { 0x28000001 +1.11e209 } : BV:32
43 : eq(26, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 671088646 { 0x28000006 +1.71e209 } : BV:32
46 : eq(26, 45) : BOOL
47 : 86 { 0x56 } : BV:8
48 : 671088645 { 0x28000005 +1.59e209 } : BV:32
49 : eq(26, 48) : BOOL
50 : 188 { 0xbc -68 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : bvadd(10, 24, 25) : BV:32
61 : eq(60, 27) : BOOL
62 : eq(60, 30) : BOOL
63 : eq(60, 33) : BOOL
64 : eq(60, 36) : BOOL
65 : eq(60, 39) : BOOL
66 : eq(60, 42) : BOOL
67 : eq(60, 45) : BOOL
68 : eq(60, 48) : BOOL
69 : ite(68, 50, 51) : BV:8
70 : ite(67, 47, 69) : BV:8
71 : ite(66, 44, 70) : BV:8
72 : ite(65, 41, 71) : BV:8
73 : ite(64, 38, 72) : BV:8
74 : ite(63, 35, 73) : BV:8
75 : ite(62, 32, 74) : BV:8
76 : ite(61, 29, 75) : BV:8
77 : bvadd(6, 24, 25) : BV:32
78 : eq(77, 27) : BOOL
79 : eq(77, 30) : BOOL
80 : eq(77, 33) : BOOL
81 : eq(77, 36) : BOOL
82 : eq(77, 39) : BOOL
83 : eq(77, 42) : BOOL
84 : eq(77, 45) : BOOL
85 : eq(77, 48) : BOOL
86 : ite(85, 50, 51) : BV:8
87 : ite(84, 47, 86) : BV:8
88 : ite(83, 44, 87) : BV:8
89 : ite(82, 41, 88) : BV:8
90 : ite(81, 38, 89) : BV:8
91 : ite(80, 35, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : bvadd(24, 25) : BV:32
95 : eq(94, 27) : BOOL
96 : eq(94, 30) : BOOL
97 : eq(94, 33) : BOOL
98 : eq(94, 36) : BOOL
99 : eq(94, 39) : BOOL
100 : eq(94, 42) : BOOL
101 : eq(94, 45) : BOOL
102 : eq(94, 48) : BOOL
103 : ite(102, 50, 51) : BV:8
104 : ite(101, 47, 103) : BV:8
105 : ite(100, 44, 104) : BV:8
106 : ite(99, 41, 105) : BV:8
107 : ite(98, 38, 106) : BV:8
108 : ite(97, 35, 107) : BV:8
109 : ite(96, 32, 108) : BV:8
110 : ite(95, 29, 109) : BV:8
111 : bvconcat(59, 76, 93, 110) : BV:32
112 : ite(21, 4, 111) : BV:32
113 : ite(20, 6, 112) : BV:32
114 : lambda(19, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(18, 114) : MAP[BV:32 -> BV:32]
116 : sum(1, 2, 115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
117 : sym_const(116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 2, 1) : BV:32
16 : unit : UNIT
17 : eq(2, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 2) : BV:32
21 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 671088640 { 0x28000000 +1.0e209 } : BV:32
24 : eq(22, 23) : BOOL
25 : 252 { 0xfc -4 } : BV:8
26 : 671088647 { 0x28000007 +1.83e209 } : BV:32
27 : eq(22, 26) : BOOL
28 : 254 { 0xfe -2 } : BV:8
29 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
30 : eq(22, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 671088642 { 0x28000002 +1.23e209 } : BV:32
33 : eq(22, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 671088643 { 0x28000003 +1.35e209 } : BV:32
36 : eq(22, 35) : BOOL
37 : 40 { 0x28 } : BV:8
38 : 671088641 { 0x28000001 +1.11e209 } : BV:32
39 : eq(22, 38) : BOOL
40 : 255 { 0xff -1 } : BV:8
41 : 671088646 { 0x28000006 +1.71e209 } : BV:32
42 : eq(22, 41) : BOOL
43 : 86 { 0x56 } : BV:8
44 : 671088645 { 0x28000005 +1.59e209 } : BV:32
45 : eq(22, 44) : BOOL
46 : 188 { 0xbc -68 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(33, 34, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : ite(24, 25, 54) : BV:8
56 : bvadd(7, 20, 21) : BV:32
57 : eq(56, 23) : BOOL
58 : eq(56, 26) : BOOL
59 : eq(56, 29) : BOOL
60 : eq(56, 32) : BOOL
61 : eq(56, 35) : BOOL
62 : eq(56, 38) : BOOL
63 : eq(56, 41) : BOOL
64 : eq(56, 44) : BOOL
65 : ite(64, 46, 47) : BV:8
66 : ite(63, 43, 65) : BV:8
67 : ite(62, 40, 66) : BV:8
68 : ite(61, 37, 67) : BV:8
69 : ite(60, 34, 68) : BV:8
70 : ite(59, 31, 69) : BV:8
71 : ite(58, 28, 70) : BV:8
72 : ite(57, 25, 71) : BV:8
73 : bvadd(2, 20, 21) : BV:32
74 : eq(73, 23) : BOOL
75 : eq(73, 26) : BOOL
76 : eq(73, 29) : BOOL
77 : eq(73, 32) : BOOL
78 : eq(73, 35) : BOOL
79 : eq(73, 38) : BOOL
80 : eq(73, 41) : BOOL
81 : eq(73, 44) : BOOL
82 : ite(81, 46, 47) : BV:8
83 : ite(80, 43, 82) : BV:8
84 : ite(79, 40, 83) : BV:8
85 : ite(78, 37, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 31, 86) : BV:8
88 : ite(75, 28, 87) : BV:8
89 : ite(74, 25, 88) : BV:8
90 : bvadd(20, 21) : BV:32
91 : eq(90, 23) : BOOL
92 : eq(90, 26) : BOOL
93 : eq(90, 29) : BOOL
94 : eq(90, 32) : BOOL
95 : eq(90, 35) : BOOL
96 : eq(90, 38) : BOOL
97 : eq(90, 41) : BOOL
98 : eq(90, 44) : BOOL
99 : ite(98, 46, 47) : BV:8
100 : ite(97, 43, 99) : BV:8
101 : ite(96, 40, 100) : BV:8
102 : ite(95, 37, 101) : BV:8
103 : ite(94, 34, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 25, 105) : BV:8
107 : bvconcat(55, 72, 89, 106) : BV:32
108 : ite(17, 2, 107) : BV:32
109 : sum(15, 16, 108) : SUM[UNIT,BV:32]
110 : sym_const(109) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1448694066 { 0x56595132 +1.69779038e45 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda40411Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda40412Var : BV:32
18 : eq(17, 4) : BOOL
19 : eq(17, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 671088640 { 0x28000000 +1.0e209 } : BV:32
26 : eq(24, 25) : BOOL
27 : 252 { 0xfc -4 } : BV:8
28 : 671088647 { 0x28000007 +1.83e209 } : BV:32
29 : eq(24, 28) : BOOL
30 : 254 { 0xfe -2 } : BV:8
31 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
32 : eq(24, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 671088642 { 0x28000002 +1.23e209 } : BV:32
35 : eq(24, 34) : BOOL
36 : 191 { 0xbf -65 } : BV:8
37 : 671088643 { 0x28000003 +1.35e209 } : BV:32
38 : eq(24, 37) : BOOL
39 : 40 { 0x28 } : BV:8
40 : 671088641 { 0x28000001 +1.11e209 } : BV:32
41 : eq(24, 40) : BOOL
42 : 255 { 0xff -1 } : BV:8
43 : 671088646 { 0x28000006 +1.71e209 } : BV:32
44 : eq(24, 43) : BOOL
45 : 86 { 0x56 } : BV:8
46 : 671088645 { 0x28000005 +1.59e209 } : BV:32
47 : eq(24, 46) : BOOL
48 : 188 { 0xbc -68 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : bvadd(8, 22, 23) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 43) : BOOL
66 : eq(58, 46) : BOOL
67 : ite(66, 48, 49) : BV:8
68 : ite(65, 45, 67) : BV:8
69 : ite(64, 42, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 33, 71) : BV:8
73 : ite(60, 30, 72) : BV:8
74 : ite(59, 27, 73) : BV:8
75 : bvadd(4, 22, 23) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : eq(75, 34) : BOOL
80 : eq(75, 37) : BOOL
81 : eq(75, 40) : BOOL
82 : eq(75, 43) : BOOL
83 : eq(75, 46) : BOOL
84 : ite(83, 48, 49) : BV:8
85 : ite(82, 45, 84) : BV:8
86 : ite(81, 42, 85) : BV:8
87 : ite(80, 39, 86) : BV:8
88 : ite(79, 36, 87) : BV:8
89 : ite(78, 33, 88) : BV:8
90 : ite(77, 30, 89) : BV:8
91 : ite(76, 27, 90) : BV:8
92 : bvadd(22, 23) : BV:32
93 : eq(92, 25) : BOOL
94 : eq(92, 28) : BOOL
95 : eq(92, 31) : BOOL
96 : eq(92, 34) : BOOL
97 : eq(92, 37) : BOOL
98 : eq(92, 40) : BOOL
99 : eq(92, 43) : BOOL
100 : eq(92, 46) : BOOL
101 : ite(100, 48, 49) : BV:8
102 : ite(99, 45, 101) : BV:8
103 : ite(98, 42, 102) : BV:8
104 : ite(97, 39, 103) : BV:8
105 : ite(96, 36, 104) : BV:8
106 : ite(95, 33, 105) : BV:8
107 : ite(94, 30, 106) : BV:8
108 : ite(93, 27, 107) : BV:8
109 : bvconcat(57, 74, 91, 108) : BV:32
110 : ite(19, 2, 109) : BV:32
111 : ite(18, 4, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 32869820 { 0x1f58dbc +1.91838788e132 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 671088640 { 0x28000000 +1.0e209 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1006591992 { 0x3bff5ff8 +1.99511623e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1006591995 { 0x3bff5ffb +1.99511659e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2773664156 { 0xa552c19c -1521303140 -1.64653348e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2773664159 { 0xa552c19f -1521303137 -1.64653384e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2885144572 { 0xabf7cffc -1409822724 -1.93603467e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2885144575 { 0xabf7cfff -1409822721 -1.93603503e216 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda40271Var : BV:32
2 : Lambda40272Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 671088647 { 0x28000007 +1.83e209 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 671088640 { 0x28000000 +1.0e209 } : BV:32
54 : eq(52, 53) : BOOL
55 : 252 { 0xfc -4 } : BV:8
56 : eq(52, 50) : BOOL
57 : 254 { 0xfe -2 } : BV:8
58 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 671088642 { 0x28000002 +1.23e209 } : BV:32
62 : eq(52, 61) : BOOL
63 : 191 { 0xbf -65 } : BV:8
64 : 671088643 { 0x28000003 +1.35e209 } : BV:32
65 : eq(52, 64) : BOOL
66 : 40 { 0x28 } : BV:8
67 : 671088641 { 0x28000001 +1.11e209 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 671088646 { 0x28000006 +1.71e209 } : BV:32
71 : eq(52, 70) : BOOL
72 : 86 { 0x56 } : BV:8
73 : 671088645 { 0x28000005 +1.59e209 } : BV:32
74 : eq(52, 73) : BOOL
75 : 188 { 0xbc -68 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(56, 57, 82) : BV:8
84 : ite(54, 55, 83) : BV:8
85 : bvadd(70, 51) : BV:32
86 : eq(85, 53) : BOOL
87 : eq(85, 50) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 61) : BOOL
90 : eq(85, 64) : BOOL
91 : eq(85, 67) : BOOL
92 : eq(85, 70) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 69, 95) : BV:8
97 : ite(90, 66, 96) : BV:8
98 : ite(89, 63, 97) : BV:8
99 : ite(88, 60, 98) : BV:8
100 : ite(87, 57, 99) : BV:8
101 : ite(86, 55, 100) : BV:8
102 : bvadd(73, 51) : BV:32
103 : eq(102, 53) : BOOL
104 : eq(102, 50) : BOOL
105 : eq(102, 58) : BOOL
106 : eq(102, 61) : BOOL
107 : eq(102, 64) : BOOL
108 : eq(102, 67) : BOOL
109 : eq(102, 70) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 69, 112) : BV:8
114 : ite(107, 66, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 60, 115) : BV:8
117 : ite(104, 57, 116) : BV:8
118 : ite(103, 55, 117) : BV:8
119 : 671088644 { 0x28000004 +1.47e209 } : BV:32
120 : bvadd(119, 51) : BV:32
121 : eq(120, 53) : BOOL
122 : eq(120, 50) : BOOL
123 : eq(120, 58) : BOOL
124 : eq(120, 61) : BOOL
125 : eq(120, 64) : BOOL
126 : eq(120, 67) : BOOL
127 : eq(120, 70) : BOOL
128 : eq(120, 73) : BOOL
129 : ite(128, 75, 76) : BV:8
130 : ite(127, 72, 129) : BV:8
131 : ite(126, 69, 130) : BV:8
132 : ite(125, 66, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 60, 133) : BV:8
135 : ite(122, 57, 134) : BV:8
136 : ite(121, 55, 135) : BV:8
137 : bvconcat(84, 101, 118, 136) : BV:32
138 : bvadd(33, 49, 137) : BV:32
139 : eq(138, 53) : BOOL
140 : eq(138, 50) : BOOL
141 : eq(138, 58) : BOOL
142 : eq(138, 61) : BOOL
143 : eq(138, 64) : BOOL
144 : eq(138, 67) : BOOL
145 : eq(138, 70) : BOOL
146 : eq(138, 73) : BOOL
147 : ite(146, 75, 76) : BV:8
148 : ite(145, 72, 147) : BV:8
149 : ite(144, 69, 148) : BV:8
150 : ite(143, 66, 149) : BV:8
151 : ite(142, 63, 150) : BV:8
152 : ite(141, 60, 151) : BV:8
153 : ite(140, 57, 152) : BV:8
154 : ite(139, 55, 153) : BV:8
155 : bvadd(37, 49, 137) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 50) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 61) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 67) : BOOL
162 : eq(155, 70) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 72, 164) : BV:8
166 : ite(161, 69, 165) : BV:8
167 : ite(160, 66, 166) : BV:8
168 : ite(159, 63, 167) : BV:8
169 : ite(158, 60, 168) : BV:8
170 : ite(157, 57, 169) : BV:8
171 : ite(156, 55, 170) : BV:8
172 : bvadd(30, 49, 137) : BV:32
173 : eq(172, 53) : BOOL
174 : eq(172, 50) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : eq(172, 73) : BOOL
181 : ite(180, 75, 76) : BV:8
182 : ite(179, 72, 181) : BV:8
183 : ite(178, 69, 182) : BV:8
184 : ite(177, 66, 183) : BV:8
185 : ite(176, 63, 184) : BV:8
186 : ite(175, 60, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 55, 187) : BV:8
189 : bvadd(49, 137) : BV:32
190 : eq(189, 53) : BOOL
191 : eq(189, 50) : BOOL
192 : eq(189, 58) : BOOL
193 : eq(189, 61) : BOOL
194 : eq(189, 64) : BOOL
195 : eq(189, 67) : BOOL
196 : eq(189, 70) : BOOL
197 : eq(189, 73) : BOOL
198 : ite(197, 75, 76) : BV:8
199 : ite(196, 72, 198) : BV:8
200 : ite(195, 69, 199) : BV:8
201 : ite(194, 66, 200) : BV:8
202 : ite(193, 63, 201) : BV:8
203 : ite(192, 60, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 55, 204) : BV:8
206 : bvconcat(154, 171, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda40281Var : BV:32
2 : Lambda40282Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 671088647 { 0x28000007 +1.83e209 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 671088640 { 0x28000000 +1.0e209 } : BV:32
14 : eq(12, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : eq(12, 10) : BOOL
17 : 254 { 0xfe -2 } : BV:8
18 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 671088642 { 0x28000002 +1.23e209 } : BV:32
22 : eq(12, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 671088643 { 0x28000003 +1.35e209 } : BV:32
25 : eq(12, 24) : BOOL
26 : 40 { 0x28 } : BV:8
27 : 671088641 { 0x28000001 +1.11e209 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 671088646 { 0x28000006 +1.71e209 } : BV:32
31 : eq(12, 30) : BOOL
32 : 86 { 0x56 } : BV:8
33 : 671088645 { 0x28000005 +1.59e209 } : BV:32
34 : eq(12, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : 671088644 { 0x28000004 +1.47e209 } : BV:32
80 : bvadd(79, 11) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 10) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 21) : BOOL
85 : eq(80, 24) : BOOL
86 : eq(80, 27) : BOOL
87 : eq(80, 30) : BOOL
88 : eq(80, 33) : BOOL
89 : ite(88, 35, 36) : BV:8
90 : ite(87, 32, 89) : BV:8
91 : ite(86, 29, 90) : BV:8
92 : ite(85, 26, 91) : BV:8
93 : ite(84, 23, 92) : BV:8
94 : ite(83, 20, 93) : BV:8
95 : ite(82, 17, 94) : BV:8
96 : ite(81, 15, 95) : BV:8
97 : bvconcat(44, 61, 78, 96) : BV:32
98 : bvadd(7, 9, 97) : BV:32
99 : eq(98, 13) : BOOL
100 : eq(98, 10) : BOOL
101 : eq(98, 18) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 24) : BOOL
104 : eq(98, 27) : BOOL
105 : eq(98, 30) : BOOL
106 : eq(98, 33) : BOOL
107 : ite(106, 35, 36) : BV:8
108 : ite(105, 32, 107) : BV:8
109 : ite(104, 29, 108) : BV:8
110 : ite(103, 26, 109) : BV:8
111 : ite(102, 23, 110) : BV:8
112 : ite(101, 20, 111) : BV:8
113 : ite(100, 17, 112) : BV:8
114 : ite(99, 15, 113) : BV:8
115 : 2 { 0x2 +1.23e129 } : BV:32
116 : bvadd(115, 9, 97) : BV:32
117 : eq(116, 13) : BOOL
118 : eq(116, 10) : BOOL
119 : eq(116, 18) : BOOL
120 : eq(116, 21) : BOOL
121 : eq(116, 24) : BOOL
122 : eq(116, 27) : BOOL
123 : eq(116, 30) : BOOL
124 : eq(116, 33) : BOOL
125 : ite(124, 35, 36) : BV:8
126 : ite(123, 32, 125) : BV:8
127 : ite(122, 29, 126) : BV:8
128 : ite(121, 26, 127) : BV:8
129 : ite(120, 23, 128) : BV:8
130 : ite(119, 20, 129) : BV:8
131 : ite(118, 17, 130) : BV:8
132 : ite(117, 15, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 9, 97) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : eq(134, 33) : BOOL
143 : ite(142, 35, 36) : BV:8
144 : ite(141, 32, 143) : BV:8
145 : ite(140, 29, 144) : BV:8
146 : ite(139, 26, 145) : BV:8
147 : ite(138, 23, 146) : BV:8
148 : ite(137, 20, 147) : BV:8
149 : ite(136, 17, 148) : BV:8
150 : ite(135, 15, 149) : BV:8
151 : bvadd(9, 97) : BV:32
152 : eq(151, 13) : BOOL
153 : eq(151, 10) : BOOL
154 : eq(151, 18) : BOOL
155 : eq(151, 21) : BOOL
156 : eq(151, 24) : BOOL
157 : eq(151, 27) : BOOL
158 : eq(151, 30) : BOOL
159 : eq(151, 33) : BOOL
160 : ite(159, 35, 36) : BV:8
161 : ite(158, 32, 160) : BV:8
162 : ite(157, 29, 161) : BV:8
163 : ite(156, 26, 162) : BV:8
164 : ite(155, 23, 163) : BV:8
165 : ite(154, 20, 164) : BV:8
166 : ite(153, 17, 165) : BV:8
167 : ite(152, 15, 166) : BV:8
168 : bvconcat(114, 132, 150, 167) : BV:32
169 : ite(6, 3, 168) : BV:32
170 : lambda(1, 2, 169) : FUNCTION[BV:32,BV:32 -> BV:32]
171 : sym_const(170) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2795711175 ] -> true, [ 2795711176; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2795711175 ] -> true, [ 2795711176; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda40285Var : BV:32
2 : Lambda40286Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda40276Var : BV:32
2 : Lambda40277Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda40292Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 671088640 { 0x28000000 +1.0e209 } : BV:32
12 : eq(10, 11) : BOOL
13 : 252 { 0xfc -4 } : BV:8
14 : 671088647 { 0x28000007 +1.83e209 } : BV:32
15 : eq(10, 14) : BOOL
16 : 254 { 0xfe -2 } : BV:8
17 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
18 : eq(10, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 671088642 { 0x28000002 +1.23e209 } : BV:32
21 : eq(10, 20) : BOOL
22 : 191 { 0xbf -65 } : BV:8
23 : 671088643 { 0x28000003 +1.35e209 } : BV:32
24 : eq(10, 23) : BOOL
25 : 40 { 0x28 } : BV:8
26 : 671088641 { 0x28000001 +1.11e209 } : BV:32
27 : eq(10, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 671088646 { 0x28000006 +1.71e209 } : BV:32
30 : eq(10, 29) : BOOL
31 : 86 { 0x56 } : BV:8
32 : 671088645 { 0x28000005 +1.59e209 } : BV:32
33 : eq(10, 32) : BOOL
34 : 188 { 0xbc -68 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : bvadd(2, 8, 9) : BV:32
63 : eq(62, 11) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 20) : BOOL
67 : eq(62, 23) : BOOL
68 : eq(62, 26) : BOOL
69 : eq(62, 29) : BOOL
70 : eq(62, 32) : BOOL
71 : ite(70, 34, 35) : BV:8
72 : ite(69, 31, 71) : BV:8
73 : ite(68, 28, 72) : BV:8
74 : ite(67, 25, 73) : BV:8
75 : ite(66, 22, 74) : BV:8
76 : ite(65, 19, 75) : BV:8
77 : ite(64, 16, 76) : BV:8
78 : ite(63, 13, 77) : BV:8
79 : bvadd(8, 9) : BV:32
80 : eq(79, 11) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 17) : BOOL
83 : eq(79, 20) : BOOL
84 : eq(79, 23) : BOOL
85 : eq(79, 26) : BOOL
86 : eq(79, 29) : BOOL
87 : eq(79, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : ite(84, 25, 90) : BV:8
92 : ite(83, 22, 91) : BV:8
93 : ite(82, 19, 92) : BV:8
94 : ite(81, 16, 93) : BV:8
95 : ite(80, 13, 94) : BV:8
96 : bvconcat(43, 61, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 2, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda40296Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 671088640 { 0x28000000 +1.0e209 } : BV:32
12 : eq(10, 11) : BOOL
13 : 252 { 0xfc -4 } : BV:8
14 : 671088647 { 0x28000007 +1.83e209 } : BV:32
15 : eq(10, 14) : BOOL
16 : 254 { 0xfe -2 } : BV:8
17 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
18 : eq(10, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 671088642 { 0x28000002 +1.23e209 } : BV:32
21 : eq(10, 20) : BOOL
22 : 191 { 0xbf -65 } : BV:8
23 : 671088643 { 0x28000003 +1.35e209 } : BV:32
24 : eq(10, 23) : BOOL
25 : 40 { 0x28 } : BV:8
26 : 671088641 { 0x28000001 +1.11e209 } : BV:32
27 : eq(10, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 671088646 { 0x28000006 +1.71e209 } : BV:32
30 : eq(10, 29) : BOOL
31 : 86 { 0x56 } : BV:8
32 : 671088645 { 0x28000005 +1.59e209 } : BV:32
33 : eq(10, 32) : BOOL
34 : 188 { 0xbc -68 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : bvadd(2, 8, 9) : BV:32
63 : eq(62, 11) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 20) : BOOL
67 : eq(62, 23) : BOOL
68 : eq(62, 26) : BOOL
69 : eq(62, 29) : BOOL
70 : eq(62, 32) : BOOL
71 : ite(70, 34, 35) : BV:8
72 : ite(69, 31, 71) : BV:8
73 : ite(68, 28, 72) : BV:8
74 : ite(67, 25, 73) : BV:8
75 : ite(66, 22, 74) : BV:8
76 : ite(65, 19, 75) : BV:8
77 : ite(64, 16, 76) : BV:8
78 : ite(63, 13, 77) : BV:8
79 : bvadd(8, 9) : BV:32
80 : eq(79, 11) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 17) : BOOL
83 : eq(79, 20) : BOOL
84 : eq(79, 23) : BOOL
85 : eq(79, 26) : BOOL
86 : eq(79, 29) : BOOL
87 : eq(79, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : ite(84, 25, 90) : BV:8
92 : ite(83, 22, 91) : BV:8
93 : ite(82, 19, 92) : BV:8
94 : ite(81, 16, 93) : BV:8
95 : ite(80, 13, 94) : BV:8
96 : bvconcat(43, 61, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 2, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda40300Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 671088640 { 0x28000000 +1.0e209 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 671088647 { 0x28000007 +1.83e209 } : BV:32
13 : eq(8, 12) : BOOL
14 : 254 { 0xfe -2 } : BV:8
15 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 671088642 { 0x28000002 +1.23e209 } : BV:32
19 : eq(8, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 671088643 { 0x28000003 +1.35e209 } : BV:32
22 : eq(8, 21) : BOOL
23 : 40 { 0x28 } : BV:8
24 : 671088641 { 0x28000001 +1.11e209 } : BV:32
25 : eq(8, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 671088646 { 0x28000006 +1.71e209 } : BV:32
28 : eq(8, 27) : BOOL
29 : 86 { 0x56 } : BV:8
30 : 671088645 { 0x28000005 +1.59e209 } : BV:32
31 : eq(8, 30) : BOOL
32 : 188 { 0xbc -68 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : bvadd(2, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 30) : BOOL
69 : ite(68, 32, 33) : BV:8
70 : ite(67, 29, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 30) : BOOL
86 : ite(85, 32, 33) : BV:8
87 : ite(84, 29, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(41, 59, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
2816281318
=counter_example_end
=global nodece 60 num_edges_traversed 1
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce4447.num_edges_traversed3
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce4447 f141d4a4a877a738f49345befb39c570
=input.spec-%var-x-1
1 : Lambda40379Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda40380Var : BV:32
18 : Lambda40381Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda40382Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 671088647 { 0x28000007 +1.83e209 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 671088640 { 0x28000000 +1.0e209 } : BV:32
81 : eq(79, 80) : BOOL
82 : 252 { 0xfc -4 } : BV:8
83 : eq(79, 77) : BOOL
84 : 254 { 0xfe -2 } : BV:8
85 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 671088642 { 0x28000002 +1.23e209 } : BV:32
89 : eq(79, 88) : BOOL
90 : 191 { 0xbf -65 } : BV:8
91 : 671088643 { 0x28000003 +1.35e209 } : BV:32
92 : eq(79, 91) : BOOL
93 : 40 { 0x28 } : BV:8
94 : 671088641 { 0x28000001 +1.11e209 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 671088646 { 0x28000006 +1.71e209 } : BV:32
98 : eq(79, 97) : BOOL
99 : 86 { 0x56 } : BV:8
100 : 671088645 { 0x28000005 +1.59e209 } : BV:32
101 : eq(79, 100) : BOOL
102 : 188 { 0xbc -68 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(86, 87, 108) : BV:8
110 : ite(83, 84, 109) : BV:8
111 : ite(81, 82, 110) : BV:8
112 : bvadd(97, 78) : BV:32
113 : eq(112, 80) : BOOL
114 : eq(112, 77) : BOOL
115 : eq(112, 85) : BOOL
116 : eq(112, 88) : BOOL
117 : eq(112, 91) : BOOL
118 : eq(112, 94) : BOOL
119 : eq(112, 97) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 99, 121) : BV:8
123 : ite(118, 96, 122) : BV:8
124 : ite(117, 93, 123) : BV:8
125 : ite(116, 90, 124) : BV:8
126 : ite(115, 87, 125) : BV:8
127 : ite(114, 84, 126) : BV:8
128 : ite(113, 82, 127) : BV:8
129 : bvadd(100, 78) : BV:32
130 : eq(129, 80) : BOOL
131 : eq(129, 77) : BOOL
132 : eq(129, 85) : BOOL
133 : eq(129, 88) : BOOL
134 : eq(129, 91) : BOOL
135 : eq(129, 94) : BOOL
136 : eq(129, 97) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 99, 138) : BV:8
140 : ite(135, 96, 139) : BV:8
141 : ite(134, 93, 140) : BV:8
142 : ite(133, 90, 141) : BV:8
143 : ite(132, 87, 142) : BV:8
144 : ite(131, 84, 143) : BV:8
145 : ite(130, 82, 144) : BV:8
146 : 671088644 { 0x28000004 +1.47e209 } : BV:32
147 : bvadd(146, 78) : BV:32
148 : eq(147, 80) : BOOL
149 : eq(147, 77) : BOOL
150 : eq(147, 85) : BOOL
151 : eq(147, 88) : BOOL
152 : eq(147, 91) : BOOL
153 : eq(147, 94) : BOOL
154 : eq(147, 97) : BOOL
155 : eq(147, 100) : BOOL
156 : ite(155, 102, 103) : BV:8
157 : ite(154, 99, 156) : BV:8
158 : ite(153, 96, 157) : BV:8
159 : ite(152, 93, 158) : BV:8
160 : ite(151, 90, 159) : BV:8
161 : ite(150, 87, 160) : BV:8
162 : ite(149, 84, 161) : BV:8
163 : ite(148, 82, 162) : BV:8
164 : bvconcat(111, 128, 145, 163) : BV:32
165 : bvadd(37, 76, 164) : BV:32
166 : eq(165, 80) : BOOL
167 : eq(165, 77) : BOOL
168 : eq(165, 85) : BOOL
169 : eq(165, 88) : BOOL
170 : eq(165, 91) : BOOL
171 : eq(165, 94) : BOOL
172 : eq(165, 97) : BOOL
173 : eq(165, 100) : BOOL
174 : ite(173, 102, 103) : BV:8
175 : ite(172, 99, 174) : BV:8
176 : ite(171, 96, 175) : BV:8
177 : ite(170, 93, 176) : BV:8
178 : ite(169, 90, 177) : BV:8
179 : ite(168, 87, 178) : BV:8
180 : ite(167, 84, 179) : BV:8
181 : ite(166, 82, 180) : BV:8
182 : bvadd(41, 76, 164) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 77) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 88) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 94) : BOOL
189 : eq(182, 97) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 99, 191) : BV:8
193 : ite(188, 96, 192) : BV:8
194 : ite(187, 93, 193) : BV:8
195 : ite(186, 90, 194) : BV:8
196 : ite(185, 87, 195) : BV:8
197 : ite(184, 84, 196) : BV:8
198 : ite(183, 82, 197) : BV:8
199 : bvadd(34, 76, 164) : BV:32
200 : eq(199, 80) : BOOL
201 : eq(199, 77) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : eq(199, 100) : BOOL
208 : ite(207, 102, 103) : BV:8
209 : ite(206, 99, 208) : BV:8
210 : ite(205, 96, 209) : BV:8
211 : ite(204, 93, 210) : BV:8
212 : ite(203, 90, 211) : BV:8
213 : ite(202, 87, 212) : BV:8
214 : ite(201, 84, 213) : BV:8
215 : ite(200, 82, 214) : BV:8
216 : bvadd(76, 164) : BV:32
217 : eq(216, 80) : BOOL
218 : eq(216, 77) : BOOL
219 : eq(216, 85) : BOOL
220 : eq(216, 88) : BOOL
221 : eq(216, 91) : BOOL
222 : eq(216, 94) : BOOL
223 : eq(216, 97) : BOOL
224 : eq(216, 100) : BOOL
225 : ite(224, 102, 103) : BV:8
226 : ite(223, 99, 225) : BV:8
227 : ite(222, 96, 226) : BV:8
228 : ite(221, 93, 227) : BV:8
229 : ite(220, 90, 228) : BV:8
230 : ite(219, 87, 229) : BV:8
231 : ite(218, 84, 230) : BV:8
232 : ite(217, 82, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda40399Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda40400Var : BV:32
18 : Lambda40401Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda40402Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 671088647 { 0x28000007 +1.83e209 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 671088640 { 0x28000000 +1.0e209 } : BV:32
62 : eq(60, 61) : BOOL
63 : 252 { 0xfc -4 } : BV:8
64 : eq(60, 58) : BOOL
65 : 254 { 0xfe -2 } : BV:8
66 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 671088642 { 0x28000002 +1.23e209 } : BV:32
70 : eq(60, 69) : BOOL
71 : 191 { 0xbf -65 } : BV:8
72 : 671088643 { 0x28000003 +1.35e209 } : BV:32
73 : eq(60, 72) : BOOL
74 : 40 { 0x28 } : BV:8
75 : 671088641 { 0x28000001 +1.11e209 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 671088646 { 0x28000006 +1.71e209 } : BV:32
79 : eq(60, 78) : BOOL
80 : 86 { 0x56 } : BV:8
81 : 671088645 { 0x28000005 +1.59e209 } : BV:32
82 : eq(60, 81) : BOOL
83 : 188 { 0xbc -68 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(67, 68, 89) : BV:8
91 : ite(64, 65, 90) : BV:8
92 : ite(62, 63, 91) : BV:8
93 : bvadd(78, 59) : BV:32
94 : eq(93, 61) : BOOL
95 : eq(93, 58) : BOOL
96 : eq(93, 66) : BOOL
97 : eq(93, 69) : BOOL
98 : eq(93, 72) : BOOL
99 : eq(93, 75) : BOOL
100 : eq(93, 78) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 77, 103) : BV:8
105 : ite(98, 74, 104) : BV:8
106 : ite(97, 71, 105) : BV:8
107 : ite(96, 68, 106) : BV:8
108 : ite(95, 65, 107) : BV:8
109 : ite(94, 63, 108) : BV:8
110 : bvadd(81, 59) : BV:32
111 : eq(110, 61) : BOOL
112 : eq(110, 58) : BOOL
113 : eq(110, 66) : BOOL
114 : eq(110, 69) : BOOL
115 : eq(110, 72) : BOOL
116 : eq(110, 75) : BOOL
117 : eq(110, 78) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 77, 120) : BV:8
122 : ite(115, 74, 121) : BV:8
123 : ite(114, 71, 122) : BV:8
124 : ite(113, 68, 123) : BV:8
125 : ite(112, 65, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : 671088644 { 0x28000004 +1.47e209 } : BV:32
128 : bvadd(127, 59) : BV:32
129 : eq(128, 61) : BOOL
130 : eq(128, 58) : BOOL
131 : eq(128, 66) : BOOL
132 : eq(128, 69) : BOOL
133 : eq(128, 72) : BOOL
134 : eq(128, 75) : BOOL
135 : eq(128, 78) : BOOL
136 : eq(128, 81) : BOOL
137 : ite(136, 83, 84) : BV:8
138 : ite(135, 80, 137) : BV:8
139 : ite(134, 77, 138) : BV:8
140 : ite(133, 74, 139) : BV:8
141 : ite(132, 71, 140) : BV:8
142 : ite(131, 68, 141) : BV:8
143 : ite(130, 65, 142) : BV:8
144 : ite(129, 63, 143) : BV:8
145 : bvconcat(92, 109, 126, 144) : BV:32
146 : bvadd(37, 57, 145) : BV:32
147 : eq(146, 61) : BOOL
148 : eq(146, 58) : BOOL
149 : eq(146, 66) : BOOL
150 : eq(146, 69) : BOOL
151 : eq(146, 72) : BOOL
152 : eq(146, 75) : BOOL
153 : eq(146, 78) : BOOL
154 : eq(146, 81) : BOOL
155 : ite(154, 83, 84) : BV:8
156 : ite(153, 80, 155) : BV:8
157 : ite(152, 77, 156) : BV:8
158 : ite(151, 74, 157) : BV:8
159 : ite(150, 71, 158) : BV:8
160 : ite(149, 68, 159) : BV:8
161 : ite(148, 65, 160) : BV:8
162 : ite(147, 63, 161) : BV:8
163 : bvadd(41, 57, 145) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 58) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 69) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 75) : BOOL
170 : eq(163, 78) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 80, 172) : BV:8
174 : ite(169, 77, 173) : BV:8
175 : ite(168, 74, 174) : BV:8
176 : ite(167, 71, 175) : BV:8
177 : ite(166, 68, 176) : BV:8
178 : ite(165, 65, 177) : BV:8
179 : ite(164, 63, 178) : BV:8
180 : bvadd(34, 57, 145) : BV:32
181 : eq(180, 61) : BOOL
182 : eq(180, 58) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : eq(180, 81) : BOOL
189 : ite(188, 83, 84) : BV:8
190 : ite(187, 80, 189) : BV:8
191 : ite(186, 77, 190) : BV:8
192 : ite(185, 74, 191) : BV:8
193 : ite(184, 71, 192) : BV:8
194 : ite(183, 68, 193) : BV:8
195 : ite(182, 65, 194) : BV:8
196 : ite(181, 63, 195) : BV:8
197 : bvadd(57, 145) : BV:32
198 : eq(197, 61) : BOOL
199 : eq(197, 58) : BOOL
200 : eq(197, 66) : BOOL
201 : eq(197, 69) : BOOL
202 : eq(197, 72) : BOOL
203 : eq(197, 75) : BOOL
204 : eq(197, 78) : BOOL
205 : eq(197, 81) : BOOL
206 : ite(205, 83, 84) : BV:8
207 : ite(204, 80, 206) : BV:8
208 : ite(203, 77, 207) : BV:8
209 : ite(202, 74, 208) : BV:8
210 : ite(201, 71, 209) : BV:8
211 : ite(200, 68, 210) : BV:8
212 : ite(199, 65, 211) : BV:8
213 : ite(198, 63, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 671088639 ] -> 0, [ 671088640; 671088640 ] -> 252, [ 671088641; 671088641 ] -> 255, [ 671088642; 671088642 ] -> 191, [ 671088643; 671088643 ] -> 40, [ 671088644; 671088644 ] -> 0, [ 671088645; 671088645 ] -> 188, [ 671088646; 671088646 ] -> 86, [ 671088647; 671088647 ] -> 254, [ 671088648; 683671551 ] -> 0, [ 683671552; 683671552 ] -> 1, [ 683671553; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1006591991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1006591992; 1006591995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1006591996; 2773664155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2773664156; 2773664159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2773664160; 2885144571 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2885144572; 2885144575 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2885144576; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2885144572 { 0xabf7cffc -1409822724 -1.93603467e216 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1006591992 { 0x3bff5ff8 +1.99511623e248 } : BV:32
=input.dst.llvm-%n
1 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2773664156 { 0xa552c19c -1521303140 -1.64653348e203 } : BV:32
=input.dst.llvm-%x
1 : 671088644 { 0x28000004 +1.47e209 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 814625084 { 0x308e313c +1.11087751e226 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda40612Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda40613Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 42) : BV:32
48 : 671088647 { 0x28000007 +1.83e209 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 671088640 { 0x28000000 +1.0e209 } : BV:32
52 : eq(50, 51) : BOOL
53 : 252 { 0xfc -4 } : BV:8
54 : eq(50, 48) : BOOL
55 : 254 { 0xfe -2 } : BV:8
56 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 671088642 { 0x28000002 +1.23e209 } : BV:32
60 : eq(50, 59) : BOOL
61 : 191 { 0xbf -65 } : BV:8
62 : 671088643 { 0x28000003 +1.35e209 } : BV:32
63 : eq(50, 62) : BOOL
64 : 40 { 0x28 } : BV:8
65 : 671088641 { 0x28000001 +1.11e209 } : BV:32
66 : eq(50, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 671088646 { 0x28000006 +1.71e209 } : BV:32
69 : eq(50, 68) : BOOL
70 : 86 { 0x56 } : BV:8
71 : 671088645 { 0x28000005 +1.59e209 } : BV:32
72 : eq(50, 71) : BOOL
73 : 188 { 0xbc -68 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : ite(52, 53, 81) : BV:8
83 : bvadd(68, 49) : BV:32
84 : eq(83, 51) : BOOL
85 : eq(83, 48) : BOOL
86 : eq(83, 56) : BOOL
87 : eq(83, 59) : BOOL
88 : eq(83, 62) : BOOL
89 : eq(83, 65) : BOOL
90 : eq(83, 68) : BOOL
91 : eq(83, 71) : BOOL
92 : ite(91, 73, 74) : BV:8
93 : ite(90, 70, 92) : BV:8
94 : ite(89, 67, 93) : BV:8
95 : ite(88, 64, 94) : BV:8
96 : ite(87, 61, 95) : BV:8
97 : ite(86, 58, 96) : BV:8
98 : ite(85, 55, 97) : BV:8
99 : ite(84, 53, 98) : BV:8
100 : bvadd(71, 49) : BV:32
101 : eq(100, 51) : BOOL
102 : eq(100, 48) : BOOL
103 : eq(100, 56) : BOOL
104 : eq(100, 59) : BOOL
105 : eq(100, 62) : BOOL
106 : eq(100, 65) : BOOL
107 : eq(100, 68) : BOOL
108 : eq(100, 71) : BOOL
109 : ite(108, 73, 74) : BV:8
110 : ite(107, 70, 109) : BV:8
111 : ite(106, 67, 110) : BV:8
112 : ite(105, 64, 111) : BV:8
113 : ite(104, 61, 112) : BV:8
114 : ite(103, 58, 113) : BV:8
115 : ite(102, 55, 114) : BV:8
116 : ite(101, 53, 115) : BV:8
117 : 671088644 { 0x28000004 +1.47e209 } : BV:32
118 : bvadd(117, 49) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 48) : BOOL
121 : eq(118, 56) : BOOL
122 : eq(118, 59) : BOOL
123 : eq(118, 62) : BOOL
124 : eq(118, 65) : BOOL
125 : eq(118, 68) : BOOL
126 : eq(118, 71) : BOOL
127 : ite(126, 73, 74) : BV:8
128 : ite(125, 70, 127) : BV:8
129 : ite(124, 67, 128) : BV:8
130 : ite(123, 64, 129) : BV:8
131 : ite(122, 61, 130) : BV:8
132 : ite(121, 58, 131) : BV:8
133 : ite(120, 55, 132) : BV:8
134 : ite(119, 53, 133) : BV:8
135 : bvconcat(82, 99, 116, 134) : BV:32
136 : bvadd(25, 47, 135) : BV:32
137 : eq(136, 51) : BOOL
138 : eq(136, 48) : BOOL
139 : eq(136, 56) : BOOL
140 : eq(136, 59) : BOOL
141 : eq(136, 62) : BOOL
142 : eq(136, 65) : BOOL
143 : eq(136, 68) : BOOL
144 : eq(136, 71) : BOOL
145 : ite(144, 73, 74) : BV:8
146 : ite(143, 70, 145) : BV:8
147 : ite(142, 67, 146) : BV:8
148 : ite(141, 64, 147) : BV:8
149 : ite(140, 61, 148) : BV:8
150 : ite(139, 58, 149) : BV:8
151 : ite(138, 55, 150) : BV:8
152 : ite(137, 53, 151) : BV:8
153 : bvadd(29, 47, 135) : BV:32
154 : eq(153, 51) : BOOL
155 : eq(153, 48) : BOOL
156 : eq(153, 56) : BOOL
157 : eq(153, 59) : BOOL
158 : eq(153, 62) : BOOL
159 : eq(153, 65) : BOOL
160 : eq(153, 68) : BOOL
161 : eq(153, 71) : BOOL
162 : ite(161, 73, 74) : BV:8
163 : ite(160, 70, 162) : BV:8
164 : ite(159, 67, 163) : BV:8
165 : ite(158, 64, 164) : BV:8
166 : ite(157, 61, 165) : BV:8
167 : ite(156, 58, 166) : BV:8
168 : ite(155, 55, 167) : BV:8
169 : ite(154, 53, 168) : BV:8
170 : bvadd(22, 47, 135) : BV:32
171 : eq(170, 51) : BOOL
172 : eq(170, 48) : BOOL
173 : eq(170, 56) : BOOL
174 : eq(170, 59) : BOOL
175 : eq(170, 62) : BOOL
176 : eq(170, 65) : BOOL
177 : eq(170, 68) : BOOL
178 : eq(170, 71) : BOOL
179 : ite(178, 73, 74) : BV:8
180 : ite(177, 70, 179) : BV:8
181 : ite(176, 67, 180) : BV:8
182 : ite(175, 64, 181) : BV:8
183 : ite(174, 61, 182) : BV:8
184 : ite(173, 58, 183) : BV:8
185 : ite(172, 55, 184) : BV:8
186 : ite(171, 53, 185) : BV:8
187 : bvadd(47, 135) : BV:32
188 : eq(187, 51) : BOOL
189 : eq(187, 48) : BOOL
190 : eq(187, 56) : BOOL
191 : eq(187, 59) : BOOL
192 : eq(187, 62) : BOOL
193 : eq(187, 65) : BOOL
194 : eq(187, 68) : BOOL
195 : eq(187, 71) : BOOL
196 : ite(195, 73, 74) : BV:8
197 : ite(194, 70, 196) : BV:8
198 : ite(193, 67, 197) : BV:8
199 : ite(192, 64, 198) : BV:8
200 : ite(191, 61, 199) : BV:8
201 : ite(190, 58, 200) : BV:8
202 : ite(189, 55, 201) : BV:8
203 : ite(188, 53, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(45, 2, 204) : BV:32
206 : lambda(42, 205) : FUNCTION[BV:32 -> BV:32]
207 : map(41, 206) : MAP[BV:32 -> BV:32]
208 : sym_const(207) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda40602Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : bvule(19, 16) : BOOL
31 : and(29, 30) : BOOL
32 : 3 { 0x3 +1.35e129 } : BV:32
33 : bvule(32, 19) : BOOL
34 : bvule(19, 10) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 19) : BOOL
38 : bvule(19, 36) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 7, 13) : BOOL
46 : lambda(19, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda40603Var : BV:32
48 : eq(2, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 47) : BV:32
53 : 671088647 { 0x28000007 +1.83e209 } : BV:32
54 : bvmul(51, 2) : BV:32
55 : bvadd(53, 54) : BV:32
56 : 671088640 { 0x28000000 +1.0e209 } : BV:32
57 : eq(55, 56) : BOOL
58 : 252 { 0xfc -4 } : BV:8
59 : eq(55, 53) : BOOL
60 : 254 { 0xfe -2 } : BV:8
61 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
62 : eq(55, 61) : BOOL
63 : 1 { 0x1 } : BV:8
64 : 671088642 { 0x28000002 +1.23e209 } : BV:32
65 : eq(55, 64) : BOOL
66 : 191 { 0xbf -65 } : BV:8
67 : 671088643 { 0x28000003 +1.35e209 } : BV:32
68 : eq(55, 67) : BOOL
69 : 40 { 0x28 } : BV:8
70 : 671088641 { 0x28000001 +1.11e209 } : BV:32
71 : eq(55, 70) : BOOL
72 : 255 { 0xff -1 } : BV:8
73 : 671088646 { 0x28000006 +1.71e209 } : BV:32
74 : eq(55, 73) : BOOL
75 : 86 { 0x56 } : BV:8
76 : 671088645 { 0x28000005 +1.59e209 } : BV:32
77 : eq(55, 76) : BOOL
78 : 188 { 0xbc -68 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(73, 54) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 53) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 64) : BOOL
93 : eq(88, 67) : BOOL
94 : eq(88, 70) : BOOL
95 : eq(88, 73) : BOOL
96 : eq(88, 76) : BOOL
97 : ite(96, 78, 79) : BV:8
98 : ite(95, 75, 97) : BV:8
99 : ite(94, 72, 98) : BV:8
100 : ite(93, 69, 99) : BV:8
101 : ite(92, 66, 100) : BV:8
102 : ite(91, 63, 101) : BV:8
103 : ite(90, 60, 102) : BV:8
104 : ite(89, 58, 103) : BV:8
105 : bvadd(76, 54) : BV:32
106 : eq(105, 56) : BOOL
107 : eq(105, 53) : BOOL
108 : eq(105, 61) : BOOL
109 : eq(105, 64) : BOOL
110 : eq(105, 67) : BOOL
111 : eq(105, 70) : BOOL
112 : eq(105, 73) : BOOL
113 : eq(105, 76) : BOOL
114 : ite(113, 78, 79) : BV:8
115 : ite(112, 75, 114) : BV:8
116 : ite(111, 72, 115) : BV:8
117 : ite(110, 69, 116) : BV:8
118 : ite(109, 66, 117) : BV:8
119 : ite(108, 63, 118) : BV:8
120 : ite(107, 60, 119) : BV:8
121 : ite(106, 58, 120) : BV:8
122 : 671088644 { 0x28000004 +1.47e209 } : BV:32
123 : bvadd(122, 54) : BV:32
124 : eq(123, 56) : BOOL
125 : eq(123, 53) : BOOL
126 : eq(123, 61) : BOOL
127 : eq(123, 64) : BOOL
128 : eq(123, 67) : BOOL
129 : eq(123, 70) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 76) : BOOL
132 : ite(131, 78, 79) : BV:8
133 : ite(130, 75, 132) : BV:8
134 : ite(129, 72, 133) : BV:8
135 : ite(128, 69, 134) : BV:8
136 : ite(127, 66, 135) : BV:8
137 : ite(126, 63, 136) : BV:8
138 : ite(125, 60, 137) : BV:8
139 : ite(124, 58, 138) : BV:8
140 : bvconcat(87, 104, 121, 139) : BV:32
141 : bvadd(32, 52, 140) : BV:32
142 : eq(141, 56) : BOOL
143 : eq(141, 53) : BOOL
144 : eq(141, 61) : BOOL
145 : eq(141, 64) : BOOL
146 : eq(141, 67) : BOOL
147 : eq(141, 70) : BOOL
148 : eq(141, 73) : BOOL
149 : eq(141, 76) : BOOL
150 : ite(149, 78, 79) : BV:8
151 : ite(148, 75, 150) : BV:8
152 : ite(147, 72, 151) : BV:8
153 : ite(146, 69, 152) : BV:8
154 : ite(145, 66, 153) : BV:8
155 : ite(144, 63, 154) : BV:8
156 : ite(143, 60, 155) : BV:8
157 : ite(142, 58, 156) : BV:8
158 : bvadd(36, 52, 140) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 53) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 64) : BOOL
163 : eq(158, 67) : BOOL
164 : eq(158, 70) : BOOL
165 : eq(158, 73) : BOOL
166 : eq(158, 76) : BOOL
167 : ite(166, 78, 79) : BV:8
168 : ite(165, 75, 167) : BV:8
169 : ite(164, 72, 168) : BV:8
170 : ite(163, 69, 169) : BV:8
171 : ite(162, 66, 170) : BV:8
172 : ite(161, 63, 171) : BV:8
173 : ite(160, 60, 172) : BV:8
174 : ite(159, 58, 173) : BV:8
175 : bvadd(16, 52, 140) : BV:32
176 : eq(175, 56) : BOOL
177 : eq(175, 53) : BOOL
178 : eq(175, 61) : BOOL
179 : eq(175, 64) : BOOL
180 : eq(175, 67) : BOOL
181 : eq(175, 70) : BOOL
182 : eq(175, 73) : BOOL
183 : eq(175, 76) : BOOL
184 : ite(183, 78, 79) : BV:8
185 : ite(182, 75, 184) : BV:8
186 : ite(181, 72, 185) : BV:8
187 : ite(180, 69, 186) : BV:8
188 : ite(179, 66, 187) : BV:8
189 : ite(178, 63, 188) : BV:8
190 : ite(177, 60, 189) : BV:8
191 : ite(176, 58, 190) : BV:8
192 : bvadd(52, 140) : BV:32
193 : eq(192, 56) : BOOL
194 : eq(192, 53) : BOOL
195 : eq(192, 61) : BOOL
196 : eq(192, 64) : BOOL
197 : eq(192, 67) : BOOL
198 : eq(192, 70) : BOOL
199 : eq(192, 73) : BOOL
200 : eq(192, 76) : BOOL
201 : ite(200, 78, 79) : BV:8
202 : ite(199, 75, 201) : BV:8
203 : ite(198, 72, 202) : BV:8
204 : ite(197, 69, 203) : BV:8
205 : ite(196, 66, 204) : BV:8
206 : ite(195, 63, 205) : BV:8
207 : ite(194, 60, 206) : BV:8
208 : ite(193, 58, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(50, 1, 209) : BV:32
211 : lambda(47, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(46, 211) : MAP[BV:32 -> BV:32]
213 : sum(17, 18, 212) : SUM[UNIT,MAP[BV:32 -> BV:32]]
214 : sym_const(213) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda40618Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda40619Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 42) : BV:32
48 : 671088647 { 0x28000007 +1.83e209 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 671088640 { 0x28000000 +1.0e209 } : BV:32
52 : eq(50, 51) : BOOL
53 : 252 { 0xfc -4 } : BV:8
54 : eq(50, 48) : BOOL
55 : 254 { 0xfe -2 } : BV:8
56 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 671088642 { 0x28000002 +1.23e209 } : BV:32
60 : eq(50, 59) : BOOL
61 : 191 { 0xbf -65 } : BV:8
62 : 671088643 { 0x28000003 +1.35e209 } : BV:32
63 : eq(50, 62) : BOOL
64 : 40 { 0x28 } : BV:8
65 : 671088641 { 0x28000001 +1.11e209 } : BV:32
66 : eq(50, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 671088646 { 0x28000006 +1.71e209 } : BV:32
69 : eq(50, 68) : BOOL
70 : 86 { 0x56 } : BV:8
71 : 671088645 { 0x28000005 +1.59e209 } : BV:32
72 : eq(50, 71) : BOOL
73 : 188 { 0xbc -68 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : ite(52, 53, 81) : BV:8
83 : bvadd(68, 49) : BV:32
84 : eq(83, 51) : BOOL
85 : eq(83, 48) : BOOL
86 : eq(83, 56) : BOOL
87 : eq(83, 59) : BOOL
88 : eq(83, 62) : BOOL
89 : eq(83, 65) : BOOL
90 : eq(83, 68) : BOOL
91 : eq(83, 71) : BOOL
92 : ite(91, 73, 74) : BV:8
93 : ite(90, 70, 92) : BV:8
94 : ite(89, 67, 93) : BV:8
95 : ite(88, 64, 94) : BV:8
96 : ite(87, 61, 95) : BV:8
97 : ite(86, 58, 96) : BV:8
98 : ite(85, 55, 97) : BV:8
99 : ite(84, 53, 98) : BV:8
100 : bvadd(71, 49) : BV:32
101 : eq(100, 51) : BOOL
102 : eq(100, 48) : BOOL
103 : eq(100, 56) : BOOL
104 : eq(100, 59) : BOOL
105 : eq(100, 62) : BOOL
106 : eq(100, 65) : BOOL
107 : eq(100, 68) : BOOL
108 : eq(100, 71) : BOOL
109 : ite(108, 73, 74) : BV:8
110 : ite(107, 70, 109) : BV:8
111 : ite(106, 67, 110) : BV:8
112 : ite(105, 64, 111) : BV:8
113 : ite(104, 61, 112) : BV:8
114 : ite(103, 58, 113) : BV:8
115 : ite(102, 55, 114) : BV:8
116 : ite(101, 53, 115) : BV:8
117 : 671088644 { 0x28000004 +1.47e209 } : BV:32
118 : bvadd(117, 49) : BV:32
119 : eq(118, 51) : BOOL
120 : eq(118, 48) : BOOL
121 : eq(118, 56) : BOOL
122 : eq(118, 59) : BOOL
123 : eq(118, 62) : BOOL
124 : eq(118, 65) : BOOL
125 : eq(118, 68) : BOOL
126 : eq(118, 71) : BOOL
127 : ite(126, 73, 74) : BV:8
128 : ite(125, 70, 127) : BV:8
129 : ite(124, 67, 128) : BV:8
130 : ite(123, 64, 129) : BV:8
131 : ite(122, 61, 130) : BV:8
132 : ite(121, 58, 131) : BV:8
133 : ite(120, 55, 132) : BV:8
134 : ite(119, 53, 133) : BV:8
135 : bvconcat(82, 99, 116, 134) : BV:32
136 : bvadd(25, 47, 135) : BV:32
137 : eq(136, 51) : BOOL
138 : eq(136, 48) : BOOL
139 : eq(136, 56) : BOOL
140 : eq(136, 59) : BOOL
141 : eq(136, 62) : BOOL
142 : eq(136, 65) : BOOL
143 : eq(136, 68) : BOOL
144 : eq(136, 71) : BOOL
145 : ite(144, 73, 74) : BV:8
146 : ite(143, 70, 145) : BV:8
147 : ite(142, 67, 146) : BV:8
148 : ite(141, 64, 147) : BV:8
149 : ite(140, 61, 148) : BV:8
150 : ite(139, 58, 149) : BV:8
151 : ite(138, 55, 150) : BV:8
152 : ite(137, 53, 151) : BV:8
153 : bvadd(29, 47, 135) : BV:32
154 : eq(153, 51) : BOOL
155 : eq(153, 48) : BOOL
156 : eq(153, 56) : BOOL
157 : eq(153, 59) : BOOL
158 : eq(153, 62) : BOOL
159 : eq(153, 65) : BOOL
160 : eq(153, 68) : BOOL
161 : eq(153, 71) : BOOL
162 : ite(161, 73, 74) : BV:8
163 : ite(160, 70, 162) : BV:8
164 : ite(159, 67, 163) : BV:8
165 : ite(158, 64, 164) : BV:8
166 : ite(157, 61, 165) : BV:8
167 : ite(156, 58, 166) : BV:8
168 : ite(155, 55, 167) : BV:8
169 : ite(154, 53, 168) : BV:8
170 : bvadd(22, 47, 135) : BV:32
171 : eq(170, 51) : BOOL
172 : eq(170, 48) : BOOL
173 : eq(170, 56) : BOOL
174 : eq(170, 59) : BOOL
175 : eq(170, 62) : BOOL
176 : eq(170, 65) : BOOL
177 : eq(170, 68) : BOOL
178 : eq(170, 71) : BOOL
179 : ite(178, 73, 74) : BV:8
180 : ite(177, 70, 179) : BV:8
181 : ite(176, 67, 180) : BV:8
182 : ite(175, 64, 181) : BV:8
183 : ite(174, 61, 182) : BV:8
184 : ite(173, 58, 183) : BV:8
185 : ite(172, 55, 184) : BV:8
186 : ite(171, 53, 185) : BV:8
187 : bvadd(47, 135) : BV:32
188 : eq(187, 51) : BOOL
189 : eq(187, 48) : BOOL
190 : eq(187, 56) : BOOL
191 : eq(187, 59) : BOOL
192 : eq(187, 62) : BOOL
193 : eq(187, 65) : BOOL
194 : eq(187, 68) : BOOL
195 : eq(187, 71) : BOOL
196 : ite(195, 73, 74) : BV:8
197 : ite(194, 70, 196) : BV:8
198 : ite(193, 67, 197) : BV:8
199 : ite(192, 64, 198) : BV:8
200 : ite(191, 61, 199) : BV:8
201 : ite(190, 58, 200) : BV:8
202 : ite(189, 55, 201) : BV:8
203 : ite(188, 53, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(45, 2, 204) : BV:32
206 : lambda(42, 205) : FUNCTION[BV:32 -> BV:32]
207 : map(41, 206) : MAP[BV:32 -> BV:32]
208 : sym_const(207) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1698593948 { 0x653e7c9c +1.48817777e75 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1006591992 { 0x3bff5ff8 +1.99511623e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1006591995 { 0x3bff5ffb +1.99511659e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2773664156 { 0xa552c19c -1521303140 -1.64653348e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2773664159 { 0xa552c19f -1521303137 -1.64653384e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2885144572 { 0xabf7cffc -1409822724 -1.93603467e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2885144575 { 0xabf7cfff -1409822721 -1.93603503e216 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda40271Var : BV:32
2 : Lambda40272Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 671088647 { 0x28000007 +1.83e209 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 671088640 { 0x28000000 +1.0e209 } : BV:32
54 : eq(52, 53) : BOOL
55 : 252 { 0xfc -4 } : BV:8
56 : eq(52, 50) : BOOL
57 : 254 { 0xfe -2 } : BV:8
58 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 671088642 { 0x28000002 +1.23e209 } : BV:32
62 : eq(52, 61) : BOOL
63 : 191 { 0xbf -65 } : BV:8
64 : 671088643 { 0x28000003 +1.35e209 } : BV:32
65 : eq(52, 64) : BOOL
66 : 40 { 0x28 } : BV:8
67 : 671088641 { 0x28000001 +1.11e209 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 671088646 { 0x28000006 +1.71e209 } : BV:32
71 : eq(52, 70) : BOOL
72 : 86 { 0x56 } : BV:8
73 : 671088645 { 0x28000005 +1.59e209 } : BV:32
74 : eq(52, 73) : BOOL
75 : 188 { 0xbc -68 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(56, 57, 82) : BV:8
84 : ite(54, 55, 83) : BV:8
85 : bvadd(70, 51) : BV:32
86 : eq(85, 53) : BOOL
87 : eq(85, 50) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 61) : BOOL
90 : eq(85, 64) : BOOL
91 : eq(85, 67) : BOOL
92 : eq(85, 70) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 69, 95) : BV:8
97 : ite(90, 66, 96) : BV:8
98 : ite(89, 63, 97) : BV:8
99 : ite(88, 60, 98) : BV:8
100 : ite(87, 57, 99) : BV:8
101 : ite(86, 55, 100) : BV:8
102 : bvadd(73, 51) : BV:32
103 : eq(102, 53) : BOOL
104 : eq(102, 50) : BOOL
105 : eq(102, 58) : BOOL
106 : eq(102, 61) : BOOL
107 : eq(102, 64) : BOOL
108 : eq(102, 67) : BOOL
109 : eq(102, 70) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 69, 112) : BV:8
114 : ite(107, 66, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 60, 115) : BV:8
117 : ite(104, 57, 116) : BV:8
118 : ite(103, 55, 117) : BV:8
119 : 671088644 { 0x28000004 +1.47e209 } : BV:32
120 : bvadd(119, 51) : BV:32
121 : eq(120, 53) : BOOL
122 : eq(120, 50) : BOOL
123 : eq(120, 58) : BOOL
124 : eq(120, 61) : BOOL
125 : eq(120, 64) : BOOL
126 : eq(120, 67) : BOOL
127 : eq(120, 70) : BOOL
128 : eq(120, 73) : BOOL
129 : ite(128, 75, 76) : BV:8
130 : ite(127, 72, 129) : BV:8
131 : ite(126, 69, 130) : BV:8
132 : ite(125, 66, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 60, 133) : BV:8
135 : ite(122, 57, 134) : BV:8
136 : ite(121, 55, 135) : BV:8
137 : bvconcat(84, 101, 118, 136) : BV:32
138 : bvadd(33, 49, 137) : BV:32
139 : eq(138, 53) : BOOL
140 : eq(138, 50) : BOOL
141 : eq(138, 58) : BOOL
142 : eq(138, 61) : BOOL
143 : eq(138, 64) : BOOL
144 : eq(138, 67) : BOOL
145 : eq(138, 70) : BOOL
146 : eq(138, 73) : BOOL
147 : ite(146, 75, 76) : BV:8
148 : ite(145, 72, 147) : BV:8
149 : ite(144, 69, 148) : BV:8
150 : ite(143, 66, 149) : BV:8
151 : ite(142, 63, 150) : BV:8
152 : ite(141, 60, 151) : BV:8
153 : ite(140, 57, 152) : BV:8
154 : ite(139, 55, 153) : BV:8
155 : bvadd(37, 49, 137) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 50) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 61) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 67) : BOOL
162 : eq(155, 70) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 72, 164) : BV:8
166 : ite(161, 69, 165) : BV:8
167 : ite(160, 66, 166) : BV:8
168 : ite(159, 63, 167) : BV:8
169 : ite(158, 60, 168) : BV:8
170 : ite(157, 57, 169) : BV:8
171 : ite(156, 55, 170) : BV:8
172 : bvadd(30, 49, 137) : BV:32
173 : eq(172, 53) : BOOL
174 : eq(172, 50) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : eq(172, 73) : BOOL
181 : ite(180, 75, 76) : BV:8
182 : ite(179, 72, 181) : BV:8
183 : ite(178, 69, 182) : BV:8
184 : ite(177, 66, 183) : BV:8
185 : ite(176, 63, 184) : BV:8
186 : ite(175, 60, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 55, 187) : BV:8
189 : bvadd(49, 137) : BV:32
190 : eq(189, 53) : BOOL
191 : eq(189, 50) : BOOL
192 : eq(189, 58) : BOOL
193 : eq(189, 61) : BOOL
194 : eq(189, 64) : BOOL
195 : eq(189, 67) : BOOL
196 : eq(189, 70) : BOOL
197 : eq(189, 73) : BOOL
198 : ite(197, 75, 76) : BV:8
199 : ite(196, 72, 198) : BV:8
200 : ite(195, 69, 199) : BV:8
201 : ite(194, 66, 200) : BV:8
202 : ite(193, 63, 201) : BV:8
203 : ite(192, 60, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 55, 204) : BV:8
206 : bvconcat(154, 171, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda40281Var : BV:32
2 : Lambda40282Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 671088647 { 0x28000007 +1.83e209 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 671088640 { 0x28000000 +1.0e209 } : BV:32
14 : eq(12, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : eq(12, 10) : BOOL
17 : 254 { 0xfe -2 } : BV:8
18 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 671088642 { 0x28000002 +1.23e209 } : BV:32
22 : eq(12, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 671088643 { 0x28000003 +1.35e209 } : BV:32
25 : eq(12, 24) : BOOL
26 : 40 { 0x28 } : BV:8
27 : 671088641 { 0x28000001 +1.11e209 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 671088646 { 0x28000006 +1.71e209 } : BV:32
31 : eq(12, 30) : BOOL
32 : 86 { 0x56 } : BV:8
33 : 671088645 { 0x28000005 +1.59e209 } : BV:32
34 : eq(12, 33) : BOOL
35 : 188 { 0xbc -68 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : 671088644 { 0x28000004 +1.47e209 } : BV:32
80 : bvadd(79, 11) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 10) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 21) : BOOL
85 : eq(80, 24) : BOOL
86 : eq(80, 27) : BOOL
87 : eq(80, 30) : BOOL
88 : eq(80, 33) : BOOL
89 : ite(88, 35, 36) : BV:8
90 : ite(87, 32, 89) : BV:8
91 : ite(86, 29, 90) : BV:8
92 : ite(85, 26, 91) : BV:8
93 : ite(84, 23, 92) : BV:8
94 : ite(83, 20, 93) : BV:8
95 : ite(82, 17, 94) : BV:8
96 : ite(81, 15, 95) : BV:8
97 : bvconcat(44, 61, 78, 96) : BV:32
98 : bvadd(7, 9, 97) : BV:32
99 : eq(98, 13) : BOOL
100 : eq(98, 10) : BOOL
101 : eq(98, 18) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 24) : BOOL
104 : eq(98, 27) : BOOL
105 : eq(98, 30) : BOOL
106 : eq(98, 33) : BOOL
107 : ite(106, 35, 36) : BV:8
108 : ite(105, 32, 107) : BV:8
109 : ite(104, 29, 108) : BV:8
110 : ite(103, 26, 109) : BV:8
111 : ite(102, 23, 110) : BV:8
112 : ite(101, 20, 111) : BV:8
113 : ite(100, 17, 112) : BV:8
114 : ite(99, 15, 113) : BV:8
115 : 2 { 0x2 +1.23e129 } : BV:32
116 : bvadd(115, 9, 97) : BV:32
117 : eq(116, 13) : BOOL
118 : eq(116, 10) : BOOL
119 : eq(116, 18) : BOOL
120 : eq(116, 21) : BOOL
121 : eq(116, 24) : BOOL
122 : eq(116, 27) : BOOL
123 : eq(116, 30) : BOOL
124 : eq(116, 33) : BOOL
125 : ite(124, 35, 36) : BV:8
126 : ite(123, 32, 125) : BV:8
127 : ite(122, 29, 126) : BV:8
128 : ite(121, 26, 127) : BV:8
129 : ite(120, 23, 128) : BV:8
130 : ite(119, 20, 129) : BV:8
131 : ite(118, 17, 130) : BV:8
132 : ite(117, 15, 131) : BV:8
133 : 1 { 0x1 +1.11e129 } : BV:32
134 : bvadd(133, 9, 97) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : eq(134, 33) : BOOL
143 : ite(142, 35, 36) : BV:8
144 : ite(141, 32, 143) : BV:8
145 : ite(140, 29, 144) : BV:8
146 : ite(139, 26, 145) : BV:8
147 : ite(138, 23, 146) : BV:8
148 : ite(137, 20, 147) : BV:8
149 : ite(136, 17, 148) : BV:8
150 : ite(135, 15, 149) : BV:8
151 : bvadd(9, 97) : BV:32
152 : eq(151, 13) : BOOL
153 : eq(151, 10) : BOOL
154 : eq(151, 18) : BOOL
155 : eq(151, 21) : BOOL
156 : eq(151, 24) : BOOL
157 : eq(151, 27) : BOOL
158 : eq(151, 30) : BOOL
159 : eq(151, 33) : BOOL
160 : ite(159, 35, 36) : BV:8
161 : ite(158, 32, 160) : BV:8
162 : ite(157, 29, 161) : BV:8
163 : ite(156, 26, 162) : BV:8
164 : ite(155, 23, 163) : BV:8
165 : ite(154, 20, 164) : BV:8
166 : ite(153, 17, 165) : BV:8
167 : ite(152, 15, 166) : BV:8
168 : bvconcat(114, 132, 150, 167) : BV:32
169 : ite(6, 3, 168) : BV:32
170 : lambda(1, 2, 169) : FUNCTION[BV:32,BV:32 -> BV:32]
171 : sym_const(170) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2795711175 ] -> true, [ 2795711176; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2795711175 ] -> true, [ 2795711176; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda40285Var : BV:32
2 : Lambda40286Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda40276Var : BV:32
2 : Lambda40277Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2795711175 { 0xa6a32ac7 -1499256121 -1.27474296e206 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2795711176 { 0xa6a32ac8 -1499256120 -1.27474308e206 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2795711177 { 0xa6a32ac9 -1499256119 -1.27474319e206 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda40292Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 671088640 { 0x28000000 +1.0e209 } : BV:32
12 : eq(10, 11) : BOOL
13 : 252 { 0xfc -4 } : BV:8
14 : 671088647 { 0x28000007 +1.83e209 } : BV:32
15 : eq(10, 14) : BOOL
16 : 254 { 0xfe -2 } : BV:8
17 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
18 : eq(10, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 671088642 { 0x28000002 +1.23e209 } : BV:32
21 : eq(10, 20) : BOOL
22 : 191 { 0xbf -65 } : BV:8
23 : 671088643 { 0x28000003 +1.35e209 } : BV:32
24 : eq(10, 23) : BOOL
25 : 40 { 0x28 } : BV:8
26 : 671088641 { 0x28000001 +1.11e209 } : BV:32
27 : eq(10, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 671088646 { 0x28000006 +1.71e209 } : BV:32
30 : eq(10, 29) : BOOL
31 : 86 { 0x56 } : BV:8
32 : 671088645 { 0x28000005 +1.59e209 } : BV:32
33 : eq(10, 32) : BOOL
34 : 188 { 0xbc -68 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : bvadd(2, 8, 9) : BV:32
63 : eq(62, 11) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 20) : BOOL
67 : eq(62, 23) : BOOL
68 : eq(62, 26) : BOOL
69 : eq(62, 29) : BOOL
70 : eq(62, 32) : BOOL
71 : ite(70, 34, 35) : BV:8
72 : ite(69, 31, 71) : BV:8
73 : ite(68, 28, 72) : BV:8
74 : ite(67, 25, 73) : BV:8
75 : ite(66, 22, 74) : BV:8
76 : ite(65, 19, 75) : BV:8
77 : ite(64, 16, 76) : BV:8
78 : ite(63, 13, 77) : BV:8
79 : bvadd(8, 9) : BV:32
80 : eq(79, 11) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 17) : BOOL
83 : eq(79, 20) : BOOL
84 : eq(79, 23) : BOOL
85 : eq(79, 26) : BOOL
86 : eq(79, 29) : BOOL
87 : eq(79, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : ite(84, 25, 90) : BV:8
92 : ite(83, 22, 91) : BV:8
93 : ite(82, 19, 92) : BV:8
94 : ite(81, 16, 93) : BV:8
95 : ite(80, 13, 94) : BV:8
96 : bvconcat(43, 61, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 2, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda40296Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 671088640 { 0x28000000 +1.0e209 } : BV:32
12 : eq(10, 11) : BOOL
13 : 252 { 0xfc -4 } : BV:8
14 : 671088647 { 0x28000007 +1.83e209 } : BV:32
15 : eq(10, 14) : BOOL
16 : 254 { 0xfe -2 } : BV:8
17 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
18 : eq(10, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 671088642 { 0x28000002 +1.23e209 } : BV:32
21 : eq(10, 20) : BOOL
22 : 191 { 0xbf -65 } : BV:8
23 : 671088643 { 0x28000003 +1.35e209 } : BV:32
24 : eq(10, 23) : BOOL
25 : 40 { 0x28 } : BV:8
26 : 671088641 { 0x28000001 +1.11e209 } : BV:32
27 : eq(10, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 671088646 { 0x28000006 +1.71e209 } : BV:32
30 : eq(10, 29) : BOOL
31 : 86 { 0x56 } : BV:8
32 : 671088645 { 0x28000005 +1.59e209 } : BV:32
33 : eq(10, 32) : BOOL
34 : 188 { 0xbc -68 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : bvadd(2, 8, 9) : BV:32
63 : eq(62, 11) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : eq(62, 20) : BOOL
67 : eq(62, 23) : BOOL
68 : eq(62, 26) : BOOL
69 : eq(62, 29) : BOOL
70 : eq(62, 32) : BOOL
71 : ite(70, 34, 35) : BV:8
72 : ite(69, 31, 71) : BV:8
73 : ite(68, 28, 72) : BV:8
74 : ite(67, 25, 73) : BV:8
75 : ite(66, 22, 74) : BV:8
76 : ite(65, 19, 75) : BV:8
77 : ite(64, 16, 76) : BV:8
78 : ite(63, 13, 77) : BV:8
79 : bvadd(8, 9) : BV:32
80 : eq(79, 11) : BOOL
81 : eq(79, 14) : BOOL
82 : eq(79, 17) : BOOL
83 : eq(79, 20) : BOOL
84 : eq(79, 23) : BOOL
85 : eq(79, 26) : BOOL
86 : eq(79, 29) : BOOL
87 : eq(79, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : ite(84, 25, 90) : BV:8
92 : ite(83, 22, 91) : BV:8
93 : ite(82, 19, 92) : BV:8
94 : ite(81, 16, 93) : BV:8
95 : ite(80, 13, 94) : BV:8
96 : bvconcat(43, 61, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 2, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda40300Var : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 683671548 { 0x28bffffc +1.49999952e210 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 671088640 { 0x28000000 +1.0e209 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 671088647 { 0x28000007 +1.83e209 } : BV:32
13 : eq(8, 12) : BOOL
14 : 254 { 0xfe -2 } : BV:8
15 : 683671552 { 0x28c00000 +1.50000000e210 } : BV:32
16 : eq(8, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 671088642 { 0x28000002 +1.23e209 } : BV:32
19 : eq(8, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 671088643 { 0x28000003 +1.35e209 } : BV:32
22 : eq(8, 21) : BOOL
23 : 40 { 0x28 } : BV:8
24 : 671088641 { 0x28000001 +1.11e209 } : BV:32
25 : eq(8, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 671088646 { 0x28000006 +1.71e209 } : BV:32
28 : eq(8, 27) : BOOL
29 : 86 { 0x56 } : BV:8
30 : 671088645 { 0x28000005 +1.59e209 } : BV:32
31 : eq(8, 30) : BOOL
32 : 188 { 0xbc -68 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : bvadd(2, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 30) : BOOL
69 : ite(68, 32, 33) : BV:8
70 : ite(67, 29, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 30) : BOOL
86 : ite(85, 32, 33) : BV:8
87 : ite(84, 29, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(41, 59, 76, 93) : BV:32
95 : ite(3, 2, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=counter_example.random_seed
1618519406
=counter_example_end
=global nodece 61 num_edges_traversed 3
=global nodece 61 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce4510.num_edges_traversed1
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce4510 3d88282d4a1c3f992157b58d7265d9ec
=input.spec-%var-x-1
1 : Lambda41679Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41680Var : BV:32
18 : Lambda41681Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41682Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
82 : eq(80, 81) : BOOL
83 : 252 { 0xfc -4 } : BV:8
84 : eq(80, 78) : BOOL
85 : 222 { 0xde -34 } : BV:8
86 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
87 : eq(80, 86) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
90 : eq(80, 89) : BOOL
91 : 124 { 0x7c } : BV:8
92 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
93 : eq(80, 92) : BOOL
94 : 127 { 0x7f } : BV:8
95 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
96 : eq(80, 95) : BOOL
97 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
98 : eq(80, 97) : BOOL
99 : 187 { 0xbb -69 } : BV:8
100 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
101 : eq(80, 100) : BOOL
102 : 254 { 0xfe -2 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(96, 88, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(84, 85, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(97, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 97) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 99, 121) : BV:8
123 : ite(118, 88, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 85, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 78) : BOOL
132 : eq(129, 86) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 97) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 99, 138) : BV:8
140 : ite(135, 88, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 85, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(89, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 78) : BOOL
149 : eq(146, 86) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 97) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 99, 155) : BV:8
157 : ite(152, 88, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 85, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 78) : BOOL
167 : eq(164, 86) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 97) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 99, 173) : BV:8
175 : ite(170, 88, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 85, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 78) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 97) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 99, 191) : BV:8
193 : ite(188, 88, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 85, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 78) : BOOL
203 : eq(200, 86) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 97) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 99, 209) : BV:8
211 : ite(206, 88, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 85, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 78) : BOOL
220 : eq(217, 86) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 97) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 99, 226) : BV:8
228 : ite(223, 88, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 85, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda41699Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41700Var : BV:32
18 : Lambda41701Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41702Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
63 : eq(61, 62) : BOOL
64 : 252 { 0xfc -4 } : BV:8
65 : eq(61, 59) : BOOL
66 : 222 { 0xde -34 } : BV:8
67 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
68 : eq(61, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
71 : eq(61, 70) : BOOL
72 : 124 { 0x7c } : BV:8
73 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
74 : eq(61, 73) : BOOL
75 : 127 { 0x7f } : BV:8
76 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
77 : eq(61, 76) : BOOL
78 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
79 : eq(61, 78) : BOOL
80 : 187 { 0xbb -69 } : BV:8
81 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
82 : eq(61, 81) : BOOL
83 : 254 { 0xfe -2 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 69, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(65, 66, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(78, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 78) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 69, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 66, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 67) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 78) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 69, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(70, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 59) : BOOL
130 : eq(127, 67) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 78) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 80, 136) : BV:8
138 : ite(133, 69, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 66, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 59) : BOOL
148 : eq(145, 67) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 78) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 80, 154) : BV:8
156 : ite(151, 69, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 66, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 59) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 78) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 80, 172) : BV:8
174 : ite(169, 69, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 66, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 67) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 78) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 80, 190) : BV:8
192 : ite(187, 69, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 66, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 59) : BOOL
201 : eq(198, 67) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 78) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 80, 207) : BV:8
209 : ite(204, 69, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 330292095 ] -> 0, [ 330292096; 330292096 ] -> 124, [ 330292097; 330292097 ] -> 254, [ 330292098; 330292098 ] -> 187, [ 330292099; 330292099 ] -> 222, [ 330292100; 335544315 ] -> 0, [ 335544316; 335544316 ] -> 252, [ 335544317; 335544318 ] -> 255, [ 335544319; 335544319 ] -> 127, [ 335544320; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 126612695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 126612696; 126612699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 126612700; 2292181419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2292181420; 2292181423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2292181424; 3364450835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3364450836; 3364450839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3364450840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 126612696 { 0x78bf4d8 +1.9340953e144 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3364450836 { 0xc8897214 -930516460 -1.7379388e18 } : BV:32
=input.dst.llvm-%n
1 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2292181420 { 0x889fe9ac -2002785876 -1.24931859e146 } : BV:32
=input.dst.llvm-%x
1 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 5252220 { 0x50247c +1.62611341e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1313055 { 0x14091f +1.15652835e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda41706Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41707Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
28 : eq(23, 27) : BOOL
29 : 222 { 0xde -34 } : BV:8
30 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
34 : eq(23, 33) : BOOL
35 : 124 { 0x7c } : BV:8
36 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
40 : eq(23, 39) : BOOL
41 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
42 : eq(23, 41) : BOOL
43 : 187 { 0xbb -69 } : BV:8
44 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
45 : eq(23, 44) : BOOL
46 : 254 { 0xfe -2 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(40, 32, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 41) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 43, 66) : BV:8
68 : ite(63, 32, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 41) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 43, 84) : BV:8
86 : ite(81, 32, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 41) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 43, 101) : BV:8
103 : ite(98, 32, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(19, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1313056 { 0x140920 +1.15652847e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
2 : unit : UNIT
3 : Lambda41688Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda41689Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 19) : BV:32
25 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
28 : eq(26, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
31 : eq(26, 30) : BOOL
32 : 222 { 0xde -34 } : BV:8
33 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
37 : eq(26, 36) : BOOL
38 : 124 { 0x7c } : BV:8
39 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
40 : eq(26, 39) : BOOL
41 : 127 { 0x7f } : BV:8
42 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
43 : eq(26, 42) : BOOL
44 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
45 : eq(26, 44) : BOOL
46 : 187 { 0xbb -69 } : BV:8
47 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
48 : eq(26, 47) : BOOL
49 : 254 { 0xfe -2 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(43, 35, 52) : BV:8
54 : ite(40, 41, 53) : BV:8
55 : ite(37, 38, 54) : BV:8
56 : ite(34, 35, 55) : BV:8
57 : ite(31, 32, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 24, 25) : BV:32
61 : eq(60, 27) : BOOL
62 : eq(60, 30) : BOOL
63 : eq(60, 33) : BOOL
64 : eq(60, 36) : BOOL
65 : eq(60, 39) : BOOL
66 : eq(60, 42) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 35, 70) : BV:8
72 : ite(65, 41, 71) : BV:8
73 : ite(64, 38, 72) : BV:8
74 : ite(63, 35, 73) : BV:8
75 : ite(62, 32, 74) : BV:8
76 : ite(61, 29, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 24, 25) : BV:32
79 : eq(78, 27) : BOOL
80 : eq(78, 30) : BOOL
81 : eq(78, 33) : BOOL
82 : eq(78, 36) : BOOL
83 : eq(78, 39) : BOOL
84 : eq(78, 42) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 35, 88) : BV:8
90 : ite(83, 41, 89) : BV:8
91 : ite(82, 38, 90) : BV:8
92 : ite(81, 35, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : bvadd(24, 25) : BV:32
96 : eq(95, 27) : BOOL
97 : eq(95, 30) : BOOL
98 : eq(95, 33) : BOOL
99 : eq(95, 36) : BOOL
100 : eq(95, 39) : BOOL
101 : eq(95, 42) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 35, 105) : BV:8
107 : ite(100, 41, 106) : BV:8
108 : ite(99, 38, 107) : BV:8
109 : ite(98, 35, 108) : BV:8
110 : ite(97, 32, 109) : BV:8
111 : ite(96, 29, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(22, 4, 112) : BV:32
114 : ite(21, 4, 113) : BV:32
115 : lambda(19, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(18, 115) : MAP[BV:32 -> BV:32]
117 : sum(1, 2, 116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
118 : sym_const(117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(2, 2) : BV:32
22 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
28 : eq(23, 27) : BOOL
29 : 222 { 0xde -34 } : BV:8
30 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
34 : eq(23, 33) : BOOL
35 : 124 { 0x7c } : BV:8
36 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
40 : eq(23, 39) : BOOL
41 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
42 : eq(23, 41) : BOOL
43 : 187 { 0xbb -69 } : BV:8
44 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
45 : eq(23, 44) : BOOL
46 : 254 { 0xfe -2 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(40, 32, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 41) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 43, 66) : BV:8
68 : ite(63, 32, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : bvadd(16, 21, 22) : BV:32
75 : eq(74, 24) : BOOL
76 : eq(74, 27) : BOOL
77 : eq(74, 30) : BOOL
78 : eq(74, 33) : BOOL
79 : eq(74, 36) : BOOL
80 : eq(74, 39) : BOOL
81 : eq(74, 41) : BOOL
82 : eq(74, 44) : BOOL
83 : ite(82, 46, 47) : BV:8
84 : ite(81, 43, 83) : BV:8
85 : ite(80, 32, 84) : BV:8
86 : ite(79, 38, 85) : BV:8
87 : ite(78, 35, 86) : BV:8
88 : ite(77, 32, 87) : BV:8
89 : ite(76, 29, 88) : BV:8
90 : ite(75, 26, 89) : BV:8
91 : bvadd(21, 22) : BV:32
92 : eq(91, 24) : BOOL
93 : eq(91, 27) : BOOL
94 : eq(91, 30) : BOOL
95 : eq(91, 33) : BOOL
96 : eq(91, 36) : BOOL
97 : eq(91, 39) : BOOL
98 : eq(91, 41) : BOOL
99 : eq(91, 44) : BOOL
100 : ite(99, 46, 47) : BV:8
101 : ite(98, 43, 100) : BV:8
102 : ite(97, 32, 101) : BV:8
103 : ite(96, 38, 102) : BV:8
104 : ite(95, 35, 103) : BV:8
105 : ite(94, 32, 104) : BV:8
106 : ite(93, 29, 105) : BV:8
107 : ite(92, 26, 106) : BV:8
108 : bvconcat(55, 73, 90, 107) : BV:32
109 : ite(19, 1, 108) : BV:32
110 : sum(17, 18, 109) : SUM[UNIT,BV:32]
111 : sym_const(110) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 498046039 { 0x1daf9457 +1.37171447e188 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda41711Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41712Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
26 : eq(24, 25) : BOOL
27 : 252 { 0xfc -4 } : BV:8
28 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
29 : eq(24, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
32 : eq(24, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
35 : eq(24, 34) : BOOL
36 : 124 { 0x7c } : BV:8
37 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
38 : eq(24, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
41 : eq(24, 40) : BOOL
42 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
43 : eq(24, 42) : BOOL
44 : 187 { 0xbb -69 } : BV:8
45 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
46 : eq(24, 45) : BOOL
47 : 254 { 0xfe -2 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(41, 33, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(35, 36, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : ite(26, 27, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 22, 23) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 33, 71) : BV:8
73 : ite(60, 30, 72) : BV:8
74 : ite(59, 27, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 22, 23) : BV:32
77 : eq(76, 25) : BOOL
78 : eq(76, 28) : BOOL
79 : eq(76, 31) : BOOL
80 : eq(76, 34) : BOOL
81 : eq(76, 37) : BOOL
82 : eq(76, 40) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 33, 86) : BV:8
88 : ite(81, 39, 87) : BV:8
89 : ite(80, 36, 88) : BV:8
90 : ite(79, 33, 89) : BV:8
91 : ite(78, 30, 90) : BV:8
92 : ite(77, 27, 91) : BV:8
93 : bvadd(22, 23) : BV:32
94 : eq(93, 25) : BOOL
95 : eq(93, 28) : BOOL
96 : eq(93, 31) : BOOL
97 : eq(93, 34) : BOOL
98 : eq(93, 37) : BOOL
99 : eq(93, 40) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 33, 103) : BV:8
105 : ite(98, 39, 104) : BV:8
106 : ite(97, 36, 105) : BV:8
107 : ite(96, 33, 106) : BV:8
108 : ite(95, 30, 107) : BV:8
109 : ite(94, 27, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(20, 2, 110) : BV:32
112 : ite(19, 2, 111) : BV:32
113 : lambda(17, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(16, 113) : MAP[BV:32 -> BV:32]
115 : sym_const(114) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1313055 { 0x14091f +1.15652835e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 193709738 { 0xb8bc6aa +1.9200024e152 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 2147483660 { 0x8000000c -2147483636 -1.143e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 5252220 { 0x50247c +1.62611341e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3364450836 { 0xc8897214 -930516460 -1.7379388e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3364450839 { 0xc8897217 -930516457 -1.7379424e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2292181420 { 0x889fe9ac -2002785876 -1.24931859e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2292181423 { 0x889fe9af -2002785873 -1.24931895e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 126612696 { 0x78bf4d8 +1.9340953e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 126612699 { 0x78bf4db +1.9340989e144 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41571Var : BV:32
2 : Lambda41572Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
55 : eq(53, 54) : BOOL
56 : 252 { 0xfc -4 } : BV:8
57 : eq(53, 51) : BOOL
58 : 222 { 0xde -34 } : BV:8
59 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
60 : eq(53, 59) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
63 : eq(53, 62) : BOOL
64 : 124 { 0x7c } : BV:8
65 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
66 : eq(53, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
69 : eq(53, 68) : BOOL
70 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
71 : eq(53, 70) : BOOL
72 : 187 { 0xbb -69 } : BV:8
73 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
74 : eq(53, 73) : BOOL
75 : 254 { 0xfe -2 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 61, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(70, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 70) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 61, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 58, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 51) : BOOL
105 : eq(102, 59) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 70) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 61, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 58, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(62, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 51) : BOOL
122 : eq(119, 59) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 70) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 72, 128) : BV:8
130 : ite(125, 61, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 58, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 51) : BOOL
140 : eq(137, 59) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 70) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 61, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 51) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 70) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 72, 164) : BV:8
166 : ite(161, 61, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 58, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 51) : BOOL
176 : eq(173, 59) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 70) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 72, 182) : BV:8
184 : ite(179, 61, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 58, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 51) : BOOL
193 : eq(190, 59) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 70) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 72, 199) : BV:8
201 : ite(196, 61, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 58, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41581Var : BV:32
2 : Lambda41582Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
14 : eq(12, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : eq(12, 10) : BOOL
17 : 222 { 0xde -34 } : BV:8
18 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
19 : eq(12, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
22 : eq(12, 21) : BOOL
23 : 124 { 0x7c } : BV:8
24 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
25 : eq(12, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
28 : eq(12, 27) : BOOL
29 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
30 : eq(12, 29) : BOOL
31 : 187 { 0xbb -69 } : BV:8
32 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
33 : eq(12, 32) : BOOL
34 : 254 { 0xfe -2 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(28, 20, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(29, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 20, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 10) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 20, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(21, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 10) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 20, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 10) : BOOL
99 : eq(96, 18) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 29) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 31, 105) : BV:8
107 : ite(102, 20, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 17, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 18) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 29) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 31, 123) : BV:8
125 : ite(120, 20, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 17, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 10) : BOOL
135 : eq(132, 18) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 29) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 31, 141) : BV:8
143 : ite(138, 20, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 17, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 10) : BOOL
152 : eq(149, 18) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 29) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 31, 158) : BV:8
160 : ite(155, 20, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 269489223 ] -> true, [ 269489224; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 269489223 ] -> true, [ 269489224; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41585Var : BV:32
2 : Lambda41586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41576Var : BV:32
2 : Lambda41577Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda41592Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
11 : eq(9, 10) : BOOL
12 : 252 { 0xfc -4 } : BV:8
13 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
14 : eq(9, 13) : BOOL
15 : 222 { 0xde -34 } : BV:8
16 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
20 : eq(9, 19) : BOOL
21 : 124 { 0x7c } : BV:8
22 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
23 : eq(9, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
26 : eq(9, 25) : BOOL
27 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
28 : eq(9, 27) : BOOL
29 : 187 { 0xbb -69 } : BV:8
30 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
31 : eq(9, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 18, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 18, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 18, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 18, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(5, 4, 95) : BV:32
97 : ite(3, 4, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda41596Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
11 : eq(9, 10) : BOOL
12 : 252 { 0xfc -4 } : BV:8
13 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
14 : eq(9, 13) : BOOL
15 : 222 { 0xde -34 } : BV:8
16 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
20 : eq(9, 19) : BOOL
21 : 124 { 0x7c } : BV:8
22 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
23 : eq(9, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
26 : eq(9, 25) : BOOL
27 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
28 : eq(9, 27) : BOOL
29 : 187 { 0xbb -69 } : BV:8
30 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
31 : eq(9, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 18, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 18, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 18, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 18, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(5, 4, 95) : BV:32
97 : ite(3, 4, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda41600Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
13 : eq(8, 12) : BOOL
14 : 222 { 0xde -34 } : BV:8
15 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
19 : eq(8, 18) : BOOL
20 : 124 { 0x7c } : BV:8
21 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
25 : eq(8, 24) : BOOL
26 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
27 : eq(8, 26) : BOOL
28 : 187 { 0xbb -69 } : BV:8
29 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
30 : eq(8, 29) : BOOL
31 : 254 { 0xfe -2 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : ite(25, 17, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 26) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 28, 51) : BV:8
53 : ite(48, 17, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 26) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 28, 69) : BV:8
71 : ite(66, 17, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 26) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 28, 86) : BV:8
88 : ite(83, 17, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 4, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2760390743
=counter_example_end
=global nodece 62 num_edges_traversed 1
=global nodece 62 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce4550.num_edges_traversed2
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(epsilon)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce4550 8db98416dd787f75e15f7a84add69da6
=input.spec-%var-x-1
1 : Lambda41679Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41680Var : BV:32
18 : Lambda41681Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41682Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
82 : eq(80, 81) : BOOL
83 : 252 { 0xfc -4 } : BV:8
84 : eq(80, 78) : BOOL
85 : 222 { 0xde -34 } : BV:8
86 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
87 : eq(80, 86) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
90 : eq(80, 89) : BOOL
91 : 124 { 0x7c } : BV:8
92 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
93 : eq(80, 92) : BOOL
94 : 127 { 0x7f } : BV:8
95 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
96 : eq(80, 95) : BOOL
97 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
98 : eq(80, 97) : BOOL
99 : 187 { 0xbb -69 } : BV:8
100 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
101 : eq(80, 100) : BOOL
102 : 254 { 0xfe -2 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(96, 88, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(84, 85, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(97, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 97) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 99, 121) : BV:8
123 : ite(118, 88, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 85, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 78) : BOOL
132 : eq(129, 86) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 97) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 99, 138) : BV:8
140 : ite(135, 88, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 85, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(89, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 78) : BOOL
149 : eq(146, 86) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 97) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 99, 155) : BV:8
157 : ite(152, 88, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 85, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 78) : BOOL
167 : eq(164, 86) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 97) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 99, 173) : BV:8
175 : ite(170, 88, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 85, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 78) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 97) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 99, 191) : BV:8
193 : ite(188, 88, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 85, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 78) : BOOL
203 : eq(200, 86) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 97) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 99, 209) : BV:8
211 : ite(206, 88, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 85, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 78) : BOOL
220 : eq(217, 86) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 97) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 99, 226) : BV:8
228 : ite(223, 88, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 85, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda41699Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41700Var : BV:32
18 : Lambda41701Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41702Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
63 : eq(61, 62) : BOOL
64 : 252 { 0xfc -4 } : BV:8
65 : eq(61, 59) : BOOL
66 : 222 { 0xde -34 } : BV:8
67 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
68 : eq(61, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
71 : eq(61, 70) : BOOL
72 : 124 { 0x7c } : BV:8
73 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
74 : eq(61, 73) : BOOL
75 : 127 { 0x7f } : BV:8
76 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
77 : eq(61, 76) : BOOL
78 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
79 : eq(61, 78) : BOOL
80 : 187 { 0xbb -69 } : BV:8
81 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
82 : eq(61, 81) : BOOL
83 : 254 { 0xfe -2 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 69, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(65, 66, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(78, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 78) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 69, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 66, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 67) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 78) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 69, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(70, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 59) : BOOL
130 : eq(127, 67) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 78) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 80, 136) : BV:8
138 : ite(133, 69, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 66, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 59) : BOOL
148 : eq(145, 67) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 78) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 80, 154) : BV:8
156 : ite(151, 69, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 66, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 59) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 78) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 80, 172) : BV:8
174 : ite(169, 69, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 66, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 67) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 78) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 80, 190) : BV:8
192 : ite(187, 69, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 66, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 59) : BOOL
201 : eq(198, 67) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 78) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 80, 207) : BV:8
209 : ite(204, 69, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 330292095 ] -> 0, [ 330292096; 330292096 ] -> 124, [ 330292097; 330292097 ] -> 254, [ 330292098; 330292098 ] -> 187, [ 330292099; 330292099 ] -> 222, [ 330292100; 335544315 ] -> 0, [ 335544316; 335544316 ] -> 252, [ 335544317; 335544318 ] -> 255, [ 335544319; 335544319 ] -> 127, [ 335544320; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 126612695 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 126612696; 126612699 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 126612700; 2292181419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2292181420; 2292181423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2292181424; 3364450835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3364450836; 3364450839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3364450840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 126612696 { 0x78bf4d8 +1.9340953e144 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3364450836 { 0xc8897214 -930516460 -1.7379388e18 } : BV:32
=input.dst.llvm-%n
1 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2292181420 { 0x889fe9ac -2002785876 -1.24931859e146 } : BV:32
=input.dst.llvm-%x
1 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1313055 { 0x14091f +1.15652835e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda41706Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41707Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
28 : eq(23, 27) : BOOL
29 : 222 { 0xde -34 } : BV:8
30 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
34 : eq(23, 33) : BOOL
35 : 124 { 0x7c } : BV:8
36 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
40 : eq(23, 39) : BOOL
41 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
42 : eq(23, 41) : BOOL
43 : 187 { 0xbb -69 } : BV:8
44 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
45 : eq(23, 44) : BOOL
46 : 254 { 0xfe -2 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(40, 32, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 41) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 43, 66) : BV:8
68 : ite(63, 32, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 41) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 43, 84) : BV:8
86 : ite(81, 32, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 41) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 43, 101) : BV:8
103 : ite(98, 32, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(19, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1313056 { 0x140920 +1.15652847e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
2 : unit : UNIT
3 : Lambda41688Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda41689Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvmul(20, 19) : BV:32
25 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
26 : bvadd(23, 24, 25) : BV:32
27 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
28 : eq(26, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
31 : eq(26, 30) : BOOL
32 : 222 { 0xde -34 } : BV:8
33 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
37 : eq(26, 36) : BOOL
38 : 124 { 0x7c } : BV:8
39 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
40 : eq(26, 39) : BOOL
41 : 127 { 0x7f } : BV:8
42 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
43 : eq(26, 42) : BOOL
44 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
45 : eq(26, 44) : BOOL
46 : 187 { 0xbb -69 } : BV:8
47 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
48 : eq(26, 47) : BOOL
49 : 254 { 0xfe -2 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(43, 35, 52) : BV:8
54 : ite(40, 41, 53) : BV:8
55 : ite(37, 38, 54) : BV:8
56 : ite(34, 35, 55) : BV:8
57 : ite(31, 32, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 24, 25) : BV:32
61 : eq(60, 27) : BOOL
62 : eq(60, 30) : BOOL
63 : eq(60, 33) : BOOL
64 : eq(60, 36) : BOOL
65 : eq(60, 39) : BOOL
66 : eq(60, 42) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 35, 70) : BV:8
72 : ite(65, 41, 71) : BV:8
73 : ite(64, 38, 72) : BV:8
74 : ite(63, 35, 73) : BV:8
75 : ite(62, 32, 74) : BV:8
76 : ite(61, 29, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 24, 25) : BV:32
79 : eq(78, 27) : BOOL
80 : eq(78, 30) : BOOL
81 : eq(78, 33) : BOOL
82 : eq(78, 36) : BOOL
83 : eq(78, 39) : BOOL
84 : eq(78, 42) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 35, 88) : BV:8
90 : ite(83, 41, 89) : BV:8
91 : ite(82, 38, 90) : BV:8
92 : ite(81, 35, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : bvadd(24, 25) : BV:32
96 : eq(95, 27) : BOOL
97 : eq(95, 30) : BOOL
98 : eq(95, 33) : BOOL
99 : eq(95, 36) : BOOL
100 : eq(95, 39) : BOOL
101 : eq(95, 42) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 35, 105) : BV:8
107 : ite(100, 41, 106) : BV:8
108 : ite(99, 38, 107) : BV:8
109 : ite(98, 35, 108) : BV:8
110 : ite(97, 32, 109) : BV:8
111 : ite(96, 29, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(22, 4, 112) : BV:32
114 : ite(21, 4, 113) : BV:32
115 : lambda(19, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(18, 115) : MAP[BV:32 -> BV:32]
117 : sum(1, 2, 116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
118 : sym_const(117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 498046040 { 0x1daf9458 +1.37171459e188 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda41711Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41712Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
26 : eq(24, 25) : BOOL
27 : 252 { 0xfc -4 } : BV:8
28 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
29 : eq(24, 28) : BOOL
30 : 222 { 0xde -34 } : BV:8
31 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
32 : eq(24, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
35 : eq(24, 34) : BOOL
36 : 124 { 0x7c } : BV:8
37 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
38 : eq(24, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
41 : eq(24, 40) : BOOL
42 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
43 : eq(24, 42) : BOOL
44 : 187 { 0xbb -69 } : BV:8
45 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
46 : eq(24, 45) : BOOL
47 : 254 { 0xfe -2 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(41, 33, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(35, 36, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : ite(26, 27, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 22, 23) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 31) : BOOL
62 : eq(58, 34) : BOOL
63 : eq(58, 37) : BOOL
64 : eq(58, 40) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 39, 69) : BV:8
71 : ite(62, 36, 70) : BV:8
72 : ite(61, 33, 71) : BV:8
73 : ite(60, 30, 72) : BV:8
74 : ite(59, 27, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 22, 23) : BV:32
77 : eq(76, 25) : BOOL
78 : eq(76, 28) : BOOL
79 : eq(76, 31) : BOOL
80 : eq(76, 34) : BOOL
81 : eq(76, 37) : BOOL
82 : eq(76, 40) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 33, 86) : BV:8
88 : ite(81, 39, 87) : BV:8
89 : ite(80, 36, 88) : BV:8
90 : ite(79, 33, 89) : BV:8
91 : ite(78, 30, 90) : BV:8
92 : ite(77, 27, 91) : BV:8
93 : bvadd(22, 23) : BV:32
94 : eq(93, 25) : BOOL
95 : eq(93, 28) : BOOL
96 : eq(93, 31) : BOOL
97 : eq(93, 34) : BOOL
98 : eq(93, 37) : BOOL
99 : eq(93, 40) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 33, 103) : BV:8
105 : ite(98, 39, 104) : BV:8
106 : ite(97, 36, 105) : BV:8
107 : ite(96, 33, 106) : BV:8
108 : ite(95, 30, 107) : BV:8
109 : ite(94, 27, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(20, 2, 110) : BV:32
112 : ite(19, 2, 111) : BV:32
113 : lambda(17, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(16, 113) : MAP[BV:32 -> BV:32]
115 : sym_const(114) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1313055 { 0x14091f +1.15652835e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 193709739 { 0xb8bc6ab +1.9200036e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3364450836 { 0xc8897214 -930516460 -1.7379388e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3364450839 { 0xc8897217 -930516457 -1.7379424e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2292181420 { 0x889fe9ac -2002785876 -1.24931859e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2292181423 { 0x889fe9af -2002785873 -1.24931895e146 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 126612696 { 0x78bf4d8 +1.9340953e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 126612699 { 0x78bf4db +1.9340989e144 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41571Var : BV:32
2 : Lambda41572Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
55 : eq(53, 54) : BOOL
56 : 252 { 0xfc -4 } : BV:8
57 : eq(53, 51) : BOOL
58 : 222 { 0xde -34 } : BV:8
59 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
60 : eq(53, 59) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
63 : eq(53, 62) : BOOL
64 : 124 { 0x7c } : BV:8
65 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
66 : eq(53, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
69 : eq(53, 68) : BOOL
70 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
71 : eq(53, 70) : BOOL
72 : 187 { 0xbb -69 } : BV:8
73 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
74 : eq(53, 73) : BOOL
75 : 254 { 0xfe -2 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 61, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(70, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 70) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 61, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 58, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 51) : BOOL
105 : eq(102, 59) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 70) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 61, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 58, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(62, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 51) : BOOL
122 : eq(119, 59) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 70) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 72, 128) : BV:8
130 : ite(125, 61, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 58, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 51) : BOOL
140 : eq(137, 59) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 70) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 61, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 51) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 70) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 72, 164) : BV:8
166 : ite(161, 61, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 58, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 51) : BOOL
176 : eq(173, 59) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 70) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 72, 182) : BV:8
184 : ite(179, 61, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 58, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 51) : BOOL
193 : eq(190, 59) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 70) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 72, 199) : BV:8
201 : ite(196, 61, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 58, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41581Var : BV:32
2 : Lambda41582Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
14 : eq(12, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : eq(12, 10) : BOOL
17 : 222 { 0xde -34 } : BV:8
18 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
19 : eq(12, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
22 : eq(12, 21) : BOOL
23 : 124 { 0x7c } : BV:8
24 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
25 : eq(12, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
28 : eq(12, 27) : BOOL
29 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
30 : eq(12, 29) : BOOL
31 : 187 { 0xbb -69 } : BV:8
32 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
33 : eq(12, 32) : BOOL
34 : 254 { 0xfe -2 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(28, 20, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(29, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 20, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 10) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 20, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(21, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 10) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 20, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 10) : BOOL
99 : eq(96, 18) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 29) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 31, 105) : BV:8
107 : ite(102, 20, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 17, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 18) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 29) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 31, 123) : BV:8
125 : ite(120, 20, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 17, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 10) : BOOL
135 : eq(132, 18) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 29) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 31, 141) : BV:8
143 : ite(138, 20, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 17, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 10) : BOOL
152 : eq(149, 18) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 29) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 31, 158) : BV:8
160 : ite(155, 20, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 269489223 ] -> true, [ 269489224; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 269489223 ] -> true, [ 269489224; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41585Var : BV:32
2 : Lambda41586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41576Var : BV:32
2 : Lambda41577Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269489223 { 0x10101447 +1.12561881e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269489224 { 0x10101448 +1.12561893e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269489225 { 0x10101449 +1.12561905e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda41592Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
11 : eq(9, 10) : BOOL
12 : 252 { 0xfc -4 } : BV:8
13 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
14 : eq(9, 13) : BOOL
15 : 222 { 0xde -34 } : BV:8
16 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
20 : eq(9, 19) : BOOL
21 : 124 { 0x7c } : BV:8
22 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
23 : eq(9, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
26 : eq(9, 25) : BOOL
27 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
28 : eq(9, 27) : BOOL
29 : 187 { 0xbb -69 } : BV:8
30 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
31 : eq(9, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 18, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 18, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 18, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 18, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(5, 4, 95) : BV:32
97 : ite(3, 4, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda41596Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
11 : eq(9, 10) : BOOL
12 : 252 { 0xfc -4 } : BV:8
13 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
14 : eq(9, 13) : BOOL
15 : 222 { 0xde -34 } : BV:8
16 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
20 : eq(9, 19) : BOOL
21 : 124 { 0x7c } : BV:8
22 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
23 : eq(9, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
26 : eq(9, 25) : BOOL
27 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
28 : eq(9, 27) : BOOL
29 : 187 { 0xbb -69 } : BV:8
30 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
31 : eq(9, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 18, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : ite(11, 12, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 7, 8) : BV:32
44 : eq(43, 10) : BOOL
45 : eq(43, 13) : BOOL
46 : eq(43, 16) : BOOL
47 : eq(43, 19) : BOOL
48 : eq(43, 22) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 18, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 21, 55) : BV:8
57 : ite(46, 18, 56) : BV:8
58 : ite(45, 15, 57) : BV:8
59 : ite(44, 12, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 7, 8) : BV:32
62 : eq(61, 10) : BOOL
63 : eq(61, 13) : BOOL
64 : eq(61, 16) : BOOL
65 : eq(61, 19) : BOOL
66 : eq(61, 22) : BOOL
67 : eq(61, 25) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 18, 71) : BV:8
73 : ite(66, 24, 72) : BV:8
74 : ite(65, 21, 73) : BV:8
75 : ite(64, 18, 74) : BV:8
76 : ite(63, 15, 75) : BV:8
77 : ite(62, 12, 76) : BV:8
78 : bvadd(7, 8) : BV:32
79 : eq(78, 10) : BOOL
80 : eq(78, 13) : BOOL
81 : eq(78, 16) : BOOL
82 : eq(78, 19) : BOOL
83 : eq(78, 22) : BOOL
84 : eq(78, 25) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 18, 88) : BV:8
90 : ite(83, 24, 89) : BV:8
91 : ite(82, 21, 90) : BV:8
92 : ite(81, 18, 91) : BV:8
93 : ite(80, 15, 92) : BV:8
94 : ite(79, 12, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(5, 4, 95) : BV:32
97 : ite(3, 4, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda41600Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 330292099 { 0x13afdb83 +1.37388646e168 } : BV:32
13 : eq(8, 12) : BOOL
14 : 222 { 0xde -34 } : BV:8
15 : 335544318 { 0x13fffffe +1.99999976e168 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 330292096 { 0x13afdb80 +1.37388610e168 } : BV:32
19 : eq(8, 18) : BOOL
20 : 124 { 0x7c } : BV:8
21 : 335544319 { 0x13ffffff +1.99999988e168 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 335544317 { 0x13fffffd +1.99999964e168 } : BV:32
25 : eq(8, 24) : BOOL
26 : 330292098 { 0x13afdb82 +1.37388634e168 } : BV:32
27 : eq(8, 26) : BOOL
28 : 187 { 0xbb -69 } : BV:8
29 : 330292097 { 0x13afdb81 +1.37388622e168 } : BV:32
30 : eq(8, 29) : BOOL
31 : 254 { 0xfe -2 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : ite(25, 17, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 26) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 28, 51) : BV:8
53 : ite(48, 17, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 26) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 28, 69) : BV:8
71 : ite(66, 17, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 26) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 28, 86) : BV:8
88 : ite(83, 17, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 4, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2760390743
=counter_example_end
=global nodece 63 num_edges_traversed 2
=global nodece 63 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce4586.num_edges_traversed1
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce4586 4b50fcb5d71e338caa5e6a31ab8d1df9
=input.spec-%var-x-1
1 : Lambda43088Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43089Var : BV:32
18 : Lambda43090Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43091Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 49155 { 0xc003 +1.585973e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : eq(80, 78) : BOOL
85 : 238 { 0xee -18 } : BV:8
86 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
87 : eq(80, 86) : BOOL
88 : 34 { 0x22 } : BV:8
89 : 49152 { 0xc000 +1.585937e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 236 { 0xec -20 } : BV:8
92 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
93 : eq(80, 92) : BOOL
94 : 226 { 0xe2 -30 } : BV:8
95 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
96 : eq(80, 95) : BOOL
97 : 3 { 0x3 } : BV:8
98 : 49154 { 0xc002 +1.585961e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 182 { 0xb6 -74 } : BV:8
101 : 49153 { 0xc001 +1.585949e129 } : BV:32
102 : eq(80, 101) : BOOL
103 : 229 { 0xe5 -27 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43108Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43109Var : BV:32
18 : Lambda43110Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43111Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 49155 { 0xc003 +1.585973e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : eq(61, 59) : BOOL
66 : 238 { 0xee -18 } : BV:8
67 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
68 : eq(61, 67) : BOOL
69 : 34 { 0x22 } : BV:8
70 : 49152 { 0xc000 +1.585937e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 236 { 0xec -20 } : BV:8
73 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
74 : eq(61, 73) : BOOL
75 : 226 { 0xe2 -30 } : BV:8
76 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
77 : eq(61, 76) : BOOL
78 : 3 { 0x3 } : BV:8
79 : 49154 { 0xc002 +1.585961e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 182 { 0xb6 -74 } : BV:8
82 : 49153 { 0xc001 +1.585949e129 } : BV:32
83 : eq(61, 82) : BOOL
84 : 229 { 0xe5 -27 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 49151 ] -> 0, [ 49152; 49152 ] -> 236, [ 49153; 49153 ] -> 229, [ 49154; 49154 ] -> 182, [ 49155; 49155 ] -> 238, [ 49156; 1073790971 ] -> 0, [ 1073790972; 1073790972 ] -> 4, [ 1073790973; 1073790973 ] -> 3, [ 1073790974; 1073790974 ] -> 34, [ 1073790975; 1073790975 ] -> 226, [ 1073790976; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 233828515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 233828516; 233828519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 233828520; 599849967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 599849968; 599849971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 599849972; 2280640719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2280640720; 2280640723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2280640724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2280640720 { 0x87efd0d0 -2014326576 -1.87355995e144 } : BV:32
=input.dst.llvm-%m
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 599849968 { 0x23c0fbf0 +1.50768852e200 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 233828516 { 0xdeff0a4 +1.87453126e156 } : BV:32
=input.dst.llvm-%x
1 : 49152 { 0xc000 +1.585937e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43115Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43116Var : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 49155 { 0xc003 +1.585973e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
34 : eq(26, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 49152 { 0xc000 +1.585937e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 236 { 0xec -20 } : BV:8
39 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
40 : eq(26, 39) : BOOL
41 : 226 { 0xe2 -30 } : BV:8
42 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
43 : eq(26, 42) : BOOL
44 : 3 { 0x3 } : BV:8
45 : 49154 { 0xc002 +1.585961e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 182 { 0xb6 -74 } : BV:8
48 : 49153 { 0xc001 +1.585949e129 } : BV:32
49 : eq(26, 48) : BOOL
50 : 229 { 0xe5 -27 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda43097Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43098Var : BV:32
20 : 268435456 { 0x10000000 +1.0e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870912 { 0x20000000 +1.0e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
31 : eq(29, 30) : BOOL
32 : 4 { 0x4 } : BV:8
33 : 49155 { 0xc003 +1.585973e129 } : BV:32
34 : eq(29, 33) : BOOL
35 : 238 { 0xee -18 } : BV:8
36 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
37 : eq(29, 36) : BOOL
38 : 34 { 0x22 } : BV:8
39 : 49152 { 0xc000 +1.585937e129 } : BV:32
40 : eq(29, 39) : BOOL
41 : 236 { 0xec -20 } : BV:8
42 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
43 : eq(29, 42) : BOOL
44 : 226 { 0xe2 -30 } : BV:8
45 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
46 : eq(29, 45) : BOOL
47 : 3 { 0x3 } : BV:8
48 : 49154 { 0xc002 +1.585961e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 182 { 0xb6 -74 } : BV:8
51 : 49153 { 0xc001 +1.585949e129 } : BV:32
52 : eq(29, 51) : BOOL
53 : 229 { 0xe5 -27 } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(31, 32, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : eq(64, 45) : BOOL
71 : eq(64, 48) : BOOL
72 : eq(64, 51) : BOOL
73 : ite(72, 53, 54) : BV:8
74 : ite(71, 50, 73) : BV:8
75 : ite(70, 47, 74) : BV:8
76 : ite(69, 44, 75) : BV:8
77 : ite(68, 41, 76) : BV:8
78 : ite(67, 38, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 32, 79) : BV:8
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : bvadd(81, 27, 28) : BV:32
83 : eq(82, 30) : BOOL
84 : eq(82, 33) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 39) : BOOL
87 : eq(82, 42) : BOOL
88 : eq(82, 45) : BOOL
89 : eq(82, 48) : BOOL
90 : eq(82, 51) : BOOL
91 : ite(90, 53, 54) : BV:8
92 : ite(89, 50, 91) : BV:8
93 : ite(88, 47, 92) : BV:8
94 : ite(87, 44, 93) : BV:8
95 : ite(86, 41, 94) : BV:8
96 : ite(85, 38, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : bvadd(27, 28) : BV:32
100 : eq(99, 30) : BOOL
101 : eq(99, 33) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 39) : BOOL
104 : eq(99, 42) : BOOL
105 : eq(99, 45) : BOOL
106 : eq(99, 48) : BOOL
107 : eq(99, 51) : BOOL
108 : ite(107, 53, 54) : BV:8
109 : ite(106, 50, 108) : BV:8
110 : ite(105, 47, 109) : BV:8
111 : ite(104, 44, 110) : BV:8
112 : ite(103, 41, 111) : BV:8
113 : ite(102, 38, 112) : BV:8
114 : ite(101, 35, 113) : BV:8
115 : ite(100, 32, 114) : BV:8
116 : bvconcat(62, 80, 98, 115) : BV:32
117 : ite(24, 4, 116) : BV:32
118 : ite(23, 4, 117) : BV:32
119 : ite(21, 4, 118) : BV:32
120 : lambda(19, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(18, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 268435456 { 0x10000000 +1.0e161 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 49155 { 0xc003 +1.585973e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
34 : eq(26, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 49152 { 0xc000 +1.585937e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 236 { 0xec -20 } : BV:8
39 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
40 : eq(26, 39) : BOOL
41 : 226 { 0xe2 -30 } : BV:8
42 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
43 : eq(26, 42) : BOOL
44 : 3 { 0x3 } : BV:8
45 : 49154 { 0xc002 +1.585961e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 182 { 0xb6 -74 } : BV:8
48 : 49153 { 0xc001 +1.585949e129 } : BV:32
49 : eq(26, 48) : BOOL
50 : 229 { 0xe5 -27 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : bvadd(16, 24, 25) : BV:32
79 : eq(78, 27) : BOOL
80 : eq(78, 30) : BOOL
81 : eq(78, 33) : BOOL
82 : eq(78, 36) : BOOL
83 : eq(78, 39) : BOOL
84 : eq(78, 42) : BOOL
85 : eq(78, 45) : BOOL
86 : eq(78, 48) : BOOL
87 : ite(86, 50, 51) : BV:8
88 : ite(85, 47, 87) : BV:8
89 : ite(84, 44, 88) : BV:8
90 : ite(83, 41, 89) : BV:8
91 : ite(82, 38, 90) : BV:8
92 : ite(81, 35, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : bvadd(24, 25) : BV:32
96 : eq(95, 27) : BOOL
97 : eq(95, 30) : BOOL
98 : eq(95, 33) : BOOL
99 : eq(95, 36) : BOOL
100 : eq(95, 39) : BOOL
101 : eq(95, 42) : BOOL
102 : eq(95, 45) : BOOL
103 : eq(95, 48) : BOOL
104 : ite(103, 50, 51) : BV:8
105 : ite(102, 47, 104) : BV:8
106 : ite(101, 44, 105) : BV:8
107 : ite(100, 41, 106) : BV:8
108 : ite(99, 38, 107) : BV:8
109 : ite(98, 35, 108) : BV:8
110 : ite(97, 32, 109) : BV:8
111 : ite(96, 29, 110) : BV:8
112 : bvconcat(59, 77, 94, 111) : BV:32
113 : ite(21, 1, 112) : BV:32
114 : ite(20, 1, 113) : BV:32
115 : sum(17, 18, 114) : SUM[UNIT,BV:32]
116 : sym_const(115) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1141333208 { 0x44075cd8 +1.5752086e9 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43120Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43121Var : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
29 : eq(27, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : 49155 { 0xc003 +1.585973e129 } : BV:32
32 : eq(27, 31) : BOOL
33 : 238 { 0xee -18 } : BV:8
34 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
35 : eq(27, 34) : BOOL
36 : 34 { 0x22 } : BV:8
37 : 49152 { 0xc000 +1.585937e129 } : BV:32
38 : eq(27, 37) : BOOL
39 : 236 { 0xec -20 } : BV:8
40 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
41 : eq(27, 40) : BOOL
42 : 226 { 0xe2 -30 } : BV:8
43 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
44 : eq(27, 43) : BOOL
45 : 3 { 0x3 } : BV:8
46 : 49154 { 0xc002 +1.585961e129 } : BV:32
47 : eq(27, 46) : BOOL
48 : 182 { 0xb6 -74 } : BV:8
49 : 49153 { 0xc001 +1.585949e129 } : BV:32
50 : eq(27, 49) : BOOL
51 : 229 { 0xe5 -27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 2, 114) : BV:32
116 : ite(21, 2, 115) : BV:32
117 : ite(19, 2, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1247730462 { 0x4a5edb1e +1.74106192e21 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1646396164 { 0x62220304 +1.26571702e69 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1646396164 { 0x62220304 +1.26571702e69 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 599849968 { 0x23c0fbf0 +1.50768852e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 599849971 { 0x23c0fbf3 +1.50768887e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 233828516 { 0xdeff0a4 +1.87453126e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 233828519 { 0xdeff0a7 +1.87453162e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2280640720 { 0x87efd0d0 -2014326576 -1.87355995e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2280640723 { 0x87efd0d3 -2014326573 -1.87356030e144 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda42980Var : BV:32
2 : Lambda42981Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 49155 { 0xc003 +1.585973e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : eq(53, 51) : BOOL
58 : 238 { 0xee -18 } : BV:8
59 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
60 : eq(53, 59) : BOOL
61 : 34 { 0x22 } : BV:8
62 : 49152 { 0xc000 +1.585937e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 236 { 0xec -20 } : BV:8
65 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
66 : eq(53, 65) : BOOL
67 : 226 { 0xe2 -30 } : BV:8
68 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
69 : eq(53, 68) : BOOL
70 : 3 { 0x3 } : BV:8
71 : 49154 { 0xc002 +1.585961e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 182 { 0xb6 -74 } : BV:8
74 : 49153 { 0xc001 +1.585949e129 } : BV:32
75 : eq(53, 74) : BOOL
76 : 229 { 0xe5 -27 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda42990Var : BV:32
2 : Lambda42991Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 49155 { 0xc003 +1.585973e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : eq(12, 10) : BOOL
17 : 238 { 0xee -18 } : BV:8
18 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 49152 { 0xc000 +1.585937e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
25 : eq(12, 24) : BOOL
26 : 226 { 0xe2 -30 } : BV:8
27 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
28 : eq(12, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 49154 { 0xc002 +1.585961e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 182 { 0xb6 -74 } : BV:8
33 : 49153 { 0xc001 +1.585949e129 } : BV:32
34 : eq(12, 33) : BOOL
35 : 229 { 0xe5 -27 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda42994Var : BV:32
2 : Lambda42995Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda42985Var : BV:32
2 : Lambda42986Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43001Var : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 49155 { 0xc003 +1.585973e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 238 { 0xee -18 } : BV:8
19 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
20 : eq(12, 19) : BOOL
21 : 34 { 0x22 } : BV:8
22 : 49152 { 0xc000 +1.585937e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 236 { 0xec -20 } : BV:8
25 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
26 : eq(12, 25) : BOOL
27 : 226 { 0xe2 -30 } : BV:8
28 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
29 : eq(12, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : 49154 { 0xc002 +1.585961e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 182 { 0xb6 -74 } : BV:8
34 : 49153 { 0xc001 +1.585949e129 } : BV:32
35 : eq(12, 34) : BOOL
36 : 229 { 0xe5 -27 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43005Var : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 49155 { 0xc003 +1.585973e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 238 { 0xee -18 } : BV:8
19 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
20 : eq(12, 19) : BOOL
21 : 34 { 0x22 } : BV:8
22 : 49152 { 0xc000 +1.585937e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 236 { 0xec -20 } : BV:8
25 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
26 : eq(12, 25) : BOOL
27 : 226 { 0xe2 -30 } : BV:8
28 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
29 : eq(12, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : 49154 { 0xc002 +1.585961e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 182 { 0xb6 -74 } : BV:8
34 : 49153 { 0xc001 +1.585949e129 } : BV:32
35 : eq(12, 34) : BOOL
36 : 229 { 0xe5 -27 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43009Var : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 49155 { 0xc003 +1.585973e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 238 { 0xee -18 } : BV:8
18 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
19 : eq(11, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 49152 { 0xc000 +1.585937e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
25 : eq(11, 24) : BOOL
26 : 226 { 0xe2 -30 } : BV:8
27 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
28 : eq(11, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 49154 { 0xc002 +1.585961e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 182 { 0xb6 -74 } : BV:8
33 : 49153 { 0xc001 +1.585949e129 } : BV:32
34 : eq(11, 33) : BOOL
35 : 229 { 0xe5 -27 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1412344316
=counter_example_end
=global nodece 64 num_edges_traversed 1
=global nodece 64 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 65
=global nodece 65 nodece z3.ce4626.num_edges_traversed2
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(epsilon)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3.ce4626 77426998e1913d34eacf6216f5e9f63
=input.spec-%var-x-1
1 : Lambda43088Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43089Var : BV:32
18 : Lambda43090Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43091Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 49155 { 0xc003 +1.585973e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : eq(80, 78) : BOOL
85 : 238 { 0xee -18 } : BV:8
86 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
87 : eq(80, 86) : BOOL
88 : 34 { 0x22 } : BV:8
89 : 49152 { 0xc000 +1.585937e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 236 { 0xec -20 } : BV:8
92 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
93 : eq(80, 92) : BOOL
94 : 226 { 0xe2 -30 } : BV:8
95 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
96 : eq(80, 95) : BOOL
97 : 3 { 0x3 } : BV:8
98 : 49154 { 0xc002 +1.585961e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 182 { 0xb6 -74 } : BV:8
101 : 49153 { 0xc001 +1.585949e129 } : BV:32
102 : eq(80, 101) : BOOL
103 : 229 { 0xe5 -27 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43108Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43109Var : BV:32
18 : Lambda43110Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43111Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 49155 { 0xc003 +1.585973e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : eq(61, 59) : BOOL
66 : 238 { 0xee -18 } : BV:8
67 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
68 : eq(61, 67) : BOOL
69 : 34 { 0x22 } : BV:8
70 : 49152 { 0xc000 +1.585937e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 236 { 0xec -20 } : BV:8
73 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
74 : eq(61, 73) : BOOL
75 : 226 { 0xe2 -30 } : BV:8
76 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
77 : eq(61, 76) : BOOL
78 : 3 { 0x3 } : BV:8
79 : 49154 { 0xc002 +1.585961e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 182 { 0xb6 -74 } : BV:8
82 : 49153 { 0xc001 +1.585949e129 } : BV:32
83 : eq(61, 82) : BOOL
84 : 229 { 0xe5 -27 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 49151 ] -> 0, [ 49152; 49152 ] -> 236, [ 49153; 49153 ] -> 229, [ 49154; 49154 ] -> 182, [ 49155; 49155 ] -> 238, [ 49156; 1073790971 ] -> 0, [ 1073790972; 1073790972 ] -> 4, [ 1073790973; 1073790973 ] -> 3, [ 1073790974; 1073790974 ] -> 34, [ 1073790975; 1073790975 ] -> 226, [ 1073790976; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 233828515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 233828516; 233828519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 233828520; 599849967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 599849968; 599849971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 599849972; 2280640719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2280640720; 2280640723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2280640724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2280640720 { 0x87efd0d0 -2014326576 -1.87355995e144 } : BV:32
=input.dst.llvm-%m
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 599849968 { 0x23c0fbf0 +1.50768852e200 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 233828516 { 0xdeff0a4 +1.87453126e156 } : BV:32
=input.dst.llvm-%x
1 : 49152 { 0xc000 +1.585937e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43115Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43116Var : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 49155 { 0xc003 +1.585973e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
34 : eq(26, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 49152 { 0xc000 +1.585937e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 236 { 0xec -20 } : BV:8
39 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
40 : eq(26, 39) : BOOL
41 : 226 { 0xe2 -30 } : BV:8
42 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
43 : eq(26, 42) : BOOL
44 : 3 { 0x3 } : BV:8
45 : 49154 { 0xc002 +1.585961e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 182 { 0xb6 -74 } : BV:8
48 : 49153 { 0xc001 +1.585949e129 } : BV:32
49 : eq(26, 48) : BOOL
50 : 229 { 0xe5 -27 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda43097Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43098Var : BV:32
20 : 268435456 { 0x10000000 +1.0e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870912 { 0x20000000 +1.0e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
31 : eq(29, 30) : BOOL
32 : 4 { 0x4 } : BV:8
33 : 49155 { 0xc003 +1.585973e129 } : BV:32
34 : eq(29, 33) : BOOL
35 : 238 { 0xee -18 } : BV:8
36 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
37 : eq(29, 36) : BOOL
38 : 34 { 0x22 } : BV:8
39 : 49152 { 0xc000 +1.585937e129 } : BV:32
40 : eq(29, 39) : BOOL
41 : 236 { 0xec -20 } : BV:8
42 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
43 : eq(29, 42) : BOOL
44 : 226 { 0xe2 -30 } : BV:8
45 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
46 : eq(29, 45) : BOOL
47 : 3 { 0x3 } : BV:8
48 : 49154 { 0xc002 +1.585961e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 182 { 0xb6 -74 } : BV:8
51 : 49153 { 0xc001 +1.585949e129 } : BV:32
52 : eq(29, 51) : BOOL
53 : 229 { 0xe5 -27 } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(31, 32, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : eq(64, 45) : BOOL
71 : eq(64, 48) : BOOL
72 : eq(64, 51) : BOOL
73 : ite(72, 53, 54) : BV:8
74 : ite(71, 50, 73) : BV:8
75 : ite(70, 47, 74) : BV:8
76 : ite(69, 44, 75) : BV:8
77 : ite(68, 41, 76) : BV:8
78 : ite(67, 38, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 32, 79) : BV:8
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : bvadd(81, 27, 28) : BV:32
83 : eq(82, 30) : BOOL
84 : eq(82, 33) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 39) : BOOL
87 : eq(82, 42) : BOOL
88 : eq(82, 45) : BOOL
89 : eq(82, 48) : BOOL
90 : eq(82, 51) : BOOL
91 : ite(90, 53, 54) : BV:8
92 : ite(89, 50, 91) : BV:8
93 : ite(88, 47, 92) : BV:8
94 : ite(87, 44, 93) : BV:8
95 : ite(86, 41, 94) : BV:8
96 : ite(85, 38, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : bvadd(27, 28) : BV:32
100 : eq(99, 30) : BOOL
101 : eq(99, 33) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 39) : BOOL
104 : eq(99, 42) : BOOL
105 : eq(99, 45) : BOOL
106 : eq(99, 48) : BOOL
107 : eq(99, 51) : BOOL
108 : ite(107, 53, 54) : BV:8
109 : ite(106, 50, 108) : BV:8
110 : ite(105, 47, 109) : BV:8
111 : ite(104, 44, 110) : BV:8
112 : ite(103, 41, 111) : BV:8
113 : ite(102, 38, 112) : BV:8
114 : ite(101, 35, 113) : BV:8
115 : ite(100, 32, 114) : BV:8
116 : bvconcat(62, 80, 98, 115) : BV:32
117 : ite(24, 4, 116) : BV:32
118 : ite(23, 4, 117) : BV:32
119 : ite(21, 4, 118) : BV:32
120 : lambda(19, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(18, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1141333209 { 0x44075cd9 +1.5752098e9 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43120Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43121Var : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
29 : eq(27, 28) : BOOL
30 : 4 { 0x4 } : BV:8
31 : 49155 { 0xc003 +1.585973e129 } : BV:32
32 : eq(27, 31) : BOOL
33 : 238 { 0xee -18 } : BV:8
34 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
35 : eq(27, 34) : BOOL
36 : 34 { 0x22 } : BV:8
37 : 49152 { 0xc000 +1.585937e129 } : BV:32
38 : eq(27, 37) : BOOL
39 : 236 { 0xec -20 } : BV:8
40 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
41 : eq(27, 40) : BOOL
42 : 226 { 0xe2 -30 } : BV:8
43 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
44 : eq(27, 43) : BOOL
45 : 3 { 0x3 } : BV:8
46 : 49154 { 0xc002 +1.585961e129 } : BV:32
47 : eq(27, 46) : BOOL
48 : 182 { 0xb6 -74 } : BV:8
49 : 49153 { 0xc001 +1.585949e129 } : BV:32
50 : eq(27, 49) : BOOL
51 : 229 { 0xe5 -27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 2, 114) : BV:32
116 : ite(21, 2, 115) : BV:32
117 : ite(19, 2, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1247730463 { 0x4a5edb1f +1.74106204e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 599849968 { 0x23c0fbf0 +1.50768852e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 599849971 { 0x23c0fbf3 +1.50768887e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 233828516 { 0xdeff0a4 +1.87453126e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 233828519 { 0xdeff0a7 +1.87453162e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2280640720 { 0x87efd0d0 -2014326576 -1.87355995e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2280640723 { 0x87efd0d3 -2014326573 -1.87356030e144 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda42980Var : BV:32
2 : Lambda42981Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 49155 { 0xc003 +1.585973e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : eq(53, 51) : BOOL
58 : 238 { 0xee -18 } : BV:8
59 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
60 : eq(53, 59) : BOOL
61 : 34 { 0x22 } : BV:8
62 : 49152 { 0xc000 +1.585937e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 236 { 0xec -20 } : BV:8
65 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
66 : eq(53, 65) : BOOL
67 : 226 { 0xe2 -30 } : BV:8
68 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
69 : eq(53, 68) : BOOL
70 : 3 { 0x3 } : BV:8
71 : 49154 { 0xc002 +1.585961e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 182 { 0xb6 -74 } : BV:8
74 : 49153 { 0xc001 +1.585949e129 } : BV:32
75 : eq(53, 74) : BOOL
76 : 229 { 0xe5 -27 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda42990Var : BV:32
2 : Lambda42991Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 49155 { 0xc003 +1.585973e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : eq(12, 10) : BOOL
17 : 238 { 0xee -18 } : BV:8
18 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 49152 { 0xc000 +1.585937e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
25 : eq(12, 24) : BOOL
26 : 226 { 0xe2 -30 } : BV:8
27 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
28 : eq(12, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 49154 { 0xc002 +1.585961e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 182 { 0xb6 -74 } : BV:8
33 : 49153 { 0xc001 +1.585949e129 } : BV:32
34 : eq(12, 33) : BOOL
35 : 229 { 0xe5 -27 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda42994Var : BV:32
2 : Lambda42995Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda42985Var : BV:32
2 : Lambda42986Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43001Var : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 49155 { 0xc003 +1.585973e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 238 { 0xee -18 } : BV:8
19 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
20 : eq(12, 19) : BOOL
21 : 34 { 0x22 } : BV:8
22 : 49152 { 0xc000 +1.585937e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 236 { 0xec -20 } : BV:8
25 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
26 : eq(12, 25) : BOOL
27 : 226 { 0xe2 -30 } : BV:8
28 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
29 : eq(12, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : 49154 { 0xc002 +1.585961e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 182 { 0xb6 -74 } : BV:8
34 : 49153 { 0xc001 +1.585949e129 } : BV:32
35 : eq(12, 34) : BOOL
36 : 229 { 0xe5 -27 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43005Var : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 49155 { 0xc003 +1.585973e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 238 { 0xee -18 } : BV:8
19 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
20 : eq(12, 19) : BOOL
21 : 34 { 0x22 } : BV:8
22 : 49152 { 0xc000 +1.585937e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 236 { 0xec -20 } : BV:8
25 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
26 : eq(12, 25) : BOOL
27 : 226 { 0xe2 -30 } : BV:8
28 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
29 : eq(12, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : 49154 { 0xc002 +1.585961e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 182 { 0xb6 -74 } : BV:8
34 : 49153 { 0xc001 +1.585949e129 } : BV:32
35 : eq(12, 34) : BOOL
36 : 229 { 0xe5 -27 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 2147483648 ] -> true, [ 2147483649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43009Var : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3793879812 { 0xe2220304 -501087484 -1.26571702e69 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1073790972 { 0x4000bffc +1.585889e1 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 49155 { 0xc003 +1.585973e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 238 { 0xee -18 } : BV:8
18 : 1073790974 { 0x4000bffe +1.585913e1 } : BV:32
19 : eq(11, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 49152 { 0xc000 +1.585937e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 1073790975 { 0x4000bfff +1.585925e1 } : BV:32
25 : eq(11, 24) : BOOL
26 : 226 { 0xe2 -30 } : BV:8
27 : 1073790973 { 0x4000bffd +1.585901e1 } : BV:32
28 : eq(11, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 49154 { 0xc002 +1.585961e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 182 { 0xb6 -74 } : BV:8
33 : 49153 { 0xc001 +1.585949e129 } : BV:32
34 : eq(11, 33) : BOOL
35 : 229 { 0xe5 -27 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1412344316
=counter_example_end
=global nodece 65 num_edges_traversed 2
=global nodece 65 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 66
=global nodece 66 nodece z3.ce4662.num_edges_traversed1
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce4662 b723193d44ff524da72d636f8bb2481
=input.spec-%var-x-1
1 : Lambda46800Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2474310619 { 0x937afbdb -1820656677 -1.96081101e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2474310620 { 0x937afbdc -1820656676 -1.96081113e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46801Var : BV:32
18 : Lambda46802Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2474310621 { 0x937afbdd -1820656675 -1.96081125e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 172719075 { 0xa4b7be3 +1.58971822e149 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46803Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 204 { 0xcc -52 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 219 { 0xdb -37 } : BV:8
85 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
86 : eq(79, 85) : BOOL
87 : 236 { 0xec -20 } : BV:8
88 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
89 : eq(79, 88) : BOOL
90 : 254 { 0xfe -2 } : BV:8
91 : eq(79, 2) : BOOL
92 : 248 { 0xf8 -8 } : BV:8
93 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
94 : eq(79, 93) : BOOL
95 : 239 { 0xef -17 } : BV:8
96 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
97 : eq(79, 96) : BOOL
98 : 247 { 0xf7 -9 } : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : eq(79, 99) : BOOL
101 : 251 { 0xfb -5 } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(89, 90, 106) : BV:8
108 : ite(86, 87, 107) : BV:8
109 : ite(83, 84, 108) : BV:8
110 : ite(80, 81, 109) : BV:8
111 : bvadd(99, 78) : BV:32
112 : eq(111, 75) : BOOL
113 : eq(111, 82) : BOOL
114 : eq(111, 85) : BOOL
115 : eq(111, 88) : BOOL
116 : eq(111, 2) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 90, 123) : BV:8
125 : ite(114, 87, 124) : BV:8
126 : ite(113, 84, 125) : BV:8
127 : ite(112, 81, 126) : BV:8
128 : bvadd(82, 78) : BV:32
129 : eq(128, 75) : BOOL
130 : eq(128, 82) : BOOL
131 : eq(128, 85) : BOOL
132 : eq(128, 88) : BOOL
133 : eq(128, 2) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 90, 140) : BV:8
142 : ite(131, 87, 141) : BV:8
143 : ite(130, 84, 142) : BV:8
144 : ite(129, 81, 143) : BV:8
145 : eq(78, 75) : BOOL
146 : eq(78, 82) : BOOL
147 : eq(78, 85) : BOOL
148 : eq(78, 88) : BOOL
149 : eq(78, 2) : BOOL
150 : eq(78, 93) : BOOL
151 : eq(78, 96) : BOOL
152 : eq(78, 99) : BOOL
153 : ite(152, 101, 102) : BV:8
154 : ite(151, 98, 153) : BV:8
155 : ite(150, 95, 154) : BV:8
156 : ite(149, 92, 155) : BV:8
157 : ite(148, 90, 156) : BV:8
158 : ite(147, 87, 157) : BV:8
159 : ite(146, 84, 158) : BV:8
160 : ite(145, 81, 159) : BV:8
161 : bvconcat(110, 127, 144, 160) : BV:32
162 : bvadd(75, 77, 161) : BV:32
163 : eq(162, 75) : BOOL
164 : eq(162, 82) : BOOL
165 : eq(162, 85) : BOOL
166 : eq(162, 88) : BOOL
167 : eq(162, 2) : BOOL
168 : eq(162, 93) : BOOL
169 : eq(162, 96) : BOOL
170 : eq(162, 99) : BOOL
171 : ite(170, 101, 102) : BV:8
172 : ite(169, 98, 171) : BV:8
173 : ite(168, 95, 172) : BV:8
174 : ite(167, 92, 173) : BV:8
175 : ite(166, 90, 174) : BV:8
176 : ite(165, 87, 175) : BV:8
177 : ite(164, 84, 176) : BV:8
178 : ite(163, 81, 177) : BV:8
179 : bvadd(99, 77, 161) : BV:32
180 : eq(179, 75) : BOOL
181 : eq(179, 82) : BOOL
182 : eq(179, 85) : BOOL
183 : eq(179, 88) : BOOL
184 : eq(179, 2) : BOOL
185 : eq(179, 93) : BOOL
186 : eq(179, 96) : BOOL
187 : eq(179, 99) : BOOL
188 : ite(187, 101, 102) : BV:8
189 : ite(186, 98, 188) : BV:8
190 : ite(185, 95, 189) : BV:8
191 : ite(184, 92, 190) : BV:8
192 : ite(183, 90, 191) : BV:8
193 : ite(182, 87, 192) : BV:8
194 : ite(181, 84, 193) : BV:8
195 : ite(180, 81, 194) : BV:8
196 : bvadd(82, 77, 161) : BV:32
197 : eq(196, 75) : BOOL
198 : eq(196, 82) : BOOL
199 : eq(196, 85) : BOOL
200 : eq(196, 88) : BOOL
201 : eq(196, 2) : BOOL
202 : eq(196, 93) : BOOL
203 : eq(196, 96) : BOOL
204 : eq(196, 99) : BOOL
205 : ite(204, 101, 102) : BV:8
206 : ite(203, 98, 205) : BV:8
207 : ite(202, 95, 206) : BV:8
208 : ite(201, 92, 207) : BV:8
209 : ite(200, 90, 208) : BV:8
210 : ite(199, 87, 209) : BV:8
211 : ite(198, 84, 210) : BV:8
212 : ite(197, 81, 211) : BV:8
213 : bvadd(77, 161) : BV:32
214 : eq(213, 75) : BOOL
215 : eq(213, 82) : BOOL
216 : eq(213, 85) : BOOL
217 : eq(213, 88) : BOOL
218 : eq(213, 2) : BOOL
219 : eq(213, 93) : BOOL
220 : eq(213, 96) : BOOL
221 : eq(213, 99) : BOOL
222 : ite(221, 101, 102) : BV:8
223 : ite(220, 98, 222) : BV:8
224 : ite(219, 95, 223) : BV:8
225 : ite(218, 92, 224) : BV:8
226 : ite(217, 90, 225) : BV:8
227 : ite(216, 87, 226) : BV:8
228 : ite(215, 84, 227) : BV:8
229 : ite(214, 81, 228) : BV:8
230 : bvconcat(178, 195, 212, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : ite(74, 230, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : lambda(52, 233) : FUNCTION[BV:32 -> BV:32]
235 : map(51, 234) : MAP[BV:32 -> BV:32]
236 : lambda(17, 235) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
237 : map(16, 236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
238 : sym_const(237) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46820Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2474310619 { 0x937afbdb -1820656677 -1.96081101e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2474310620 { 0x937afbdc -1820656676 -1.96081113e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46821Var : BV:32
18 : Lambda46822Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2474310621 { 0x937afbdd -1820656675 -1.96081125e167 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 172719075 { 0xa4b7be3 +1.58971822e149 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46823Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 204 { 0xcc -52 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 219 { 0xdb -37 } : BV:8
66 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
67 : eq(60, 66) : BOOL
68 : 236 { 0xec -20 } : BV:8
69 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
70 : eq(60, 69) : BOOL
71 : 254 { 0xfe -2 } : BV:8
72 : eq(60, 2) : BOOL
73 : 248 { 0xf8 -8 } : BV:8
74 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
75 : eq(60, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
78 : eq(60, 77) : BOOL
79 : 247 { 0xf7 -9 } : BV:8
80 : 2 { 0x2 +1.23e129 } : BV:32
81 : eq(60, 80) : BOOL
82 : 251 { 0xfb -5 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(70, 71, 87) : BV:8
89 : ite(67, 68, 88) : BV:8
90 : ite(64, 65, 89) : BV:8
91 : ite(61, 62, 90) : BV:8
92 : bvadd(80, 59) : BV:32
93 : eq(92, 56) : BOOL
94 : eq(92, 63) : BOOL
95 : eq(92, 66) : BOOL
96 : eq(92, 69) : BOOL
97 : eq(92, 2) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 71, 104) : BV:8
106 : ite(95, 68, 105) : BV:8
107 : ite(94, 65, 106) : BV:8
108 : ite(93, 62, 107) : BV:8
109 : bvadd(63, 59) : BV:32
110 : eq(109, 56) : BOOL
111 : eq(109, 63) : BOOL
112 : eq(109, 66) : BOOL
113 : eq(109, 69) : BOOL
114 : eq(109, 2) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 71, 121) : BV:8
123 : ite(112, 68, 122) : BV:8
124 : ite(111, 65, 123) : BV:8
125 : ite(110, 62, 124) : BV:8
126 : eq(59, 56) : BOOL
127 : eq(59, 63) : BOOL
128 : eq(59, 66) : BOOL
129 : eq(59, 69) : BOOL
130 : eq(59, 2) : BOOL
131 : eq(59, 74) : BOOL
132 : eq(59, 77) : BOOL
133 : eq(59, 80) : BOOL
134 : ite(133, 82, 83) : BV:8
135 : ite(132, 79, 134) : BV:8
136 : ite(131, 76, 135) : BV:8
137 : ite(130, 73, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 62, 140) : BV:8
142 : bvconcat(91, 108, 125, 141) : BV:32
143 : bvadd(56, 58, 142) : BV:32
144 : eq(143, 56) : BOOL
145 : eq(143, 63) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 2) : BOOL
149 : eq(143, 74) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 80) : BOOL
152 : ite(151, 82, 83) : BV:8
153 : ite(150, 79, 152) : BV:8
154 : ite(149, 76, 153) : BV:8
155 : ite(148, 73, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 62, 158) : BV:8
160 : bvadd(80, 58, 142) : BV:32
161 : eq(160, 56) : BOOL
162 : eq(160, 63) : BOOL
163 : eq(160, 66) : BOOL
164 : eq(160, 69) : BOOL
165 : eq(160, 2) : BOOL
166 : eq(160, 74) : BOOL
167 : eq(160, 77) : BOOL
168 : eq(160, 80) : BOOL
169 : ite(168, 82, 83) : BV:8
170 : ite(167, 79, 169) : BV:8
171 : ite(166, 76, 170) : BV:8
172 : ite(165, 73, 171) : BV:8
173 : ite(164, 71, 172) : BV:8
174 : ite(163, 68, 173) : BV:8
175 : ite(162, 65, 174) : BV:8
176 : ite(161, 62, 175) : BV:8
177 : bvadd(63, 58, 142) : BV:32
178 : eq(177, 56) : BOOL
179 : eq(177, 63) : BOOL
180 : eq(177, 66) : BOOL
181 : eq(177, 69) : BOOL
182 : eq(177, 2) : BOOL
183 : eq(177, 74) : BOOL
184 : eq(177, 77) : BOOL
185 : eq(177, 80) : BOOL
186 : ite(185, 82, 83) : BV:8
187 : ite(184, 79, 186) : BV:8
188 : ite(183, 76, 187) : BV:8
189 : ite(182, 73, 188) : BV:8
190 : ite(181, 71, 189) : BV:8
191 : ite(180, 68, 190) : BV:8
192 : ite(179, 65, 191) : BV:8
193 : ite(178, 62, 192) : BV:8
194 : bvadd(58, 142) : BV:32
195 : eq(194, 56) : BOOL
196 : eq(194, 63) : BOOL
197 : eq(194, 66) : BOOL
198 : eq(194, 69) : BOOL
199 : eq(194, 2) : BOOL
200 : eq(194, 74) : BOOL
201 : eq(194, 77) : BOOL
202 : eq(194, 80) : BOOL
203 : ite(202, 82, 83) : BV:8
204 : ite(201, 79, 203) : BV:8
205 : ite(200, 76, 204) : BV:8
206 : ite(199, 73, 205) : BV:8
207 : ite(198, 71, 206) : BV:8
208 : ite(197, 68, 207) : BV:8
209 : ite(196, 65, 208) : BV:8
210 : ite(195, 62, 209) : BV:8
211 : bvconcat(159, 176, 193, 210) : BV:32
212 : ite(55, 2, 211) : BV:32
213 : lambda(52, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(51, 213) : MAP[BV:32 -> BV:32]
215 : lambda(17, 214) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
216 : map(16, 215) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
217 : sym_const(216) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 248, [ 1; 1 ] -> 219, [ 2; 2 ] -> 251, [ 3; 3 ] -> 204, [ 4; 268435451 ] -> 0, [ 268435452; 268435452 ] -> 236, [ 268435453; 268435453 ] -> 247, [ 268435454; 268435454 ] -> 254, [ 268435455; 268435455 ] -> 239, [ 268435456; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3020157683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3020157684; 3020157687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3020157688; 3616696155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3616696156; 3616696159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3616696160; 3957340407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3957340408; 3957340411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3957340412; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3957340408 { 0xebe038f8 -337626888 -1.75173854e88 } : BV:32
=input.dst.llvm-%m
1 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3020157684 { 0xb403f2f4 -1274809612 -1.3085184e233 } : BV:32
=input.dst.llvm-%n
1 : 2474310620 { 0x937afbdc -1820656676 -1.96081113e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3616696156 { 0xd792675c -678271140 -1.14377927e48 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1308912538 { 0x4e046b9a +1.3453373e29 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46827Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46828Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 204 { 0xcc -52 } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 219 { 0xdb -37 } : BV:8
29 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
30 : eq(23, 29) : BOOL
31 : 236 { 0xec -20 } : BV:8
32 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
33 : eq(23, 32) : BOOL
34 : 254 { 0xfe -2 } : BV:8
35 : eq(23, 2) : BOOL
36 : 248 { 0xf8 -8 } : BV:8
37 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
38 : eq(23, 37) : BOOL
39 : 239 { 0xef -17 } : BV:8
40 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
41 : eq(23, 40) : BOOL
42 : 247 { 0xf7 -9 } : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(23, 43) : BOOL
45 : 251 { 0xfb -5 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : bvadd(43, 21, 22) : BV:32
56 : eq(55, 19) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 2) : BOOL
61 : eq(55, 37) : BOOL
62 : eq(55, 40) : BOOL
63 : eq(55, 43) : BOOL
64 : ite(63, 45, 46) : BV:8
65 : ite(62, 42, 64) : BV:8
66 : ite(61, 39, 65) : BV:8
67 : ite(60, 36, 66) : BV:8
68 : ite(59, 34, 67) : BV:8
69 : ite(58, 31, 68) : BV:8
70 : ite(57, 28, 69) : BV:8
71 : ite(56, 25, 70) : BV:8
72 : bvadd(26, 21, 22) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 2) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 40) : BOOL
80 : eq(72, 43) : BOOL
81 : ite(80, 45, 46) : BV:8
82 : ite(79, 42, 81) : BV:8
83 : ite(78, 39, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 34, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 2) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 40) : BOOL
97 : eq(89, 43) : BOOL
98 : ite(97, 45, 46) : BV:8
99 : ite(96, 42, 98) : BV:8
100 : ite(95, 39, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 34, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(54, 71, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
2 : unit : UNIT
3 : Lambda46809Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46810Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 204 { 0xcc -52 } : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : eq(25, 28) : BOOL
30 : 219 { 0xdb -37 } : BV:8
31 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
32 : eq(25, 31) : BOOL
33 : 236 { 0xec -20 } : BV:8
34 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
35 : eq(25, 34) : BOOL
36 : 254 { 0xfe -2 } : BV:8
37 : eq(25, 4) : BOOL
38 : 248 { 0xf8 -8 } : BV:8
39 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
40 : eq(25, 39) : BOOL
41 : 239 { 0xef -17 } : BV:8
42 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
43 : eq(25, 42) : BOOL
44 : 247 { 0xf7 -9 } : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : eq(25, 45) : BOOL
47 : 251 { 0xfb -5 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(35, 36, 52) : BV:8
54 : ite(32, 33, 53) : BV:8
55 : ite(29, 30, 54) : BV:8
56 : ite(26, 27, 55) : BV:8
57 : bvadd(45, 23, 24) : BV:32
58 : eq(57, 21) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 34) : BOOL
62 : eq(57, 4) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 45) : BOOL
66 : ite(65, 47, 48) : BV:8
67 : ite(64, 44, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : ite(58, 27, 72) : BV:8
74 : bvadd(28, 23, 24) : BV:32
75 : eq(74, 21) : BOOL
76 : eq(74, 28) : BOOL
77 : eq(74, 31) : BOOL
78 : eq(74, 34) : BOOL
79 : eq(74, 4) : BOOL
80 : eq(74, 39) : BOOL
81 : eq(74, 42) : BOOL
82 : eq(74, 45) : BOOL
83 : ite(82, 47, 48) : BV:8
84 : ite(81, 44, 83) : BV:8
85 : ite(80, 41, 84) : BV:8
86 : ite(79, 38, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 33, 87) : BV:8
89 : ite(76, 30, 88) : BV:8
90 : ite(75, 27, 89) : BV:8
91 : bvadd(23, 24) : BV:32
92 : eq(91, 21) : BOOL
93 : eq(91, 28) : BOOL
94 : eq(91, 31) : BOOL
95 : eq(91, 34) : BOOL
96 : eq(91, 4) : BOOL
97 : eq(91, 39) : BOOL
98 : eq(91, 42) : BOOL
99 : eq(91, 45) : BOOL
100 : ite(99, 47, 48) : BV:8
101 : ite(98, 44, 100) : BV:8
102 : ite(97, 41, 101) : BV:8
103 : ite(96, 38, 102) : BV:8
104 : ite(95, 36, 103) : BV:8
105 : ite(94, 33, 104) : BV:8
106 : ite(93, 30, 105) : BV:8
107 : ite(92, 27, 106) : BV:8
108 : bvconcat(56, 73, 90, 107) : BV:32
109 : ite(20, 4, 108) : BV:32
110 : lambda(19, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(18, 110) : MAP[BV:32 -> BV:32]
112 : sum(1, 2, 111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
113 : sym_const(112) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(2, 1) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 2) : BV:32
22 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 204 { 0xcc -52 } : BV:8
26 : eq(23, 15) : BOOL
27 : 219 { 0xdb -37 } : BV:8
28 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
29 : eq(23, 28) : BOOL
30 : 236 { 0xec -20 } : BV:8
31 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
32 : eq(23, 31) : BOOL
33 : 254 { 0xfe -2 } : BV:8
34 : eq(23, 1) : BOOL
35 : 248 { 0xf8 -8 } : BV:8
36 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
37 : eq(23, 36) : BOOL
38 : 239 { 0xef -17 } : BV:8
39 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
40 : eq(23, 39) : BOOL
41 : 247 { 0xf7 -9 } : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 251 { 0xfb -5 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : bvadd(42, 21, 22) : BV:32
55 : eq(54, 19) : BOOL
56 : eq(54, 15) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 31) : BOOL
59 : eq(54, 1) : BOOL
60 : eq(54, 36) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 42) : BOOL
63 : ite(62, 44, 45) : BV:8
64 : ite(61, 41, 63) : BV:8
65 : ite(60, 38, 64) : BV:8
66 : ite(59, 35, 65) : BV:8
67 : ite(58, 33, 66) : BV:8
68 : ite(57, 30, 67) : BV:8
69 : ite(56, 27, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : bvadd(15, 21, 22) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 28) : BOOL
75 : eq(71, 31) : BOOL
76 : eq(71, 1) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 39) : BOOL
79 : eq(71, 42) : BOOL
80 : ite(79, 44, 45) : BV:8
81 : ite(78, 41, 80) : BV:8
82 : ite(77, 38, 81) : BV:8
83 : ite(76, 35, 82) : BV:8
84 : ite(75, 33, 83) : BV:8
85 : ite(74, 30, 84) : BV:8
86 : ite(73, 27, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 19) : BOOL
90 : eq(88, 15) : BOOL
91 : eq(88, 28) : BOOL
92 : eq(88, 31) : BOOL
93 : eq(88, 1) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 39) : BOOL
96 : eq(88, 42) : BOOL
97 : ite(96, 44, 45) : BV:8
98 : ite(95, 41, 97) : BV:8
99 : ite(94, 38, 98) : BV:8
100 : ite(93, 35, 99) : BV:8
101 : ite(92, 33, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(53, 70, 87, 104) : BV:32
106 : ite(18, 1, 105) : BV:32
107 : sum(16, 17, 106) : SUM[UNIT,BV:32]
108 : sym_const(107) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46832Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46833Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 204 { 0xcc -52 } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 219 { 0xdb -37 } : BV:8
29 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
30 : eq(23, 29) : BOOL
31 : 236 { 0xec -20 } : BV:8
32 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
33 : eq(23, 32) : BOOL
34 : 254 { 0xfe -2 } : BV:8
35 : eq(23, 2) : BOOL
36 : 248 { 0xf8 -8 } : BV:8
37 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
38 : eq(23, 37) : BOOL
39 : 239 { 0xef -17 } : BV:8
40 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
41 : eq(23, 40) : BOOL
42 : 247 { 0xf7 -9 } : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(23, 43) : BOOL
45 : 251 { 0xfb -5 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(33, 34, 50) : BV:8
52 : ite(30, 31, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : ite(24, 25, 53) : BV:8
55 : bvadd(43, 21, 22) : BV:32
56 : eq(55, 19) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 2) : BOOL
61 : eq(55, 37) : BOOL
62 : eq(55, 40) : BOOL
63 : eq(55, 43) : BOOL
64 : ite(63, 45, 46) : BV:8
65 : ite(62, 42, 64) : BV:8
66 : ite(61, 39, 65) : BV:8
67 : ite(60, 36, 66) : BV:8
68 : ite(59, 34, 67) : BV:8
69 : ite(58, 31, 68) : BV:8
70 : ite(57, 28, 69) : BV:8
71 : ite(56, 25, 70) : BV:8
72 : bvadd(26, 21, 22) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 2) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 40) : BOOL
80 : eq(72, 43) : BOOL
81 : ite(80, 45, 46) : BV:8
82 : ite(79, 42, 81) : BV:8
83 : ite(78, 39, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 34, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 2) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 40) : BOOL
97 : eq(89, 43) : BOOL
98 : ite(97, 45, 46) : BV:8
99 : ite(96, 42, 98) : BV:8
100 : ite(95, 39, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 34, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(54, 71, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1135816588 { 0x43b32f8c +1.39988851e8 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 2214592512 { 0x84000000 -2080374784 -1.0e137 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 15 { 0xf +1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3020157684 { 0xb403f2f4 -1274809612 -1.3085184e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3020157687 { 0xb403f2f7 -1274809609 -1.3085219e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3616696156 { 0xd792675c -678271140 -1.14377927e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3616696159 { 0xd792675f -678271137 -1.14377963e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3957340408 { 0xebe038f8 -337626888 -1.75173854e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3957340411 { 0xebe038fb -337626885 -1.75173890e88 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46692Var : BV:32
2 : Lambda46693Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2474310619 { 0x937afbdb -1820656677 -1.96081101e167 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2474310620 { 0x937afbdc -1820656676 -1.96081113e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2474310621 { 0x937afbdd -1820656675 -1.96081125e167 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 172719075 { 0xa4b7be3 +1.58971822e149 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 204 { 0xcc -52 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 219 { 0xdb -37 } : BV:8
58 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
59 : eq(52, 58) : BOOL
60 : 236 { 0xec -20 } : BV:8
61 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
62 : eq(52, 61) : BOOL
63 : 254 { 0xfe -2 } : BV:8
64 : eq(52, 3) : BOOL
65 : 248 { 0xf8 -8 } : BV:8
66 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
67 : eq(52, 66) : BOOL
68 : 239 { 0xef -17 } : BV:8
69 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
70 : eq(52, 69) : BOOL
71 : 247 { 0xf7 -9 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(52, 72) : BOOL
74 : 251 { 0xfb -5 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : ite(59, 60, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(72, 51) : BV:32
85 : eq(84, 48) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 58) : BOOL
88 : eq(84, 61) : BOOL
89 : eq(84, 3) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 63, 96) : BV:8
98 : ite(87, 60, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(55, 51) : BV:32
102 : eq(101, 48) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 58) : BOOL
105 : eq(101, 61) : BOOL
106 : eq(101, 3) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 63, 113) : BV:8
115 : ite(104, 60, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : eq(51, 48) : BOOL
119 : eq(51, 55) : BOOL
120 : eq(51, 58) : BOOL
121 : eq(51, 61) : BOOL
122 : eq(51, 3) : BOOL
123 : eq(51, 66) : BOOL
124 : eq(51, 69) : BOOL
125 : eq(51, 72) : BOOL
126 : ite(125, 74, 75) : BV:8
127 : ite(124, 71, 126) : BV:8
128 : ite(123, 68, 127) : BV:8
129 : ite(122, 65, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 60, 130) : BV:8
132 : ite(119, 57, 131) : BV:8
133 : ite(118, 54, 132) : BV:8
134 : bvconcat(83, 100, 117, 133) : BV:32
135 : bvadd(48, 50, 134) : BV:32
136 : eq(135, 48) : BOOL
137 : eq(135, 55) : BOOL
138 : eq(135, 58) : BOOL
139 : eq(135, 61) : BOOL
140 : eq(135, 3) : BOOL
141 : eq(135, 66) : BOOL
142 : eq(135, 69) : BOOL
143 : eq(135, 72) : BOOL
144 : ite(143, 74, 75) : BV:8
145 : ite(142, 71, 144) : BV:8
146 : ite(141, 68, 145) : BV:8
147 : ite(140, 65, 146) : BV:8
148 : ite(139, 63, 147) : BV:8
149 : ite(138, 60, 148) : BV:8
150 : ite(137, 57, 149) : BV:8
151 : ite(136, 54, 150) : BV:8
152 : bvadd(72, 50, 134) : BV:32
153 : eq(152, 48) : BOOL
154 : eq(152, 55) : BOOL
155 : eq(152, 58) : BOOL
156 : eq(152, 61) : BOOL
157 : eq(152, 3) : BOOL
158 : eq(152, 66) : BOOL
159 : eq(152, 69) : BOOL
160 : eq(152, 72) : BOOL
161 : ite(160, 74, 75) : BV:8
162 : ite(159, 71, 161) : BV:8
163 : ite(158, 68, 162) : BV:8
164 : ite(157, 65, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 60, 165) : BV:8
167 : ite(154, 57, 166) : BV:8
168 : ite(153, 54, 167) : BV:8
169 : bvadd(55, 50, 134) : BV:32
170 : eq(169, 48) : BOOL
171 : eq(169, 55) : BOOL
172 : eq(169, 58) : BOOL
173 : eq(169, 61) : BOOL
174 : eq(169, 3) : BOOL
175 : eq(169, 66) : BOOL
176 : eq(169, 69) : BOOL
177 : eq(169, 72) : BOOL
178 : ite(177, 74, 75) : BV:8
179 : ite(176, 71, 178) : BV:8
180 : ite(175, 68, 179) : BV:8
181 : ite(174, 65, 180) : BV:8
182 : ite(173, 63, 181) : BV:8
183 : ite(172, 60, 182) : BV:8
184 : ite(171, 57, 183) : BV:8
185 : ite(170, 54, 184) : BV:8
186 : bvadd(50, 134) : BV:32
187 : eq(186, 48) : BOOL
188 : eq(186, 55) : BOOL
189 : eq(186, 58) : BOOL
190 : eq(186, 61) : BOOL
191 : eq(186, 3) : BOOL
192 : eq(186, 66) : BOOL
193 : eq(186, 69) : BOOL
194 : eq(186, 72) : BOOL
195 : ite(194, 74, 75) : BV:8
196 : ite(193, 71, 195) : BV:8
197 : ite(192, 68, 196) : BV:8
198 : ite(191, 65, 197) : BV:8
199 : ite(190, 63, 198) : BV:8
200 : ite(189, 60, 199) : BV:8
201 : ite(188, 57, 200) : BV:8
202 : ite(187, 54, 201) : BV:8
203 : bvconcat(151, 168, 185, 202) : BV:32
204 : ite(6, 3, 203) : BV:32
205 : ite(47, 203, 204) : BV:32
206 : ite(6, 3, 205) : BV:32
207 : lambda(1, 2, 206) : FUNCTION[BV:32,BV:32 -> BV:32]
208 : sym_const(207) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46702Var : BV:32
2 : Lambda46703Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 204 { 0xcc -52 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 219 { 0xdb -37 } : BV:8
17 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
18 : eq(11, 17) : BOOL
19 : 236 { 0xec -20 } : BV:8
20 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
21 : eq(11, 20) : BOOL
22 : 254 { 0xfe -2 } : BV:8
23 : eq(11, 3) : BOOL
24 : 248 { 0xf8 -8 } : BV:8
25 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
26 : eq(11, 25) : BOOL
27 : 239 { 0xef -17 } : BV:8
28 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
29 : eq(11, 28) : BOOL
30 : 247 { 0xf7 -9 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 251 { 0xfb -5 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : ite(12, 13, 41) : BV:8
43 : bvadd(31, 10) : BV:32
44 : eq(43, 7) : BOOL
45 : eq(43, 14) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 20) : BOOL
48 : eq(43, 3) : BOOL
49 : eq(43, 25) : BOOL
50 : eq(43, 28) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 30, 52) : BV:8
54 : ite(49, 27, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : ite(47, 22, 55) : BV:8
57 : ite(46, 19, 56) : BV:8
58 : ite(45, 16, 57) : BV:8
59 : ite(44, 13, 58) : BV:8
60 : bvadd(14, 10) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 14) : BOOL
63 : eq(60, 17) : BOOL
64 : eq(60, 20) : BOOL
65 : eq(60, 3) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 28) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 30, 69) : BV:8
71 : ite(66, 27, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 22, 72) : BV:8
74 : ite(63, 19, 73) : BV:8
75 : ite(62, 16, 74) : BV:8
76 : ite(61, 13, 75) : BV:8
77 : eq(10, 7) : BOOL
78 : eq(10, 14) : BOOL
79 : eq(10, 17) : BOOL
80 : eq(10, 20) : BOOL
81 : eq(10, 3) : BOOL
82 : eq(10, 25) : BOOL
83 : eq(10, 28) : BOOL
84 : eq(10, 31) : BOOL
85 : ite(84, 33, 34) : BV:8
86 : ite(83, 30, 85) : BV:8
87 : ite(82, 27, 86) : BV:8
88 : ite(81, 24, 87) : BV:8
89 : ite(80, 22, 88) : BV:8
90 : ite(79, 19, 89) : BV:8
91 : ite(78, 16, 90) : BV:8
92 : ite(77, 13, 91) : BV:8
93 : bvconcat(42, 59, 76, 92) : BV:32
94 : bvadd(7, 9, 93) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 14) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 3) : BOOL
100 : eq(94, 25) : BOOL
101 : eq(94, 28) : BOOL
102 : eq(94, 31) : BOOL
103 : ite(102, 33, 34) : BV:8
104 : ite(101, 30, 103) : BV:8
105 : ite(100, 27, 104) : BV:8
106 : ite(99, 24, 105) : BV:8
107 : ite(98, 22, 106) : BV:8
108 : ite(97, 19, 107) : BV:8
109 : ite(96, 16, 108) : BV:8
110 : ite(95, 13, 109) : BV:8
111 : bvadd(31, 9, 93) : BV:32
112 : eq(111, 7) : BOOL
113 : eq(111, 14) : BOOL
114 : eq(111, 17) : BOOL
115 : eq(111, 20) : BOOL
116 : eq(111, 3) : BOOL
117 : eq(111, 25) : BOOL
118 : eq(111, 28) : BOOL
119 : eq(111, 31) : BOOL
120 : ite(119, 33, 34) : BV:8
121 : ite(118, 30, 120) : BV:8
122 : ite(117, 27, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 22, 123) : BV:8
125 : ite(114, 19, 124) : BV:8
126 : ite(113, 16, 125) : BV:8
127 : ite(112, 13, 126) : BV:8
128 : bvadd(14, 9, 93) : BV:32
129 : eq(128, 7) : BOOL
130 : eq(128, 14) : BOOL
131 : eq(128, 17) : BOOL
132 : eq(128, 20) : BOOL
133 : eq(128, 3) : BOOL
134 : eq(128, 25) : BOOL
135 : eq(128, 28) : BOOL
136 : eq(128, 31) : BOOL
137 : ite(136, 33, 34) : BV:8
138 : ite(135, 30, 137) : BV:8
139 : ite(134, 27, 138) : BV:8
140 : ite(133, 24, 139) : BV:8
141 : ite(132, 22, 140) : BV:8
142 : ite(131, 19, 141) : BV:8
143 : ite(130, 16, 142) : BV:8
144 : ite(129, 13, 143) : BV:8
145 : bvadd(9, 93) : BV:32
146 : eq(145, 7) : BOOL
147 : eq(145, 14) : BOOL
148 : eq(145, 17) : BOOL
149 : eq(145, 20) : BOOL
150 : eq(145, 3) : BOOL
151 : eq(145, 25) : BOOL
152 : eq(145, 28) : BOOL
153 : eq(145, 31) : BOOL
154 : ite(153, 33, 34) : BV:8
155 : ite(152, 30, 154) : BV:8
156 : ite(151, 27, 155) : BV:8
157 : ite(150, 24, 156) : BV:8
158 : ite(149, 22, 157) : BV:8
159 : ite(148, 19, 158) : BV:8
160 : ite(147, 16, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : ite(6, 3, 162) : BV:32
164 : lambda(1, 2, 163) : FUNCTION[BV:32,BV:32 -> BV:32]
165 : sym_const(164) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2474310619 ] -> true, [ 2474310620; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2474310619 ] -> true, [ 2474310620; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46706Var : BV:32
2 : Lambda46707Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2474310619 { 0x937afbdb -1820656677 -1.96081101e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2474310620 { 0x937afbdc -1820656676 -1.96081113e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2474310621 { 0x937afbdd -1820656675 -1.96081125e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 172719075 { 0xa4b7be3 +1.58971822e149 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46697Var : BV:32
2 : Lambda46698Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2474310619 { 0x937afbdb -1820656677 -1.96081101e167 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2474310620 { 0x937afbdc -1820656676 -1.96081113e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2474310621 { 0x937afbdd -1820656675 -1.96081125e167 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 172719073 { 0xa4b7be1 +1.58971798e149 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 172719074 { 0xa4b7be2 +1.58971810e149 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 172719075 { 0xa4b7be3 +1.58971822e149 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 172719073 ] -> true, [ 172719074; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46713Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 204 { 0xcc -52 } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 219 { 0xdb -37 } : BV:8
14 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
15 : eq(8, 14) : BOOL
16 : 236 { 0xec -20 } : BV:8
17 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
18 : eq(8, 17) : BOOL
19 : 254 { 0xfe -2 } : BV:8
20 : eq(8, 2) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : eq(8, 22) : BOOL
24 : 239 { 0xef -17 } : BV:8
25 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
26 : eq(8, 25) : BOOL
27 : 247 { 0xf7 -9 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : ite(9, 10, 38) : BV:8
40 : bvadd(28, 6, 7) : BV:32
41 : eq(40, 4) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 2) : BOOL
46 : eq(40, 22) : BOOL
47 : eq(40, 25) : BOOL
48 : eq(40, 28) : BOOL
49 : ite(48, 30, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 24, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : ite(44, 19, 52) : BV:8
54 : ite(43, 16, 53) : BV:8
55 : ite(42, 13, 54) : BV:8
56 : ite(41, 10, 55) : BV:8
57 : bvadd(11, 6, 7) : BV:32
58 : eq(57, 4) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 2) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 25) : BOOL
65 : eq(57, 28) : BOOL
66 : ite(65, 30, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 24, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 19, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 4) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 2) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 25) : BOOL
82 : eq(74, 28) : BOOL
83 : ite(82, 30, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 24, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 19, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 172719073 ] -> true, [ 172719074; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46717Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 204 { 0xcc -52 } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 219 { 0xdb -37 } : BV:8
14 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
15 : eq(8, 14) : BOOL
16 : 236 { 0xec -20 } : BV:8
17 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
18 : eq(8, 17) : BOOL
19 : 254 { 0xfe -2 } : BV:8
20 : eq(8, 2) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : eq(8, 22) : BOOL
24 : 239 { 0xef -17 } : BV:8
25 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
26 : eq(8, 25) : BOOL
27 : 247 { 0xf7 -9 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : ite(9, 10, 38) : BV:8
40 : bvadd(28, 6, 7) : BV:32
41 : eq(40, 4) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 2) : BOOL
46 : eq(40, 22) : BOOL
47 : eq(40, 25) : BOOL
48 : eq(40, 28) : BOOL
49 : ite(48, 30, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 24, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : ite(44, 19, 52) : BV:8
54 : ite(43, 16, 53) : BV:8
55 : ite(42, 13, 54) : BV:8
56 : ite(41, 10, 55) : BV:8
57 : bvadd(11, 6, 7) : BV:32
58 : eq(57, 4) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 2) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 25) : BOOL
65 : eq(57, 28) : BOOL
66 : ite(65, 30, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 24, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 19, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 4) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 2) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 25) : BOOL
82 : eq(74, 28) : BOOL
83 : ite(82, 30, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 24, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 19, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 172719073 ] -> true, [ 172719074; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46721Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4026464236 { 0xeffef7ec -268503060 -1.99194097e96 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 204 { 0xcc -52 } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 219 { 0xdb -37 } : BV:8
14 : 268435452 { 0xffffffc +1.99999952e160 } : BV:32
15 : eq(8, 14) : BOOL
16 : 236 { 0xec -20 } : BV:8
17 : 268435454 { 0xffffffe +1.99999976e160 } : BV:32
18 : eq(8, 17) : BOOL
19 : 254 { 0xfe -2 } : BV:8
20 : eq(8, 2) : BOOL
21 : 248 { 0xf8 -8 } : BV:8
22 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
23 : eq(8, 22) : BOOL
24 : 239 { 0xef -17 } : BV:8
25 : 268435453 { 0xffffffd +1.99999964e160 } : BV:32
26 : eq(8, 25) : BOOL
27 : 247 { 0xf7 -9 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(8, 28) : BOOL
30 : 251 { 0xfb -5 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : ite(9, 10, 38) : BV:8
40 : bvadd(28, 6, 7) : BV:32
41 : eq(40, 4) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 2) : BOOL
46 : eq(40, 22) : BOOL
47 : eq(40, 25) : BOOL
48 : eq(40, 28) : BOOL
49 : ite(48, 30, 31) : BV:8
50 : ite(47, 27, 49) : BV:8
51 : ite(46, 24, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : ite(44, 19, 52) : BV:8
54 : ite(43, 16, 53) : BV:8
55 : ite(42, 13, 54) : BV:8
56 : ite(41, 10, 55) : BV:8
57 : bvadd(11, 6, 7) : BV:32
58 : eq(57, 4) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 2) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 25) : BOOL
65 : eq(57, 28) : BOOL
66 : ite(65, 30, 31) : BV:8
67 : ite(64, 27, 66) : BV:8
68 : ite(63, 24, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 19, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 4) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 2) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 25) : BOOL
82 : eq(74, 28) : BOOL
83 : ite(82, 30, 31) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 24, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 19, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(39, 56, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
643226040
=counter_example_end
=global nodece 66 num_edges_traversed 1
=global nodece 66 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3v487.ce4730.num_edges_traversed0
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce4730 d061b04ce2f8f284f9db3d055aa5db
=input.spec-%var-x-1
1 : Lambda48515Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48516Var : BV:32
18 : Lambda48517Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
28 : bvule(27, 17) : BOOL
29 : bvule(17, 10) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 17) : BOOL
32 : bvule(17, 8) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 8, 8) : BV:32
35 : ite(30, 27, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda48518Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 40 { 0x28 } : BV:8
73 : 16 { 0x10 +1.190e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 157 { 0x9d -99 } : BV:8
76 : 18 { 0x12 +1.214e129 } : BV:32
77 : eq(70, 76) : BOOL
78 : 133 { 0x85 -123 } : BV:8
79 : eq(70, 42) : BOOL
80 : 72 { 0x48 } : BV:8
81 : eq(70, 66) : BOOL
82 : 194 { 0xc2 -62 } : BV:8
83 : 17 { 0x11 +1.202e129 } : BV:32
84 : eq(70, 83) : BOOL
85 : 129 { 0x81 -127 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(70, 86) : BOOL
88 : 10 { 0xa } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(77, 78, 93) : BV:8
95 : ite(74, 75, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(46, 69) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 73) : BOOL
100 : eq(97, 76) : BOOL
101 : eq(97, 42) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 78, 108) : BV:8
110 : ite(99, 75, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(42, 69) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 73) : BOOL
115 : eq(112, 76) : BOOL
116 : eq(112, 42) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 78, 123) : BV:8
125 : ite(114, 75, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(69, 2) : BOOL
128 : eq(69, 73) : BOOL
129 : eq(69, 76) : BOOL
130 : eq(69, 42) : BOOL
131 : eq(69, 66) : BOOL
132 : eq(69, 83) : BOOL
133 : eq(69, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 78, 137) : BV:8
139 : ite(128, 75, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(66, 68, 141) : BV:32
143 : eq(142, 2) : BOOL
144 : eq(142, 73) : BOOL
145 : eq(142, 76) : BOOL
146 : eq(142, 42) : BOOL
147 : eq(142, 66) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 78, 153) : BV:8
155 : ite(144, 75, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(46, 68, 141) : BV:32
158 : eq(157, 2) : BOOL
159 : eq(157, 73) : BOOL
160 : eq(157, 76) : BOOL
161 : eq(157, 42) : BOOL
162 : eq(157, 66) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 78, 168) : BV:8
170 : ite(159, 75, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(42, 68, 141) : BV:32
173 : eq(172, 2) : BOOL
174 : eq(172, 73) : BOOL
175 : eq(172, 76) : BOOL
176 : eq(172, 42) : BOOL
177 : eq(172, 66) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 78, 183) : BV:8
185 : ite(174, 75, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(68, 141) : BV:32
188 : eq(187, 2) : BOOL
189 : eq(187, 73) : BOOL
190 : eq(187, 76) : BOOL
191 : eq(187, 42) : BOOL
192 : eq(187, 66) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 78, 198) : BV:8
200 : ite(189, 75, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(65, 2, 202) : BV:32
204 : ite(63, 2, 203) : BV:32
205 : lambda(60, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(59, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda48528Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48529Var : BV:32
18 : Lambda48530Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
28 : bvule(27, 17) : BOOL
29 : bvule(17, 10) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 17) : BOOL
32 : bvule(17, 8) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 8, 8) : BV:32
35 : ite(30, 27, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda48531Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 25) : BOOL
67 : and(31, 29) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : or(83, 84) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 40 { 0x28 } : BV:8
95 : 16 { 0x10 +1.190e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 157 { 0x9d -99 } : BV:8
98 : 18 { 0x12 +1.214e129 } : BV:32
99 : eq(92, 98) : BOOL
100 : 133 { 0x85 -123 } : BV:8
101 : eq(92, 42) : BOOL
102 : 72 { 0x48 } : BV:8
103 : eq(92, 88) : BOOL
104 : 194 { 0xc2 -62 } : BV:8
105 : 17 { 0x11 +1.202e129 } : BV:32
106 : eq(92, 105) : BOOL
107 : 129 { 0x81 -127 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(92, 108) : BOOL
110 : 10 { 0xa } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(99, 100, 115) : BV:8
117 : ite(96, 97, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(46, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 95) : BOOL
122 : eq(119, 98) : BOOL
123 : eq(119, 42) : BOOL
124 : eq(119, 88) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 100, 130) : BV:8
132 : ite(121, 97, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(42, 91) : BV:32
135 : eq(134, 2) : BOOL
136 : eq(134, 95) : BOOL
137 : eq(134, 98) : BOOL
138 : eq(134, 42) : BOOL
139 : eq(134, 88) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 100, 145) : BV:8
147 : ite(136, 97, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(91, 2) : BOOL
150 : eq(91, 95) : BOOL
151 : eq(91, 98) : BOOL
152 : eq(91, 42) : BOOL
153 : eq(91, 88) : BOOL
154 : eq(91, 105) : BOOL
155 : eq(91, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 100, 159) : BV:8
161 : ite(150, 97, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(88, 90, 163) : BV:32
165 : eq(164, 2) : BOOL
166 : eq(164, 95) : BOOL
167 : eq(164, 98) : BOOL
168 : eq(164, 42) : BOOL
169 : eq(164, 88) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 100, 175) : BV:8
177 : ite(166, 97, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(46, 90, 163) : BV:32
180 : eq(179, 2) : BOOL
181 : eq(179, 95) : BOOL
182 : eq(179, 98) : BOOL
183 : eq(179, 42) : BOOL
184 : eq(179, 88) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 100, 190) : BV:8
192 : ite(181, 97, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(42, 90, 163) : BV:32
195 : eq(194, 2) : BOOL
196 : eq(194, 95) : BOOL
197 : eq(194, 98) : BOOL
198 : eq(194, 42) : BOOL
199 : eq(194, 88) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 100, 205) : BV:8
207 : ite(196, 97, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(90, 163) : BV:32
210 : eq(209, 2) : BOOL
211 : eq(209, 95) : BOOL
212 : eq(209, 98) : BOOL
213 : eq(209, 42) : BOOL
214 : eq(209, 88) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 100, 220) : BV:8
222 : ite(211, 97, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(65, 2, 224) : BV:32
226 : ite(63, 2, 225) : BV:32
227 : ite(87, 224, 226) : BV:32
228 : ite(65, 2, 227) : BV:32
229 : ite(63, 2, 228) : BV:32
230 : lambda(60, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(59, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 40, [ 1; 1 ] -> 72, [ 2; 2 ] -> 0, [ 3; 3 ] -> 194, [ 4; 15 ] -> 0, [ 16; 16 ] -> 157, [ 17; 17 ] -> 129, [ 18; 18 ] -> 133, [ 19; 19 ] -> 10, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 2396151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2396152; 2396155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2396156; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2396155 { 0x248ffb +1.28564393e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda48445Var : BV:32
2 : Lambda48446Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 3) : BOOL
16 : 40 { 0x28 } : BV:8
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(14, 17) : BOOL
19 : 157 { 0x9d -99 } : BV:8
20 : 18 { 0x12 +1.214e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 133 { 0x85 -123 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 72 { 0x48 } : BV:8
26 : eq(14, 10) : BOOL
27 : 194 { 0xc2 -62 } : BV:8
28 : 17 { 0x11 +1.202e129 } : BV:32
29 : eq(14, 28) : BOOL
30 : 129 { 0x81 -127 } : BV:8
31 : 19 { 0x13 +1.226e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 10 { 0xa } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13) : BV:32
44 : eq(43, 3) : BOOL
45 : eq(43, 17) : BOOL
46 : eq(43, 20) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 10) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 25, 53) : BV:8
55 : ite(46, 22, 54) : BV:8
56 : ite(45, 19, 55) : BV:8
57 : ite(44, 16, 56) : BV:8
58 : bvadd(23, 13) : BV:32
59 : eq(58, 3) : BOOL
60 : eq(58, 17) : BOOL
61 : eq(58, 20) : BOOL
62 : eq(58, 23) : BOOL
63 : eq(58, 10) : BOOL
64 : eq(58, 28) : BOOL
65 : eq(58, 31) : BOOL
66 : ite(65, 33, 34) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 25, 68) : BV:8
70 : ite(61, 22, 69) : BV:8
71 : ite(60, 19, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : eq(13, 3) : BOOL
74 : eq(13, 17) : BOOL
75 : eq(13, 20) : BOOL
76 : eq(13, 23) : BOOL
77 : eq(13, 10) : BOOL
78 : eq(13, 28) : BOOL
79 : eq(13, 31) : BOOL
80 : ite(79, 33, 34) : BV:8
81 : ite(78, 30, 80) : BV:8
82 : ite(77, 27, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 22, 83) : BV:8
85 : ite(74, 19, 84) : BV:8
86 : ite(73, 16, 85) : BV:8
87 : bvconcat(41, 57, 72, 86) : BV:32
88 : bvadd(10, 12, 87) : BV:32
89 : eq(88, 3) : BOOL
90 : eq(88, 17) : BOOL
91 : eq(88, 20) : BOOL
92 : eq(88, 23) : BOOL
93 : eq(88, 10) : BOOL
94 : eq(88, 28) : BOOL
95 : eq(88, 31) : BOOL
96 : ite(95, 33, 34) : BV:8
97 : ite(94, 30, 96) : BV:8
98 : ite(93, 27, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 22, 99) : BV:8
101 : ite(90, 19, 100) : BV:8
102 : ite(89, 16, 101) : BV:8
103 : bvadd(42, 12, 87) : BV:32
104 : eq(103, 3) : BOOL
105 : eq(103, 17) : BOOL
106 : eq(103, 20) : BOOL
107 : eq(103, 23) : BOOL
108 : eq(103, 10) : BOOL
109 : eq(103, 28) : BOOL
110 : eq(103, 31) : BOOL
111 : ite(110, 33, 34) : BV:8
112 : ite(109, 30, 111) : BV:8
113 : ite(108, 27, 112) : BV:8
114 : ite(107, 25, 113) : BV:8
115 : ite(106, 22, 114) : BV:8
116 : ite(105, 19, 115) : BV:8
117 : ite(104, 16, 116) : BV:8
118 : bvadd(23, 12, 87) : BV:32
119 : eq(118, 3) : BOOL
120 : eq(118, 17) : BOOL
121 : eq(118, 20) : BOOL
122 : eq(118, 23) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 28) : BOOL
125 : eq(118, 31) : BOOL
126 : ite(125, 33, 34) : BV:8
127 : ite(124, 30, 126) : BV:8
128 : ite(123, 27, 127) : BV:8
129 : ite(122, 25, 128) : BV:8
130 : ite(121, 22, 129) : BV:8
131 : ite(120, 19, 130) : BV:8
132 : ite(119, 16, 131) : BV:8
133 : bvadd(12, 87) : BV:32
134 : eq(133, 3) : BOOL
135 : eq(133, 17) : BOOL
136 : eq(133, 20) : BOOL
137 : eq(133, 23) : BOOL
138 : eq(133, 10) : BOOL
139 : eq(133, 28) : BOOL
140 : eq(133, 31) : BOOL
141 : ite(140, 33, 34) : BV:8
142 : ite(139, 30, 141) : BV:8
143 : ite(138, 27, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 19, 145) : BV:8
147 : ite(134, 16, 146) : BV:8
148 : bvconcat(102, 117, 132, 147) : BV:32
149 : ite(9, 3, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda48447Var : BV:32
2 : Lambda48448Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : bvule(3, 1) : BOOL
11 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(7, 1) : BOOL
27 : and(26, 12) : BOOL
28 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
29 : bvule(28, 1) : BOOL
30 : and(29, 18) : BOOL
31 : bvule(1, 15) : BOOL
32 : and(16, 31) : BOOL
33 : ite(32, 15, 15) : BV:32
34 : ite(30, 28, 33) : BV:32
35 : ite(27, 7, 34) : BV:32
36 : ite(25, 3, 35) : BV:32
37 : eq(36, 7) : BOOL
38 : bvule(3, 2) : BOOL
39 : bvule(2, 3) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 3, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : or(53, 55) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 3) : BOOL
65 : 40 { 0x28 } : BV:8
66 : 16 { 0x10 +1.190e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 157 { 0x9d -99 } : BV:8
69 : 18 { 0x12 +1.214e129 } : BV:32
70 : eq(63, 69) : BOOL
71 : 133 { 0x85 -123 } : BV:8
72 : eq(63, 41) : BOOL
73 : 72 { 0x48 } : BV:8
74 : eq(63, 59) : BOOL
75 : 194 { 0xc2 -62 } : BV:8
76 : 17 { 0x11 +1.202e129 } : BV:32
77 : eq(63, 76) : BOOL
78 : 129 { 0x81 -127 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(63, 79) : BOOL
81 : 10 { 0xa } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(45, 62) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 66) : BOOL
93 : eq(90, 69) : BOOL
94 : eq(90, 41) : BOOL
95 : eq(90, 59) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 71, 101) : BV:8
103 : ite(92, 68, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(41, 62) : BV:32
106 : eq(105, 3) : BOOL
107 : eq(105, 66) : BOOL
108 : eq(105, 69) : BOOL
109 : eq(105, 41) : BOOL
110 : eq(105, 59) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 71, 116) : BV:8
118 : ite(107, 68, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(62, 3) : BOOL
121 : eq(62, 66) : BOOL
122 : eq(62, 69) : BOOL
123 : eq(62, 41) : BOOL
124 : eq(62, 59) : BOOL
125 : eq(62, 76) : BOOL
126 : eq(62, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 71, 130) : BV:8
132 : ite(121, 68, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(59, 61, 134) : BV:32
136 : eq(135, 3) : BOOL
137 : eq(135, 66) : BOOL
138 : eq(135, 69) : BOOL
139 : eq(135, 41) : BOOL
140 : eq(135, 59) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 71, 146) : BV:8
148 : ite(137, 68, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(45, 61, 134) : BV:32
151 : eq(150, 3) : BOOL
152 : eq(150, 66) : BOOL
153 : eq(150, 69) : BOOL
154 : eq(150, 41) : BOOL
155 : eq(150, 59) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 71, 161) : BV:8
163 : ite(152, 68, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(41, 61, 134) : BV:32
166 : eq(165, 3) : BOOL
167 : eq(165, 66) : BOOL
168 : eq(165, 69) : BOOL
169 : eq(165, 41) : BOOL
170 : eq(165, 59) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 71, 176) : BV:8
178 : ite(167, 68, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(61, 134) : BV:32
181 : eq(180, 3) : BOOL
182 : eq(180, 66) : BOOL
183 : eq(180, 69) : BOOL
184 : eq(180, 41) : BOOL
185 : eq(180, 59) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 3, 195) : BV:32
197 : ite(6, 3, 196) : BV:32
198 : ite(58, 195, 197) : BV:32
199 : ite(9, 3, 198) : BV:32
200 : ite(6, 3, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda48452Var : BV:32
2 : Lambda48453Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
19 : bvule(18, 1) : BOOL
20 : bvule(1, 18) : BOOL
21 : and(19, 20) : BOOL
22 : ite(21, 18, 18) : BV:32
23 : ite(17, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 15) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda48459Var : BV:32
2 : Lambda48460Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
19 : bvule(18, 1) : BOOL
20 : bvule(1, 18) : BOOL
21 : and(19, 20) : BOOL
22 : ite(21, 18, 18) : BV:32
23 : ite(17, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 15) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2305666187
=counter_example_end
=global nodece 67 num_edges_traversed 0
=global nodece 67 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 68
=global nodece 68 nodece z3.ce4731.num_edges_traversed0
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce4731 a4e4e676cf6d0cb3ccd672839cf718b
=input.spec-%var-x-1
1 : Lambda48565Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48566Var : BV:32
18 : Lambda48567Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda48568Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : eq(78, 74) : BOOL
82 : 212 { 0xd4 -44 } : BV:8
83 : eq(78, 36) : BOOL
84 : 245 { 0xf5 -11 } : BV:8
85 : eq(78, 40) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda48578Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48579Var : BV:32
18 : Lambda48580Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda48581Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 168 { 0xa8 -88 } : BV:8
62 : eq(59, 55) : BOOL
63 : 212 { 0xd4 -44 } : BV:8
64 : eq(59, 36) : BOOL
65 : 245 { 0xf5 -11 } : BV:8
66 : eq(59, 40) : BOOL
67 : 180 { 0xb4 -76 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 245, [ 2; 2 ] -> 180, [ 3; 3 ] -> 212, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1093150351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1093150352; 1093150355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1093150356; 1515532167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1515532168; 1515532171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1515532172; 3443193451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3443193452; 3443193455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3443193456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.llvm-%n
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1515532171 { 0x5a552f8b +1.66551339e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1093150355 { 0x41282693 +1.31367719e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3443193455 { 0xcd3af66f -851773841 -1.46064555e27 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda48464Var : BV:32
2 : Lambda48465Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : eq(51, 47) : BOOL
55 : 212 { 0xd4 -44 } : BV:8
56 : eq(51, 32) : BOOL
57 : 245 { 0xf5 -11 } : BV:8
58 : eq(51, 36) : BOOL
59 : 180 { 0xb4 -76 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda48474Var : BV:32
2 : Lambda48475Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 168 { 0xa8 -88 } : BV:8
14 : eq(11, 7) : BOOL
15 : 212 { 0xd4 -44 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 245 { 0xf5 -11 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 180 { 0xb4 -76 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda48478Var : BV:32
2 : Lambda48479Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda48469Var : BV:32
2 : Lambda48470Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
14048260
=counter_example_end
=global nodece 68 num_edges_traversed 0
=global nodece 68 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 69
=global nodece 69 nodece z3v487.ce5003.num_edges_traversed2
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3v487.ce5003 ee92bf5e79aeb58e81dc99f8ba3867c
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 195 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 196; 199 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 200; 2287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2288; 2291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2292; 1140589075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140589076; 1140589079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1140589080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 196 { 0xc4 +1.2336e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2288 { 0x8f0 +1.27275e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1140589076 { 0x43fc0214 +1.96881341e8 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49498Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49499Var : BV:32
14 : lambda(13, 1) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : sum(9, 10, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sym_const(16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2288 { 0x8f0 +1.27275e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2291 { 0x8f3 +1.27310e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1140589076 { 0x43fc0214 +1.96881341e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1140589079 { 0x43fc0217 +1.96881377e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 196 { 0xc4 +1.2336e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 199 { 0xc7 +1.2372e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 69 num_edges_traversed 2
=global nodece 69 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 70
=global nodece 70 nodece z3.ce4985.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce4985 f9ee747b8e8f3fb61883935778816e6
=retaddr_const
1 : 1624585274 { 0x60d5343a +1.66565632e66 } : BV:32
=input.spec-%var-x-1
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3504525224 ] -> 0, [ 3504525225; 3504525225 ] -> 1, [ 3504525226; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2430791539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2430791540; 2430791543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2430791544; 3504525223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3504525224; 3504525227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3504525228; 3840593815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3840593816; 3840593819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3840593820; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2430791540 { 0x90e2ef74 -1864175756 -1.77293252e162 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3840593816 { 0xe4eacf98 -454373480 -1.83446025e74 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3504525224 { 0xd0e2cfa8 -790442072 -1.77196216e34 } : BV:32
=input.dst.llvm-%x
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49436Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49437Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
21 : eq(19, 20) : BOOL
22 : 1 { 0x1 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : bvadd(8, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : ite(30, 22, 23) : BV:8
32 : bvadd(17, 18) : BV:32
33 : eq(32, 20) : BOOL
34 : ite(33, 22, 23) : BV:8
35 : bvconcat(24, 28, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 20) : BOOL
38 : ite(37, 22, 23) : BV:8
39 : bvadd(25, 16, 35) : BV:32
40 : eq(39, 20) : BOOL
41 : ite(40, 22, 23) : BV:8
42 : bvadd(8, 16, 35) : BV:32
43 : eq(42, 20) : BOOL
44 : ite(43, 22, 23) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 20) : BOOL
47 : ite(46, 22, 23) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : sum(9, 10, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 311977812 { 0x12986754 +1.19065332e166 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1624585274 { 0x60d5343a +1.66565632e66 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3840593816 { 0xe4eacf98 -454373480 -1.83446025e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3840593819 { 0xe4eacf9b -454373477 -1.83446061e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3504525224 { 0xd0e2cfa8 -790442072 -1.77196216e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3504525227 { 0xd0e2cfab -790442069 -1.77196252e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2430791540 { 0x90e2ef74 -1864175756 -1.77293252e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2430791543 { 0x90e2ef77 -1864175753 -1.77293288e162 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda428Var : BV:32
2 : Lambda429Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3504525225 { 0xd0e2cfa9 -790442071 -1.77196228e34 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1914138126
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 71
=global nodece 71 nodece z3v487.ce4967.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce4967 751592aa2f7e98ab80c22f51bbe59df6
=retaddr_const
1 : 999901432 { 0x3b9948f8 +1.19753932e248 } : BV:32
=input.spec-%var-x-1
1 : Lambda536Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda537Var : BV:32
11 : Lambda538Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda539Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda536Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda537Var : BV:32
11 : Lambda538Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda539Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 259 ] -> 0, [ 260; 260 ] -> 8, [ 261; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 264; 4223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4224; 4227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4228; 4194307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194308; 4194311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49374Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49375Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : bvadd(8, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : ite(30, 22, 23) : BV:8
32 : bvadd(17, 18) : BV:32
33 : eq(32, 20) : BOOL
34 : ite(33, 22, 23) : BV:8
35 : bvconcat(24, 28, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 20) : BOOL
38 : ite(37, 22, 23) : BV:8
39 : bvadd(25, 16, 35) : BV:32
40 : eq(39, 20) : BOOL
41 : ite(40, 22, 23) : BV:8
42 : bvadd(8, 16, 35) : BV:32
43 : eq(42, 20) : BOOL
44 : ite(43, 22, 23) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 20) : BOOL
47 : ite(46, 22, 23) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : sum(9, 10, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1811889874 { 0x6bff3ed2 +1.99410462e88 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 999901432 { 0x3b9948f8 +1.19753932e248 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4227 { 0x1083 +1.50389e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194311 { 0x400007 +1.50000083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda437Var : BV:32
2 : Lambda438Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
327704606
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 72
=global nodece 72 nodece z3.ce4949.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3.ce4949 fc2bb7587a4b2d56926cf2a068baf37
=retaddr_const
1 : 471436968 { 0x1c198ea8 +1.19966602e185 } : BV:32
=input.spec-%var-x-1
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3398718947 ] -> 4, [ 3398718948; 3398718951 ] -> 0, [ 3398718952; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3335065055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3335065056; 3335065059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3335065060; 3398718947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3398718948; 3398718951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3398718952; 3403367135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3403367136; 3403367139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3403367140; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49312Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49313Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : bvadd(8, 17, 18) : BV:32
45 : eq(44, 20) : BOOL
46 : eq(44, 23) : BOOL
47 : eq(44, 25) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 22, 29) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 22, 50) : BV:8
52 : ite(45, 22, 51) : BV:8
53 : bvadd(17, 18) : BV:32
54 : eq(53, 20) : BOOL
55 : eq(53, 23) : BOOL
56 : eq(53, 25) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 22, 29) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 22, 59) : BV:8
61 : ite(54, 22, 60) : BV:8
62 : bvconcat(33, 43, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 20) : BOOL
65 : eq(63, 23) : BOOL
66 : eq(63, 25) : BOOL
67 : eq(63, 27) : BOOL
68 : ite(67, 22, 29) : BV:8
69 : ite(66, 22, 68) : BV:8
70 : ite(65, 22, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : bvadd(34, 16, 62) : BV:32
73 : eq(72, 20) : BOOL
74 : eq(72, 23) : BOOL
75 : eq(72, 25) : BOOL
76 : eq(72, 27) : BOOL
77 : ite(76, 22, 29) : BV:8
78 : ite(75, 22, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 22, 79) : BV:8
81 : bvadd(8, 16, 62) : BV:32
82 : eq(81, 20) : BOOL
83 : eq(81, 23) : BOOL
84 : eq(81, 25) : BOOL
85 : eq(81, 27) : BOOL
86 : ite(85, 22, 29) : BV:8
87 : ite(84, 22, 86) : BV:8
88 : ite(83, 22, 87) : BV:8
89 : ite(82, 22, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 20) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 25) : BOOL
94 : eq(90, 27) : BOOL
95 : ite(94, 22, 29) : BV:8
96 : ite(93, 22, 95) : BV:8
97 : ite(92, 22, 96) : BV:8
98 : ite(91, 22, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : sum(9, 10, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1948334767 { 0x74213aaf +1.25960338e105 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 471436968 { 0x1c198ea8 +1.19966602e185 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3335065059 { 0xc6c90de3 -959902237 -1.57073628e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3403367139 { 0xcadb42e3 -891600157 -1.71297872e22 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda651Var : BV:32
2 : Lambda652Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda653Var : BV:32
2 : Lambda654Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2125224397
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 73
=global nodece 73 nodece z3.ce4931.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3.ce4931 2e53b99615d0ad56227af023305d5b21
=retaddr_const
1 : 32215678 { 0x1eb927e +1.84040808e132 } : BV:32
=input.spec-%var-x-1
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2953120735 ] -> 0, [ 2953120736; 2953120736 ] -> 2, [ 2953120737; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 537985027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537985028; 537985031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 537985032; 2953120735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2953120736; 2953120739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2953120740; 3261267967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3261267968; 3261267971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3261267972; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 537985028 { 0x20110004 +1.13281297e193 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3261267968 { 0xc2630000 -1033699328 -1.77343750e5 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49250Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49251Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1545770477 { 0x5c2295ed +1.27020037e57 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 32215678 { 0x1eb927e +1.84040808e132 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 712131944 { 0x2a724568 +1.89274311e213 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 537985028 { 0x20110004 +1.13281297e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 537985031 { 0x20110007 +1.13281333e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3261267968 { 0xc2630000 -1033699328 -1.77343750e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3261267971 { 0xc2630003 -1033699325 -1.77343785e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2953120739 { 0xb0050be3 -1341846557 -1.3942525e225 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1202Var : BV:32
2 : Lambda1203Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1204Var : BV:32
2 : Lambda1205Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2953120736 { 0xb0050be0 -1341846560 -1.3942489e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1145670766
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 74
=global nodece 74 nodece z3v487.ce4913.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3v487.ce4913 ed4e1f832cd187e514ecc17a10b3dac2
=retaddr_const
1 : 1780039847 { 0x6a1940a7 +1.19728553e85 } : BV:32
=input.spec-%var-x-1
1 : Lambda1312Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1313Var : BV:32
11 : Lambda1314Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1315Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1312Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1313Var : BV:32
11 : Lambda1314Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1315Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 171550847 ] -> 0, [ 171550848; 171550848 ] -> 1, [ 171550849; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 171550847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171550848; 171550851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 171550852; 171944003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171944004; 171944007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 171944008; 310237215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 310237216; 310237219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 310237220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49188Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49189Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1997265069 { 0x770bd8ad +1.9254992e111 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1780039847 { 0x6a1940a7 +1.19728553e85 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 861628332 { 0x335b67ac +1.71410131e231 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 310237219 { 0x127dd823 +1.98315846e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 171944007 { 0xa3fa847 +1.49732291e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 171550851 { 0xa39a883 +1.45045506e149 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1213Var : BV:32
2 : Lambda1214Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1215Var : BV:32
2 : Lambda1216Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2347818374
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 75
=global nodece 75 nodece z3v487.ce4895.num_edges_traversed2
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(epsilon)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3v487.ce4895 55ba296b1e5d0f81125db322fc45d65
=retaddr_const
1 : 1087646517 { 0x40d42b35 +1.65756857e2 } : BV:32
=input.spec-%var-x-1
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2114179 ] -> 0, [ 2114180; 2114183 ] -> 255, [ 2114184; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2114179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2114180; 2114183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2114184; 571886851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 571886852; 571886855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 571886856; 807216671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807216672; 807216675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807216676; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda49126Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda49127Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 1) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : bvadd(8, 17, 1) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 26) : BOOL
48 : ite(47, 21, 28) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 1) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 26) : BOOL
57 : ite(56, 21, 28) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(32, 42, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 26) : BOOL
67 : ite(66, 21, 28) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(33, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 26) : BOOL
76 : ite(75, 21, 28) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(8, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 26) : BOOL
85 : ite(84, 21, 28) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 26) : BOOL
94 : ite(93, 21, 28) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : sum(9, 10, 100) : SUM[UNIT,MAP[BV:32 -> BV:32]]
102 : sym_const(101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1472875710 { 0x57ca4cbe +1.58046698e48 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1087646517 { 0x40d42b35 +1.65756857e2 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 470490015 { 0x1c0b1b9f +1.8678042e185 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807216675 { 0x301d2623 +1.22772634e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 571886855 { 0x22164d07 +1.17422568e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1656Var : BV:32
2 : Lambda1657Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1658Var : BV:32
2 : Lambda1659Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2883521815
=counter_example_end
=global nodece 75 num_edges_traversed 2
=global nodece 75 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 76
=global nodece 76 nodece z3v487.ce4817.num_edges_traversed2
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce4817 edc2a8def143b89be8b1278224291bec
=retaddr_const
1 : 349541265 { 0x14d59391 +1.66856586e170 } : BV:32
=input.spec-%var-x-1
1 : Lambda36020Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda36021Var : BV:32
17 : Lambda36022Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda36023Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36045Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda36046Var : BV:32
17 : Lambda36047Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda36048Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 35284407 { 0x21a65b7 +1.20622909e133 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : and(8, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(6, 7, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : ite(12, 13, 1) : BV:32
15 : unit : UNIT
16 : Lambda48884Var : BV:32
17 : lambda(16, 10) : FUNCTION[BV:32 -> BOOL]
18 : Lambda48885Var : BV:32
19 : lambda(18, 1) : FUNCTION[BV:32 -> BV:32]
20 : map(17, 19) : MAP[BV:32 -> BV:32]
21 : sum(14, 15, 20) : SUM[UNIT,MAP[BV:32 -> BV:32]]
22 : sym_const(21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 62254119 { 0x3b5ec27 +1.42126929e136 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 209796533 { 0xc813db5 +1.969564e154 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 349541265 { 0x14d59391 +1.66856586e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3559072110
=counter_example_end
=global nodece 76 num_edges_traversed 2
=global nodece 76 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3 expr point z3v487.ce3 done
=inductive-invariants point_set point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4 expr point z3.ce4 done
=inductive-invariants point_set point z3v487.ce100
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 done
=inductive-invariants point_set point z3.ce99
=inductive-invariants point_set point z3.ce99 expr point z3.ce99
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 done
=inductive-invariants point_set point z3v487.ce28
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 done
=inductive-invariants point_set point z3v487.ce52
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 done
=inductive-invariants point_set point z3v487.ce76
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 done
=inductive-invariants point_set point z3.ce27
=inductive-invariants point_set point z3.ce27 expr point z3.ce27
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 6 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 done
=inductive-invariants point_set point z3.ce51
=inductive-invariants point_set point z3.ce51 expr point z3.ce51
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 4 for input.dst.llvm-%m
67372036
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 6 for input.dst.llvm-%x
67372036
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 done
=inductive-invariants point_set point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce123 expr point z3.ce123 done
=inductive-invariants point_set point z3.ce267
=inductive-invariants point_set point z3.ce267 expr point z3.ce267
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 done
=inductive-invariants point_set point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 6 for input.dst.llvm-%x
2600433408
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 done
=inductive-invariants point_set point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 done
=inductive-invariants point_set point z3v487.ce291
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce291 expr point z3v487.ce291 done
=inductive-invariants point_set point z3.ce292
=inductive-invariants point_set point z3.ce292 expr point z3.ce292
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce292 expr point z3.ce292 done
=inductive-invariants point_set point z3v487.ce268
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 done
=inductive-invariants point_set point z3.ce75
=inductive-invariants point_set point z3.ce75 expr point z3.ce75
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 5 for input.dst.llvm-%n
4211211259
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 done
=inductive-invariants point_set point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 done
=inductive-invariants point_set point z3.ce195
=inductive-invariants point_set point z3.ce195 expr point z3.ce195
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 done
=inductive-invariants point_set point z3v487.ce196
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 done
=inductive-invariants point_set point z3v487.ce147
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 done
=inductive-invariants point_set point z3.ce148
=inductive-invariants point_set point z3.ce148 expr point z3.ce148
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 done
=inductive-invariants point_set point z3.ce172
=inductive-invariants point_set point z3.ce172 expr point z3.ce172
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 4 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 done
=inductive-invariants point_set point z3v487.ce171
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 4 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 done
=inductive-invariants point_set point z3.ce326
=inductive-invariants point_set point z3.ce326 expr point z3.ce326
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 4 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 done
=inductive-invariants point_set point z3v487.ce327
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 done
=inductive-invariants point_set point z3.ce219
=inductive-invariants point_set point z3.ce219 expr point z3.ce219
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 done
=inductive-invariants point_set point z3v487.ce220
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 done
=inductive-invariants point_set point z3v487.ce2009
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2009 expr point z3v487.ce2009 done
=inductive-invariants point_set point z3v487.ce4206
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 5 for input.dst.llvm-%n
3141396272
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 6 for input.dst.llvm-%x
33554432
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4206 expr point z3v487.ce4206 done
=inductive-invariants point_set point z3.ce4205
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 5 for input.dst.llvm-%n
710621152
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 40 for input.spec-%var-ret-0.L3%19%bbentry
16
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
16
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4205 expr point z3.ce4205 done
=inductive-invariants point_set point z3v487.ce1769
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1769 expr point z3v487.ce1769 done
=inductive-invariants point_set point z3v487.ce1849
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1849 expr point z3v487.ce1849 done
=inductive-invariants point_set point z3.ce1768
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 4 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1768 expr point z3.ce1768 done
=inductive-invariants point_set point z3.ce1808
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1808 expr point z3.ce1808 done
=inductive-invariants point_set point z3v487.ce1809
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1809 expr point z3v487.ce1809 done
=inductive-invariants point_set point z3.ce1848
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1848 expr point z3.ce1848 done
=inductive-invariants point_set point z3.ce1968
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1968 expr point z3.ce1968 done
=inductive-invariants point_set point z3v487.ce1889
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1889 expr point z3v487.ce1889 done
=inductive-invariants point_set point z3v487.ce1969
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1969 expr point z3v487.ce1969 done
=inductive-invariants point_set point z3.ce1928
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1928 expr point z3.ce1928 done
=inductive-invariants point_set point z3.ce1888
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1888 expr point z3.ce1888 done
=inductive-invariants point_set point z3.ce2008
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2008 expr point z3.ce2008 done
=inductive-invariants point_set point z3.ce2048
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2048 expr point z3.ce2048 done
=inductive-invariants point_set point z3v487.ce2128
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2128 expr point z3v487.ce2128 done
=inductive-invariants point_set point z3v487.ce1929
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1929 expr point z3v487.ce1929 done
=inductive-invariants point_set point z3v487.ce2088
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2088 expr point z3v487.ce2088 done
=inductive-invariants point_set point z3v487.ce2049
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2049 expr point z3v487.ce2049 done
=inductive-invariants point_set point z3v487.ce2168
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 done
=inductive-invariants point_set point z3.ce2089
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2089 expr point z3.ce2089 done
=inductive-invariants point_set point z3v487.ce2209
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2209 expr point z3v487.ce2209 done
=inductive-invariants point_set point z3.ce2129
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2129 expr point z3.ce2129 done
=inductive-invariants point_set point z3.ce2248
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2248 expr point z3.ce2248 done
=inductive-invariants point_set point z3.ce2169
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2169 expr point z3.ce2169 done
=inductive-invariants point_set point z3.ce2208
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2208 expr point z3.ce2208 done
=inductive-invariants point_set point z3v487.ce2249
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2249 expr point z3v487.ce2249 done
=inductive-invariants point_set point z3.ce3396
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 5 for input.dst.llvm-%n
2147483649
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 done
=inductive-invariants point_set point z3.ce3442
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 5 for input.dst.llvm-%n
33
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3442 expr point z3.ce3442 done
=inductive-invariants point_set point z3v487.ce3443
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 5 for input.dst.llvm-%n
6
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3443 expr point z3v487.ce3443 done
=inductive-invariants point_set point z3v487.ce3613
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 2 for input.spec-%var-i-0.L3%7%bbentry
3902146493
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 5 for input.dst.llvm-%n
4044554240
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3902146493
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3613 expr point z3v487.ce3613 done
=inductive-invariants point_set point z3.ce3473
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 5 for input.dst.llvm-%n
33
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
6
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3473 expr point z3.ce3473 done
=inductive-invariants point_set point z3v487.ce3542
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 5 for input.dst.llvm-%n
4294279024
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 done
=inductive-invariants point_set point z3.ce3496
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 2 for input.spec-%var-i-0.L3%7%bbentry
6
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 5 for input.dst.llvm-%n
33
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
7
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3496 expr point z3.ce3496 done
=inductive-invariants point_set point z3v487.ce3574
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 5 for input.dst.llvm-%n
4294279024
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3574 expr point z3v487.ce3574 done
=inductive-invariants point_set point z3.ce3614
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 2 for input.spec-%var-i-0.L3%7%bbentry
2214723618
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 5 for input.dst.llvm-%n
2717909058
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2214723618
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3614 expr point z3.ce3614 done
=inductive-invariants point_set point z3.ce3101
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3101 expr point z3.ce3101 done
=inductive-invariants point_set point z3v487.ce3111
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3111 expr point z3v487.ce3111 done
=inductive-invariants point_set point z3.ce3153
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3153 expr point z3.ce3153 done
=inductive-invariants point_set point z3.ce3163
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 5 for input.dst.llvm-%n
4211211259
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3163 expr point z3.ce3163 done
=inductive-invariants point_set point z3v487.ce3173
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3173 expr point z3v487.ce3173 done
=inductive-invariants point_set point z3v487.ce3317
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3317 expr point z3v487.ce3317 done
=inductive-invariants point_set point z3v487.ce3208
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3208 expr point z3v487.ce3208 done
=inductive-invariants point_set point z3v487.ce3343
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3343 expr point z3v487.ce3343 done
=inductive-invariants point_set point z3.ce3342
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 5 for input.dst.llvm-%n
2147483649
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3342 expr point z3.ce3342 done
=inductive-invariants point_set point z3.ce3373
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 5 for input.dst.llvm-%n
2147483649
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3373 expr point z3.ce3373 done
=inductive-invariants point_set point z3v487.ce3644
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 2 for input.spec-%var-i-0.L3%7%bbentry
3902146493
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 5 for input.dst.llvm-%n
4044554240
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3902146493
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
3902146494
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3644 expr point z3v487.ce3644 done
=inductive-invariants point_set point z3v487.ce3679
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 4 for input.dst.llvm-%m
16
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3679 expr point z3v487.ce3679 done
=inductive-invariants point_set point z3.ce3678
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3678 expr point z3.ce3678 done
=inductive-invariants point_set point z3v487.ce3728
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3728 expr point z3v487.ce3728 done
=inductive-invariants point_set point z3.ce3729
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3729 expr point z3.ce3729 done
=inductive-invariants point_set point z3v487.ce4023
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4023 expr point z3v487.ce4023 done
=inductive-invariants point_set point z3v487.ce3799
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 2 for input.spec-%var-i-0.L3%7%bbentry
268435455
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 4 for input.dst.llvm-%m
256
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 5 for input.dst.llvm-%n
402193398
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
268435456
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3799 expr point z3v487.ce3799 done
=inductive-invariants point_set point z3v487.ce3937
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3937 expr point z3v487.ce3937 done
=inductive-invariants point_set point z3v487.ce3997
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3997 expr point z3v487.ce3997 done
=inductive-invariants point_set point z3.ce4067
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 done
=inductive-invariants point_set point z3.ce4098
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4098 expr point z3.ce4098 done
=inductive-invariants point_set point z3v487.ce4155
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 6 for input.dst.llvm-%x
2147483660
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 40 for input.spec-%var-ret-0.L3%19%bbentry
75498016
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
75498016
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4155 expr point z3v487.ce4155 done
=inductive-invariants point_set point z3.ce4241
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870912
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 3 for input.spec-%var-ret-1.L3%7%bbentry
16
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 5 for input.dst.llvm-%n
710621152
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 40 for input.spec-%var-ret-0.L3%19%bbentry
16
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870913
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
16
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4241 expr point z3.ce4241 done
=inductive-invariants point_set point z3.ce4299
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870913
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 3 for input.spec-%var-ret-1.L3%7%bbentry
16
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 5 for input.dst.llvm-%n
710621152
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870913
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4299 expr point z3.ce4299 done
=inductive-invariants point_set point z3v487.ce4371
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 5 for input.dst.llvm-%n
3141396272
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 6 for input.dst.llvm-%x
33554432
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4371 expr point z3v487.ce4371 done
=inductive-invariants point_set point z3.ce4320
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870913
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 3 for input.spec-%var-ret-1.L3%7%bbentry
16
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 5 for input.dst.llvm-%n
710621152
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870913
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 40 for input.spec-%var-ret-0.L3%19%bbentry
16
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870914
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
16
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4320 expr point z3.ce4320 done
=inductive-invariants point_set point z3.ce4409
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1757175280
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 5 for input.dst.llvm-%n
2795711176
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 6 for input.dst.llvm-%x
671088644
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4409 expr point z3.ce4409 done
=inductive-invariants point_set point z3v487.ce4410
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 3 for input.spec-%var-ret-1.L3%7%bbentry
366850968
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 4 for input.dst.llvm-%m
16384
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 5 for input.dst.llvm-%n
2315255808
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 6 for input.dst.llvm-%x
2818572288
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4410 expr point z3v487.ce4410 done
=inductive-invariants point_set point z3.ce4447
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 5 for input.dst.llvm-%n
2795711176
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 6 for input.dst.llvm-%x
671088644
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4447 expr point z3.ce4447 done
=inductive-invariants point_set point z3v487.ce4511
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 2 for input.spec-%var-i-0.L3%7%bbentry
1351
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 3 for input.spec-%var-ret-1.L3%7%bbentry
2109309475
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 5 for input.dst.llvm-%n
2147484234
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 6 for input.dst.llvm-%x
3670752
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1351
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1352
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4511 expr point z3v487.ce4511 done
=inductive-invariants point_set point z3.ce4510
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 2 for input.spec-%var-i-0.L3%7%bbentry
1313055
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 3 for input.spec-%var-ret-1.L3%7%bbentry
390772526
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 5 for input.dst.llvm-%n
269489224
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 6 for input.dst.llvm-%x
330292096
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1313055
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1313056
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4510 expr point z3.ce4510 done
=inductive-invariants point_set point z3.ce4586
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 2 for input.spec-%var-i-0.L3%7%bbentry
268435455
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1226499299
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 4 for input.dst.llvm-%m
2147483649
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 6 for input.dst.llvm-%x
49152
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870913
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
268435456
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870913
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4586 expr point z3.ce4586 done
=inductive-invariants point_set point z3v487.ce4587
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 2 for input.spec-%var-i-0.L3%7%bbentry
268435455
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 3 for input.spec-%var-ret-1.L3%7%bbentry
2050783000
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 4 for input.dst.llvm-%m
536870914
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 6 for input.dst.llvm-%x
134217728
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870913
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
268435456
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870913
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4587 expr point z3v487.ce4587 done
=inductive-invariants point_set point z3.ce4693
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 2 for input.spec-%var-i-0.L3%7%bbentry
2214592512
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 3 for input.spec-%var-ret-1.L3%7%bbentry
15
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 4 for input.dst.llvm-%m
172719074
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 5 for input.dst.llvm-%n
2474310620
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2214592512
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 40 for input.spec-%var-ret-0.L3%19%bbentry
15
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2214592513
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
15
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4693 expr point z3.ce4693 done
=inductive-invariants point_set point z3v487.ce4663
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 3 for input.spec-%var-ret-1.L3%7%bbentry
15
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 4 for input.dst.llvm-%m
335839840
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 5 for input.dst.llvm-%n
3732668416
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
15
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4663 expr point z3v487.ce4663 done
=inductive-invariants point_set point z3.ce4662
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 2 for input.spec-%var-i-0.L3%7%bbentry
2214592512
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 3 for input.spec-%var-ret-1.L3%7%bbentry
15
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 4 for input.dst.llvm-%m
172719074
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 5 for input.dst.llvm-%n
2474310620
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
15
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2214592512
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4662 expr point z3.ce4662 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce100
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce99
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce28
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce52
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce75
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce4299
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce4662
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=11; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce3442
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3613
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce3111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce3342
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3728
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce52
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce123
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce75
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce147
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce171
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce3442
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce3613
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce3111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3.ce3342
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce3728
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3v487.ce52
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3.ce75
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce147
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce3111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name local-sizes-are-equal
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3v487.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 12 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.44
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.41
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-0.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce123
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce75
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce171
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce326
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce4206
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce4205
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce1769
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce1768
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce1808
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce1848
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce3173
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce3799
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3v487.ce3937
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3v487.ce4155
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 15: z3.ce4241
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 16: z3v487.ce4371
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 17: z3.ce4409
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 18: z3.ce4447
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=12; number of visited CEs=19; number of preds=6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 8->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
41
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->1; 42->0; 43->0; 44->0; 
42
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 
44
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->4294967295; 41->0; 42->0; 43->0; 44->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce4206
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3937
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce4510
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce3396
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce3542
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce3173
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce3373
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3.ce3678
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce123
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce75
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce1809
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce171
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce326
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce1888
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3.ce3396
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce3473
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3v487.ce3574
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 4: z3v487.ce3173
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 5: z3v487.ce3208
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce4206
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3v487.ce3937
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce4510
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 45
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 49
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 53
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 57
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 61
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 1: z3.ce75
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 2: z3v487.ce171
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 3: z3.ce326
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 4: z3v487.ce3574
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 5: z3v487.ce3173
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 6: z3v487.ce3937
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 7: z3v487.ce3997
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 8: z3.ce4586
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 73
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 74
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini name local-sizes-are-equal
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-0.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-j-0.L3%19%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(7, 10) : BOOL
12 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
14 : map_get(12, 13) : SUM[UNIT,MAP[BV:32 -> BV:32]]
15 : sum_is(14, 8) : BOOL
16 : and(11, 15) : BOOL
17 : or(9, 16) : BOOL
18 : or(4, 17) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 6
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140468 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140469 : select(140378, 140379, 140468, 140380, 140364, 140365) : BV:32
=RhsExpr
140381 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140470 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140471 : select(140378, 140379, 140470, 140382, 140364, 140365) : BV:32
=RhsExpr
140383 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140472 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140473 : select(140378, 140379, 140472, 140384, 140364, 140365) : BV:32
=RhsExpr
140385 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140385 : input.dst.llvm-%x : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140391 : islangaligned(140385, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140345 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140349 : bvule(140276, 140345) : BOOL
140383 : input.dst.llvm-%n : BV:32
140996 : bvult(140345, 140383) : BOOL
140997 : and(140349, 140996) : BOOL
140998 : lambda(140345, 140997) : FUNCTION[BV:32 -> BOOL]
140346 : Lambda1Var : BV:32
140353 : bvule(140276, 140346) : BOOL
140381 : input.dst.llvm-%m : BV:32
140999 : bvult(140346, 140381) : BOOL
141018 : and(140353, 140999) : BOOL
141019 : lambda(140346, 141018) : FUNCTION[BV:32 -> BOOL]
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140995 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140361 : 4 { 0x4 +1.47e129 } : BV:32
140367 : bvmul(140346, 140361) : BV:32
140362 : bvmul(140345, 140361) : BV:32
140385 : input.dst.llvm-%x : BV:32
141039 : bvadd(140362, 140385) : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
141059 : select(140378, 140379, 140995, 141039, 140364, 140365) : BV:32
141060 : bvadd(140367, 141059) : BV:32
141061 : select(140378, 140379, 140995, 141060, 140364, 140365) : BV:32
141062 : lambda(140346, 141061) : FUNCTION[BV:32 -> BV:32]
141063 : map(141019, 141062) : MAP[BV:32 -> BV:32]
141064 : lambda(140345, 141063) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141065 : map(140998, 141064) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141066 : eq(140273, 141065) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
precond-mlasserts
=LhsExpr
140904 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140905 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140906 : bvule(140904, 140905) : BOOL
140361 : 4 { 0x4 +1.47e129 } : BV:32
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140907 : bvadd(140361, 140415) : BV:32
140908 : bvadd(140904, 140907) : BV:32
140909 : eq(140905, 140908) : BOOL
140910 : and(140906, 140909) : BOOL
140911 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140912 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140913 : bvule(140911, 140912) : BOOL
140914 : and(140910, 140913) : BOOL
140915 : bvadd(140911, 140907) : BV:32
140916 : eq(140912, 140915) : BOOL
140917 : and(140914, 140916) : BOOL
140918 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
140919 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
140920 : bvule(140918, 140919) : BOOL
140921 : and(140917, 140920) : BOOL
140922 : bvadd(140918, 140907) : BV:32
140923 : eq(140919, 140922) : BOOL
140924 : and(140921, 140923) : BOOL
140925 : bvuge(140904, 140911) : BOOL
140926 : bvule(140904, 140912) : BOOL
140927 : and(140925, 140926) : BOOL
140929 : bvuge(140905, 140911) : BOOL
140930 : bvule(140905, 140912) : BOOL
140931 : and(140929, 140930) : BOOL
140932 : not(140931) : BOOL
140933 : andnot1(140927, 140932) : BOOL
140928 : bvuge(140911, 140904) : BOOL
140934 : bvule(140911, 140905) : BOOL
140935 : and(140928, 140934) : BOOL
140937 : bvuge(140912, 140904) : BOOL
140938 : bvule(140912, 140905) : BOOL
140939 : and(140937, 140938) : BOOL
140940 : not(140939) : BOOL
140941 : andnot1(140935, 140940) : BOOL
140936 : and(140933, 140941) : BOOL
140942 : bvuge(140904, 140918) : BOOL
140943 : bvule(140904, 140919) : BOOL
140944 : and(140942, 140943) : BOOL
140946 : bvuge(140905, 140918) : BOOL
140947 : bvule(140905, 140919) : BOOL
140948 : and(140946, 140947) : BOOL
140949 : not(140948) : BOOL
140950 : andnot1(140944, 140949) : BOOL
140953 : and(140936, 140950) : BOOL
140945 : bvuge(140918, 140904) : BOOL
140951 : bvule(140918, 140905) : BOOL
140952 : and(140945, 140951) : BOOL
140954 : bvuge(140919, 140904) : BOOL
140955 : bvule(140919, 140905) : BOOL
140956 : and(140954, 140955) : BOOL
140957 : not(140956) : BOOL
140958 : andnot1(140952, 140957) : BOOL
140959 : and(140953, 140958) : BOOL
140960 : bvuge(140911, 140918) : BOOL
140961 : bvule(140911, 140919) : BOOL
140962 : and(140960, 140961) : BOOL
140964 : bvuge(140912, 140918) : BOOL
140965 : bvule(140912, 140919) : BOOL
140966 : and(140964, 140965) : BOOL
140967 : not(140966) : BOOL
140968 : andnot1(140962, 140967) : BOOL
140971 : and(140959, 140968) : BOOL
140963 : bvuge(140918, 140911) : BOOL
140969 : bvule(140918, 140912) : BOOL
140970 : and(140963, 140969) : BOOL
140972 : bvuge(140919, 140911) : BOOL
140973 : bvule(140919, 140912) : BOOL
140974 : and(140972, 140973) : BOOL
140975 : not(140974) : BOOL
140976 : andnot1(140970, 140975) : BOOL
140977 : and(140971, 140976) : BOOL
140978 : and(140924, 140977) : BOOL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140979 : 3 { 0x3 +1.35e129 } : BV:32
140980 : bvand(140382, 140979) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140981 : eq(140980, 140276) : BOOL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140982 : bvand(140384, 140979) : BV:32
140983 : eq(140982, 140276) : BOOL
140984 : and(140981, 140983) : BOOL
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140985 : bvand(140380, 140979) : BV:32
140986 : eq(140985, 140276) : BOOL
140987 : and(140984, 140986) : BOOL
140988 : and(140978, 140987) : BOOL
140989 : eq(140382, 140904) : BOOL
140990 : eq(140384, 140911) : BOOL
140991 : and(140989, 140990) : BOOL
140992 : eq(140380, 140918) : BOOL
140993 : and(140991, 140992) : BOOL
140994 : and(140988, 140993) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140381 : input.dst.llvm-%m : BV:32
140615 : bvult(140614, 140381) : BOOL
140507 : 4 { 0x4 +1.0e1025 } : BV:64
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140409 : 32 { 0x20 +1.0e1025 } : INT
140633 : bvsign_ext(140612, 140409) : BV:64
140752 : bvmul(140507, 140633) : BV:64
140413 : 63 { 0x3f +1.0e1025 } : INT
140753 : bvextract(140752, 140413, 140409) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140632 : bvslt(140612, 140276) : BOOL
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140766 : ite(140632, 140415, 140276) : BV:32
140768 : eq(140753, 140766) : BOOL
140364 : 4 { 0x4 +1.0e1025 } : INT
140770 : isindexforsize(140768, 140364) : BOOL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140772 : isgepoffset(140702, 140699) : BOOL
140776 : islangaligned(140702, 140364) : BOOL
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140778 : islangaligned(140708, 140364) : BOOL
140781 : and(140776, 140778) : BOOL
140648 : bvsign_ext(140614, 140409) : BV:64
140794 : bvmul(140507, 140648) : BV:64
140795 : bvextract(140794, 140413, 140409) : BV:32
140647 : bvslt(140614, 140276) : BOOL
140808 : ite(140647, 140415, 140276) : BV:32
140810 : eq(140795, 140808) : BOOL
140812 : isindexforsize(140810, 140364) : BOOL
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140814 : isgepoffset(140713, 140711) : BOOL
140819 : and(140770, 140772, 140776, 140781, 140812, 140814) : BOOL
140734 : islangaligned(140713, 140364) : BOOL
204346 : and(140819, 140734) : BOOL
140275 : 1 { 0x1 } : BOOL
205266 : eq(204346, 140275) : BOOL
205308 : implies(140615, 205266) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
