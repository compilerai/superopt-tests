=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 31 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 32 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%8%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%7%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 37 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-13.E0%0%d
1 : input.spec-%tmpvar-13.E0%0%d : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-18.E0%0%d
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L3%7%bbentry
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L3%7%bbentry
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=Loc 47 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%tmpvar-11.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%tmpvar-5.L3%7%bbentry : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%tmpvar-6.L3%7%bbentry : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%19%bbentry
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 57 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%19%bbentry
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%19%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%tmpvar-3.L3%19%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%var-x_ij-0.L3%19%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
35, 36, 43, 
=live locs at L3%8%d
33, 35, 36, 43, 
=live locs at L3%9%bbentry
43, 
=live locs at L3%11%bbentry
33, 35, 36, 43, 
=live locs at L3%19%bbentry
36, 37, 38, 51, 52, 
=live locs at L3%20%d
34, 36, 37, 38, 51, 52, 
=live locs at L3%21%bbentry
36, 51, 52, 
=live locs at L3%23%bbentry
34, 36, 37, 38, 51, 52, 
=live locs at E0%0%d
42[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 31, 32
=loc definedness at L3%7%bbentry
1, 31, 32, 35, 36, 43, 45, 46, 47
=loc definedness at L3%8%d
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%9%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%11%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%19%bbentry
1, 31, 32, 33, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%20%d
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%21%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%23%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at E0%0%d
1, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
35, 36
=branch affecting variable locs at L3%8%d
33, 35, 36
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
33, 35, 36
=branch affecting variable locs at L3%19%bbentry
36, 37, 38, 51
=branch affecting variable locs at L3%20%d
34, 36, 37, 38, 51
=branch affecting variable locs at L3%21%bbentry
36, 51
=branch affecting variable locs at L3%23%bbentry
36, 37, 38, 51
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 36 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 45 {input.spec-%tmpvar-15.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 46 {input.spec-%tmpvar-16.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 33 {input.spec-%tmpvar-7.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 39 {input.spec-%tmpvar-13.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 40 {input.spec-%tmpvar-14.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 41 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 42 {input.spec-%tmpvar-18.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 38 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 51 {input.spec-%tmpvar-9.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 54 {input.spec-%tmpvar-10.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 55 {input.spec-%tmpvar-8.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 56 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 34 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%tmpvar-11.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 49 {input.spec-%tmpvar-5.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 50 {input.spec-%tmpvar-6.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 53 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 58 {input.spec-%tmpvar-1.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 59 {input.spec-%tmpvar-2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 60 {input.spec-%tmpvar-3.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-x_ij-0.L3%19%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 36
=loc_expr
140525 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 45
=loc_expr
140553 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140554 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140559 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140560 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 58
=loc_expr
140562 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 45 expr
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=loc 45 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=loc 46 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=loc 55 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 58 expr
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=loc 58 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 45 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end7%1%d Lfor.inc5%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end7%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc5%1%d
Lfor.body3%1%d => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc5%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end7%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end7%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc5%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end7%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc5%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36))*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36)))*((((  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36)*(((  %add = add i32 %ret.1, %1, !dbg !38*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39))*(((((  %inc = add i32 %j.0, 1, !dbg !40*  br label %for.cond1, !dbg !41, !llvm.loop !42)*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !41, !llvm.loop !42))*  br label %for.cond1, !dbg !41, !llvm.loop !42)*(  br label %for.cond1, !dbg !41, !llvm.loop !42*  br label %for.cond1, !dbg !41, !llvm.loop !42)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: Lfor.inc5%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc6 = add i32 %i.0, 1, !dbg !45*  br label %for.cond, !dbg !46, !llvm.loop !47)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !46, !llvm.loop !47))*  br label %for.cond, !dbg !46, !llvm.loop !47)*(  br label %for.cond, !dbg !46, !llvm.loop !47*  br label %for.cond, !dbg !46, !llvm.loop !47))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end7%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !49
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100046 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100047 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100048 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100050 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100051 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100052 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100067 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055, 100059, 
=live locs at Lfor.body3%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100059, 
=live locs at Lfor.cond%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100057, 100059, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100058, 100059, 100060, 100067, 
=live locs at Lfor.end7%1%d
100050, 100055[f], 
=live locs at Lfor.inc5%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100067, 
=live locs at E0%0%d
100050, 100055[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.body3%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.end7%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.inc5%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at E0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100059, 100061, 100062, 100063, 100085, 100086

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100059
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100059
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100057, 100059
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100058, 100059, 100060
=branch affecting variable locs at Lfor.end7%1%d

=branch affecting variable locs at Lfor.inc5%1%d
100006, 100012, 100059
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100068 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100069 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100071 {input.dst.llvm-%0.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100072 {input.dst.llvm-%1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100073 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100074 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100075 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100076 {input.dst.llvm-%add.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100077 {input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100078 {input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100079 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100080 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100081 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100082 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100057 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100058 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100053 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100054 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100056 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100065 {input.dst.llvm-%inc6.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100066 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end7%1%d:
vacuous mls at Lfor.inc5%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end7%1%d:
non-vacuous mls at Lfor.inc5%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140383 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140381 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140385 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140459 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140460 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140462 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140464 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140466 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140390 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100043
=loc_expr
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100044
=loc_expr
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100053
=loc_expr
140659 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140660 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140661 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140662 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140663 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140666 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140667 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140683 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100086
=loc_expr
140684 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100056 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100056 spreled-expr
140267 : retaddr_const : BV:32
=loc 100061 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100061 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100062 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100062 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100068 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100068 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100085 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100085 spreled-expr
140390 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100086 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100086 spreled-expr
140389 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end7%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc5%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end7%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end7%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc5%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end7%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end7%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end7%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end7%1%d)))
=suffixpath_at_Lfor.inc5%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc5%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc5%1%d))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end7%1%d)*(Lfor.end7%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140385 : input.dst.llvm-%x : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140391 : islangaligned(140385, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140507 : 4 { 0x4 +1.0e1025 } : BV:64
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140409 : 32 { 0x20 +1.0e1025 } : INT
140633 : bvsign_ext(140612, 140409) : BV:64
140752 : bvmul(140507, 140633) : BV:64
140413 : 63 { 0x3f +1.0e1025 } : INT
140753 : bvextract(140752, 140413, 140409) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140632 : bvslt(140612, 140276) : BOOL
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140766 : ite(140632, 140415, 140276) : BV:32
140768 : eq(140753, 140766) : BOOL
140364 : 4 { 0x4 +1.0e1025 } : INT
140770 : isindexforsize(140768, 140364) : BOOL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140772 : isgepoffset(140702, 140699) : BOOL
140776 : islangaligned(140702, 140364) : BOOL
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140778 : islangaligned(140708, 140364) : BOOL
140781 : and(140776, 140778) : BOOL
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140648 : bvsign_ext(140614, 140409) : BV:64
140794 : bvmul(140507, 140648) : BV:64
140795 : bvextract(140794, 140413, 140409) : BV:32
140647 : bvslt(140614, 140276) : BOOL
140808 : ite(140647, 140415, 140276) : BV:32
140810 : eq(140795, 140808) : BOOL
140812 : isindexforsize(140810, 140364) : BOOL
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140814 : isgepoffset(140713, 140711) : BOOL
140819 : and(140770, 140772, 140776, 140781, 140812, 140814) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140734 : islangaligned(140713, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d done
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.body3%3%d
=linename
line 5
=pc
Lfor.body3%4%d
=linename
line 5
=pc
Lfor.body3%5%d
=linename
line 5
=pc
Lfor.body3%6%d
=linename
line 6
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 7
=pc
Lfor.end7%1%d
=linename
line 8
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc5%1%d
=linename
line 3
=pc
Lfor.inc5%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 14
=pc
Lfor.body3%2%d
=column_name
 at column 14
=pc
Lfor.body3%3%d
=column_name
 at column 14
=pc
Lfor.body3%4%d
=column_name
 at column 14
=pc
Lfor.body3%5%d
=column_name
 at column 11
=pc
Lfor.body3%6%d
=column_name
 at column 5
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end7%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc5%1%d
=column_name
 at column 31
=pc
Lfor.inc5%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%3%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%4%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%5%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.body3%6%d
=line_and_column
line 6
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 7
=pc
Lfor.end7%1%d
=line_and_column
line 8
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc5%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc5%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx4]_4
input.dst.llvm-%add : Lfor.body3%6%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%inc6 : Lfor.inc5%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset
input.dst.llvm-%arrayidx4 : L0%0%d : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx4
=dst.llvm-%arrayidx4 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx4 val_scevb
=dst.llvm-%arrayidx4 val_scevb scev
=dst.llvm-%arrayidx4 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr done
=dst.llvm-%arrayidx4 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb
=dst.llvm-%arrayidx4 atuse_scevb scev
=dst.llvm-%arrayidx4 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx4 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atexit_scev
=dst.llvm-%arrayidx4 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx4 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
20 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc6
=dst.llvm-%inc6 loop pc: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb
=dst.llvm-%inc6 val_scevb scev
=dst.llvm-%inc6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 val_scevb scev scev_expr done
=dst.llvm-%inc6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb
=dst.llvm-%inc6 atuse_scevb scev
=dst.llvm-%inc6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 atuse_scevb scev scev_expr done
=dst.llvm-%inc6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atexit_scev
=dst.llvm-%inc6 atexit_scev loop: L0%0%d
=dst.llvm-%inc6 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc6 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
22 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc6 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.end7%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc5%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 11 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 18 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 19 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc6.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple7.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc5%1%d#{0,0})*(Lfor.inc5%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*(L3%23%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*(Lfor.body3%1%d#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end7%1%d#{0,0})*(Lfor.end7%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B4.C1.D2.E1
=Locs end
=Liveness in foo.A1.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B4.C1.D2.E1

=Branch affecting variable locs in foo.A1.B4.C1.D2.E1

=Relevant Memlabels in foo.A1.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 2cbd2d1cd5cfdfc168ece22a45c63
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137962127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137962128; 137962131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 137962132; 807997699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807997700; 807997703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807997704; 1512563519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1512563520; 1512563523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1512563524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807997703 { 0x30291107 +1.32083213e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 137962131 { 0x8392293 +1.44636762e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1512563523 { 0x5a27e343 +1.31162297e53 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 128d2f26205d5146566fa26de1d942b
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 62985987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 62985988; 62985991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 62985992; 1082155007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082155008; 1082155011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082155012; 1279275583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1279275584; 1279275587 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1279275588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 62985988 { 0x3c11704 +1.50851488e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 62985991 { 0x3c11707 +1.50851523e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1279275584 { 0x4c403240 +1.50153350e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1279275587 { 0x4c403243 +1.50153386e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082155008 { 0x40806000 +1.292968e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082155011 { 0x40806003 +1.293004e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce27.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce27 6c8b61b69ec21d3b41e6471185189f5
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4613Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4614Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 14, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 14, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : ite(40, 14, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : ite(45, 14, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : ite(50, 14, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : ite(55, 14, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4603Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4604Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(15, 24, 25) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 29, 32) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(24, 25) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 29, 32) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 29, 32) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 29, 32) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(15, 23, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 29, 32) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 29, 32) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4619Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4620Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 14, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 14, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 15) : BOOL
41 : ite(40, 14, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 15) : BOOL
46 : ite(45, 14, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : ite(50, 14, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : ite(55, 14, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce28.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce28 9ca224dca232c2ccd76b6c30d0dadfe
=input.spec-%var-x-1
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 177223351 ] -> 0, [ 177223352; 177223352 ] -> 32, [ 177223353; 3269441524 ] -> 0, [ 3269441525; 3269441525 ] -> 1, [ 3269441526; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 177223351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 177223352; 177223355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 177223356; 1249769175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1249769176; 1249769179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1249769180; 3269441523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3269441524; 3269441527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3269441528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4565Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4566Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
16 : eq(11, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 9, 10) : BV:32
29 : eq(28, 12) : BOOL
30 : eq(28, 15) : BOOL
31 : ite(30, 17, 18) : BV:8
32 : ite(29, 14, 31) : BV:8
33 : bvadd(9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : ite(35, 17, 18) : BV:8
37 : ite(34, 14, 36) : BV:8
38 : bvconcat(20, 26, 32, 37) : BV:32
39 : bvadd(5, 7, 38) : BV:32
40 : eq(39, 12) : BOOL
41 : eq(39, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : bvadd(21, 7, 38) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : ite(46, 17, 18) : BV:8
48 : ite(45, 14, 47) : BV:8
49 : bvadd(27, 7, 38) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : ite(51, 17, 18) : BV:8
53 : ite(50, 14, 52) : BV:8
54 : bvadd(7, 38) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : ite(56, 17, 18) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : bvconcat(43, 48, 53, 58) : BV:32
60 : lambda(4, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(3, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 255 { 0xff +1.3039e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 256 { 0x100 +1.3051e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4555Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4556Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : bvadd(15, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 32, 33) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(35, 41, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 32, 33) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(36, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 32, 33) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(15, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 32, 33) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : sum(16, 17, 75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
77 : sym_const(76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4571Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4572Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
16 : eq(11, 15) : BOOL
17 : 32 { 0x20 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvadd(27, 9, 10) : BV:32
29 : eq(28, 12) : BOOL
30 : eq(28, 15) : BOOL
31 : ite(30, 17, 18) : BV:8
32 : ite(29, 14, 31) : BV:8
33 : bvadd(9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : ite(35, 17, 18) : BV:8
37 : ite(34, 14, 36) : BV:8
38 : bvconcat(20, 26, 32, 37) : BV:32
39 : bvadd(5, 7, 38) : BV:32
40 : eq(39, 12) : BOOL
41 : eq(39, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : bvadd(21, 7, 38) : BV:32
45 : eq(44, 12) : BOOL
46 : eq(44, 15) : BOOL
47 : ite(46, 17, 18) : BV:8
48 : ite(45, 14, 47) : BV:8
49 : bvadd(27, 7, 38) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : ite(51, 17, 18) : BV:8
53 : ite(50, 14, 52) : BV:8
54 : bvadd(7, 38) : BV:32
55 : eq(54, 12) : BOOL
56 : eq(54, 15) : BOOL
57 : ite(56, 17, 18) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : bvconcat(43, 48, 53, 58) : BV:32
60 : lambda(4, 59) : FUNCTION[BV:32 -> BV:32]
61 : map(3, 60) : MAP[BV:32 -> BV:32]
62 : sym_const(61) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3269441527 { 0xc2dfb7f7 -1025525769 -1.74780166e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 177223355 { 0xa9036bb +1.12667024e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1249769179 { 0x4a7df6db +1.98409593e21 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda449Var : BV:32
2 : Lambda450Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce51.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce51 d070a3ca52ee751bf50275ab41c29d
=input.spec-%var-x-1
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 79 ] -> 0, [ 80; 80 ] -> 1, [ 81; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 79 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 80; 83 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 84; 16419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16420; 16423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16424; 105279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 105280; 105283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 105284; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4517Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4518Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 80 { 0x50 +1.953e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : Lambda4507Var : BV:32
16 : lambda(15, 10) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4508Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvmul(19, 1) : BV:32
22 : bvadd(18, 21, 1) : BV:32
23 : 80 { 0x50 +1.953e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 21, 1) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : bvadd(5, 21, 1) : BV:32
33 : eq(32, 23) : BOOL
34 : ite(33, 25, 26) : BV:8
35 : bvadd(21, 1) : BV:32
36 : eq(35, 23) : BOOL
37 : ite(36, 25, 26) : BV:8
38 : bvconcat(27, 31, 34, 37) : BV:32
39 : bvadd(18, 20, 38) : BV:32
40 : eq(39, 23) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : bvadd(28, 20, 38) : BV:32
43 : eq(42, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : bvadd(5, 20, 38) : BV:32
46 : eq(45, 23) : BOOL
47 : ite(46, 25, 26) : BV:8
48 : bvadd(20, 38) : BV:32
49 : eq(48, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : bvconcat(41, 44, 47, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sum(13, 14, 53) : SUM[UNIT,MAP[BV:32 -> BV:32]]
55 : sym_const(54) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4523Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4524Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 80 { 0x50 +1.953e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 83 { 0x53 +1.989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 105283 { 0x19b43 +1.1255071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16423 { 0x4027 +1.195777e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda655Var : BV:32
2 : Lambda656Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda665Var : BV:32
2 : Lambda666Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce63.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce63 f34f971cce298b8463cc729d3c38c00
=input.spec-%var-x-1
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 7603007 ] -> 0, [ 7603008; 7603008 ] -> 4, [ 7603009; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 7603007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7603008; 7603011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 7603012; 438370319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 438370320; 438370323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 438370324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7603011 { 0x740343 +1.90634953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 438370323 { 0x1a210013 +1.25781476e181 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda817Var : BV:32
2 : Lambda818Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda825Var : BV:32
2 : Lambda826Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2151377258
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce64.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce64 a55efcf44c65761e1577a6d2caf1c5
=input.spec-%var-x-1
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 645922815 ] -> 8, [ 645922816; 645922819 ] -> 0, [ 645922820; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 645922815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 645922816; 645922819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 645922820; 2820053559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820053560; 2820053563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2820053564; 3494369115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3494369116; 3494369119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3494369120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.llvm-%m
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.llvm-%x
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 645922819 { 0x26800003 +1.35e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2820053563 { 0xa8169a3b -1474913733 -1.17658174e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3494369119 { 0xd047d75f -800598177 -1.56126010e33 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda828Var : BV:32
2 : Lambda829Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda836Var : BV:32
2 : Lambda837Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2295244487
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce87.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce87 49bbdccfe217b966d4b10fea3636af8
=input.spec-%var-x-1
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4096 { 0x1000 +1.48828e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4096 { 0x1000 +1.48828e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4095 ] -> 0, [ 4096; 4096 ] -> 2, [ 4097; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 4095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4096; 4099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4100; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4099 { 0x1003 +1.48863e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1137Var : BV:32
2 : Lambda1138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4096 { 0x1000 +1.48828e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1145Var : BV:32
2 : Lambda1146Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4096 { 0x1000 +1.48828e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1483938286
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce111.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce111 81edd33563f849812c16a728931dd37a
=input.spec-%var-x-1
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 942134971 ] -> 0, [ 942134972; 942134972 ] -> 1, [ 942134973; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 942134971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 942134972; 942134975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 942134976; 1084194647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1084194648; 1084194651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1084194652; 3425107883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3425107884; 3425107887 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3425107888; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1084194651 { 0x409f7f5b +1.24607408e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3425107887 { 0xcc26ffaf -869859409 -1.30467784e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 942134975 { 0x3827d6bf +1.31124103e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1362Var : BV:32
2 : Lambda1363Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1370Var : BV:32
2 : Lambda1371Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1314779067
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce135.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce135 438524fa939663352745b9b2ea07e
=input.spec-%var-x-1
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1438450687 ] -> 0, [ 1438450688; 1438450691 ] -> 255, [ 1438450692; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 163504131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 163504132; 163504135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 163504136; 901515891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 901515892; 901515895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 901515896; 1438450687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438450688; 1438450691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1438450692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4397Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4398Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
17 : eq(10, 16) : BOOL
18 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda4387Var : BV:32
18 : lambda(17, 11) : FUNCTION[BV:32 -> BOOL]
19 : Lambda4388Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 1) : BV:32
24 : bvadd(20, 23, 1) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 1) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : bvadd(14, 23, 1) : BV:32
50 : eq(49, 25) : BOOL
51 : eq(49, 28) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 32) : BOOL
54 : ite(53, 27, 34) : BV:8
55 : ite(52, 27, 54) : BV:8
56 : ite(51, 27, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : bvadd(23, 1) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 32) : BOOL
63 : ite(62, 27, 34) : BV:8
64 : ite(61, 27, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : ite(59, 27, 65) : BV:8
67 : bvconcat(38, 48, 57, 66) : BV:32
68 : bvadd(20, 22, 67) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 30) : BOOL
72 : eq(68, 32) : BOOL
73 : ite(72, 27, 34) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 27, 74) : BV:8
76 : ite(69, 27, 75) : BV:8
77 : bvadd(39, 22, 67) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : ite(81, 27, 34) : BV:8
83 : ite(80, 27, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 27, 84) : BV:8
86 : bvadd(14, 22, 67) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 30) : BOOL
90 : eq(86, 32) : BOOL
91 : ite(90, 27, 34) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 27, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : bvadd(22, 67) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 28) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : ite(99, 27, 34) : BV:8
101 : ite(98, 27, 100) : BV:8
102 : ite(97, 27, 101) : BV:8
103 : ite(96, 27, 102) : BV:8
104 : bvconcat(76, 85, 94, 103) : BV:32
105 : lambda(19, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(18, 105) : MAP[BV:32 -> BV:32]
107 : sum(15, 16, 106) : SUM[UNIT,MAP[BV:32 -> BV:32]]
108 : sym_const(107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4403Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4404Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
17 : eq(10, 16) : BOOL
18 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 163504135 { 0x9bee007 +1.49121177e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 901515895 { 0x35bc0a77 +1.46906936e236 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1587Var : BV:32
2 : Lambda1588Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1597Var : BV:32
2 : Lambda1598Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce159.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce159 85fab380f8d360d4c276a7fcde23c8
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce183.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce183 581cbf307c751aba52f9ebc75aa7575
=input.spec-%var-x-1
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3129957035 ] -> 0, [ 3129957036; 3129957039 ] -> 255, [ 3129957040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2231376759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2231376760; 2231376763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2231376764; 3129483643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129483644; 3129483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3129483648; 3129957035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129957036; 3129957039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3129957040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2231376763 { 0x85001b7b -2063590533 -1.83863e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3129483647 { 0xba88217f -1165483649 -1.6352221e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2046Var : BV:32
2 : Lambda2047Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2054Var : BV:32
2 : Lambda2055Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1928214307
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce338.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce338 049def6f2736524e639b136b59bf58
=input.spec-%var-x-1
1 : Lambda3760Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3761Var : BV:32
18 : Lambda3762Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3763Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3773Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3774Var : BV:32
18 : Lambda3775Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3776Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4283Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4097 { 0x1001 +1.48840e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 13) : BOOL
27 : and(25, 26) : BOOL
28 : 4096 { 0x1000 +1.48828e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4284Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4273Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 67108865 { 0x4000001 +1.11e137 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4095 { 0xfff +1.48816e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 4097 { 0x1001 +1.48840e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 9) : BOOL
35 : and(33, 34) : BOOL
36 : 4096 { 0x1000 +1.48828e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4274Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 242 { 0xf2 -14 } : BV:8
58 : eq(55, 51) : BOOL
59 : 241 { 0xf1 -15 } : BV:8
60 : eq(55, 15) : BOOL
61 : 127 { 0x7f } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 253 { 0xfd -3 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4289Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4097 { 0x1001 +1.48840e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 13) : BOOL
27 : and(25, 26) : BOOL
28 : 4096 { 0x1000 +1.48828e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4290Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3695Var : BV:32
2 : Lambda3696Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3700Var : BV:32
2 : Lambda3701Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3709Var : BV:32
2 : Lambda3710Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3705Var : BV:32
2 : Lambda3706Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1626471087
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce339.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce339 85b1c7e763f5aab67620ab5752dbeb26
=input.spec-%var-x-1
1 : Lambda3814Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3815Var : BV:32
18 : Lambda3816Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3817Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3832Var : BV:32
18 : Lambda3833Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3834Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1802347510
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce1739.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce1739 368c97238886c3db483c19468215d35
=input.spec-%var-x-1
1 : Lambda11474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11475Var : BV:32
18 : Lambda11476Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11477Var : BV:32
52 : lambda(51, 2) : FUNCTION[BV:32 -> BV:32]
53 : map(50, 52) : MAP[BV:32 -> BV:32]
54 : lambda(17, 53) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
55 : map(16, 54) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
56 : sym_const(55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11488Var : BV:32
18 : Lambda11489Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11490Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : ite(54, 2, 2) : BV:32
75 : ite(73, 2, 74) : BV:32
76 : ite(54, 2, 75) : BV:32
77 : lambda(51, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(50, 77) : MAP[BV:32 -> BV:32]
79 : lambda(17, 78) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
80 : map(16, 79) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
81 : sym_const(80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 494115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 494116; 494119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 494120; 155483431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 155483432; 155483435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 155483436; 3645973127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3645973128; 3645973131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3645973132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16093Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16094Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 127 { 0x7f +1.1513e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16083Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 129 { 0x81 +1.1537e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16084Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(1, 45) : BOOL
50 : bvule(45, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(15, 45) : BOOL
53 : bvule(45, 15) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(34, 45) : BOOL
56 : bvule(45, 9) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 34, 34) : BV:32
59 : ite(54, 15, 58) : BV:32
60 : ite(51, 1, 59) : BV:32
61 : eq(60, 1) : BOOL
62 : and(27, 61) : BOOL
63 : ite(62, 6, 12) : BOOL
64 : and(14, 63) : BOOL
65 : ite(48, 1, 1) : BV:32
66 : ite(64, 1, 65) : BV:32
67 : ite(48, 1, 66) : BV:32
68 : lambda(45, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(44, 68) : MAP[BV:32 -> BV:32]
70 : sum(16, 17, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16099Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16100Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 494119 { 0x78a27 +1.5890357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3645973131 { 0xd951228b -648994165 -1.63386666e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 155483435 { 0x9447d2b +1.53506982e147 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11409Var : BV:32
2 : Lambda11410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11419Var : BV:32
2 : Lambda11420Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11423Var : BV:32
2 : Lambda11424Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 127 { 0x7f +1.1513e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 128 { 0x80 +1.1525e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 129 { 0x81 +1.1537e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : ite(6, 3, 3) : BV:32
48 : ite(46, 3, 47) : BV:32
49 : ite(6, 3, 48) : BV:32
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3997393353
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce1740.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce1740 824b93fecfabddad74386181d13a54
=input.spec-%var-x-1
1 : Lambda11526Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11527Var : BV:32
18 : Lambda11528Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11529Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11541Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11542Var : BV:32
18 : Lambda11543Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11544Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 251, [ 4; 4 ] -> 246, [ 5; 5 ] -> 127, [ 6; 6 ] -> 99, [ 7; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 615784447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 615784448; 615784451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 615784452; 3875037915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3875037916; 3875037919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3875037920; 4101381719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4101381720; 4101381723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4101381724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16141Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda16142Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : 0 { 0x0 +1.0e129 } : BV:32
10 : bvmul(6, 9) : BV:32
11 : bvadd(8, 10) : BV:32
12 : eq(11, 6) : BOOL
13 : 246 { 0xf6 -10 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 99 { 0x63 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 127 { 0x7f } : BV:8
20 : 251 { 0xfb -5 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(14, 10) : BV:32
25 : eq(24, 6) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(17, 10) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : bvadd(6, 10) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 14) : BOOL
41 : eq(38, 17) : BOOL
42 : ite(41, 19, 20) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 13, 43) : BV:8
45 : bvconcat(23, 30, 37, 44) : BV:32
46 : bvadd(5, 7, 45) : BV:32
47 : eq(46, 6) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : ite(49, 19, 20) : BV:8
51 : ite(48, 16, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 7, 45) : BV:32
55 : eq(54, 6) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : ite(57, 19, 20) : BV:8
59 : ite(56, 16, 58) : BV:8
60 : ite(55, 13, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 45) : BV:32
63 : eq(62, 6) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : ite(65, 19, 20) : BV:8
67 : ite(64, 16, 66) : BV:8
68 : ite(63, 13, 67) : BV:8
69 : bvadd(7, 45) : BV:32
70 : eq(69, 6) : BOOL
71 : eq(69, 14) : BOOL
72 : eq(69, 17) : BOOL
73 : ite(72, 19, 20) : BV:8
74 : ite(71, 16, 73) : BV:8
75 : ite(70, 13, 74) : BV:8
76 : bvconcat(52, 60, 68, 75) : BV:32
77 : lambda(4, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(3, 77) : MAP[BV:32 -> BV:32]
79 : sym_const(78) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16131Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda16132Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 1) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : bvadd(15, 23, 60) : BV:32
77 : eq(76, 22) : BOOL
78 : eq(76, 29) : BOOL
79 : eq(76, 32) : BOOL
80 : ite(79, 34, 35) : BV:8
81 : ite(78, 31, 80) : BV:8
82 : ite(77, 28, 81) : BV:8
83 : bvadd(23, 60) : BV:32
84 : eq(83, 22) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : bvconcat(67, 75, 82, 89) : BV:32
91 : lambda(20, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(19, 91) : MAP[BV:32 -> BV:32]
93 : sum(16, 17, 92) : SUM[UNIT,MAP[BV:32 -> BV:32]]
94 : sym_const(93) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16147Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda16148Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : 0 { 0x0 +1.0e129 } : BV:32
10 : bvmul(6, 9) : BV:32
11 : bvadd(8, 10) : BV:32
12 : eq(11, 6) : BOOL
13 : 246 { 0xf6 -10 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 99 { 0x63 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 127 { 0x7f } : BV:8
20 : 251 { 0xfb -5 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(14, 10) : BV:32
25 : eq(24, 6) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(17, 10) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : bvadd(6, 10) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 14) : BOOL
41 : eq(38, 17) : BOOL
42 : ite(41, 19, 20) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 13, 43) : BV:8
45 : bvconcat(23, 30, 37, 44) : BV:32
46 : bvadd(5, 7, 45) : BV:32
47 : eq(46, 6) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : ite(49, 19, 20) : BV:8
51 : ite(48, 16, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 7, 45) : BV:32
55 : eq(54, 6) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : ite(57, 19, 20) : BV:8
59 : ite(56, 16, 58) : BV:8
60 : ite(55, 13, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 45) : BV:32
63 : eq(62, 6) : BOOL
64 : eq(62, 14) : BOOL
65 : eq(62, 17) : BOOL
66 : ite(65, 19, 20) : BV:8
67 : ite(64, 16, 66) : BV:8
68 : ite(63, 13, 67) : BV:8
69 : bvadd(7, 45) : BV:32
70 : eq(69, 6) : BOOL
71 : eq(69, 14) : BOOL
72 : eq(69, 17) : BOOL
73 : ite(72, 19, 20) : BV:8
74 : ite(71, 16, 73) : BV:8
75 : ite(70, 13, 74) : BV:8
76 : bvconcat(52, 60, 68, 75) : BV:32
77 : lambda(4, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(3, 77) : MAP[BV:32 -> BV:32]
79 : sym_const(78) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 615784451 { 0x24b42003 +1.40722692e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3875037919 { 0xe6f862df -419929377 -1.94051730e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4101381723 { 0xf4761e5b -193585573 -1.92280137e105 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11426Var : BV:32
2 : Lambda11427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11433Var : BV:32
2 : Lambda11434Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
404778011
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1779.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1779 e87ce3077baa8f4f947e351fa274
=input.spec-%var-x-1
1 : Lambda12000Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12001Var : BV:32
18 : Lambda12002Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12003Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12013Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12014Var : BV:32
18 : Lambda12015Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12016Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16618Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16607Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16608Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16623Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16624Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11930Var : BV:32
2 : Lambda11931Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11935Var : BV:32
2 : Lambda11936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11944Var : BV:32
2 : Lambda11945Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3v487.ce2966.num_edges_traversed0
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3v487.ce2966 1edc3979cee574f2c3111f46a1424562
=input.spec-%var-x-1
1 : Lambda25493Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25494Var : BV:32
18 : Lambda25495Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25496Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda25518Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25519Var : BV:32
18 : Lambda25520Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25521Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3145727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3145728; 3145731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3145732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25526Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25527Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda25503Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda25504Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25532Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25533Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3145731 { 0x300003 +1.37500035e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2404533224
=counter_example_end
=global nodece 17 num_edges_traversed 0
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce2967.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce2967 ac68832c1184d618b5255f4ec5c76d
=input.spec-%var-x-1
1 : Lambda25585Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25586Var : BV:32
18 : Lambda25587Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25588Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda25610Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25611Var : BV:32
18 : Lambda25612Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25613Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1539336499 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1539336500; 1539336503 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1539336504; 2201937839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2201937840; 2201937843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2201937844; 3399132051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3399132052; 3399132055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3399132056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1539336500 { 0x5bc06934 +1.50321054e56 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2201937840 { 0x833ee7b0 -2093029456 -1.49144554e135 } : BV:32
=input.dst.llvm-%n
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3399132052 { 0xca9aa394 -895835244 -1.20811700e22 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25618Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25619Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda25595Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda25596Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25624Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25625Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2201937840 { 0x833ee7b0 -2093029456 -1.49144554e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2201937843 { 0x833ee7b3 -2093029453 -1.49144589e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3399132052 { 0xca9aa394 -895835244 -1.20811700e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3399132055 { 0xca9aa397 -895835241 -1.20811736e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1539336500 { 0x5bc06934 +1.50321054e56 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1539336503 { 0x5bc06937 +1.50321090e56 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4197551023
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3v487.ce3053.num_edges_traversed4
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce3053 789bf5ce589213796230726a7c89179
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25756Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25757Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(8, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : ite(15, 2, 1) : BV:32
17 : unit : UNIT
18 : Lambda25746Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25747Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 2) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(2, 24, 25) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 29, 32) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(24, 25) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 29, 32) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 29, 32) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 29, 32) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(2, 23, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 29, 32) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 29, 32) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25762Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25763Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(8, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 19 num_edges_traversed 4
=global nodece 19 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3v487.ce3088.num_edges_traversed6
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce3088 b11541161174f5344843cc3a6596bb
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda25834Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25835Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : bvadd(8, 9, 10) : BV:32
21 : eq(20, 12) : BOOL
22 : eq(20, 15) : BOOL
23 : ite(22, 14, 17) : BV:8
24 : ite(21, 14, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda25824Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda25825Var : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 21) : BV:32
25 : bvmul(23, 2) : BV:32
26 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
27 : bvadd(22, 25, 26) : BV:32
28 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
29 : eq(27, 28) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
32 : eq(27, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : ite(32, 30, 33) : BV:8
35 : ite(29, 30, 34) : BV:8
36 : bvadd(2, 25, 26) : BV:32
37 : eq(36, 28) : BOOL
38 : eq(36, 31) : BOOL
39 : ite(38, 30, 33) : BV:8
40 : ite(37, 30, 39) : BV:8
41 : bvadd(16, 25, 26) : BV:32
42 : eq(41, 28) : BOOL
43 : eq(41, 31) : BOOL
44 : ite(43, 30, 33) : BV:8
45 : ite(42, 30, 44) : BV:8
46 : bvadd(25, 26) : BV:32
47 : eq(46, 28) : BOOL
48 : eq(46, 31) : BOOL
49 : ite(48, 30, 33) : BV:8
50 : ite(47, 30, 49) : BV:8
51 : bvconcat(35, 40, 45, 50) : BV:32
52 : bvadd(22, 24, 51) : BV:32
53 : eq(52, 28) : BOOL
54 : eq(52, 31) : BOOL
55 : ite(54, 30, 33) : BV:8
56 : ite(53, 30, 55) : BV:8
57 : bvadd(2, 24, 51) : BV:32
58 : eq(57, 28) : BOOL
59 : eq(57, 31) : BOOL
60 : ite(59, 30, 33) : BV:8
61 : ite(58, 30, 60) : BV:8
62 : bvadd(16, 24, 51) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : ite(64, 30, 33) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : bvadd(24, 51) : BV:32
68 : eq(67, 28) : BOOL
69 : eq(67, 31) : BOOL
70 : ite(69, 30, 33) : BV:8
71 : ite(68, 30, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(21, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(20, 73) : MAP[BV:32 -> BV:32]
75 : sum(17, 18, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda25840Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25841Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvadd(5, 9, 10) : BV:32
12 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : bvadd(8, 9, 10) : BV:32
21 : eq(20, 12) : BOOL
22 : eq(20, 15) : BOOL
23 : ite(22, 14, 17) : BV:8
24 : ite(21, 14, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : ite(39, 14, 17) : BV:8
41 : ite(38, 14, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : ite(44, 14, 17) : BV:8
46 : ite(43, 14, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 12) : BOOL
49 : eq(47, 15) : BOOL
50 : ite(49, 14, 17) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 12) : BOOL
54 : eq(52, 15) : BOOL
55 : ite(54, 14, 17) : BV:8
56 : ite(53, 14, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 20 num_edges_traversed 6
=global nodece 20 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce3123.num_edges_traversed7
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce3123 6e7e9e2b76cf23e18179f1881f3ed5f
=input.spec-%var-x-1
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda486Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda487Var : BV:32
18 : Lambda488Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda489Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
31 : eq(26, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : ite(31, 29, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 25) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 29, 32) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 25) : BV:32
43 : eq(42, 27) : BOOL
44 : eq(42, 30) : BOOL
45 : ite(44, 29, 32) : BV:8
46 : ite(43, 29, 45) : BV:8
47 : bvadd(24, 25) : BV:32
48 : eq(47, 27) : BOOL
49 : eq(47, 30) : BOOL
50 : ite(49, 29, 32) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 27) : BOOL
55 : eq(53, 30) : BOOL
56 : ite(55, 29, 32) : BV:8
57 : ite(54, 29, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 27) : BOOL
60 : eq(58, 30) : BOOL
61 : ite(60, 29, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 27) : BOOL
65 : eq(63, 30) : BOOL
66 : ite(65, 29, 32) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 27) : BOOL
70 : eq(68, 30) : BOOL
71 : ite(70, 29, 32) : BV:8
72 : ite(69, 29, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 537545926 ] -> 0, [ 537545927; 537545927 ] -> 64, [ 537545928; 1009302657 ] -> 0, [ 1009302658; 1009302658 ] -> 64, [ 1009302659; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8495727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8495728; 8495731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8495732; 537545923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537545924; 537545927 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 537545928; 1009302655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1009302656; 1009302659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1009302660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.llvm-%x
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1009302656 { 0x3c28bc80 +1.31825256e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1009302659 { 0x3c28bc83 +1.31825292e249 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 537545924 { 0x200a4cc4 +1.8046770e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8495728 { 0x81a270 +1.1276969e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8495731 { 0x81a273 +1.1277005e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda436Var : BV:32
2 : Lambda437Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 537545927 { 0x200a4cc7 +1.8046805e193 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 1009302658 { 0x3c28bc82 +1.31825280e249 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 21 num_edges_traversed 7
=global nodece 21 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3.ce3043.num_edges_traversed3
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce3043 1c6d944c124231743e58f1a10d0cf
=input.spec-%var-x-1
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda540Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda541Var : BV:32
18 : Lambda542Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda543Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
31 : eq(26, 30) : BOOL
32 : 32 { 0x20 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 177223351 ] -> 0, [ 177223352; 177223352 ] -> 32, [ 177223353; 3269441524 ] -> 0, [ 3269441525; 3269441525 ] -> 1, [ 3269441526; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 177223351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 177223352; 177223355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 177223356; 1249769175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1249769176; 1249769179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1249769180; 3269441523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3269441524; 3269441527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3269441528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.llvm-%x
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1970445252 { 0x75729bc4 +1.89537858e107 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3269441524 { 0xc2dfb7f4 -1025525772 -1.74780130e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3269441527 { 0xc2dfb7f7 -1025525769 -1.74780166e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 177223355 { 0xa9036bb +1.12667024e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1249769176 { 0x4a7df6d8 +1.98409557e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1249769179 { 0x4a7df6db +1.98409593e21 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda439Var : BV:32
2 : Lambda440Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda449Var : BV:32
2 : Lambda450Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 32 { 0x20 +1.381e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3269441525 { 0xc2dfb7f5 -1025525771 -1.74780142e6 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 177223352 { 0xa9036b8 +1.12666988e150 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3955501958
=counter_example_end
=global nodece 22 num_edges_traversed 3
=global nodece 22 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce3033.num_edges_traversed3
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce3033 8c7da4226e3f0a42b35b717a3184252
=input.spec-%var-x-1
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda702Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda703Var : BV:32
17 : Lambda704Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda705Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 80 { 0x50 +1.953e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 79 ] -> 0, [ 80; 80 ] -> 1, [ 81; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 79 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 80; 83 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 84; 16419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16420; 16423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16424; 105279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 105280; 105283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 105284; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 80 { 0x50 +1.953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 83 { 0x53 +1.989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 105280 { 0x19b40 +1.1255035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 105283 { 0x19b43 +1.1255071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16420 { 0x4024 +1.195741e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16423 { 0x4027 +1.195777e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda655Var : BV:32
2 : Lambda656Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda665Var : BV:32
2 : Lambda666Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 80 { 0x50 +1.953e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 23 num_edges_traversed 3
=global nodece 23 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce3023.num_edges_traversed3
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce3023 36e4282362eb9913ce8adbcbe7e8bb2
=input.spec-%var-x-1
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1648Var : BV:32
17 : Lambda1649Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1650Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 1438450687 ] -> 0, [ 1438450688; 1438450691 ] -> 255, [ 1438450692; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 163504131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 163504132; 163504135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 163504136; 901515891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 901515892; 901515895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 901515896; 1438450687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438450688; 1438450691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1438450692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 163504132 { 0x9bee004 +1.49121141e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 163504135 { 0x9bee007 +1.49121177e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 901515892 { 0x35bc0a74 +1.46906900e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 901515895 { 0x35bc0a77 +1.46906936e236 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1587Var : BV:32
2 : Lambda1588Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1597Var : BV:32
2 : Lambda1598Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1438450689 { 0x55bd0401 +1.47668468e44 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1438450690 { 0x55bd0402 +1.47668480e44 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1438450688 { 0x55bd0400 +1.47668457e44 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1438450691 { 0x55bd0403 +1.47668492e44 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 24 num_edges_traversed 3
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce3001.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce3001 70e7bd219ec5439ad1cf4c129337f895
=input.spec-%var-x-1
1 : Lambda11526Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11527Var : BV:32
18 : Lambda11528Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11529Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11541Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11542Var : BV:32
18 : Lambda11543Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda11544Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 246 { 0xf6 -10 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 99 { 0x63 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 127 { 0x7f } : BV:8
35 : 251 { 0xfb -5 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 23, 60) : BV:32
70 : eq(69, 22) : BOOL
71 : eq(69, 29) : BOOL
72 : eq(69, 32) : BOOL
73 : ite(72, 34, 35) : BV:8
74 : ite(71, 31, 73) : BV:8
75 : ite(70, 28, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 23, 60) : BV:32
78 : eq(77, 22) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : ite(80, 34, 35) : BV:8
82 : ite(79, 31, 81) : BV:8
83 : ite(78, 28, 82) : BV:8
84 : bvadd(23, 60) : BV:32
85 : eq(84, 22) : BOOL
86 : eq(84, 29) : BOOL
87 : eq(84, 32) : BOOL
88 : ite(87, 34, 35) : BV:8
89 : ite(86, 31, 88) : BV:8
90 : ite(85, 28, 89) : BV:8
91 : bvconcat(67, 75, 83, 90) : BV:32
92 : lambda(20, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(19, 92) : MAP[BV:32 -> BV:32]
94 : lambda(17, 93) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
95 : map(16, 94) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
96 : sym_const(95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 251, [ 4; 4 ] -> 246, [ 5; 5 ] -> 127, [ 6; 6 ] -> 99, [ 7; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 615784447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 615784448; 615784451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 615784452; 3875037915 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3875037916; 3875037919 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3875037920; 4101381719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4101381720; 4101381723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4101381724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 903415781 { 0x35d907e5 +1.69555342e236 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1778719364 { 0x6a051a84 +1.3987169e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 615784448 { 0x24b42000 +1.40722656e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 615784451 { 0x24b42003 +1.40722692e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3875037916 { 0xe6f862dc -419929380 -1.94051694e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3875037919 { 0xe6f862df -419929377 -1.94051730e78 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4101381720 { 0xf4761e58 -193585576 -1.92280101e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4101381723 { 0xf4761e5b -193585573 -1.92280137e105 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11426Var : BV:32
2 : Lambda11427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11433Var : BV:32
2 : Lambda11434Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 99 { 0x63 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 127 { 0x7f } : BV:8
17 : 251 { 0xfb -5 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2153199491
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3v487.ce2987.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce2987 b577e9593290e88479f37c651cc762
=input.spec-%var-x-1
1 : Lambda25493Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25494Var : BV:32
18 : Lambda25495Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25496Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda25518Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25519Var : BV:32
18 : Lambda25520Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25521Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 3145727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3145728; 3145731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3145732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 366421484 { 0x15d725ec +1.68084478e172 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1115229781 { 0x42790e55 +1.94574987e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3145728 { 0x300000 +1.37500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3145731 { 0x300003 +1.37500035e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2574586160
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce3254.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce3254 383adabfc224ea2e85a7468834c4a3
=input.spec-%var-x-1
1 : Lambda28652Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28653Var : BV:32
18 : Lambda28654Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28655Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda28677Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28678Var : BV:32
18 : Lambda28679Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28680Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2133985522 { 0x7f3208f2 +1.39089798e127 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda28685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda28686Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28662Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda28663Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda28691Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda28692Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1336420542 { 0x4fa828be +1.31374335e32 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1746688765
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce3300.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce3300 559fd9f44b5724c47056db4067528f2
=input.spec-%var-x-1
1 : Lambda30218Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda30219Var : BV:32
18 : Lambda30220Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda30221Var : BV:32
62 : lambda(61, 2) : FUNCTION[BV:32 -> BV:32]
63 : map(60, 62) : MAP[BV:32 -> BV:32]
64 : lambda(17, 63) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
65 : map(16, 64) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
66 : sym_const(65) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda30231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda30232Var : BV:32
18 : Lambda30233Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda30234Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : ite(66, 2, 2) : BV:32
90 : ite(64, 2, 89) : BV:32
91 : ite(88, 2, 90) : BV:32
92 : ite(66, 2, 91) : BV:32
93 : ite(64, 2, 92) : BV:32
94 : lambda(61, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(60, 94) : MAP[BV:32 -> BV:32]
96 : lambda(17, 95) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
97 : map(16, 96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
98 : sym_const(97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 3181392167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3181392168; 3181392171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3181392172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3181392168 { 0xbda03128 -1113575128 -1.25150012e252 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda30329Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda30330Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda30319Var : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 33554433 { 0x2000001 +1.11e133 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 8 { 0x8 +1.95e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 9 { 0x9 +1.107e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda30320Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : ite(62, 1, 1) : BV:32
82 : ite(60, 1, 81) : BV:32
83 : ite(80, 1, 82) : BV:32
84 : ite(62, 1, 83) : BV:32
85 : ite(60, 1, 84) : BV:32
86 : lambda(57, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(56, 86) : MAP[BV:32 -> BV:32]
88 : sum(17, 18, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda30335Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda30336Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3181392168 { 0xbda03128 -1113575128 -1.25150012e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3181392171 { 0xbda0312b -1113575125 -1.25150048e252 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda30153Var : BV:32
2 : Lambda30154Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda30163Var : BV:32
2 : Lambda30164Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda30167Var : BV:32
2 : Lambda30168Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 33554432 { 0x2000000 +1.0e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 7 { 0x7 +1.83e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 8 { 0x8 +1.95e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 9 { 0x9 +1.107e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : ite(9, 5, 5) : BV:32
61 : ite(7, 5, 60) : BV:32
62 : ite(59, 5, 61) : BV:32
63 : ite(9, 5, 62) : BV:32
64 : ite(7, 5, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
808447855
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce3350.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce3350 c4978aa018d3012ea4a8c2b428ed1fa
=input.spec-%var-x-1
1 : Lambda32416Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32417Var : BV:32
18 : Lambda32418Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32419Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda32441Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32442Var : BV:32
18 : Lambda32443Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32444Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1008205328 { 0x3c17fe10 +1.18744087e249 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda32449Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda32450Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda32426Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda32427Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda32455Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda32456Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1620140553 { 0x60916209 +1.13580429e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
442493342
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3.ce3396.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce3396 ff43e2d03eb711ccc0c72750e3d26e7d
=input.spec-%var-x-1
1 : Lambda33980Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33981Var : BV:32
18 : Lambda33982Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 255 { 0xff +1.3039e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 256 { 0x100 +1.3051e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 257 { 0x101 +1.3063e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda33983Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : bvmul(23, 61) : BV:32
90 : bvmul(23, 17) : BV:32
91 : bvadd(20, 90) : BV:32
92 : 17 { 0x11 +1.202e129 } : BV:32
93 : eq(91, 92) : BOOL
94 : 174 { 0xae -82 } : BV:8
95 : eq(91, 20) : BOOL
96 : 251 { 0xfb -5 } : BV:8
97 : 1 { 0x1 +1.11e129 } : BV:32
98 : eq(91, 97) : BOOL
99 : 63 { 0x3f } : BV:8
100 : 18 { 0x12 +1.214e129 } : BV:32
101 : eq(91, 100) : BOOL
102 : 249 { 0xf9 -7 } : BV:8
103 : eq(91, 2) : BOOL
104 : 252 { 0xfc -4 } : BV:8
105 : 2 { 0x2 +1.23e129 } : BV:32
106 : eq(91, 105) : BOOL
107 : 254 { 0xfe -2 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(91, 108) : BOOL
110 : 83 { 0x53 } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(98, 99, 115) : BV:8
117 : ite(95, 96, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(105, 90) : BV:32
120 : eq(119, 92) : BOOL
121 : eq(119, 20) : BOOL
122 : eq(119, 97) : BOOL
123 : eq(119, 100) : BOOL
124 : eq(119, 2) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 99, 130) : BV:8
132 : ite(121, 96, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(97, 90) : BV:32
135 : eq(134, 92) : BOOL
136 : eq(134, 20) : BOOL
137 : eq(134, 97) : BOOL
138 : eq(134, 100) : BOOL
139 : eq(134, 2) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 99, 145) : BV:8
147 : ite(136, 96, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(90, 92) : BOOL
150 : eq(90, 20) : BOOL
151 : eq(90, 97) : BOOL
152 : eq(90, 100) : BOOL
153 : eq(90, 2) : BOOL
154 : eq(90, 105) : BOOL
155 : eq(90, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 99, 159) : BV:8
161 : ite(150, 96, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(20, 89, 163) : BV:32
165 : eq(164, 92) : BOOL
166 : eq(164, 20) : BOOL
167 : eq(164, 97) : BOOL
168 : eq(164, 100) : BOOL
169 : eq(164, 2) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 99, 175) : BV:8
177 : ite(166, 96, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(105, 89, 163) : BV:32
180 : eq(179, 92) : BOOL
181 : eq(179, 20) : BOOL
182 : eq(179, 97) : BOOL
183 : eq(179, 100) : BOOL
184 : eq(179, 2) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 99, 190) : BV:8
192 : ite(181, 96, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(97, 89, 163) : BV:32
195 : eq(194, 92) : BOOL
196 : eq(194, 20) : BOOL
197 : eq(194, 97) : BOOL
198 : eq(194, 100) : BOOL
199 : eq(194, 2) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 99, 205) : BV:8
207 : ite(196, 96, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(89, 163) : BV:32
210 : eq(209, 92) : BOOL
211 : eq(209, 20) : BOOL
212 : eq(209, 97) : BOOL
213 : eq(209, 100) : BOOL
214 : eq(209, 2) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 99, 220) : BV:8
222 : ite(211, 96, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(66, 2, 224) : BV:32
226 : ite(64, 2, 225) : BV:32
227 : ite(88, 224, 226) : BV:32
228 : ite(66, 2, 227) : BV:32
229 : ite(64, 2, 228) : BV:32
230 : lambda(61, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(60, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33993Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33994Var : BV:32
18 : Lambda33995Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 255 { 0xff +1.3039e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 256 { 0x100 +1.3051e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 257 { 0x101 +1.3063e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda33996Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : bvmul(23, 61) : BV:32
68 : bvmul(23, 17) : BV:32
69 : bvadd(20, 68) : BV:32
70 : 17 { 0x11 +1.202e129 } : BV:32
71 : eq(69, 70) : BOOL
72 : 174 { 0xae -82 } : BV:8
73 : eq(69, 20) : BOOL
74 : 251 { 0xfb -5 } : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 63 { 0x3f } : BV:8
78 : 18 { 0x12 +1.214e129 } : BV:32
79 : eq(69, 78) : BOOL
80 : 249 { 0xf9 -7 } : BV:8
81 : eq(69, 2) : BOOL
82 : 252 { 0xfc -4 } : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : eq(69, 83) : BOOL
85 : 254 { 0xfe -2 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(69, 86) : BOOL
88 : 83 { 0x53 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(83, 68) : BV:32
98 : eq(97, 70) : BOOL
99 : eq(97, 20) : BOOL
100 : eq(97, 75) : BOOL
101 : eq(97, 78) : BOOL
102 : eq(97, 2) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 77, 108) : BV:8
110 : ite(99, 74, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(75, 68) : BV:32
113 : eq(112, 70) : BOOL
114 : eq(112, 20) : BOOL
115 : eq(112, 75) : BOOL
116 : eq(112, 78) : BOOL
117 : eq(112, 2) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 77, 123) : BV:8
125 : ite(114, 74, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(68, 70) : BOOL
128 : eq(68, 20) : BOOL
129 : eq(68, 75) : BOOL
130 : eq(68, 78) : BOOL
131 : eq(68, 2) : BOOL
132 : eq(68, 83) : BOOL
133 : eq(68, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 77, 137) : BV:8
139 : ite(128, 74, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(20, 67, 141) : BV:32
143 : eq(142, 70) : BOOL
144 : eq(142, 20) : BOOL
145 : eq(142, 75) : BOOL
146 : eq(142, 78) : BOOL
147 : eq(142, 2) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 77, 153) : BV:8
155 : ite(144, 74, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(83, 67, 141) : BV:32
158 : eq(157, 70) : BOOL
159 : eq(157, 20) : BOOL
160 : eq(157, 75) : BOOL
161 : eq(157, 78) : BOOL
162 : eq(157, 2) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 77, 168) : BV:8
170 : ite(159, 74, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(75, 67, 141) : BV:32
173 : eq(172, 70) : BOOL
174 : eq(172, 20) : BOOL
175 : eq(172, 75) : BOOL
176 : eq(172, 78) : BOOL
177 : eq(172, 2) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 77, 183) : BV:8
185 : ite(174, 74, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(67, 141) : BV:32
188 : eq(187, 70) : BOOL
189 : eq(187, 20) : BOOL
190 : eq(187, 75) : BOOL
191 : eq(187, 78) : BOOL
192 : eq(187, 2) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 77, 198) : BV:8
200 : ite(189, 74, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(66, 2, 202) : BV:32
204 : ite(64, 2, 203) : BV:32
205 : lambda(61, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(60, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 252, [ 1; 1 ] -> 63, [ 2; 2 ] -> 254, [ 3; 3 ] -> 251, [ 4; 16 ] -> 0, [ 17; 17 ] -> 174, [ 18; 18 ] -> 249, [ 19; 19 ] -> 83, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 413654443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 413654444; 413654447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 413654448; 692444487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 692444488; 692444491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 692444492; 4064290383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4064290384; 4064290387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4064290388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 413654444 { 0x18a7ddac +1.31145238e178 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 692444488 { 0x2945dd48 +1.54581546e211 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4064290384 { 0xf2402650 -230676912 -1.50116920e101 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34095Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 255 { 0xff +1.3039e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 256 { 0x100 +1.3051e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 257 { 0x101 +1.3063e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda34096Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : bvmul(3, 50) : BV:32
57 : bvmul(3, 3) : BV:32
58 : bvadd(5, 57) : BV:32
59 : 17 { 0x11 +1.202e129 } : BV:32
60 : eq(58, 59) : BOOL
61 : 174 { 0xae -82 } : BV:8
62 : eq(58, 5) : BOOL
63 : 251 { 0xfb -5 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(58, 64) : BOOL
66 : 63 { 0x3f } : BV:8
67 : 18 { 0x12 +1.214e129 } : BV:32
68 : eq(58, 67) : BOOL
69 : 249 { 0xf9 -7 } : BV:8
70 : eq(58, 2) : BOOL
71 : 252 { 0xfc -4 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(58, 72) : BOOL
74 : 254 { 0xfe -2 } : BV:8
75 : 19 { 0x13 +1.226e129 } : BV:32
76 : eq(58, 75) : BOOL
77 : 83 { 0x53 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(68, 69, 81) : BV:8
83 : ite(65, 66, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : ite(60, 61, 84) : BV:8
86 : bvadd(72, 57) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 5) : BOOL
89 : eq(86, 64) : BOOL
90 : eq(86, 67) : BOOL
91 : eq(86, 2) : BOOL
92 : eq(86, 72) : BOOL
93 : eq(86, 75) : BOOL
94 : ite(93, 77, 78) : BV:8
95 : ite(92, 74, 94) : BV:8
96 : ite(91, 71, 95) : BV:8
97 : ite(90, 69, 96) : BV:8
98 : ite(89, 66, 97) : BV:8
99 : ite(88, 63, 98) : BV:8
100 : ite(87, 61, 99) : BV:8
101 : bvadd(64, 57) : BV:32
102 : eq(101, 59) : BOOL
103 : eq(101, 5) : BOOL
104 : eq(101, 64) : BOOL
105 : eq(101, 67) : BOOL
106 : eq(101, 2) : BOOL
107 : eq(101, 72) : BOOL
108 : eq(101, 75) : BOOL
109 : ite(108, 77, 78) : BV:8
110 : ite(107, 74, 109) : BV:8
111 : ite(106, 71, 110) : BV:8
112 : ite(105, 69, 111) : BV:8
113 : ite(104, 66, 112) : BV:8
114 : ite(103, 63, 113) : BV:8
115 : ite(102, 61, 114) : BV:8
116 : eq(57, 59) : BOOL
117 : eq(57, 5) : BOOL
118 : eq(57, 64) : BOOL
119 : eq(57, 67) : BOOL
120 : eq(57, 2) : BOOL
121 : eq(57, 72) : BOOL
122 : eq(57, 75) : BOOL
123 : ite(122, 77, 78) : BV:8
124 : ite(121, 74, 123) : BV:8
125 : ite(120, 71, 124) : BV:8
126 : ite(119, 69, 125) : BV:8
127 : ite(118, 66, 126) : BV:8
128 : ite(117, 63, 127) : BV:8
129 : ite(116, 61, 128) : BV:8
130 : bvconcat(85, 100, 115, 129) : BV:32
131 : bvadd(5, 56, 130) : BV:32
132 : eq(131, 59) : BOOL
133 : eq(131, 5) : BOOL
134 : eq(131, 64) : BOOL
135 : eq(131, 67) : BOOL
136 : eq(131, 2) : BOOL
137 : eq(131, 72) : BOOL
138 : eq(131, 75) : BOOL
139 : ite(138, 77, 78) : BV:8
140 : ite(137, 74, 139) : BV:8
141 : ite(136, 71, 140) : BV:8
142 : ite(135, 69, 141) : BV:8
143 : ite(134, 66, 142) : BV:8
144 : ite(133, 63, 143) : BV:8
145 : ite(132, 61, 144) : BV:8
146 : bvadd(72, 56, 130) : BV:32
147 : eq(146, 59) : BOOL
148 : eq(146, 5) : BOOL
149 : eq(146, 64) : BOOL
150 : eq(146, 67) : BOOL
151 : eq(146, 2) : BOOL
152 : eq(146, 72) : BOOL
153 : eq(146, 75) : BOOL
154 : ite(153, 77, 78) : BV:8
155 : ite(152, 74, 154) : BV:8
156 : ite(151, 71, 155) : BV:8
157 : ite(150, 69, 156) : BV:8
158 : ite(149, 66, 157) : BV:8
159 : ite(148, 63, 158) : BV:8
160 : ite(147, 61, 159) : BV:8
161 : bvadd(64, 56, 130) : BV:32
162 : eq(161, 59) : BOOL
163 : eq(161, 5) : BOOL
164 : eq(161, 64) : BOOL
165 : eq(161, 67) : BOOL
166 : eq(161, 2) : BOOL
167 : eq(161, 72) : BOOL
168 : eq(161, 75) : BOOL
169 : ite(168, 77, 78) : BV:8
170 : ite(167, 74, 169) : BV:8
171 : ite(166, 71, 170) : BV:8
172 : ite(165, 69, 171) : BV:8
173 : ite(164, 66, 172) : BV:8
174 : ite(163, 63, 173) : BV:8
175 : ite(162, 61, 174) : BV:8
176 : bvadd(56, 130) : BV:32
177 : eq(176, 59) : BOOL
178 : eq(176, 5) : BOOL
179 : eq(176, 64) : BOOL
180 : eq(176, 67) : BOOL
181 : eq(176, 2) : BOOL
182 : eq(176, 72) : BOOL
183 : eq(176, 75) : BOOL
184 : ite(183, 77, 78) : BV:8
185 : ite(182, 74, 184) : BV:8
186 : ite(181, 71, 185) : BV:8
187 : ite(180, 69, 186) : BV:8
188 : ite(179, 66, 187) : BV:8
189 : ite(178, 63, 188) : BV:8
190 : ite(177, 61, 189) : BV:8
191 : bvconcat(145, 160, 175, 190) : BV:32
192 : ite(55, 2, 191) : BV:32
193 : ite(53, 2, 192) : BV:32
194 : lambda(50, 193) : FUNCTION[BV:32 -> BV:32]
195 : map(49, 194) : MAP[BV:32 -> BV:32]
196 : sym_const(195) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda34085Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : 255 { 0xff +1.3039e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 256 { 0x100 +1.3051e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 257 { 0x101 +1.3063e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 2) : BOOL
53 : and(52, 50) : BOOL
54 : ite(53, 7, 13) : BOOL
55 : ite(51, 7, 54) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda34086Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvmul(2, 57) : BV:32
64 : bvmul(2, 2) : BV:32
65 : bvadd(20, 64) : BV:32
66 : 17 { 0x11 +1.202e129 } : BV:32
67 : eq(65, 66) : BOOL
68 : 174 { 0xae -82 } : BV:8
69 : eq(65, 20) : BOOL
70 : 251 { 0xfb -5 } : BV:8
71 : eq(65, 16) : BOOL
72 : 63 { 0x3f } : BV:8
73 : 18 { 0x12 +1.214e129 } : BV:32
74 : eq(65, 73) : BOOL
75 : 249 { 0xf9 -7 } : BV:8
76 : eq(65, 1) : BOOL
77 : 252 { 0xfc -4 } : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : eq(65, 78) : BOOL
80 : 254 { 0xfe -2 } : BV:8
81 : 19 { 0x13 +1.226e129 } : BV:32
82 : eq(65, 81) : BOOL
83 : 83 { 0x53 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : bvadd(78, 64) : BV:32
93 : eq(92, 66) : BOOL
94 : eq(92, 20) : BOOL
95 : eq(92, 16) : BOOL
96 : eq(92, 73) : BOOL
97 : eq(92, 1) : BOOL
98 : eq(92, 78) : BOOL
99 : eq(92, 81) : BOOL
100 : ite(99, 83, 84) : BV:8
101 : ite(98, 80, 100) : BV:8
102 : ite(97, 77, 101) : BV:8
103 : ite(96, 75, 102) : BV:8
104 : ite(95, 72, 103) : BV:8
105 : ite(94, 70, 104) : BV:8
106 : ite(93, 68, 105) : BV:8
107 : bvadd(16, 64) : BV:32
108 : eq(107, 66) : BOOL
109 : eq(107, 20) : BOOL
110 : eq(107, 16) : BOOL
111 : eq(107, 73) : BOOL
112 : eq(107, 1) : BOOL
113 : eq(107, 78) : BOOL
114 : eq(107, 81) : BOOL
115 : ite(114, 83, 84) : BV:8
116 : ite(113, 80, 115) : BV:8
117 : ite(112, 77, 116) : BV:8
118 : ite(111, 75, 117) : BV:8
119 : ite(110, 72, 118) : BV:8
120 : ite(109, 70, 119) : BV:8
121 : ite(108, 68, 120) : BV:8
122 : eq(64, 66) : BOOL
123 : eq(64, 20) : BOOL
124 : eq(64, 16) : BOOL
125 : eq(64, 73) : BOOL
126 : eq(64, 1) : BOOL
127 : eq(64, 78) : BOOL
128 : eq(64, 81) : BOOL
129 : ite(128, 83, 84) : BV:8
130 : ite(127, 80, 129) : BV:8
131 : ite(126, 77, 130) : BV:8
132 : ite(125, 75, 131) : BV:8
133 : ite(124, 72, 132) : BV:8
134 : ite(123, 70, 133) : BV:8
135 : ite(122, 68, 134) : BV:8
136 : bvconcat(91, 106, 121, 135) : BV:32
137 : bvadd(20, 63, 136) : BV:32
138 : eq(137, 66) : BOOL
139 : eq(137, 20) : BOOL
140 : eq(137, 16) : BOOL
141 : eq(137, 73) : BOOL
142 : eq(137, 1) : BOOL
143 : eq(137, 78) : BOOL
144 : eq(137, 81) : BOOL
145 : ite(144, 83, 84) : BV:8
146 : ite(143, 80, 145) : BV:8
147 : ite(142, 77, 146) : BV:8
148 : ite(141, 75, 147) : BV:8
149 : ite(140, 72, 148) : BV:8
150 : ite(139, 70, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : bvadd(78, 63, 136) : BV:32
153 : eq(152, 66) : BOOL
154 : eq(152, 20) : BOOL
155 : eq(152, 16) : BOOL
156 : eq(152, 73) : BOOL
157 : eq(152, 1) : BOOL
158 : eq(152, 78) : BOOL
159 : eq(152, 81) : BOOL
160 : ite(159, 83, 84) : BV:8
161 : ite(158, 80, 160) : BV:8
162 : ite(157, 77, 161) : BV:8
163 : ite(156, 75, 162) : BV:8
164 : ite(155, 72, 163) : BV:8
165 : ite(154, 70, 164) : BV:8
166 : ite(153, 68, 165) : BV:8
167 : bvadd(16, 63, 136) : BV:32
168 : eq(167, 66) : BOOL
169 : eq(167, 20) : BOOL
170 : eq(167, 16) : BOOL
171 : eq(167, 73) : BOOL
172 : eq(167, 1) : BOOL
173 : eq(167, 78) : BOOL
174 : eq(167, 81) : BOOL
175 : ite(174, 83, 84) : BV:8
176 : ite(173, 80, 175) : BV:8
177 : ite(172, 77, 176) : BV:8
178 : ite(171, 75, 177) : BV:8
179 : ite(170, 72, 178) : BV:8
180 : ite(169, 70, 179) : BV:8
181 : ite(168, 68, 180) : BV:8
182 : bvadd(63, 136) : BV:32
183 : eq(182, 66) : BOOL
184 : eq(182, 20) : BOOL
185 : eq(182, 16) : BOOL
186 : eq(182, 73) : BOOL
187 : eq(182, 1) : BOOL
188 : eq(182, 78) : BOOL
189 : eq(182, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 80, 190) : BV:8
192 : ite(187, 77, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 70, 194) : BV:8
196 : ite(183, 68, 195) : BV:8
197 : bvconcat(151, 166, 181, 196) : BV:32
198 : ite(62, 1, 197) : BV:32
199 : ite(60, 1, 198) : BV:32
200 : lambda(57, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(56, 200) : MAP[BV:32 -> BV:32]
202 : sum(17, 18, 201) : SUM[UNIT,MAP[BV:32 -> BV:32]]
203 : sym_const(202) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34101Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 255 { 0xff +1.3039e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 256 { 0x100 +1.3051e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 257 { 0x101 +1.3063e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda34102Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : bvmul(3, 50) : BV:32
57 : bvmul(3, 3) : BV:32
58 : bvadd(5, 57) : BV:32
59 : 17 { 0x11 +1.202e129 } : BV:32
60 : eq(58, 59) : BOOL
61 : 174 { 0xae -82 } : BV:8
62 : eq(58, 5) : BOOL
63 : 251 { 0xfb -5 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(58, 64) : BOOL
66 : 63 { 0x3f } : BV:8
67 : 18 { 0x12 +1.214e129 } : BV:32
68 : eq(58, 67) : BOOL
69 : 249 { 0xf9 -7 } : BV:8
70 : eq(58, 2) : BOOL
71 : 252 { 0xfc -4 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(58, 72) : BOOL
74 : 254 { 0xfe -2 } : BV:8
75 : 19 { 0x13 +1.226e129 } : BV:32
76 : eq(58, 75) : BOOL
77 : 83 { 0x53 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(68, 69, 81) : BV:8
83 : ite(65, 66, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : ite(60, 61, 84) : BV:8
86 : bvadd(72, 57) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 5) : BOOL
89 : eq(86, 64) : BOOL
90 : eq(86, 67) : BOOL
91 : eq(86, 2) : BOOL
92 : eq(86, 72) : BOOL
93 : eq(86, 75) : BOOL
94 : ite(93, 77, 78) : BV:8
95 : ite(92, 74, 94) : BV:8
96 : ite(91, 71, 95) : BV:8
97 : ite(90, 69, 96) : BV:8
98 : ite(89, 66, 97) : BV:8
99 : ite(88, 63, 98) : BV:8
100 : ite(87, 61, 99) : BV:8
101 : bvadd(64, 57) : BV:32
102 : eq(101, 59) : BOOL
103 : eq(101, 5) : BOOL
104 : eq(101, 64) : BOOL
105 : eq(101, 67) : BOOL
106 : eq(101, 2) : BOOL
107 : eq(101, 72) : BOOL
108 : eq(101, 75) : BOOL
109 : ite(108, 77, 78) : BV:8
110 : ite(107, 74, 109) : BV:8
111 : ite(106, 71, 110) : BV:8
112 : ite(105, 69, 111) : BV:8
113 : ite(104, 66, 112) : BV:8
114 : ite(103, 63, 113) : BV:8
115 : ite(102, 61, 114) : BV:8
116 : eq(57, 59) : BOOL
117 : eq(57, 5) : BOOL
118 : eq(57, 64) : BOOL
119 : eq(57, 67) : BOOL
120 : eq(57, 2) : BOOL
121 : eq(57, 72) : BOOL
122 : eq(57, 75) : BOOL
123 : ite(122, 77, 78) : BV:8
124 : ite(121, 74, 123) : BV:8
125 : ite(120, 71, 124) : BV:8
126 : ite(119, 69, 125) : BV:8
127 : ite(118, 66, 126) : BV:8
128 : ite(117, 63, 127) : BV:8
129 : ite(116, 61, 128) : BV:8
130 : bvconcat(85, 100, 115, 129) : BV:32
131 : bvadd(5, 56, 130) : BV:32
132 : eq(131, 59) : BOOL
133 : eq(131, 5) : BOOL
134 : eq(131, 64) : BOOL
135 : eq(131, 67) : BOOL
136 : eq(131, 2) : BOOL
137 : eq(131, 72) : BOOL
138 : eq(131, 75) : BOOL
139 : ite(138, 77, 78) : BV:8
140 : ite(137, 74, 139) : BV:8
141 : ite(136, 71, 140) : BV:8
142 : ite(135, 69, 141) : BV:8
143 : ite(134, 66, 142) : BV:8
144 : ite(133, 63, 143) : BV:8
145 : ite(132, 61, 144) : BV:8
146 : bvadd(72, 56, 130) : BV:32
147 : eq(146, 59) : BOOL
148 : eq(146, 5) : BOOL
149 : eq(146, 64) : BOOL
150 : eq(146, 67) : BOOL
151 : eq(146, 2) : BOOL
152 : eq(146, 72) : BOOL
153 : eq(146, 75) : BOOL
154 : ite(153, 77, 78) : BV:8
155 : ite(152, 74, 154) : BV:8
156 : ite(151, 71, 155) : BV:8
157 : ite(150, 69, 156) : BV:8
158 : ite(149, 66, 157) : BV:8
159 : ite(148, 63, 158) : BV:8
160 : ite(147, 61, 159) : BV:8
161 : bvadd(64, 56, 130) : BV:32
162 : eq(161, 59) : BOOL
163 : eq(161, 5) : BOOL
164 : eq(161, 64) : BOOL
165 : eq(161, 67) : BOOL
166 : eq(161, 2) : BOOL
167 : eq(161, 72) : BOOL
168 : eq(161, 75) : BOOL
169 : ite(168, 77, 78) : BV:8
170 : ite(167, 74, 169) : BV:8
171 : ite(166, 71, 170) : BV:8
172 : ite(165, 69, 171) : BV:8
173 : ite(164, 66, 172) : BV:8
174 : ite(163, 63, 173) : BV:8
175 : ite(162, 61, 174) : BV:8
176 : bvadd(56, 130) : BV:32
177 : eq(176, 59) : BOOL
178 : eq(176, 5) : BOOL
179 : eq(176, 64) : BOOL
180 : eq(176, 67) : BOOL
181 : eq(176, 2) : BOOL
182 : eq(176, 72) : BOOL
183 : eq(176, 75) : BOOL
184 : ite(183, 77, 78) : BV:8
185 : ite(182, 74, 184) : BV:8
186 : ite(181, 71, 185) : BV:8
187 : ite(180, 69, 186) : BV:8
188 : ite(179, 66, 187) : BV:8
189 : ite(178, 63, 188) : BV:8
190 : ite(177, 61, 189) : BV:8
191 : bvconcat(145, 160, 175, 190) : BV:32
192 : ite(55, 2, 191) : BV:32
193 : ite(53, 2, 192) : BV:32
194 : lambda(50, 193) : FUNCTION[BV:32 -> BV:32]
195 : map(49, 194) : MAP[BV:32 -> BV:32]
196 : sym_const(195) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 692444488 { 0x2945dd48 +1.54581546e211 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 692444491 { 0x2945dd4b +1.54581582e211 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4064290384 { 0xf2402650 -230676912 -1.50116920e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4064290387 { 0xf2402653 -230676909 -1.50116956e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 413654444 { 0x18a7ddac +1.31145238e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 413654447 { 0x18a7ddaf +1.31145274e178 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda33915Var : BV:32
2 : Lambda33916Var : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 255 { 0xff +1.3039e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 256 { 0x100 +1.3051e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 257 { 0x101 +1.3063e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : bvmul(3, 2) : BV:32
61 : bvmul(3, 1) : BV:32
62 : bvadd(23, 61) : BV:32
63 : 17 { 0x11 +1.202e129 } : BV:32
64 : eq(62, 63) : BOOL
65 : 174 { 0xae -82 } : BV:8
66 : eq(62, 23) : BOOL
67 : 251 { 0xfb -5 } : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : eq(62, 68) : BOOL
70 : 63 { 0x3f } : BV:8
71 : 18 { 0x12 +1.214e129 } : BV:32
72 : eq(62, 71) : BOOL
73 : 249 { 0xf9 -7 } : BV:8
74 : eq(62, 5) : BOOL
75 : 252 { 0xfc -4 } : BV:8
76 : 2 { 0x2 +1.23e129 } : BV:32
77 : eq(62, 76) : BOOL
78 : 254 { 0xfe -2 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(62, 79) : BOOL
81 : 83 { 0x53 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(69, 70, 86) : BV:8
88 : ite(66, 67, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(76, 61) : BV:32
91 : eq(90, 63) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 68) : BOOL
94 : eq(90, 71) : BOOL
95 : eq(90, 5) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 70, 101) : BV:8
103 : ite(92, 67, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(68, 61) : BV:32
106 : eq(105, 63) : BOOL
107 : eq(105, 23) : BOOL
108 : eq(105, 68) : BOOL
109 : eq(105, 71) : BOOL
110 : eq(105, 5) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 70, 116) : BV:8
118 : ite(107, 67, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(61, 63) : BOOL
121 : eq(61, 23) : BOOL
122 : eq(61, 68) : BOOL
123 : eq(61, 71) : BOOL
124 : eq(61, 5) : BOOL
125 : eq(61, 76) : BOOL
126 : eq(61, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 70, 130) : BV:8
132 : ite(121, 67, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(23, 60, 134) : BV:32
136 : eq(135, 63) : BOOL
137 : eq(135, 23) : BOOL
138 : eq(135, 68) : BOOL
139 : eq(135, 71) : BOOL
140 : eq(135, 5) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 70, 146) : BV:8
148 : ite(137, 67, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(76, 60, 134) : BV:32
151 : eq(150, 63) : BOOL
152 : eq(150, 23) : BOOL
153 : eq(150, 68) : BOOL
154 : eq(150, 71) : BOOL
155 : eq(150, 5) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 70, 161) : BV:8
163 : ite(152, 67, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(68, 60, 134) : BV:32
166 : eq(165, 63) : BOOL
167 : eq(165, 23) : BOOL
168 : eq(165, 68) : BOOL
169 : eq(165, 71) : BOOL
170 : eq(165, 5) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 70, 176) : BV:8
178 : ite(167, 67, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(60, 134) : BV:32
181 : eq(180, 63) : BOOL
182 : eq(180, 23) : BOOL
183 : eq(180, 68) : BOOL
184 : eq(180, 71) : BOOL
185 : eq(180, 5) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 70, 191) : BV:8
193 : ite(182, 67, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 5, 195) : BV:32
197 : ite(7, 5, 196) : BV:32
198 : ite(59, 195, 197) : BV:32
199 : ite(9, 5, 198) : BV:32
200 : ite(7, 5, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda33920Var : BV:32
2 : Lambda33921Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 255 { 0xff +1.3039e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 256 { 0x100 +1.3051e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 257 { 0x101 +1.3063e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda33929Var : BV:32
2 : Lambda33930Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 255 { 0xff +1.3039e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 256 { 0x100 +1.3051e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 257 { 0x101 +1.3063e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda33925Var : BV:32
2 : Lambda33926Var : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : bvmul(3, 2) : BV:32
12 : bvmul(3, 1) : BV:32
13 : bvadd(10, 12) : BV:32
14 : 17 { 0x11 +1.202e129 } : BV:32
15 : eq(13, 14) : BOOL
16 : 174 { 0xae -82 } : BV:8
17 : eq(13, 10) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(13, 19) : BOOL
21 : 63 { 0x3f } : BV:8
22 : 18 { 0x12 +1.214e129 } : BV:32
23 : eq(13, 22) : BOOL
24 : 249 { 0xf9 -7 } : BV:8
25 : eq(13, 5) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : eq(13, 27) : BOOL
29 : 254 { 0xfe -2 } : BV:8
30 : 19 { 0x13 +1.226e129 } : BV:32
31 : eq(13, 30) : BOOL
32 : 83 { 0x53 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(15, 16, 39) : BV:8
41 : bvadd(27, 12) : BV:32
42 : eq(41, 14) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 19) : BOOL
45 : eq(41, 22) : BOOL
46 : eq(41, 5) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : bvadd(19, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 5) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 24, 66) : BV:8
68 : ite(59, 21, 67) : BV:8
69 : ite(58, 18, 68) : BV:8
70 : ite(57, 16, 69) : BV:8
71 : eq(12, 14) : BOOL
72 : eq(12, 10) : BOOL
73 : eq(12, 19) : BOOL
74 : eq(12, 22) : BOOL
75 : eq(12, 5) : BOOL
76 : eq(12, 27) : BOOL
77 : eq(12, 30) : BOOL
78 : ite(77, 32, 33) : BV:8
79 : ite(76, 29, 78) : BV:8
80 : ite(75, 26, 79) : BV:8
81 : ite(74, 24, 80) : BV:8
82 : ite(73, 21, 81) : BV:8
83 : ite(72, 18, 82) : BV:8
84 : ite(71, 16, 83) : BV:8
85 : bvconcat(40, 55, 70, 84) : BV:32
86 : bvadd(10, 11, 85) : BV:32
87 : eq(86, 14) : BOOL
88 : eq(86, 10) : BOOL
89 : eq(86, 19) : BOOL
90 : eq(86, 22) : BOOL
91 : eq(86, 5) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 30) : BOOL
94 : ite(93, 32, 33) : BV:8
95 : ite(92, 29, 94) : BV:8
96 : ite(91, 26, 95) : BV:8
97 : ite(90, 24, 96) : BV:8
98 : ite(89, 21, 97) : BV:8
99 : ite(88, 18, 98) : BV:8
100 : ite(87, 16, 99) : BV:8
101 : bvadd(27, 11, 85) : BV:32
102 : eq(101, 14) : BOOL
103 : eq(101, 10) : BOOL
104 : eq(101, 19) : BOOL
105 : eq(101, 22) : BOOL
106 : eq(101, 5) : BOOL
107 : eq(101, 27) : BOOL
108 : eq(101, 30) : BOOL
109 : ite(108, 32, 33) : BV:8
110 : ite(107, 29, 109) : BV:8
111 : ite(106, 26, 110) : BV:8
112 : ite(105, 24, 111) : BV:8
113 : ite(104, 21, 112) : BV:8
114 : ite(103, 18, 113) : BV:8
115 : ite(102, 16, 114) : BV:8
116 : bvadd(19, 11, 85) : BV:32
117 : eq(116, 14) : BOOL
118 : eq(116, 10) : BOOL
119 : eq(116, 19) : BOOL
120 : eq(116, 22) : BOOL
121 : eq(116, 5) : BOOL
122 : eq(116, 27) : BOOL
123 : eq(116, 30) : BOOL
124 : ite(123, 32, 33) : BV:8
125 : ite(122, 29, 124) : BV:8
126 : ite(121, 26, 125) : BV:8
127 : ite(120, 24, 126) : BV:8
128 : ite(119, 21, 127) : BV:8
129 : ite(118, 18, 128) : BV:8
130 : ite(117, 16, 129) : BV:8
131 : bvadd(11, 85) : BV:32
132 : eq(131, 14) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 19) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 5) : BOOL
137 : eq(131, 27) : BOOL
138 : eq(131, 30) : BOOL
139 : ite(138, 32, 33) : BV:8
140 : ite(137, 29, 139) : BV:8
141 : ite(136, 26, 140) : BV:8
142 : ite(135, 24, 141) : BV:8
143 : ite(134, 21, 142) : BV:8
144 : ite(133, 18, 143) : BV:8
145 : ite(132, 16, 144) : BV:8
146 : bvconcat(100, 115, 130, 145) : BV:32
147 : ite(9, 5, 146) : BV:32
148 : ite(7, 5, 147) : BV:32
149 : lambda(1, 2, 148) : FUNCTION[BV:32,BV:32 -> BV:32]
150 : sym_const(149) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4121540407
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce3446.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce3446 16ced9fecd9567433b6d58a73e2b8366
=input.spec-%var-x-1
1 : Lambda36072Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36073Var : BV:32
18 : Lambda36074Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36075Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36097Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36098Var : BV:32
18 : Lambda36099Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36100Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 524291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524292; 524295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 524296; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1388731109 { 0x52c65ae5 +1.54964888e38 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda36105Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36106Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda36082Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda36083Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda36111Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda36112Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1454517619 { 0x56b22d73 +1.39201200e46 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 524295 { 0x80007 +1.6250083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
717687187
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3.ce3492.num_edges_traversed1
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce3492 42c347a83c7641851e19612dbe5f7
=input.spec-%var-x-1
1 : Lambda37670Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37671Var : BV:32
18 : Lambda37672Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 511 { 0x1ff +1.6091e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 512 { 0x200 +1.6103e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 513 { 0x201 +1.6115e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda37673Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : 3 { 0x3 +1.35e129 } : BV:32
90 : 4 { 0x4 +1.47e129 } : BV:32
91 : bvmul(90, 61) : BV:32
92 : bvmul(90, 17) : BV:32
93 : bvadd(89, 92) : BV:32
94 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
95 : eq(93, 94) : BOOL
96 : 244 { 0xf4 -12 } : BV:8
97 : 1 { 0x1 +1.11e129 } : BV:32
98 : eq(93, 97) : BOOL
99 : 255 { 0xff -1 } : BV:8
100 : eq(93, 89) : BOOL
101 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
102 : eq(93, 101) : BOOL
103 : 247 { 0xf7 -9 } : BV:8
104 : eq(93, 10) : BOOL
105 : 251 { 0xfb -5 } : BV:8
106 : eq(93, 2) : BOOL
107 : 123 { 0x7b } : BV:8
108 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
109 : eq(93, 108) : BOOL
110 : 126 { 0x7e } : BV:8
111 : 2 { 0x2 +1.23e129 } : BV:32
112 : eq(93, 111) : BOOL
113 : 239 { 0xef -17 } : BV:8
114 : 0 { 0x0 } : BV:8
115 : ite(112, 113, 114) : BV:8
116 : ite(109, 110, 115) : BV:8
117 : ite(106, 107, 116) : BV:8
118 : ite(104, 105, 117) : BV:8
119 : ite(102, 103, 118) : BV:8
120 : ite(100, 99, 119) : BV:8
121 : ite(98, 99, 120) : BV:8
122 : ite(95, 96, 121) : BV:8
123 : bvadd(111, 92) : BV:32
124 : eq(123, 94) : BOOL
125 : eq(123, 97) : BOOL
126 : eq(123, 89) : BOOL
127 : eq(123, 101) : BOOL
128 : eq(123, 10) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 108) : BOOL
131 : eq(123, 111) : BOOL
132 : ite(131, 113, 114) : BV:8
133 : ite(130, 110, 132) : BV:8
134 : ite(129, 107, 133) : BV:8
135 : ite(128, 105, 134) : BV:8
136 : ite(127, 103, 135) : BV:8
137 : ite(126, 99, 136) : BV:8
138 : ite(125, 99, 137) : BV:8
139 : ite(124, 96, 138) : BV:8
140 : bvadd(97, 92) : BV:32
141 : eq(140, 94) : BOOL
142 : eq(140, 97) : BOOL
143 : eq(140, 89) : BOOL
144 : eq(140, 101) : BOOL
145 : eq(140, 10) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 108) : BOOL
148 : eq(140, 111) : BOOL
149 : ite(148, 113, 114) : BV:8
150 : ite(147, 110, 149) : BV:8
151 : ite(146, 107, 150) : BV:8
152 : ite(145, 105, 151) : BV:8
153 : ite(144, 103, 152) : BV:8
154 : ite(143, 99, 153) : BV:8
155 : ite(142, 99, 154) : BV:8
156 : ite(141, 96, 155) : BV:8
157 : eq(92, 94) : BOOL
158 : eq(92, 97) : BOOL
159 : eq(92, 89) : BOOL
160 : eq(92, 101) : BOOL
161 : eq(92, 10) : BOOL
162 : eq(92, 2) : BOOL
163 : eq(92, 108) : BOOL
164 : eq(92, 111) : BOOL
165 : ite(164, 113, 114) : BV:8
166 : ite(163, 110, 165) : BV:8
167 : ite(162, 107, 166) : BV:8
168 : ite(161, 105, 167) : BV:8
169 : ite(160, 103, 168) : BV:8
170 : ite(159, 99, 169) : BV:8
171 : ite(158, 99, 170) : BV:8
172 : ite(157, 96, 171) : BV:8
173 : bvconcat(122, 139, 156, 172) : BV:32
174 : bvadd(89, 91, 173) : BV:32
175 : eq(174, 94) : BOOL
176 : eq(174, 97) : BOOL
177 : eq(174, 89) : BOOL
178 : eq(174, 101) : BOOL
179 : eq(174, 10) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 108) : BOOL
182 : eq(174, 111) : BOOL
183 : ite(182, 113, 114) : BV:8
184 : ite(181, 110, 183) : BV:8
185 : ite(180, 107, 184) : BV:8
186 : ite(179, 105, 185) : BV:8
187 : ite(178, 103, 186) : BV:8
188 : ite(177, 99, 187) : BV:8
189 : ite(176, 99, 188) : BV:8
190 : ite(175, 96, 189) : BV:8
191 : bvadd(111, 91, 173) : BV:32
192 : eq(191, 94) : BOOL
193 : eq(191, 97) : BOOL
194 : eq(191, 89) : BOOL
195 : eq(191, 101) : BOOL
196 : eq(191, 10) : BOOL
197 : eq(191, 2) : BOOL
198 : eq(191, 108) : BOOL
199 : eq(191, 111) : BOOL
200 : ite(199, 113, 114) : BV:8
201 : ite(198, 110, 200) : BV:8
202 : ite(197, 107, 201) : BV:8
203 : ite(196, 105, 202) : BV:8
204 : ite(195, 103, 203) : BV:8
205 : ite(194, 99, 204) : BV:8
206 : ite(193, 99, 205) : BV:8
207 : ite(192, 96, 206) : BV:8
208 : bvadd(97, 91, 173) : BV:32
209 : eq(208, 94) : BOOL
210 : eq(208, 97) : BOOL
211 : eq(208, 89) : BOOL
212 : eq(208, 101) : BOOL
213 : eq(208, 10) : BOOL
214 : eq(208, 2) : BOOL
215 : eq(208, 108) : BOOL
216 : eq(208, 111) : BOOL
217 : ite(216, 113, 114) : BV:8
218 : ite(215, 110, 217) : BV:8
219 : ite(214, 107, 218) : BV:8
220 : ite(213, 105, 219) : BV:8
221 : ite(212, 103, 220) : BV:8
222 : ite(211, 99, 221) : BV:8
223 : ite(210, 99, 222) : BV:8
224 : ite(209, 96, 223) : BV:8
225 : bvadd(91, 173) : BV:32
226 : eq(225, 94) : BOOL
227 : eq(225, 97) : BOOL
228 : eq(225, 89) : BOOL
229 : eq(225, 101) : BOOL
230 : eq(225, 10) : BOOL
231 : eq(225, 2) : BOOL
232 : eq(225, 108) : BOOL
233 : eq(225, 111) : BOOL
234 : ite(233, 113, 114) : BV:8
235 : ite(232, 110, 234) : BV:8
236 : ite(231, 107, 235) : BV:8
237 : ite(230, 105, 236) : BV:8
238 : ite(229, 103, 237) : BV:8
239 : ite(228, 99, 238) : BV:8
240 : ite(227, 99, 239) : BV:8
241 : ite(226, 96, 240) : BV:8
242 : bvconcat(190, 207, 224, 241) : BV:32
243 : ite(66, 2, 242) : BV:32
244 : ite(64, 2, 243) : BV:32
245 : ite(88, 242, 244) : BV:32
246 : ite(66, 2, 245) : BV:32
247 : ite(64, 2, 246) : BV:32
248 : lambda(61, 247) : FUNCTION[BV:32 -> BV:32]
249 : map(60, 248) : MAP[BV:32 -> BV:32]
250 : lambda(17, 249) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
251 : map(16, 250) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
252 : sym_const(251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37683Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37684Var : BV:32
18 : Lambda37685Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 511 { 0x1ff +1.6091e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 512 { 0x200 +1.6103e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 513 { 0x201 +1.6115e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda37686Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 3 { 0x3 +1.35e129 } : BV:32
68 : 4 { 0x4 +1.47e129 } : BV:32
69 : bvmul(68, 61) : BV:32
70 : bvmul(68, 17) : BV:32
71 : bvadd(67, 70) : BV:32
72 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
73 : eq(71, 72) : BOOL
74 : 244 { 0xf4 -12 } : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(71, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : eq(71, 67) : BOOL
79 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
80 : eq(71, 79) : BOOL
81 : 247 { 0xf7 -9 } : BV:8
82 : eq(71, 10) : BOOL
83 : 251 { 0xfb -5 } : BV:8
84 : eq(71, 2) : BOOL
85 : 123 { 0x7b } : BV:8
86 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
87 : eq(71, 86) : BOOL
88 : 126 { 0x7e } : BV:8
89 : 2 { 0x2 +1.23e129 } : BV:32
90 : eq(71, 89) : BOOL
91 : 239 { 0xef -17 } : BV:8
92 : 0 { 0x0 } : BV:8
93 : ite(90, 91, 92) : BV:8
94 : ite(87, 88, 93) : BV:8
95 : ite(84, 85, 94) : BV:8
96 : ite(82, 83, 95) : BV:8
97 : ite(80, 81, 96) : BV:8
98 : ite(78, 77, 97) : BV:8
99 : ite(76, 77, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : bvadd(89, 70) : BV:32
102 : eq(101, 72) : BOOL
103 : eq(101, 75) : BOOL
104 : eq(101, 67) : BOOL
105 : eq(101, 79) : BOOL
106 : eq(101, 10) : BOOL
107 : eq(101, 2) : BOOL
108 : eq(101, 86) : BOOL
109 : eq(101, 89) : BOOL
110 : ite(109, 91, 92) : BV:8
111 : ite(108, 88, 110) : BV:8
112 : ite(107, 85, 111) : BV:8
113 : ite(106, 83, 112) : BV:8
114 : ite(105, 81, 113) : BV:8
115 : ite(104, 77, 114) : BV:8
116 : ite(103, 77, 115) : BV:8
117 : ite(102, 74, 116) : BV:8
118 : bvadd(75, 70) : BV:32
119 : eq(118, 72) : BOOL
120 : eq(118, 75) : BOOL
121 : eq(118, 67) : BOOL
122 : eq(118, 79) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 2) : BOOL
125 : eq(118, 86) : BOOL
126 : eq(118, 89) : BOOL
127 : ite(126, 91, 92) : BV:8
128 : ite(125, 88, 127) : BV:8
129 : ite(124, 85, 128) : BV:8
130 : ite(123, 83, 129) : BV:8
131 : ite(122, 81, 130) : BV:8
132 : ite(121, 77, 131) : BV:8
133 : ite(120, 77, 132) : BV:8
134 : ite(119, 74, 133) : BV:8
135 : eq(70, 72) : BOOL
136 : eq(70, 75) : BOOL
137 : eq(70, 67) : BOOL
138 : eq(70, 79) : BOOL
139 : eq(70, 10) : BOOL
140 : eq(70, 2) : BOOL
141 : eq(70, 86) : BOOL
142 : eq(70, 89) : BOOL
143 : ite(142, 91, 92) : BV:8
144 : ite(141, 88, 143) : BV:8
145 : ite(140, 85, 144) : BV:8
146 : ite(139, 83, 145) : BV:8
147 : ite(138, 81, 146) : BV:8
148 : ite(137, 77, 147) : BV:8
149 : ite(136, 77, 148) : BV:8
150 : ite(135, 74, 149) : BV:8
151 : bvconcat(100, 117, 134, 150) : BV:32
152 : bvadd(67, 69, 151) : BV:32
153 : eq(152, 72) : BOOL
154 : eq(152, 75) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 79) : BOOL
157 : eq(152, 10) : BOOL
158 : eq(152, 2) : BOOL
159 : eq(152, 86) : BOOL
160 : eq(152, 89) : BOOL
161 : ite(160, 91, 92) : BV:8
162 : ite(159, 88, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 83, 163) : BV:8
165 : ite(156, 81, 164) : BV:8
166 : ite(155, 77, 165) : BV:8
167 : ite(154, 77, 166) : BV:8
168 : ite(153, 74, 167) : BV:8
169 : bvadd(89, 69, 151) : BV:32
170 : eq(169, 72) : BOOL
171 : eq(169, 75) : BOOL
172 : eq(169, 67) : BOOL
173 : eq(169, 79) : BOOL
174 : eq(169, 10) : BOOL
175 : eq(169, 2) : BOOL
176 : eq(169, 86) : BOOL
177 : eq(169, 89) : BOOL
178 : ite(177, 91, 92) : BV:8
179 : ite(176, 88, 178) : BV:8
180 : ite(175, 85, 179) : BV:8
181 : ite(174, 83, 180) : BV:8
182 : ite(173, 81, 181) : BV:8
183 : ite(172, 77, 182) : BV:8
184 : ite(171, 77, 183) : BV:8
185 : ite(170, 74, 184) : BV:8
186 : bvadd(75, 69, 151) : BV:32
187 : eq(186, 72) : BOOL
188 : eq(186, 75) : BOOL
189 : eq(186, 67) : BOOL
190 : eq(186, 79) : BOOL
191 : eq(186, 10) : BOOL
192 : eq(186, 2) : BOOL
193 : eq(186, 86) : BOOL
194 : eq(186, 89) : BOOL
195 : ite(194, 91, 92) : BV:8
196 : ite(193, 88, 195) : BV:8
197 : ite(192, 85, 196) : BV:8
198 : ite(191, 83, 197) : BV:8
199 : ite(190, 81, 198) : BV:8
200 : ite(189, 77, 199) : BV:8
201 : ite(188, 77, 200) : BV:8
202 : ite(187, 74, 201) : BV:8
203 : bvadd(69, 151) : BV:32
204 : eq(203, 72) : BOOL
205 : eq(203, 75) : BOOL
206 : eq(203, 67) : BOOL
207 : eq(203, 79) : BOOL
208 : eq(203, 10) : BOOL
209 : eq(203, 2) : BOOL
210 : eq(203, 86) : BOOL
211 : eq(203, 89) : BOOL
212 : ite(211, 91, 92) : BV:8
213 : ite(210, 88, 212) : BV:8
214 : ite(209, 85, 213) : BV:8
215 : ite(208, 83, 214) : BV:8
216 : ite(207, 81, 215) : BV:8
217 : ite(206, 77, 216) : BV:8
218 : ite(205, 77, 217) : BV:8
219 : ite(204, 74, 218) : BV:8
220 : bvconcat(168, 185, 202, 219) : BV:32
221 : ite(66, 2, 220) : BV:32
222 : ite(64, 2, 221) : BV:32
223 : lambda(61, 222) : FUNCTION[BV:32 -> BV:32]
224 : map(60, 223) : MAP[BV:32 -> BV:32]
225 : lambda(17, 224) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
226 : map(16, 225) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
227 : sym_const(226) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 123, [ 1; 1 ] -> 255, [ 2; 2 ] -> 239, [ 3; 3 ] -> 255, [ 4; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 244, [ 4294967293; 4294967293 ] -> 247, [ 4294967294; 4294967294 ] -> 126, [ 4294967295; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 288358383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 288358384; 288358387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 288358388; 2511683591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2511683592; 2511683595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2511683596; 3359014931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3359014932; 3359014935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3359014936; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3359014932 { 0xc8368014 -935952364 -1.42578363e17 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 288358384 { 0x112ffff0 +1.37499809e163 } : BV:32
=input.dst.llvm-%n
1 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2511683592 { 0x95b54008 -1783283704 -1.41601657e172 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37785Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 511 { 0x1ff +1.6091e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 512 { 0x200 +1.6103e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 513 { 0x201 +1.6115e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda37786Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 244 { 0xf4 -12 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 255 { 0xff -1 } : BV:8
67 : eq(60, 56) : BOOL
68 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
69 : eq(60, 68) : BOOL
70 : 247 { 0xf7 -9 } : BV:8
71 : eq(60, 18) : BOOL
72 : 251 { 0xfb -5 } : BV:8
73 : eq(60, 2) : BOOL
74 : 123 { 0x7b } : BV:8
75 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
76 : eq(60, 75) : BOOL
77 : 126 { 0x7e } : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 239 { 0xef -17 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 72, 84) : BV:8
86 : ite(69, 70, 85) : BV:8
87 : ite(67, 66, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(78, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 68) : BOOL
95 : eq(90, 18) : BOOL
96 : eq(90, 2) : BOOL
97 : eq(90, 75) : BOOL
98 : eq(90, 78) : BOOL
99 : ite(98, 80, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 74, 100) : BV:8
102 : ite(95, 72, 101) : BV:8
103 : ite(94, 70, 102) : BV:8
104 : ite(93, 66, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(64, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 68) : BOOL
112 : eq(107, 18) : BOOL
113 : eq(107, 2) : BOOL
114 : eq(107, 75) : BOOL
115 : eq(107, 78) : BOOL
116 : ite(115, 80, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 74, 117) : BV:8
119 : ite(112, 72, 118) : BV:8
120 : ite(111, 70, 119) : BV:8
121 : ite(110, 66, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 68) : BOOL
128 : eq(59, 18) : BOOL
129 : eq(59, 2) : BOOL
130 : eq(59, 75) : BOOL
131 : eq(59, 78) : BOOL
132 : ite(131, 80, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 74, 133) : BV:8
135 : ite(128, 72, 134) : BV:8
136 : ite(127, 70, 135) : BV:8
137 : ite(126, 66, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 68) : BOOL
146 : eq(141, 18) : BOOL
147 : eq(141, 2) : BOOL
148 : eq(141, 75) : BOOL
149 : eq(141, 78) : BOOL
150 : ite(149, 80, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 74, 151) : BV:8
153 : ite(146, 72, 152) : BV:8
154 : ite(145, 70, 153) : BV:8
155 : ite(144, 66, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(78, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 68) : BOOL
163 : eq(158, 18) : BOOL
164 : eq(158, 2) : BOOL
165 : eq(158, 75) : BOOL
166 : eq(158, 78) : BOOL
167 : ite(166, 80, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 74, 168) : BV:8
170 : ite(163, 72, 169) : BV:8
171 : ite(162, 70, 170) : BV:8
172 : ite(161, 66, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(64, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 68) : BOOL
180 : eq(175, 18) : BOOL
181 : eq(175, 2) : BOOL
182 : eq(175, 75) : BOOL
183 : eq(175, 78) : BOOL
184 : ite(183, 80, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 74, 185) : BV:8
187 : ite(180, 72, 186) : BV:8
188 : ite(179, 70, 187) : BV:8
189 : ite(178, 66, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 18) : BOOL
198 : eq(192, 2) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 78) : BOOL
201 : ite(200, 80, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 74, 202) : BV:8
204 : ite(197, 72, 203) : BV:8
205 : ite(196, 70, 204) : BV:8
206 : ite(195, 66, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : ite(53, 2, 210) : BV:32
212 : lambda(50, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(49, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda37775Var : BV:32
20 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : 511 { 0x1ff +1.6091e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 512 { 0x200 +1.6103e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 513 { 0x201 +1.6115e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 2) : BOOL
53 : and(52, 50) : BOOL
54 : ite(53, 7, 13) : BOOL
55 : ite(51, 7, 54) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda37776Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : 3 { 0x3 +1.35e129 } : BV:32
64 : 4 { 0x4 +1.47e129 } : BV:32
65 : bvmul(64, 57) : BV:32
66 : bvmul(64, 2) : BV:32
67 : bvadd(63, 66) : BV:32
68 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
69 : eq(67, 68) : BOOL
70 : 244 { 0xf4 -12 } : BV:8
71 : eq(67, 16) : BOOL
72 : 255 { 0xff -1 } : BV:8
73 : eq(67, 63) : BOOL
74 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
75 : eq(67, 74) : BOOL
76 : 247 { 0xf7 -9 } : BV:8
77 : eq(67, 10) : BOOL
78 : 251 { 0xfb -5 } : BV:8
79 : eq(67, 1) : BOOL
80 : 123 { 0x7b } : BV:8
81 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
82 : eq(67, 81) : BOOL
83 : 126 { 0x7e } : BV:8
84 : 2 { 0x2 +1.23e129 } : BV:32
85 : eq(67, 84) : BOOL
86 : 239 { 0xef -17 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(77, 78, 90) : BV:8
92 : ite(75, 76, 91) : BV:8
93 : ite(73, 72, 92) : BV:8
94 : ite(71, 72, 93) : BV:8
95 : ite(69, 70, 94) : BV:8
96 : bvadd(84, 66) : BV:32
97 : eq(96, 68) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 63) : BOOL
100 : eq(96, 74) : BOOL
101 : eq(96, 10) : BOOL
102 : eq(96, 1) : BOOL
103 : eq(96, 81) : BOOL
104 : eq(96, 84) : BOOL
105 : ite(104, 86, 87) : BV:8
106 : ite(103, 83, 105) : BV:8
107 : ite(102, 80, 106) : BV:8
108 : ite(101, 78, 107) : BV:8
109 : ite(100, 76, 108) : BV:8
110 : ite(99, 72, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : ite(97, 70, 111) : BV:8
113 : bvadd(16, 66) : BV:32
114 : eq(113, 68) : BOOL
115 : eq(113, 16) : BOOL
116 : eq(113, 63) : BOOL
117 : eq(113, 74) : BOOL
118 : eq(113, 10) : BOOL
119 : eq(113, 1) : BOOL
120 : eq(113, 81) : BOOL
121 : eq(113, 84) : BOOL
122 : ite(121, 86, 87) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 80, 123) : BV:8
125 : ite(118, 78, 124) : BV:8
126 : ite(117, 76, 125) : BV:8
127 : ite(116, 72, 126) : BV:8
128 : ite(115, 72, 127) : BV:8
129 : ite(114, 70, 128) : BV:8
130 : eq(66, 68) : BOOL
131 : eq(66, 16) : BOOL
132 : eq(66, 63) : BOOL
133 : eq(66, 74) : BOOL
134 : eq(66, 10) : BOOL
135 : eq(66, 1) : BOOL
136 : eq(66, 81) : BOOL
137 : eq(66, 84) : BOOL
138 : ite(137, 86, 87) : BV:8
139 : ite(136, 83, 138) : BV:8
140 : ite(135, 80, 139) : BV:8
141 : ite(134, 78, 140) : BV:8
142 : ite(133, 76, 141) : BV:8
143 : ite(132, 72, 142) : BV:8
144 : ite(131, 72, 143) : BV:8
145 : ite(130, 70, 144) : BV:8
146 : bvconcat(95, 112, 129, 145) : BV:32
147 : bvadd(63, 65, 146) : BV:32
148 : eq(147, 68) : BOOL
149 : eq(147, 16) : BOOL
150 : eq(147, 63) : BOOL
151 : eq(147, 74) : BOOL
152 : eq(147, 10) : BOOL
153 : eq(147, 1) : BOOL
154 : eq(147, 81) : BOOL
155 : eq(147, 84) : BOOL
156 : ite(155, 86, 87) : BV:8
157 : ite(154, 83, 156) : BV:8
158 : ite(153, 80, 157) : BV:8
159 : ite(152, 78, 158) : BV:8
160 : ite(151, 76, 159) : BV:8
161 : ite(150, 72, 160) : BV:8
162 : ite(149, 72, 161) : BV:8
163 : ite(148, 70, 162) : BV:8
164 : bvadd(84, 65, 146) : BV:32
165 : eq(164, 68) : BOOL
166 : eq(164, 16) : BOOL
167 : eq(164, 63) : BOOL
168 : eq(164, 74) : BOOL
169 : eq(164, 10) : BOOL
170 : eq(164, 1) : BOOL
171 : eq(164, 81) : BOOL
172 : eq(164, 84) : BOOL
173 : ite(172, 86, 87) : BV:8
174 : ite(171, 83, 173) : BV:8
175 : ite(170, 80, 174) : BV:8
176 : ite(169, 78, 175) : BV:8
177 : ite(168, 76, 176) : BV:8
178 : ite(167, 72, 177) : BV:8
179 : ite(166, 72, 178) : BV:8
180 : ite(165, 70, 179) : BV:8
181 : bvadd(16, 65, 146) : BV:32
182 : eq(181, 68) : BOOL
183 : eq(181, 16) : BOOL
184 : eq(181, 63) : BOOL
185 : eq(181, 74) : BOOL
186 : eq(181, 10) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 81) : BOOL
189 : eq(181, 84) : BOOL
190 : ite(189, 86, 87) : BV:8
191 : ite(188, 83, 190) : BV:8
192 : ite(187, 80, 191) : BV:8
193 : ite(186, 78, 192) : BV:8
194 : ite(185, 76, 193) : BV:8
195 : ite(184, 72, 194) : BV:8
196 : ite(183, 72, 195) : BV:8
197 : ite(182, 70, 196) : BV:8
198 : bvadd(65, 146) : BV:32
199 : eq(198, 68) : BOOL
200 : eq(198, 16) : BOOL
201 : eq(198, 63) : BOOL
202 : eq(198, 74) : BOOL
203 : eq(198, 10) : BOOL
204 : eq(198, 1) : BOOL
205 : eq(198, 81) : BOOL
206 : eq(198, 84) : BOOL
207 : ite(206, 86, 87) : BV:8
208 : ite(205, 83, 207) : BV:8
209 : ite(204, 80, 208) : BV:8
210 : ite(203, 78, 209) : BV:8
211 : ite(202, 76, 210) : BV:8
212 : ite(201, 72, 211) : BV:8
213 : ite(200, 72, 212) : BV:8
214 : ite(199, 70, 213) : BV:8
215 : bvconcat(163, 180, 197, 214) : BV:32
216 : ite(62, 1, 215) : BV:32
217 : ite(60, 1, 216) : BV:32
218 : lambda(57, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(56, 218) : MAP[BV:32 -> BV:32]
220 : sum(17, 18, 219) : SUM[UNIT,MAP[BV:32 -> BV:32]]
221 : sym_const(220) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37791Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 511 { 0x1ff +1.6091e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 512 { 0x200 +1.6103e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 513 { 0x201 +1.6115e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda37792Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 50) : BV:32
59 : bvmul(57, 3) : BV:32
60 : bvadd(56, 59) : BV:32
61 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 244 { 0xf4 -12 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 255 { 0xff -1 } : BV:8
67 : eq(60, 56) : BOOL
68 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
69 : eq(60, 68) : BOOL
70 : 247 { 0xf7 -9 } : BV:8
71 : eq(60, 18) : BOOL
72 : 251 { 0xfb -5 } : BV:8
73 : eq(60, 2) : BOOL
74 : 123 { 0x7b } : BV:8
75 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
76 : eq(60, 75) : BOOL
77 : 126 { 0x7e } : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 239 { 0xef -17 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 72, 84) : BV:8
86 : ite(69, 70, 85) : BV:8
87 : ite(67, 66, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(78, 59) : BV:32
91 : eq(90, 61) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 56) : BOOL
94 : eq(90, 68) : BOOL
95 : eq(90, 18) : BOOL
96 : eq(90, 2) : BOOL
97 : eq(90, 75) : BOOL
98 : eq(90, 78) : BOOL
99 : ite(98, 80, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 74, 100) : BV:8
102 : ite(95, 72, 101) : BV:8
103 : ite(94, 70, 102) : BV:8
104 : ite(93, 66, 103) : BV:8
105 : ite(92, 66, 104) : BV:8
106 : ite(91, 63, 105) : BV:8
107 : bvadd(64, 59) : BV:32
108 : eq(107, 61) : BOOL
109 : eq(107, 64) : BOOL
110 : eq(107, 56) : BOOL
111 : eq(107, 68) : BOOL
112 : eq(107, 18) : BOOL
113 : eq(107, 2) : BOOL
114 : eq(107, 75) : BOOL
115 : eq(107, 78) : BOOL
116 : ite(115, 80, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 74, 117) : BV:8
119 : ite(112, 72, 118) : BV:8
120 : ite(111, 70, 119) : BV:8
121 : ite(110, 66, 120) : BV:8
122 : ite(109, 66, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : eq(59, 61) : BOOL
125 : eq(59, 64) : BOOL
126 : eq(59, 56) : BOOL
127 : eq(59, 68) : BOOL
128 : eq(59, 18) : BOOL
129 : eq(59, 2) : BOOL
130 : eq(59, 75) : BOOL
131 : eq(59, 78) : BOOL
132 : ite(131, 80, 81) : BV:8
133 : ite(130, 77, 132) : BV:8
134 : ite(129, 74, 133) : BV:8
135 : ite(128, 72, 134) : BV:8
136 : ite(127, 70, 135) : BV:8
137 : ite(126, 66, 136) : BV:8
138 : ite(125, 66, 137) : BV:8
139 : ite(124, 63, 138) : BV:8
140 : bvconcat(89, 106, 123, 139) : BV:32
141 : bvadd(56, 58, 140) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 56) : BOOL
145 : eq(141, 68) : BOOL
146 : eq(141, 18) : BOOL
147 : eq(141, 2) : BOOL
148 : eq(141, 75) : BOOL
149 : eq(141, 78) : BOOL
150 : ite(149, 80, 81) : BV:8
151 : ite(148, 77, 150) : BV:8
152 : ite(147, 74, 151) : BV:8
153 : ite(146, 72, 152) : BV:8
154 : ite(145, 70, 153) : BV:8
155 : ite(144, 66, 154) : BV:8
156 : ite(143, 66, 155) : BV:8
157 : ite(142, 63, 156) : BV:8
158 : bvadd(78, 58, 140) : BV:32
159 : eq(158, 61) : BOOL
160 : eq(158, 64) : BOOL
161 : eq(158, 56) : BOOL
162 : eq(158, 68) : BOOL
163 : eq(158, 18) : BOOL
164 : eq(158, 2) : BOOL
165 : eq(158, 75) : BOOL
166 : eq(158, 78) : BOOL
167 : ite(166, 80, 81) : BV:8
168 : ite(165, 77, 167) : BV:8
169 : ite(164, 74, 168) : BV:8
170 : ite(163, 72, 169) : BV:8
171 : ite(162, 70, 170) : BV:8
172 : ite(161, 66, 171) : BV:8
173 : ite(160, 66, 172) : BV:8
174 : ite(159, 63, 173) : BV:8
175 : bvadd(64, 58, 140) : BV:32
176 : eq(175, 61) : BOOL
177 : eq(175, 64) : BOOL
178 : eq(175, 56) : BOOL
179 : eq(175, 68) : BOOL
180 : eq(175, 18) : BOOL
181 : eq(175, 2) : BOOL
182 : eq(175, 75) : BOOL
183 : eq(175, 78) : BOOL
184 : ite(183, 80, 81) : BV:8
185 : ite(182, 77, 184) : BV:8
186 : ite(181, 74, 185) : BV:8
187 : ite(180, 72, 186) : BV:8
188 : ite(179, 70, 187) : BV:8
189 : ite(178, 66, 188) : BV:8
190 : ite(177, 66, 189) : BV:8
191 : ite(176, 63, 190) : BV:8
192 : bvadd(58, 140) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 56) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 18) : BOOL
198 : eq(192, 2) : BOOL
199 : eq(192, 75) : BOOL
200 : eq(192, 78) : BOOL
201 : ite(200, 80, 81) : BV:8
202 : ite(199, 77, 201) : BV:8
203 : ite(198, 74, 202) : BV:8
204 : ite(197, 72, 203) : BV:8
205 : ite(196, 70, 204) : BV:8
206 : ite(195, 66, 205) : BV:8
207 : ite(194, 66, 206) : BV:8
208 : ite(193, 63, 207) : BV:8
209 : bvconcat(157, 174, 191, 208) : BV:32
210 : ite(55, 2, 209) : BV:32
211 : ite(53, 2, 210) : BV:32
212 : lambda(50, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(49, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 288358384 { 0x112ffff0 +1.37499809e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 288358387 { 0x112ffff3 +1.37499845e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2511683592 { 0x95b54008 -1783283704 -1.41601657e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2511683595 { 0x95b5400b -1783283701 -1.41601693e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3359014932 { 0xc8368014 -935952364 -1.42578363e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3359014935 { 0xc8368017 -935952361 -1.42578399e17 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda37605Var : BV:32
2 : Lambda37606Var : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 511 { 0x1ff +1.6091e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 512 { 0x200 +1.6103e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 513 { 0x201 +1.6115e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : 3 { 0x3 +1.35e129 } : BV:32
61 : 4 { 0x4 +1.47e129 } : BV:32
62 : bvmul(61, 2) : BV:32
63 : bvmul(61, 1) : BV:32
64 : bvadd(60, 63) : BV:32
65 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
66 : eq(64, 65) : BOOL
67 : 244 { 0xf4 -12 } : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : eq(64, 68) : BOOL
70 : 255 { 0xff -1 } : BV:8
71 : eq(64, 60) : BOOL
72 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
73 : eq(64, 72) : BOOL
74 : 247 { 0xf7 -9 } : BV:8
75 : eq(64, 17) : BOOL
76 : 251 { 0xfb -5 } : BV:8
77 : eq(64, 5) : BOOL
78 : 123 { 0x7b } : BV:8
79 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
80 : eq(64, 79) : BOOL
81 : 126 { 0x7e } : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : eq(64, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(75, 76, 88) : BV:8
90 : ite(73, 74, 89) : BV:8
91 : ite(71, 70, 90) : BV:8
92 : ite(69, 70, 91) : BV:8
93 : ite(66, 67, 92) : BV:8
94 : bvadd(82, 63) : BV:32
95 : eq(94, 65) : BOOL
96 : eq(94, 68) : BOOL
97 : eq(94, 60) : BOOL
98 : eq(94, 72) : BOOL
99 : eq(94, 17) : BOOL
100 : eq(94, 5) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 76, 105) : BV:8
107 : ite(98, 74, 106) : BV:8
108 : ite(97, 70, 107) : BV:8
109 : ite(96, 70, 108) : BV:8
110 : ite(95, 67, 109) : BV:8
111 : bvadd(68, 63) : BV:32
112 : eq(111, 65) : BOOL
113 : eq(111, 68) : BOOL
114 : eq(111, 60) : BOOL
115 : eq(111, 72) : BOOL
116 : eq(111, 17) : BOOL
117 : eq(111, 5) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 76, 122) : BV:8
124 : ite(115, 74, 123) : BV:8
125 : ite(114, 70, 124) : BV:8
126 : ite(113, 70, 125) : BV:8
127 : ite(112, 67, 126) : BV:8
128 : eq(63, 65) : BOOL
129 : eq(63, 68) : BOOL
130 : eq(63, 60) : BOOL
131 : eq(63, 72) : BOOL
132 : eq(63, 17) : BOOL
133 : eq(63, 5) : BOOL
134 : eq(63, 79) : BOOL
135 : eq(63, 82) : BOOL
136 : ite(135, 84, 85) : BV:8
137 : ite(134, 81, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 76, 138) : BV:8
140 : ite(131, 74, 139) : BV:8
141 : ite(130, 70, 140) : BV:8
142 : ite(129, 70, 141) : BV:8
143 : ite(128, 67, 142) : BV:8
144 : bvconcat(93, 110, 127, 143) : BV:32
145 : bvadd(60, 62, 144) : BV:32
146 : eq(145, 65) : BOOL
147 : eq(145, 68) : BOOL
148 : eq(145, 60) : BOOL
149 : eq(145, 72) : BOOL
150 : eq(145, 17) : BOOL
151 : eq(145, 5) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 82) : BOOL
154 : ite(153, 84, 85) : BV:8
155 : ite(152, 81, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 76, 156) : BV:8
158 : ite(149, 74, 157) : BV:8
159 : ite(148, 70, 158) : BV:8
160 : ite(147, 70, 159) : BV:8
161 : ite(146, 67, 160) : BV:8
162 : bvadd(82, 62, 144) : BV:32
163 : eq(162, 65) : BOOL
164 : eq(162, 68) : BOOL
165 : eq(162, 60) : BOOL
166 : eq(162, 72) : BOOL
167 : eq(162, 17) : BOOL
168 : eq(162, 5) : BOOL
169 : eq(162, 79) : BOOL
170 : eq(162, 82) : BOOL
171 : ite(170, 84, 85) : BV:8
172 : ite(169, 81, 171) : BV:8
173 : ite(168, 78, 172) : BV:8
174 : ite(167, 76, 173) : BV:8
175 : ite(166, 74, 174) : BV:8
176 : ite(165, 70, 175) : BV:8
177 : ite(164, 70, 176) : BV:8
178 : ite(163, 67, 177) : BV:8
179 : bvadd(68, 62, 144) : BV:32
180 : eq(179, 65) : BOOL
181 : eq(179, 68) : BOOL
182 : eq(179, 60) : BOOL
183 : eq(179, 72) : BOOL
184 : eq(179, 17) : BOOL
185 : eq(179, 5) : BOOL
186 : eq(179, 79) : BOOL
187 : eq(179, 82) : BOOL
188 : ite(187, 84, 85) : BV:8
189 : ite(186, 81, 188) : BV:8
190 : ite(185, 78, 189) : BV:8
191 : ite(184, 76, 190) : BV:8
192 : ite(183, 74, 191) : BV:8
193 : ite(182, 70, 192) : BV:8
194 : ite(181, 70, 193) : BV:8
195 : ite(180, 67, 194) : BV:8
196 : bvadd(62, 144) : BV:32
197 : eq(196, 65) : BOOL
198 : eq(196, 68) : BOOL
199 : eq(196, 60) : BOOL
200 : eq(196, 72) : BOOL
201 : eq(196, 17) : BOOL
202 : eq(196, 5) : BOOL
203 : eq(196, 79) : BOOL
204 : eq(196, 82) : BOOL
205 : ite(204, 84, 85) : BV:8
206 : ite(203, 81, 205) : BV:8
207 : ite(202, 78, 206) : BV:8
208 : ite(201, 76, 207) : BV:8
209 : ite(200, 74, 208) : BV:8
210 : ite(199, 70, 209) : BV:8
211 : ite(198, 70, 210) : BV:8
212 : ite(197, 67, 211) : BV:8
213 : bvconcat(161, 178, 195, 212) : BV:32
214 : ite(9, 5, 213) : BV:32
215 : ite(7, 5, 214) : BV:32
216 : ite(59, 213, 215) : BV:32
217 : ite(9, 5, 216) : BV:32
218 : ite(7, 5, 217) : BV:32
219 : lambda(1, 2, 218) : FUNCTION[BV:32,BV:32 -> BV:32]
220 : sym_const(219) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda37610Var : BV:32
2 : Lambda37611Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 511 { 0x1ff +1.6091e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 512 { 0x200 +1.6103e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 513 { 0x201 +1.6115e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4016830071 ] -> true, [ 4016830072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4016830071 ] -> true, [ 4016830072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda37619Var : BV:32
2 : Lambda37620Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4016830071 { 0xef6bf677 -278137225 -1.84345901e95 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4016830072 { 0xef6bf678 -278137224 -1.84345912e95 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 4016830073 { 0xef6bf679 -278137223 -1.84345924e95 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 511 { 0x1ff +1.6091e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 512 { 0x200 +1.6103e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 513 { 0x201 +1.6115e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda37615Var : BV:32
2 : Lambda37616Var : BV:32
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
16 : eq(14, 15) : BOOL
17 : 244 { 0xf4 -12 } : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(14, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : eq(14, 10) : BOOL
22 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
23 : eq(14, 22) : BOOL
24 : 247 { 0xf7 -9 } : BV:8
25 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : eq(14, 5) : BOOL
29 : 123 { 0x7b } : BV:8
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : eq(14, 30) : BOOL
32 : 126 { 0x7e } : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : eq(14, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(23, 24, 40) : BV:8
42 : ite(21, 20, 41) : BV:8
43 : ite(19, 20, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : bvadd(33, 13) : BV:32
46 : eq(45, 15) : BOOL
47 : eq(45, 18) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : eq(45, 5) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : ite(49, 24, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 20, 59) : BV:8
61 : ite(46, 17, 60) : BV:8
62 : bvadd(18, 13) : BV:32
63 : eq(62, 15) : BOOL
64 : eq(62, 18) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 22) : BOOL
67 : eq(62, 25) : BOOL
68 : eq(62, 5) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 27, 73) : BV:8
75 : ite(66, 24, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 20, 76) : BV:8
78 : ite(63, 17, 77) : BV:8
79 : eq(13, 15) : BOOL
80 : eq(13, 18) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 22) : BOOL
83 : eq(13, 25) : BOOL
84 : eq(13, 5) : BOOL
85 : eq(13, 30) : BOOL
86 : eq(13, 33) : BOOL
87 : ite(86, 35, 36) : BV:8
88 : ite(85, 32, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 27, 89) : BV:8
91 : ite(82, 24, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 20, 92) : BV:8
94 : ite(79, 17, 93) : BV:8
95 : bvconcat(44, 61, 78, 94) : BV:32
96 : bvadd(10, 12, 95) : BV:32
97 : eq(96, 15) : BOOL
98 : eq(96, 18) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 22) : BOOL
101 : eq(96, 25) : BOOL
102 : eq(96, 5) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 33) : BOOL
105 : ite(104, 35, 36) : BV:8
106 : ite(103, 32, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 27, 107) : BV:8
109 : ite(100, 24, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 20, 110) : BV:8
112 : ite(97, 17, 111) : BV:8
113 : bvadd(33, 12, 95) : BV:32
114 : eq(113, 15) : BOOL
115 : eq(113, 18) : BOOL
116 : eq(113, 10) : BOOL
117 : eq(113, 22) : BOOL
118 : eq(113, 25) : BOOL
119 : eq(113, 5) : BOOL
120 : eq(113, 30) : BOOL
121 : eq(113, 33) : BOOL
122 : ite(121, 35, 36) : BV:8
123 : ite(120, 32, 122) : BV:8
124 : ite(119, 29, 123) : BV:8
125 : ite(118, 27, 124) : BV:8
126 : ite(117, 24, 125) : BV:8
127 : ite(116, 20, 126) : BV:8
128 : ite(115, 20, 127) : BV:8
129 : ite(114, 17, 128) : BV:8
130 : bvadd(18, 12, 95) : BV:32
131 : eq(130, 15) : BOOL
132 : eq(130, 18) : BOOL
133 : eq(130, 10) : BOOL
134 : eq(130, 22) : BOOL
135 : eq(130, 25) : BOOL
136 : eq(130, 5) : BOOL
137 : eq(130, 30) : BOOL
138 : eq(130, 33) : BOOL
139 : ite(138, 35, 36) : BV:8
140 : ite(137, 32, 139) : BV:8
141 : ite(136, 29, 140) : BV:8
142 : ite(135, 27, 141) : BV:8
143 : ite(134, 24, 142) : BV:8
144 : ite(133, 20, 143) : BV:8
145 : ite(132, 20, 144) : BV:8
146 : ite(131, 17, 145) : BV:8
147 : bvadd(12, 95) : BV:32
148 : eq(147, 15) : BOOL
149 : eq(147, 18) : BOOL
150 : eq(147, 10) : BOOL
151 : eq(147, 22) : BOOL
152 : eq(147, 25) : BOOL
153 : eq(147, 5) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : ite(155, 35, 36) : BV:8
157 : ite(154, 32, 156) : BV:8
158 : ite(153, 29, 157) : BV:8
159 : ite(152, 27, 158) : BV:8
160 : ite(151, 24, 159) : BV:8
161 : ite(150, 20, 160) : BV:8
162 : ite(149, 20, 161) : BV:8
163 : ite(148, 17, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : ite(9, 5, 164) : BV:32
166 : ite(7, 5, 165) : BV:32
167 : lambda(1, 2, 166) : FUNCTION[BV:32,BV:32 -> BV:32]
168 : sym_const(167) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3628832664
=counter_example_end
=global nodece 32 num_edges_traversed 1
=global nodece 32 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 33
=global nodece 33 nodece z3v487.ce3542.num_edges_traversed1
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce3542 ee3b986982664199418fc77638a816d
=input.spec-%var-x-1
1 : Lambda39444Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39445Var : BV:32
18 : Lambda39446Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39447Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39469Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39470Var : BV:32
18 : Lambda39471Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39472Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1571035518 { 0x5da4197e +1.28202795e60 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39477Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39478Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda39454Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda39455Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39483Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda39484Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1417378735 { 0x547b7baf +1.96471202e41 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4280460529
=counter_example_end
=global nodece 33 num_edges_traversed 1
=global nodece 33 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce3588.num_edges_traversed1
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce3588 5533b92d85cfdcc6b09031cf713b94e8
=input.spec-%var-x-1
1 : Lambda40491Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40492Var : BV:32
17 : Lambda40493Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda40494Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : and(18, 26) : BOOL
60 : ite(24, 12, 12) : BOOL
61 : ite(59, 7, 60) : BOOL
62 : bvule(2, 53) : BOOL
63 : bvule(53, 2) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(35, 53) : BOOL
66 : bvule(53, 35) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(39, 53) : BOOL
69 : bvule(53, 8) : BOOL
70 : and(68, 69) : BOOL
71 : ite(70, 39, 39) : BV:32
72 : ite(67, 35, 71) : BV:32
73 : ite(64, 2, 72) : BV:32
74 : eq(73, 2) : BOOL
75 : and(31, 74) : BOOL
76 : and(48, 74) : BOOL
77 : ite(76, 7, 12) : BOOL
78 : ite(75, 7, 77) : BOOL
79 : and(61, 78) : BOOL
80 : 3 { 0x3 +1.35e129 } : BV:32
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 53) : BV:32
83 : bvmul(81, 16) : BV:32
84 : bvadd(80, 83) : BV:32
85 : eq(84, 2) : BOOL
86 : 168 { 0xa8 -88 } : BV:8
87 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
88 : eq(84, 87) : BOOL
89 : 235 { 0xeb -21 } : BV:8
90 : eq(84, 80) : BOOL
91 : 27 { 0x1b } : BV:8
92 : eq(84, 35) : BOOL
93 : 223 { 0xdf -33 } : BV:8
94 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
95 : eq(84, 94) : BOOL
96 : 68 { 0x44 } : BV:8
97 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
98 : eq(84, 97) : BOOL
99 : 114 { 0x72 } : BV:8
100 : eq(84, 39) : BOOL
101 : 104 { 0x68 } : BV:8
102 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
103 : eq(84, 102) : BOOL
104 : 164 { 0xa4 -92 } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(98, 99, 107) : BV:8
109 : ite(95, 96, 108) : BV:8
110 : ite(92, 93, 109) : BV:8
111 : ite(90, 91, 110) : BV:8
112 : ite(88, 89, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : bvadd(39, 83) : BV:32
115 : eq(114, 2) : BOOL
116 : eq(114, 87) : BOOL
117 : eq(114, 80) : BOOL
118 : eq(114, 35) : BOOL
119 : eq(114, 94) : BOOL
120 : eq(114, 97) : BOOL
121 : eq(114, 39) : BOOL
122 : eq(114, 102) : BOOL
123 : ite(122, 104, 105) : BV:8
124 : ite(121, 101, 123) : BV:8
125 : ite(120, 99, 124) : BV:8
126 : ite(119, 96, 125) : BV:8
127 : ite(118, 93, 126) : BV:8
128 : ite(117, 91, 127) : BV:8
129 : ite(116, 89, 128) : BV:8
130 : ite(115, 86, 129) : BV:8
131 : bvadd(35, 83) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 87) : BOOL
134 : eq(131, 80) : BOOL
135 : eq(131, 35) : BOOL
136 : eq(131, 94) : BOOL
137 : eq(131, 97) : BOOL
138 : eq(131, 39) : BOOL
139 : eq(131, 102) : BOOL
140 : ite(139, 104, 105) : BV:8
141 : ite(138, 101, 140) : BV:8
142 : ite(137, 99, 141) : BV:8
143 : ite(136, 96, 142) : BV:8
144 : ite(135, 93, 143) : BV:8
145 : ite(134, 91, 144) : BV:8
146 : ite(133, 89, 145) : BV:8
147 : ite(132, 86, 146) : BV:8
148 : eq(83, 2) : BOOL
149 : eq(83, 87) : BOOL
150 : eq(83, 80) : BOOL
151 : eq(83, 35) : BOOL
152 : eq(83, 94) : BOOL
153 : eq(83, 97) : BOOL
154 : eq(83, 39) : BOOL
155 : eq(83, 102) : BOOL
156 : ite(155, 104, 105) : BV:8
157 : ite(154, 101, 156) : BV:8
158 : ite(153, 99, 157) : BV:8
159 : ite(152, 96, 158) : BV:8
160 : ite(151, 93, 159) : BV:8
161 : ite(150, 91, 160) : BV:8
162 : ite(149, 89, 161) : BV:8
163 : ite(148, 86, 162) : BV:8
164 : bvconcat(113, 130, 147, 163) : BV:32
165 : bvadd(80, 82, 164) : BV:32
166 : eq(165, 2) : BOOL
167 : eq(165, 87) : BOOL
168 : eq(165, 80) : BOOL
169 : eq(165, 35) : BOOL
170 : eq(165, 94) : BOOL
171 : eq(165, 97) : BOOL
172 : eq(165, 39) : BOOL
173 : eq(165, 102) : BOOL
174 : ite(173, 104, 105) : BV:8
175 : ite(172, 101, 174) : BV:8
176 : ite(171, 99, 175) : BV:8
177 : ite(170, 96, 176) : BV:8
178 : ite(169, 93, 177) : BV:8
179 : ite(168, 91, 178) : BV:8
180 : ite(167, 89, 179) : BV:8
181 : ite(166, 86, 180) : BV:8
182 : bvadd(39, 82, 164) : BV:32
183 : eq(182, 2) : BOOL
184 : eq(182, 87) : BOOL
185 : eq(182, 80) : BOOL
186 : eq(182, 35) : BOOL
187 : eq(182, 94) : BOOL
188 : eq(182, 97) : BOOL
189 : eq(182, 39) : BOOL
190 : eq(182, 102) : BOOL
191 : ite(190, 104, 105) : BV:8
192 : ite(189, 101, 191) : BV:8
193 : ite(188, 99, 192) : BV:8
194 : ite(187, 96, 193) : BV:8
195 : ite(186, 93, 194) : BV:8
196 : ite(185, 91, 195) : BV:8
197 : ite(184, 89, 196) : BV:8
198 : ite(183, 86, 197) : BV:8
199 : bvadd(35, 82, 164) : BV:32
200 : eq(199, 2) : BOOL
201 : eq(199, 87) : BOOL
202 : eq(199, 80) : BOOL
203 : eq(199, 35) : BOOL
204 : eq(199, 94) : BOOL
205 : eq(199, 97) : BOOL
206 : eq(199, 39) : BOOL
207 : eq(199, 102) : BOOL
208 : ite(207, 104, 105) : BV:8
209 : ite(206, 101, 208) : BV:8
210 : ite(205, 99, 209) : BV:8
211 : ite(204, 96, 210) : BV:8
212 : ite(203, 93, 211) : BV:8
213 : ite(202, 91, 212) : BV:8
214 : ite(201, 89, 213) : BV:8
215 : ite(200, 86, 214) : BV:8
216 : bvadd(82, 164) : BV:32
217 : eq(216, 2) : BOOL
218 : eq(216, 87) : BOOL
219 : eq(216, 80) : BOOL
220 : eq(216, 35) : BOOL
221 : eq(216, 94) : BOOL
222 : eq(216, 97) : BOOL
223 : eq(216, 39) : BOOL
224 : eq(216, 102) : BOOL
225 : ite(224, 104, 105) : BV:8
226 : ite(223, 101, 225) : BV:8
227 : ite(222, 99, 226) : BV:8
228 : ite(221, 96, 227) : BV:8
229 : ite(220, 93, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 89, 230) : BV:8
232 : ite(217, 86, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(58, 2, 233) : BV:32
235 : ite(56, 2, 234) : BV:32
236 : ite(79, 233, 235) : BV:32
237 : ite(58, 2, 236) : BV:32
238 : ite(56, 2, 237) : BV:32
239 : lambda(53, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(52, 239) : MAP[BV:32 -> BV:32]
241 : lambda(16, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(15, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda40504Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40505Var : BV:32
17 : Lambda40506Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda40507Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 53) : BV:32
62 : bvmul(60, 16) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 2) : BOOL
65 : 168 { 0xa8 -88 } : BV:8
66 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
67 : eq(63, 66) : BOOL
68 : 235 { 0xeb -21 } : BV:8
69 : eq(63, 59) : BOOL
70 : 27 { 0x1b } : BV:8
71 : eq(63, 35) : BOOL
72 : 223 { 0xdf -33 } : BV:8
73 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
74 : eq(63, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
77 : eq(63, 76) : BOOL
78 : 114 { 0x72 } : BV:8
79 : eq(63, 39) : BOOL
80 : 104 { 0x68 } : BV:8
81 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
82 : eq(63, 81) : BOOL
83 : 164 { 0xa4 -92 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : bvadd(39, 62) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 66) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 35) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 39) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 65, 108) : BV:8
110 : bvadd(35, 62) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 66) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 35) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 39) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 65, 125) : BV:8
127 : eq(62, 2) : BOOL
128 : eq(62, 66) : BOOL
129 : eq(62, 59) : BOOL
130 : eq(62, 35) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 39) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 65, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 66) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 35) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 39) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 65, 159) : BV:8
161 : bvadd(39, 61, 143) : BV:32
162 : eq(161, 2) : BOOL
163 : eq(161, 66) : BOOL
164 : eq(161, 59) : BOOL
165 : eq(161, 35) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 39) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 65, 176) : BV:8
178 : bvadd(35, 61, 143) : BV:32
179 : eq(178, 2) : BOOL
180 : eq(178, 66) : BOOL
181 : eq(178, 59) : BOOL
182 : eq(178, 35) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 39) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 65, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 2) : BOOL
197 : eq(195, 66) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 35) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 39) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 65, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(58, 2, 212) : BV:32
214 : ite(56, 2, 213) : BV:32
215 : lambda(53, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(52, 215) : MAP[BV:32 -> BV:32]
217 : lambda(16, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(15, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 223, [ 2; 2 ] -> 104, [ 3; 3 ] -> 27, [ 4; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 164, [ 4294967289; 4294967289 ] -> 114, [ 4294967290; 4294967290 ] -> 235, [ 4294967291; 4294967291 ] -> 68, [ 4294967292; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 740395007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 740395008; 740395011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 740395012; 1061322755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1061322756; 1061322759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1061322760; 3663098495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3663098496; 3663098499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3663098500; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda40598Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda40599Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda40588Var : BV:32
18 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
19 : bvule(2, 18) : BOOL
20 : and(3, 19) : BOOL
21 : and(4, 4) : BOOL
22 : ite(21, 2, 2) : BV:32
23 : ite(10, 7, 22) : BV:32
24 : ite(20, 1, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(1, 17) : BOOL
27 : bvule(17, 1) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(14, 17) : BOOL
30 : bvule(17, 14) : BOOL
31 : and(29, 30) : BOOL
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvule(32, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 14, 36) : BV:32
38 : ite(28, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(25, 39) : BOOL
41 : eq(24, 1) : BOOL
42 : and(41, 39) : BOOL
43 : ite(42, 6, 11) : BOOL
44 : ite(40, 6, 43) : BOOL
45 : lambda(17, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda40589Var : BV:32
47 : eq(2, 2) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : eq(2, 1) : BOOL
51 : and(50, 48) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 46) : BV:32
55 : bvmul(53, 2) : BV:32
56 : bvadd(52, 55) : BV:32
57 : eq(56, 1) : BOOL
58 : 168 { 0xa8 -88 } : BV:8
59 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
60 : eq(56, 59) : BOOL
61 : 235 { 0xeb -21 } : BV:8
62 : eq(56, 52) : BOOL
63 : 27 { 0x1b } : BV:8
64 : eq(56, 14) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
67 : eq(56, 66) : BOOL
68 : 68 { 0x44 } : BV:8
69 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
70 : eq(56, 69) : BOOL
71 : 114 { 0x72 } : BV:8
72 : eq(56, 32) : BOOL
73 : 104 { 0x68 } : BV:8
74 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
75 : eq(56, 74) : BOOL
76 : 164 { 0xa4 -92 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(70, 71, 79) : BV:8
81 : ite(67, 68, 80) : BV:8
82 : ite(64, 65, 81) : BV:8
83 : ite(62, 63, 82) : BV:8
84 : ite(60, 61, 83) : BV:8
85 : ite(57, 58, 84) : BV:8
86 : bvadd(32, 55) : BV:32
87 : eq(86, 1) : BOOL
88 : eq(86, 59) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 14) : BOOL
91 : eq(86, 66) : BOOL
92 : eq(86, 69) : BOOL
93 : eq(86, 32) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 71, 96) : BV:8
98 : ite(91, 68, 97) : BV:8
99 : ite(90, 65, 98) : BV:8
100 : ite(89, 63, 99) : BV:8
101 : ite(88, 61, 100) : BV:8
102 : ite(87, 58, 101) : BV:8
103 : bvadd(14, 55) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 59) : BOOL
106 : eq(103, 52) : BOOL
107 : eq(103, 14) : BOOL
108 : eq(103, 66) : BOOL
109 : eq(103, 69) : BOOL
110 : eq(103, 32) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 71, 113) : BV:8
115 : ite(108, 68, 114) : BV:8
116 : ite(107, 65, 115) : BV:8
117 : ite(106, 63, 116) : BV:8
118 : ite(105, 61, 117) : BV:8
119 : ite(104, 58, 118) : BV:8
120 : eq(55, 1) : BOOL
121 : eq(55, 59) : BOOL
122 : eq(55, 52) : BOOL
123 : eq(55, 14) : BOOL
124 : eq(55, 66) : BOOL
125 : eq(55, 69) : BOOL
126 : eq(55, 32) : BOOL
127 : eq(55, 74) : BOOL
128 : ite(127, 76, 77) : BV:8
129 : ite(126, 73, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : ite(124, 68, 130) : BV:8
132 : ite(123, 65, 131) : BV:8
133 : ite(122, 63, 132) : BV:8
134 : ite(121, 61, 133) : BV:8
135 : ite(120, 58, 134) : BV:8
136 : bvconcat(85, 102, 119, 135) : BV:32
137 : bvadd(52, 54, 136) : BV:32
138 : eq(137, 1) : BOOL
139 : eq(137, 59) : BOOL
140 : eq(137, 52) : BOOL
141 : eq(137, 14) : BOOL
142 : eq(137, 66) : BOOL
143 : eq(137, 69) : BOOL
144 : eq(137, 32) : BOOL
145 : eq(137, 74) : BOOL
146 : ite(145, 76, 77) : BV:8
147 : ite(144, 73, 146) : BV:8
148 : ite(143, 71, 147) : BV:8
149 : ite(142, 68, 148) : BV:8
150 : ite(141, 65, 149) : BV:8
151 : ite(140, 63, 150) : BV:8
152 : ite(139, 61, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : bvadd(32, 54, 136) : BV:32
155 : eq(154, 1) : BOOL
156 : eq(154, 59) : BOOL
157 : eq(154, 52) : BOOL
158 : eq(154, 14) : BOOL
159 : eq(154, 66) : BOOL
160 : eq(154, 69) : BOOL
161 : eq(154, 32) : BOOL
162 : eq(154, 74) : BOOL
163 : ite(162, 76, 77) : BV:8
164 : ite(161, 73, 163) : BV:8
165 : ite(160, 71, 164) : BV:8
166 : ite(159, 68, 165) : BV:8
167 : ite(158, 65, 166) : BV:8
168 : ite(157, 63, 167) : BV:8
169 : ite(156, 61, 168) : BV:8
170 : ite(155, 58, 169) : BV:8
171 : bvadd(14, 54, 136) : BV:32
172 : eq(171, 1) : BOOL
173 : eq(171, 59) : BOOL
174 : eq(171, 52) : BOOL
175 : eq(171, 14) : BOOL
176 : eq(171, 66) : BOOL
177 : eq(171, 69) : BOOL
178 : eq(171, 32) : BOOL
179 : eq(171, 74) : BOOL
180 : ite(179, 76, 77) : BV:8
181 : ite(178, 73, 180) : BV:8
182 : ite(177, 71, 181) : BV:8
183 : ite(176, 68, 182) : BV:8
184 : ite(175, 65, 183) : BV:8
185 : ite(174, 63, 184) : BV:8
186 : ite(173, 61, 185) : BV:8
187 : ite(172, 58, 186) : BV:8
188 : bvadd(54, 136) : BV:32
189 : eq(188, 1) : BOOL
190 : eq(188, 59) : BOOL
191 : eq(188, 52) : BOOL
192 : eq(188, 14) : BOOL
193 : eq(188, 66) : BOOL
194 : eq(188, 69) : BOOL
195 : eq(188, 32) : BOOL
196 : eq(188, 74) : BOOL
197 : ite(196, 76, 77) : BV:8
198 : ite(195, 73, 197) : BV:8
199 : ite(194, 71, 198) : BV:8
200 : ite(193, 68, 199) : BV:8
201 : ite(192, 65, 200) : BV:8
202 : ite(191, 63, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 58, 203) : BV:8
205 : bvconcat(153, 170, 187, 204) : BV:32
206 : ite(51, 1, 205) : BV:32
207 : ite(49, 1, 206) : BV:32
208 : lambda(46, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(45, 208) : MAP[BV:32 -> BV:32]
210 : sum(15, 16, 209) : SUM[UNIT,MAP[BV:32 -> BV:32]]
211 : sym_const(210) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda40604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda40605Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3663098499 { 0xda567283 -631868797 -1.67536962e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 740395011 { 0x2c218803 +1.26196324e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1061322759 { 0x3f428007 +1.51953208e255 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda40421Var : BV:32
2 : Lambda40422Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : bvule(1, 3) : BOOL
12 : and(10, 11) : BOOL
13 : 1 { 0x1 } : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(14, 1) : BOOL
16 : bvule(1, 14) : BOOL
17 : and(15, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 18, 18) : BOOL
20 : ite(12, 13, 19) : BOOL
21 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(10, 22) : BOOL
24 : bvule(3, 1) : BOOL
25 : and(24, 11) : BOOL
26 : ite(25, 3, 3) : BV:32
27 : ite(17, 14, 26) : BV:32
28 : ite(23, 5, 27) : BV:32
29 : eq(28, 3) : BOOL
30 : bvule(5, 2) : BOOL
31 : bvule(2, 5) : BOOL
32 : and(30, 31) : BOOL
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 5, 42) : BV:32
44 : eq(43, 5) : BOOL
45 : and(29, 44) : BOOL
46 : eq(28, 5) : BOOL
47 : and(46, 44) : BOOL
48 : ite(47, 13, 18) : BOOL
49 : ite(45, 13, 48) : BOOL
50 : and(20, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 2) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 5) : BOOL
57 : 168 { 0xa8 -88 } : BV:8
58 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
59 : eq(55, 58) : BOOL
60 : 235 { 0xeb -21 } : BV:8
61 : eq(55, 51) : BOOL
62 : 27 { 0x1b } : BV:8
63 : eq(55, 33) : BOOL
64 : 223 { 0xdf -33 } : BV:8
65 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
66 : eq(55, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
69 : eq(55, 68) : BOOL
70 : 114 { 0x72 } : BV:8
71 : eq(55, 37) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
74 : eq(55, 73) : BOOL
75 : 164 { 0xa4 -92 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(59, 60, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : bvadd(37, 54) : BV:32
86 : eq(85, 5) : BOOL
87 : eq(85, 58) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 37) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 62, 98) : BV:8
100 : ite(87, 60, 99) : BV:8
101 : ite(86, 57, 100) : BV:8
102 : bvadd(33, 54) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 58) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 33) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 37) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 62, 115) : BV:8
117 : ite(104, 60, 116) : BV:8
118 : ite(103, 57, 117) : BV:8
119 : eq(54, 5) : BOOL
120 : eq(54, 58) : BOOL
121 : eq(54, 51) : BOOL
122 : eq(54, 33) : BOOL
123 : eq(54, 65) : BOOL
124 : eq(54, 68) : BOOL
125 : eq(54, 37) : BOOL
126 : eq(54, 73) : BOOL
127 : ite(126, 75, 76) : BV:8
128 : ite(125, 72, 127) : BV:8
129 : ite(124, 70, 128) : BV:8
130 : ite(123, 67, 129) : BV:8
131 : ite(122, 64, 130) : BV:8
132 : ite(121, 62, 131) : BV:8
133 : ite(120, 60, 132) : BV:8
134 : ite(119, 57, 133) : BV:8
135 : bvconcat(84, 101, 118, 134) : BV:32
136 : bvadd(51, 53, 135) : BV:32
137 : eq(136, 5) : BOOL
138 : eq(136, 58) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 33) : BOOL
141 : eq(136, 65) : BOOL
142 : eq(136, 68) : BOOL
143 : eq(136, 37) : BOOL
144 : eq(136, 73) : BOOL
145 : ite(144, 75, 76) : BV:8
146 : ite(143, 72, 145) : BV:8
147 : ite(142, 70, 146) : BV:8
148 : ite(141, 67, 147) : BV:8
149 : ite(140, 64, 148) : BV:8
150 : ite(139, 62, 149) : BV:8
151 : ite(138, 60, 150) : BV:8
152 : ite(137, 57, 151) : BV:8
153 : bvadd(37, 53, 135) : BV:32
154 : eq(153, 5) : BOOL
155 : eq(153, 58) : BOOL
156 : eq(153, 51) : BOOL
157 : eq(153, 33) : BOOL
158 : eq(153, 65) : BOOL
159 : eq(153, 68) : BOOL
160 : eq(153, 37) : BOOL
161 : eq(153, 73) : BOOL
162 : ite(161, 75, 76) : BV:8
163 : ite(160, 72, 162) : BV:8
164 : ite(159, 70, 163) : BV:8
165 : ite(158, 67, 164) : BV:8
166 : ite(157, 64, 165) : BV:8
167 : ite(156, 62, 166) : BV:8
168 : ite(155, 60, 167) : BV:8
169 : ite(154, 57, 168) : BV:8
170 : bvadd(33, 53, 135) : BV:32
171 : eq(170, 5) : BOOL
172 : eq(170, 58) : BOOL
173 : eq(170, 51) : BOOL
174 : eq(170, 33) : BOOL
175 : eq(170, 65) : BOOL
176 : eq(170, 68) : BOOL
177 : eq(170, 37) : BOOL
178 : eq(170, 73) : BOOL
179 : ite(178, 75, 76) : BV:8
180 : ite(177, 72, 179) : BV:8
181 : ite(176, 70, 180) : BV:8
182 : ite(175, 67, 181) : BV:8
183 : ite(174, 64, 182) : BV:8
184 : ite(173, 62, 183) : BV:8
185 : ite(172, 60, 184) : BV:8
186 : ite(171, 57, 185) : BV:8
187 : bvadd(53, 135) : BV:32
188 : eq(187, 5) : BOOL
189 : eq(187, 58) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 33) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 37) : BOOL
195 : eq(187, 73) : BOOL
196 : ite(195, 75, 76) : BV:8
197 : ite(194, 72, 196) : BV:8
198 : ite(193, 70, 197) : BV:8
199 : ite(192, 67, 198) : BV:8
200 : ite(191, 64, 199) : BV:8
201 : ite(190, 62, 200) : BV:8
202 : ite(189, 60, 201) : BV:8
203 : ite(188, 57, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(9, 5, 204) : BV:32
206 : ite(7, 5, 205) : BV:32
207 : ite(50, 204, 206) : BV:32
208 : ite(9, 5, 207) : BV:32
209 : ite(7, 5, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda40426Var : BV:32
2 : Lambda40427Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda40435Var : BV:32
2 : Lambda40436Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda40431Var : BV:32
2 : Lambda40432Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 5) : BOOL
16 : 168 { 0xa8 -88 } : BV:8
17 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
18 : eq(14, 17) : BOOL
19 : 235 { 0xeb -21 } : BV:8
20 : eq(14, 10) : BOOL
21 : 27 { 0x1b } : BV:8
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(14, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 68 { 0x44 } : BV:8
28 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
29 : eq(14, 28) : BOOL
30 : 114 { 0x72 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 104 { 0x68 } : BV:8
34 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
35 : eq(14, 34) : BOOL
36 : 164 { 0xa4 -92 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 17) : BOOL
49 : eq(46, 10) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 21, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 16, 61) : BV:8
63 : bvadd(22, 13) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 17) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 22) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 21, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 16, 78) : BV:8
80 : eq(13, 5) : BOOL
81 : eq(13, 17) : BOOL
82 : eq(13, 10) : BOOL
83 : eq(13, 22) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 21, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 16, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 17) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 22) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 21, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 16, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 5) : BOOL
116 : eq(114, 17) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 22) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 21, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 16, 129) : BV:8
131 : bvadd(22, 12, 96) : BV:32
132 : eq(131, 5) : BOOL
133 : eq(131, 17) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 21, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 16, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 5) : BOOL
150 : eq(148, 17) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 22) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 21, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 16, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3486169374
=counter_example_end
=global nodece 34 num_edges_traversed 1
=global nodece 34 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 35
=global nodece 35 nodece z3.ce3638.num_edges_traversed1
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3.ce3638 1a45d6872e1c7b735edfc96cb574a2
=input.spec-%var-x-1
1 : Lambda41030Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41031Var : BV:32
18 : Lambda41032Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 3 { 0x3 +1.35e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 10) : BOOL
46 : and(44, 45) : BOOL
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 47) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 30) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda41033Var : BV:32
62 : eq(17, 30) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 32) : BOOL
68 : and(27, 25) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 10) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 47) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 61) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(43, 91) : BV:32
93 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
94 : eq(92, 93) : BOOL
95 : 18 { 0x12 } : BV:8
96 : eq(92, 43) : BOOL
97 : 218 { 0xda -38 } : BV:8
98 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
99 : eq(92, 98) : BOOL
100 : 209 { 0xd1 -47 } : BV:8
101 : eq(92, 40) : BOOL
102 : 63 { 0x3f } : BV:8
103 : eq(92, 2) : BOOL
104 : 36 { 0x24 } : BV:8
105 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
106 : eq(92, 105) : BOOL
107 : 119 { 0x77 } : BV:8
108 : eq(92, 47) : BOOL
109 : 111 { 0x6f } : BV:8
110 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
111 : eq(92, 110) : BOOL
112 : 223 { 0xdf -33 } : BV:8
113 : 0 { 0x0 } : BV:8
114 : ite(111, 112, 113) : BV:8
115 : ite(108, 109, 114) : BV:8
116 : ite(106, 107, 115) : BV:8
117 : ite(103, 104, 116) : BV:8
118 : ite(101, 102, 117) : BV:8
119 : ite(99, 100, 118) : BV:8
120 : ite(96, 97, 119) : BV:8
121 : ite(94, 95, 120) : BV:8
122 : bvadd(47, 91) : BV:32
123 : eq(122, 93) : BOOL
124 : eq(122, 43) : BOOL
125 : eq(122, 98) : BOOL
126 : eq(122, 40) : BOOL
127 : eq(122, 2) : BOOL
128 : eq(122, 105) : BOOL
129 : eq(122, 47) : BOOL
130 : eq(122, 110) : BOOL
131 : ite(130, 112, 113) : BV:8
132 : ite(129, 109, 131) : BV:8
133 : ite(128, 107, 132) : BV:8
134 : ite(127, 104, 133) : BV:8
135 : ite(126, 102, 134) : BV:8
136 : ite(125, 100, 135) : BV:8
137 : ite(124, 97, 136) : BV:8
138 : ite(123, 95, 137) : BV:8
139 : bvadd(40, 91) : BV:32
140 : eq(139, 93) : BOOL
141 : eq(139, 43) : BOOL
142 : eq(139, 98) : BOOL
143 : eq(139, 40) : BOOL
144 : eq(139, 2) : BOOL
145 : eq(139, 105) : BOOL
146 : eq(139, 47) : BOOL
147 : eq(139, 110) : BOOL
148 : ite(147, 112, 113) : BV:8
149 : ite(146, 109, 148) : BV:8
150 : ite(145, 107, 149) : BV:8
151 : ite(144, 104, 150) : BV:8
152 : ite(143, 102, 151) : BV:8
153 : ite(142, 100, 152) : BV:8
154 : ite(141, 97, 153) : BV:8
155 : ite(140, 95, 154) : BV:8
156 : eq(91, 93) : BOOL
157 : eq(91, 43) : BOOL
158 : eq(91, 98) : BOOL
159 : eq(91, 40) : BOOL
160 : eq(91, 2) : BOOL
161 : eq(91, 105) : BOOL
162 : eq(91, 47) : BOOL
163 : eq(91, 110) : BOOL
164 : ite(163, 112, 113) : BV:8
165 : ite(162, 109, 164) : BV:8
166 : ite(161, 107, 165) : BV:8
167 : ite(160, 104, 166) : BV:8
168 : ite(159, 102, 167) : BV:8
169 : ite(158, 100, 168) : BV:8
170 : ite(157, 97, 169) : BV:8
171 : ite(156, 95, 170) : BV:8
172 : bvconcat(121, 138, 155, 171) : BV:32
173 : bvadd(43, 90, 172) : BV:32
174 : eq(173, 93) : BOOL
175 : eq(173, 43) : BOOL
176 : eq(173, 98) : BOOL
177 : eq(173, 40) : BOOL
178 : eq(173, 2) : BOOL
179 : eq(173, 105) : BOOL
180 : eq(173, 47) : BOOL
181 : eq(173, 110) : BOOL
182 : ite(181, 112, 113) : BV:8
183 : ite(180, 109, 182) : BV:8
184 : ite(179, 107, 183) : BV:8
185 : ite(178, 104, 184) : BV:8
186 : ite(177, 102, 185) : BV:8
187 : ite(176, 100, 186) : BV:8
188 : ite(175, 97, 187) : BV:8
189 : ite(174, 95, 188) : BV:8
190 : bvadd(47, 90, 172) : BV:32
191 : eq(190, 93) : BOOL
192 : eq(190, 43) : BOOL
193 : eq(190, 98) : BOOL
194 : eq(190, 40) : BOOL
195 : eq(190, 2) : BOOL
196 : eq(190, 105) : BOOL
197 : eq(190, 47) : BOOL
198 : eq(190, 110) : BOOL
199 : ite(198, 112, 113) : BV:8
200 : ite(197, 109, 199) : BV:8
201 : ite(196, 107, 200) : BV:8
202 : ite(195, 104, 201) : BV:8
203 : ite(194, 102, 202) : BV:8
204 : ite(193, 100, 203) : BV:8
205 : ite(192, 97, 204) : BV:8
206 : ite(191, 95, 205) : BV:8
207 : bvadd(40, 90, 172) : BV:32
208 : eq(207, 93) : BOOL
209 : eq(207, 43) : BOOL
210 : eq(207, 98) : BOOL
211 : eq(207, 40) : BOOL
212 : eq(207, 2) : BOOL
213 : eq(207, 105) : BOOL
214 : eq(207, 47) : BOOL
215 : eq(207, 110) : BOOL
216 : ite(215, 112, 113) : BV:8
217 : ite(214, 109, 216) : BV:8
218 : ite(213, 107, 217) : BV:8
219 : ite(212, 104, 218) : BV:8
220 : ite(211, 102, 219) : BV:8
221 : ite(210, 100, 220) : BV:8
222 : ite(209, 97, 221) : BV:8
223 : ite(208, 95, 222) : BV:8
224 : bvadd(90, 172) : BV:32
225 : eq(224, 93) : BOOL
226 : eq(224, 43) : BOOL
227 : eq(224, 98) : BOOL
228 : eq(224, 40) : BOOL
229 : eq(224, 2) : BOOL
230 : eq(224, 105) : BOOL
231 : eq(224, 47) : BOOL
232 : eq(224, 110) : BOOL
233 : ite(232, 112, 113) : BV:8
234 : ite(231, 109, 233) : BV:8
235 : ite(230, 107, 234) : BV:8
236 : ite(229, 104, 235) : BV:8
237 : ite(228, 102, 236) : BV:8
238 : ite(227, 100, 237) : BV:8
239 : ite(226, 97, 238) : BV:8
240 : ite(225, 95, 239) : BV:8
241 : bvconcat(189, 206, 223, 240) : BV:32
242 : ite(66, 2, 241) : BV:32
243 : ite(64, 2, 242) : BV:32
244 : ite(88, 241, 243) : BV:32
245 : ite(66, 2, 244) : BV:32
246 : ite(64, 2, 245) : BV:32
247 : lambda(61, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(60, 247) : MAP[BV:32 -> BV:32]
249 : lambda(17, 248) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
250 : map(16, 249) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
251 : sym_const(250) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda41043Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41044Var : BV:32
18 : Lambda41045Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 4) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 3 { 0x3 +1.35e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 10) : BOOL
46 : and(44, 45) : BOOL
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 47) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 30) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda41046Var : BV:32
62 : eq(17, 30) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 61) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(43, 69) : BV:32
71 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
72 : eq(70, 71) : BOOL
73 : 18 { 0x12 } : BV:8
74 : eq(70, 43) : BOOL
75 : 218 { 0xda -38 } : BV:8
76 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
77 : eq(70, 76) : BOOL
78 : 209 { 0xd1 -47 } : BV:8
79 : eq(70, 40) : BOOL
80 : 63 { 0x3f } : BV:8
81 : eq(70, 2) : BOOL
82 : 36 { 0x24 } : BV:8
83 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
84 : eq(70, 83) : BOOL
85 : 119 { 0x77 } : BV:8
86 : eq(70, 47) : BOOL
87 : 111 { 0x6f } : BV:8
88 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
89 : eq(70, 88) : BOOL
90 : 223 { 0xdf -33 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(81, 82, 94) : BV:8
96 : ite(79, 80, 95) : BV:8
97 : ite(77, 78, 96) : BV:8
98 : ite(74, 75, 97) : BV:8
99 : ite(72, 73, 98) : BV:8
100 : bvadd(47, 69) : BV:32
101 : eq(100, 71) : BOOL
102 : eq(100, 43) : BOOL
103 : eq(100, 76) : BOOL
104 : eq(100, 40) : BOOL
105 : eq(100, 2) : BOOL
106 : eq(100, 83) : BOOL
107 : eq(100, 47) : BOOL
108 : eq(100, 88) : BOOL
109 : ite(108, 90, 91) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : ite(104, 80, 112) : BV:8
114 : ite(103, 78, 113) : BV:8
115 : ite(102, 75, 114) : BV:8
116 : ite(101, 73, 115) : BV:8
117 : bvadd(40, 69) : BV:32
118 : eq(117, 71) : BOOL
119 : eq(117, 43) : BOOL
120 : eq(117, 76) : BOOL
121 : eq(117, 40) : BOOL
122 : eq(117, 2) : BOOL
123 : eq(117, 83) : BOOL
124 : eq(117, 47) : BOOL
125 : eq(117, 88) : BOOL
126 : ite(125, 90, 91) : BV:8
127 : ite(124, 87, 126) : BV:8
128 : ite(123, 85, 127) : BV:8
129 : ite(122, 82, 128) : BV:8
130 : ite(121, 80, 129) : BV:8
131 : ite(120, 78, 130) : BV:8
132 : ite(119, 75, 131) : BV:8
133 : ite(118, 73, 132) : BV:8
134 : eq(69, 71) : BOOL
135 : eq(69, 43) : BOOL
136 : eq(69, 76) : BOOL
137 : eq(69, 40) : BOOL
138 : eq(69, 2) : BOOL
139 : eq(69, 83) : BOOL
140 : eq(69, 47) : BOOL
141 : eq(69, 88) : BOOL
142 : ite(141, 90, 91) : BV:8
143 : ite(140, 87, 142) : BV:8
144 : ite(139, 85, 143) : BV:8
145 : ite(138, 82, 144) : BV:8
146 : ite(137, 80, 145) : BV:8
147 : ite(136, 78, 146) : BV:8
148 : ite(135, 75, 147) : BV:8
149 : ite(134, 73, 148) : BV:8
150 : bvconcat(99, 116, 133, 149) : BV:32
151 : bvadd(43, 68, 150) : BV:32
152 : eq(151, 71) : BOOL
153 : eq(151, 43) : BOOL
154 : eq(151, 76) : BOOL
155 : eq(151, 40) : BOOL
156 : eq(151, 2) : BOOL
157 : eq(151, 83) : BOOL
158 : eq(151, 47) : BOOL
159 : eq(151, 88) : BOOL
160 : ite(159, 90, 91) : BV:8
161 : ite(158, 87, 160) : BV:8
162 : ite(157, 85, 161) : BV:8
163 : ite(156, 82, 162) : BV:8
164 : ite(155, 80, 163) : BV:8
165 : ite(154, 78, 164) : BV:8
166 : ite(153, 75, 165) : BV:8
167 : ite(152, 73, 166) : BV:8
168 : bvadd(47, 68, 150) : BV:32
169 : eq(168, 71) : BOOL
170 : eq(168, 43) : BOOL
171 : eq(168, 76) : BOOL
172 : eq(168, 40) : BOOL
173 : eq(168, 2) : BOOL
174 : eq(168, 83) : BOOL
175 : eq(168, 47) : BOOL
176 : eq(168, 88) : BOOL
177 : ite(176, 90, 91) : BV:8
178 : ite(175, 87, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 82, 179) : BV:8
181 : ite(172, 80, 180) : BV:8
182 : ite(171, 78, 181) : BV:8
183 : ite(170, 75, 182) : BV:8
184 : ite(169, 73, 183) : BV:8
185 : bvadd(40, 68, 150) : BV:32
186 : eq(185, 71) : BOOL
187 : eq(185, 43) : BOOL
188 : eq(185, 76) : BOOL
189 : eq(185, 40) : BOOL
190 : eq(185, 2) : BOOL
191 : eq(185, 83) : BOOL
192 : eq(185, 47) : BOOL
193 : eq(185, 88) : BOOL
194 : ite(193, 90, 91) : BV:8
195 : ite(192, 87, 194) : BV:8
196 : ite(191, 85, 195) : BV:8
197 : ite(190, 82, 196) : BV:8
198 : ite(189, 80, 197) : BV:8
199 : ite(188, 78, 198) : BV:8
200 : ite(187, 75, 199) : BV:8
201 : ite(186, 73, 200) : BV:8
202 : bvadd(68, 150) : BV:32
203 : eq(202, 71) : BOOL
204 : eq(202, 43) : BOOL
205 : eq(202, 76) : BOOL
206 : eq(202, 40) : BOOL
207 : eq(202, 2) : BOOL
208 : eq(202, 83) : BOOL
209 : eq(202, 47) : BOOL
210 : eq(202, 88) : BOOL
211 : ite(210, 90, 91) : BV:8
212 : ite(209, 87, 211) : BV:8
213 : ite(208, 85, 212) : BV:8
214 : ite(207, 82, 213) : BV:8
215 : ite(206, 80, 214) : BV:8
216 : ite(205, 78, 215) : BV:8
217 : ite(204, 75, 216) : BV:8
218 : ite(203, 73, 217) : BV:8
219 : bvconcat(167, 184, 201, 218) : BV:32
220 : ite(66, 2, 219) : BV:32
221 : ite(64, 2, 220) : BV:32
222 : lambda(61, 221) : FUNCTION[BV:32 -> BV:32]
223 : map(60, 222) : MAP[BV:32 -> BV:32]
224 : lambda(17, 223) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
225 : map(16, 224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
226 : sym_const(225) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 36, [ 1; 1 ] -> 63, [ 2; 2 ] -> 111, [ 3; 3 ] -> 218, [ 4; 429949507 ] -> 0, [ 429949508; 429949508 ] -> 18, [ 429949509; 429949509 ] -> 209, [ 429949510; 429949510 ] -> 223, [ 429949511; 429949511 ] -> 119, [ 429949512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1109307323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1109307324; 1109307327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1109307328; 1275067335 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1275067336; 1275067339 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1275067340; 3925851083 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3925851084; 3925851087 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3925851088; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1275067336 { 0x4bfffbc8 +1.99987125e24 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1109307324 { 0x421eafbc +1.23973798e5 } : BV:32
=input.dst.llvm-%n
1 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3925851084 { 0xe9ffbbcc -369116212 -1.99791860e84 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda41087Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 13, 21) : BV:32
23 : ite(12, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 10) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 34) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda41088Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 50) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(30, 58) : BV:32
60 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
61 : eq(59, 60) : BOOL
62 : 18 { 0x12 } : BV:8
63 : eq(59, 30) : BOOL
64 : 218 { 0xda -38 } : BV:8
65 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
66 : eq(59, 65) : BOOL
67 : 209 { 0xd1 -47 } : BV:8
68 : eq(59, 27) : BOOL
69 : 63 { 0x3f } : BV:8
70 : eq(59, 2) : BOOL
71 : 36 { 0x24 } : BV:8
72 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
73 : eq(59, 72) : BOOL
74 : 119 { 0x77 } : BV:8
75 : eq(59, 34) : BOOL
76 : 111 { 0x6f } : BV:8
77 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
78 : eq(59, 77) : BOOL
79 : 223 { 0xdf -33 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(68, 69, 84) : BV:8
86 : ite(66, 67, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(34, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 30) : BOOL
92 : eq(89, 65) : BOOL
93 : eq(89, 27) : BOOL
94 : eq(89, 2) : BOOL
95 : eq(89, 72) : BOOL
96 : eq(89, 34) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 71, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 67, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(27, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 30) : BOOL
109 : eq(106, 65) : BOOL
110 : eq(106, 27) : BOOL
111 : eq(106, 2) : BOOL
112 : eq(106, 72) : BOOL
113 : eq(106, 34) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 71, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 67, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 30) : BOOL
125 : eq(58, 65) : BOOL
126 : eq(58, 27) : BOOL
127 : eq(58, 2) : BOOL
128 : eq(58, 72) : BOOL
129 : eq(58, 34) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 71, 133) : BV:8
135 : ite(126, 69, 134) : BV:8
136 : ite(125, 67, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(30, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 30) : BOOL
143 : eq(140, 65) : BOOL
144 : eq(140, 27) : BOOL
145 : eq(140, 2) : BOOL
146 : eq(140, 72) : BOOL
147 : eq(140, 34) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 71, 151) : BV:8
153 : ite(144, 69, 152) : BV:8
154 : ite(143, 67, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(34, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 30) : BOOL
160 : eq(157, 65) : BOOL
161 : eq(157, 27) : BOOL
162 : eq(157, 2) : BOOL
163 : eq(157, 72) : BOOL
164 : eq(157, 34) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 69, 169) : BV:8
171 : ite(160, 67, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(27, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 30) : BOOL
177 : eq(174, 65) : BOOL
178 : eq(174, 27) : BOOL
179 : eq(174, 2) : BOOL
180 : eq(174, 72) : BOOL
181 : eq(174, 34) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 71, 185) : BV:8
187 : ite(178, 69, 186) : BV:8
188 : ite(177, 67, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 30) : BOOL
194 : eq(191, 65) : BOOL
195 : eq(191, 27) : BOOL
196 : eq(191, 2) : BOOL
197 : eq(191, 72) : BOOL
198 : eq(191, 34) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 71, 202) : BV:8
204 : ite(195, 69, 203) : BV:8
205 : ite(194, 67, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(55, 2, 208) : BV:32
210 : ite(53, 2, 209) : BV:32
211 : lambda(50, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(49, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2254971026 { 0x86682092 -2039996270 -1.81349396e141 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda41077Var : BV:32
20 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
24 : bvule(23, 2) : BOOL
25 : and(24, 11) : BOOL
26 : bvule(2, 8) : BOOL
27 : and(9, 26) : BOOL
28 : bvule(2, 2) : BOOL
29 : and(28, 5) : BOOL
30 : ite(29, 2, 2) : BV:32
31 : ite(27, 8, 30) : BV:32
32 : ite(25, 23, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : bvule(19, 16) : BOOL
37 : and(35, 36) : BOOL
38 : 3 { 0x3 +1.35e129 } : BV:32
39 : bvule(38, 19) : BOOL
40 : bvule(19, 10) : BOOL
41 : and(39, 40) : BOOL
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvule(42, 19) : BOOL
44 : bvule(19, 42) : BOOL
45 : and(43, 44) : BOOL
46 : ite(45, 42, 42) : BV:32
47 : ite(41, 38, 46) : BV:32
48 : ite(37, 1, 47) : BV:32
49 : eq(48, 1) : BOOL
50 : and(34, 49) : BOOL
51 : eq(33, 2) : BOOL
52 : and(51, 49) : BOOL
53 : ite(52, 7, 13) : BOOL
54 : ite(50, 7, 53) : BOOL
55 : lambda(19, 54) : FUNCTION[BV:32 -> BOOL]
56 : Lambda41078Var : BV:32
57 : eq(2, 2) : BOOL
58 : eq(56, 1) : BOOL
59 : and(57, 58) : BOOL
60 : eq(2, 1) : BOOL
61 : and(60, 58) : BOOL
62 : 4 { 0x4 +1.47e129 } : BV:32
63 : bvmul(62, 56) : BV:32
64 : bvmul(62, 2) : BV:32
65 : bvadd(38, 64) : BV:32
66 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
67 : eq(65, 66) : BOOL
68 : 18 { 0x12 } : BV:8
69 : eq(65, 38) : BOOL
70 : 218 { 0xda -38 } : BV:8
71 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
72 : eq(65, 71) : BOOL
73 : 209 { 0xd1 -47 } : BV:8
74 : eq(65, 16) : BOOL
75 : 63 { 0x3f } : BV:8
76 : eq(65, 1) : BOOL
77 : 36 { 0x24 } : BV:8
78 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
79 : eq(65, 78) : BOOL
80 : 119 { 0x77 } : BV:8
81 : eq(65, 42) : BOOL
82 : 111 { 0x6f } : BV:8
83 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
84 : eq(65, 83) : BOOL
85 : 223 { 0xdf -33 } : BV:8
86 : 0 { 0x0 } : BV:8
87 : ite(84, 85, 86) : BV:8
88 : ite(81, 82, 87) : BV:8
89 : ite(79, 80, 88) : BV:8
90 : ite(76, 77, 89) : BV:8
91 : ite(74, 75, 90) : BV:8
92 : ite(72, 73, 91) : BV:8
93 : ite(69, 70, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : bvadd(42, 64) : BV:32
96 : eq(95, 66) : BOOL
97 : eq(95, 38) : BOOL
98 : eq(95, 71) : BOOL
99 : eq(95, 16) : BOOL
100 : eq(95, 1) : BOOL
101 : eq(95, 78) : BOOL
102 : eq(95, 42) : BOOL
103 : eq(95, 83) : BOOL
104 : ite(103, 85, 86) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 80, 105) : BV:8
107 : ite(100, 77, 106) : BV:8
108 : ite(99, 75, 107) : BV:8
109 : ite(98, 73, 108) : BV:8
110 : ite(97, 70, 109) : BV:8
111 : ite(96, 68, 110) : BV:8
112 : bvadd(16, 64) : BV:32
113 : eq(112, 66) : BOOL
114 : eq(112, 38) : BOOL
115 : eq(112, 71) : BOOL
116 : eq(112, 16) : BOOL
117 : eq(112, 1) : BOOL
118 : eq(112, 78) : BOOL
119 : eq(112, 42) : BOOL
120 : eq(112, 83) : BOOL
121 : ite(120, 85, 86) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : ite(117, 77, 123) : BV:8
125 : ite(116, 75, 124) : BV:8
126 : ite(115, 73, 125) : BV:8
127 : ite(114, 70, 126) : BV:8
128 : ite(113, 68, 127) : BV:8
129 : eq(64, 66) : BOOL
130 : eq(64, 38) : BOOL
131 : eq(64, 71) : BOOL
132 : eq(64, 16) : BOOL
133 : eq(64, 1) : BOOL
134 : eq(64, 78) : BOOL
135 : eq(64, 42) : BOOL
136 : eq(64, 83) : BOOL
137 : ite(136, 85, 86) : BV:8
138 : ite(135, 82, 137) : BV:8
139 : ite(134, 80, 138) : BV:8
140 : ite(133, 77, 139) : BV:8
141 : ite(132, 75, 140) : BV:8
142 : ite(131, 73, 141) : BV:8
143 : ite(130, 70, 142) : BV:8
144 : ite(129, 68, 143) : BV:8
145 : bvconcat(94, 111, 128, 144) : BV:32
146 : bvadd(38, 63, 145) : BV:32
147 : eq(146, 66) : BOOL
148 : eq(146, 38) : BOOL
149 : eq(146, 71) : BOOL
150 : eq(146, 16) : BOOL
151 : eq(146, 1) : BOOL
152 : eq(146, 78) : BOOL
153 : eq(146, 42) : BOOL
154 : eq(146, 83) : BOOL
155 : ite(154, 85, 86) : BV:8
156 : ite(153, 82, 155) : BV:8
157 : ite(152, 80, 156) : BV:8
158 : ite(151, 77, 157) : BV:8
159 : ite(150, 75, 158) : BV:8
160 : ite(149, 73, 159) : BV:8
161 : ite(148, 70, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : bvadd(42, 63, 145) : BV:32
164 : eq(163, 66) : BOOL
165 : eq(163, 38) : BOOL
166 : eq(163, 71) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 1) : BOOL
169 : eq(163, 78) : BOOL
170 : eq(163, 42) : BOOL
171 : eq(163, 83) : BOOL
172 : ite(171, 85, 86) : BV:8
173 : ite(170, 82, 172) : BV:8
174 : ite(169, 80, 173) : BV:8
175 : ite(168, 77, 174) : BV:8
176 : ite(167, 75, 175) : BV:8
177 : ite(166, 73, 176) : BV:8
178 : ite(165, 70, 177) : BV:8
179 : ite(164, 68, 178) : BV:8
180 : bvadd(16, 63, 145) : BV:32
181 : eq(180, 66) : BOOL
182 : eq(180, 38) : BOOL
183 : eq(180, 71) : BOOL
184 : eq(180, 16) : BOOL
185 : eq(180, 1) : BOOL
186 : eq(180, 78) : BOOL
187 : eq(180, 42) : BOOL
188 : eq(180, 83) : BOOL
189 : ite(188, 85, 86) : BV:8
190 : ite(187, 82, 189) : BV:8
191 : ite(186, 80, 190) : BV:8
192 : ite(185, 77, 191) : BV:8
193 : ite(184, 75, 192) : BV:8
194 : ite(183, 73, 193) : BV:8
195 : ite(182, 70, 194) : BV:8
196 : ite(181, 68, 195) : BV:8
197 : bvadd(63, 145) : BV:32
198 : eq(197, 66) : BOOL
199 : eq(197, 38) : BOOL
200 : eq(197, 71) : BOOL
201 : eq(197, 16) : BOOL
202 : eq(197, 1) : BOOL
203 : eq(197, 78) : BOOL
204 : eq(197, 42) : BOOL
205 : eq(197, 83) : BOOL
206 : ite(205, 85, 86) : BV:8
207 : ite(204, 82, 206) : BV:8
208 : ite(203, 80, 207) : BV:8
209 : ite(202, 77, 208) : BV:8
210 : ite(201, 75, 209) : BV:8
211 : ite(200, 73, 210) : BV:8
212 : ite(199, 70, 211) : BV:8
213 : ite(198, 68, 212) : BV:8
214 : bvconcat(162, 179, 196, 213) : BV:32
215 : ite(61, 1, 214) : BV:32
216 : ite(59, 1, 215) : BV:32
217 : lambda(56, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(55, 217) : MAP[BV:32 -> BV:32]
219 : sum(17, 18, 218) : SUM[UNIT,MAP[BV:32 -> BV:32]]
220 : sym_const(219) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda41093Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : bvule(3, 3) : BOOL
18 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 3, 3) : BV:32
22 : ite(16, 13, 21) : BV:32
23 : ite(12, 8, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 1 { 0x1 +1.11e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 10) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 34) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda41094Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 50) : BV:32
58 : bvmul(56, 3) : BV:32
59 : bvadd(30, 58) : BV:32
60 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
61 : eq(59, 60) : BOOL
62 : 18 { 0x12 } : BV:8
63 : eq(59, 30) : BOOL
64 : 218 { 0xda -38 } : BV:8
65 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
66 : eq(59, 65) : BOOL
67 : 209 { 0xd1 -47 } : BV:8
68 : eq(59, 27) : BOOL
69 : 63 { 0x3f } : BV:8
70 : eq(59, 2) : BOOL
71 : 36 { 0x24 } : BV:8
72 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
73 : eq(59, 72) : BOOL
74 : 119 { 0x77 } : BV:8
75 : eq(59, 34) : BOOL
76 : 111 { 0x6f } : BV:8
77 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
78 : eq(59, 77) : BOOL
79 : 223 { 0xdf -33 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 74, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(68, 69, 84) : BV:8
86 : ite(66, 67, 85) : BV:8
87 : ite(63, 64, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(34, 58) : BV:32
90 : eq(89, 60) : BOOL
91 : eq(89, 30) : BOOL
92 : eq(89, 65) : BOOL
93 : eq(89, 27) : BOOL
94 : eq(89, 2) : BOOL
95 : eq(89, 72) : BOOL
96 : eq(89, 34) : BOOL
97 : eq(89, 77) : BOOL
98 : ite(97, 79, 80) : BV:8
99 : ite(96, 76, 98) : BV:8
100 : ite(95, 74, 99) : BV:8
101 : ite(94, 71, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 67, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : ite(90, 62, 104) : BV:8
106 : bvadd(27, 58) : BV:32
107 : eq(106, 60) : BOOL
108 : eq(106, 30) : BOOL
109 : eq(106, 65) : BOOL
110 : eq(106, 27) : BOOL
111 : eq(106, 2) : BOOL
112 : eq(106, 72) : BOOL
113 : eq(106, 34) : BOOL
114 : eq(106, 77) : BOOL
115 : ite(114, 79, 80) : BV:8
116 : ite(113, 76, 115) : BV:8
117 : ite(112, 74, 116) : BV:8
118 : ite(111, 71, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 67, 119) : BV:8
121 : ite(108, 64, 120) : BV:8
122 : ite(107, 62, 121) : BV:8
123 : eq(58, 60) : BOOL
124 : eq(58, 30) : BOOL
125 : eq(58, 65) : BOOL
126 : eq(58, 27) : BOOL
127 : eq(58, 2) : BOOL
128 : eq(58, 72) : BOOL
129 : eq(58, 34) : BOOL
130 : eq(58, 77) : BOOL
131 : ite(130, 79, 80) : BV:8
132 : ite(129, 76, 131) : BV:8
133 : ite(128, 74, 132) : BV:8
134 : ite(127, 71, 133) : BV:8
135 : ite(126, 69, 134) : BV:8
136 : ite(125, 67, 135) : BV:8
137 : ite(124, 64, 136) : BV:8
138 : ite(123, 62, 137) : BV:8
139 : bvconcat(88, 105, 122, 138) : BV:32
140 : bvadd(30, 57, 139) : BV:32
141 : eq(140, 60) : BOOL
142 : eq(140, 30) : BOOL
143 : eq(140, 65) : BOOL
144 : eq(140, 27) : BOOL
145 : eq(140, 2) : BOOL
146 : eq(140, 72) : BOOL
147 : eq(140, 34) : BOOL
148 : eq(140, 77) : BOOL
149 : ite(148, 79, 80) : BV:8
150 : ite(147, 76, 149) : BV:8
151 : ite(146, 74, 150) : BV:8
152 : ite(145, 71, 151) : BV:8
153 : ite(144, 69, 152) : BV:8
154 : ite(143, 67, 153) : BV:8
155 : ite(142, 64, 154) : BV:8
156 : ite(141, 62, 155) : BV:8
157 : bvadd(34, 57, 139) : BV:32
158 : eq(157, 60) : BOOL
159 : eq(157, 30) : BOOL
160 : eq(157, 65) : BOOL
161 : eq(157, 27) : BOOL
162 : eq(157, 2) : BOOL
163 : eq(157, 72) : BOOL
164 : eq(157, 34) : BOOL
165 : eq(157, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 74, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 69, 169) : BV:8
171 : ite(160, 67, 170) : BV:8
172 : ite(159, 64, 171) : BV:8
173 : ite(158, 62, 172) : BV:8
174 : bvadd(27, 57, 139) : BV:32
175 : eq(174, 60) : BOOL
176 : eq(174, 30) : BOOL
177 : eq(174, 65) : BOOL
178 : eq(174, 27) : BOOL
179 : eq(174, 2) : BOOL
180 : eq(174, 72) : BOOL
181 : eq(174, 34) : BOOL
182 : eq(174, 77) : BOOL
183 : ite(182, 79, 80) : BV:8
184 : ite(181, 76, 183) : BV:8
185 : ite(180, 74, 184) : BV:8
186 : ite(179, 71, 185) : BV:8
187 : ite(178, 69, 186) : BV:8
188 : ite(177, 67, 187) : BV:8
189 : ite(176, 64, 188) : BV:8
190 : ite(175, 62, 189) : BV:8
191 : bvadd(57, 139) : BV:32
192 : eq(191, 60) : BOOL
193 : eq(191, 30) : BOOL
194 : eq(191, 65) : BOOL
195 : eq(191, 27) : BOOL
196 : eq(191, 2) : BOOL
197 : eq(191, 72) : BOOL
198 : eq(191, 34) : BOOL
199 : eq(191, 77) : BOOL
200 : ite(199, 79, 80) : BV:8
201 : ite(198, 76, 200) : BV:8
202 : ite(197, 74, 201) : BV:8
203 : ite(196, 71, 202) : BV:8
204 : ite(195, 69, 203) : BV:8
205 : ite(194, 67, 204) : BV:8
206 : ite(193, 64, 205) : BV:8
207 : ite(192, 62, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(55, 2, 208) : BV:32
210 : ite(53, 2, 209) : BV:32
211 : lambda(50, 210) : FUNCTION[BV:32 -> BV:32]
212 : map(49, 211) : MAP[BV:32 -> BV:32]
213 : sym_const(212) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1109307324 { 0x421eafbc +1.23973798e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1109307327 { 0x421eafbf +1.23973834e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3925851084 { 0xe9ffbbcc -369116212 -1.99791860e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3925851087 { 0xe9ffbbcf -369116209 -1.99791896e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1275067336 { 0x4bfffbc8 +1.99987125e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1275067339 { 0x4bfffbcb +1.99987161e24 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda40979Var : BV:32
2 : Lambda40980Var : BV:32
3 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
27 : bvule(26, 1) : BOOL
28 : and(27, 18) : BOOL
29 : bvule(1, 15) : BOOL
30 : and(16, 29) : BOOL
31 : bvule(3, 1) : BOOL
32 : and(31, 12) : BOOL
33 : ite(32, 3, 3) : BV:32
34 : ite(30, 15, 33) : BV:32
35 : ite(28, 26, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 17) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 46) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(42, 62) : BV:32
64 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
65 : eq(63, 64) : BOOL
66 : 18 { 0x12 } : BV:8
67 : eq(63, 42) : BOOL
68 : 218 { 0xda -38 } : BV:8
69 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
70 : eq(63, 69) : BOOL
71 : 209 { 0xd1 -47 } : BV:8
72 : eq(63, 39) : BOOL
73 : 63 { 0x3f } : BV:8
74 : eq(63, 5) : BOOL
75 : 36 { 0x24 } : BV:8
76 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
77 : eq(63, 76) : BOOL
78 : 119 { 0x77 } : BV:8
79 : eq(63, 46) : BOOL
80 : 111 { 0x6f } : BV:8
81 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
82 : eq(63, 81) : BOOL
83 : 223 { 0xdf -33 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(72, 73, 88) : BV:8
90 : ite(70, 71, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : bvadd(46, 62) : BV:32
94 : eq(93, 64) : BOOL
95 : eq(93, 42) : BOOL
96 : eq(93, 69) : BOOL
97 : eq(93, 39) : BOOL
98 : eq(93, 5) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 46) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 73, 105) : BV:8
107 : ite(96, 71, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 66, 108) : BV:8
110 : bvadd(39, 62) : BV:32
111 : eq(110, 64) : BOOL
112 : eq(110, 42) : BOOL
113 : eq(110, 69) : BOOL
114 : eq(110, 39) : BOOL
115 : eq(110, 5) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 46) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 73, 122) : BV:8
124 : ite(113, 71, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 66, 125) : BV:8
127 : eq(62, 64) : BOOL
128 : eq(62, 42) : BOOL
129 : eq(62, 69) : BOOL
130 : eq(62, 39) : BOOL
131 : eq(62, 5) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 46) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 73, 138) : BV:8
140 : ite(129, 71, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 66, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(42, 61, 143) : BV:32
145 : eq(144, 64) : BOOL
146 : eq(144, 42) : BOOL
147 : eq(144, 69) : BOOL
148 : eq(144, 39) : BOOL
149 : eq(144, 5) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 46) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 73, 156) : BV:8
158 : ite(147, 71, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 66, 159) : BV:8
161 : bvadd(46, 61, 143) : BV:32
162 : eq(161, 64) : BOOL
163 : eq(161, 42) : BOOL
164 : eq(161, 69) : BOOL
165 : eq(161, 39) : BOOL
166 : eq(161, 5) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 46) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 73, 173) : BV:8
175 : ite(164, 71, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 66, 176) : BV:8
178 : bvadd(39, 61, 143) : BV:32
179 : eq(178, 64) : BOOL
180 : eq(178, 42) : BOOL
181 : eq(178, 69) : BOOL
182 : eq(178, 39) : BOOL
183 : eq(178, 5) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 46) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 73, 190) : BV:8
192 : ite(181, 71, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 66, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 64) : BOOL
197 : eq(195, 42) : BOOL
198 : eq(195, 69) : BOOL
199 : eq(195, 39) : BOOL
200 : eq(195, 5) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 46) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 73, 207) : BV:8
209 : ite(198, 71, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 66, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(9, 5, 212) : BV:32
214 : ite(7, 5, 213) : BV:32
215 : ite(59, 212, 214) : BV:32
216 : ite(9, 5, 215) : BV:32
217 : ite(7, 5, 216) : BV:32
218 : lambda(1, 2, 217) : FUNCTION[BV:32,BV:32 -> BV:32]
219 : sym_const(218) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda40984Var : BV:32
2 : Lambda40985Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 3 { 0x3 +1.35e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 10) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 35) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 17) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2255753287 ] -> true, [ 2255753288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2255753287 ] -> true, [ 2255753288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda40993Var : BV:32
2 : Lambda40994Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2254971024 { 0x86682090 -2039996272 -1.81349372e141 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2255753289 { 0x86741049 -2039214007 -1.90674698e141 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2255753288 { 0x86741048 -2039214008 -1.90674686e141 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 2255753287 { 0x86741047 -2039214009 -1.90674674e141 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 3 { 0x3 +1.35e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 10) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 35) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 17) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda40989Var : BV:32
2 : Lambda40990Var : BV:32
3 : 2254971025 { 0x86682091 -2039996271 -1.81349384e141 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : 429949508 { 0x19a08244 +1.25397539e180 } : BV:32
16 : eq(14, 15) : BOOL
17 : 18 { 0x12 } : BV:8
18 : eq(14, 10) : BOOL
19 : 218 { 0xda -38 } : BV:8
20 : 429949509 { 0x19a08245 +1.25397551e180 } : BV:32
21 : eq(14, 20) : BOOL
22 : 209 { 0xd1 -47 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 63 { 0x3f } : BV:8
26 : eq(14, 5) : BOOL
27 : 36 { 0x24 } : BV:8
28 : 429949511 { 0x19a08247 +1.25397574e180 } : BV:32
29 : eq(14, 28) : BOOL
30 : 119 { 0x77 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 429949510 { 0x19a08246 +1.25397562e180 } : BV:32
35 : eq(14, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : ite(21, 22, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 15) : BOOL
48 : eq(46, 10) : BOOL
49 : eq(46, 20) : BOOL
50 : eq(46, 23) : BOOL
51 : eq(46, 5) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 25, 58) : BV:8
60 : ite(49, 22, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 17, 61) : BV:8
63 : bvadd(23, 13) : BV:32
64 : eq(63, 15) : BOOL
65 : eq(63, 10) : BOOL
66 : eq(63, 20) : BOOL
67 : eq(63, 23) : BOOL
68 : eq(63, 5) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : ite(66, 22, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 17, 78) : BV:8
80 : eq(13, 15) : BOOL
81 : eq(13, 10) : BOOL
82 : eq(13, 20) : BOOL
83 : eq(13, 23) : BOOL
84 : eq(13, 5) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 25, 91) : BV:8
93 : ite(82, 22, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 17, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 15) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 20) : BOOL
101 : eq(97, 23) : BOOL
102 : eq(97, 5) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 25, 109) : BV:8
111 : ite(100, 22, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 17, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 15) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 20) : BOOL
118 : eq(114, 23) : BOOL
119 : eq(114, 5) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 25, 126) : BV:8
128 : ite(117, 22, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 17, 129) : BV:8
131 : bvadd(23, 12, 96) : BV:32
132 : eq(131, 15) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 20) : BOOL
135 : eq(131, 23) : BOOL
136 : eq(131, 5) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 25, 143) : BV:8
145 : ite(134, 22, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 17, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 15) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 20) : BOOL
152 : eq(148, 23) : BOOL
153 : eq(148, 5) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 25, 160) : BV:8
162 : ite(151, 22, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
633478613
=counter_example_end
=global nodece 35 num_edges_traversed 1
=global nodece 35 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 36
=global nodece 36 nodece z3v487.ce3665.num_edges_traversed1
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce3665 2c672ca90daf863a4b4263dc5c1545e
=input.spec-%var-x-1
1 : Lambda42474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42475Var : BV:32
17 : Lambda42476Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42477Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42500Var : BV:32
17 : Lambda42501Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42502Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1645454027 { 0x6213a2cb +1.15340554e69 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42507Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda42508Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda42484Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda42485Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42513Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda42514Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1674913683 { 0x63d52793 +1.66527020e72 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
855459158
=counter_example_end
=global nodece 36 num_edges_traversed 1
=global nodece 36 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 37
=global nodece 37 nodece z3.ce3711.num_edges_traversed0
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(epsilon)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3.ce3711 346e6cd0544bcdd5dfabc5bf5ca5cc8
=input.spec-%var-x-1
1 : Lambda43546Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43547Var : BV:32
18 : Lambda43548Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43549Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 94 { 0x5e } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 110 { 0x6e } : BV:8
85 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 152 { 0x98 -104 } : BV:8
88 : eq(79, 2) : BOOL
89 : 186 { 0xba -70 } : BV:8
90 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
91 : eq(79, 90) : BOOL
92 : 187 { 0xbb -69 } : BV:8
93 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
94 : eq(79, 93) : BOOL
95 : 160 { 0xa0 -96 } : BV:8
96 : 2 { 0x2 +1.23e129 } : BV:32
97 : eq(79, 96) : BOOL
98 : 168 { 0xa8 -88 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(86, 87, 103) : BV:8
105 : ite(83, 84, 104) : BV:8
106 : ite(80, 81, 105) : BV:8
107 : bvadd(96, 78) : BV:32
108 : eq(107, 75) : BOOL
109 : eq(107, 82) : BOOL
110 : eq(107, 85) : BOOL
111 : eq(107, 2) : BOOL
112 : eq(107, 90) : BOOL
113 : eq(107, 93) : BOOL
114 : eq(107, 96) : BOOL
115 : ite(114, 98, 99) : BV:8
116 : ite(113, 95, 115) : BV:8
117 : ite(112, 92, 116) : BV:8
118 : ite(111, 89, 117) : BV:8
119 : ite(110, 87, 118) : BV:8
120 : ite(109, 84, 119) : BV:8
121 : ite(108, 81, 120) : BV:8
122 : bvadd(82, 78) : BV:32
123 : eq(122, 75) : BOOL
124 : eq(122, 82) : BOOL
125 : eq(122, 85) : BOOL
126 : eq(122, 2) : BOOL
127 : eq(122, 90) : BOOL
128 : eq(122, 93) : BOOL
129 : eq(122, 96) : BOOL
130 : ite(129, 98, 99) : BV:8
131 : ite(128, 95, 130) : BV:8
132 : ite(127, 92, 131) : BV:8
133 : ite(126, 89, 132) : BV:8
134 : ite(125, 87, 133) : BV:8
135 : ite(124, 84, 134) : BV:8
136 : ite(123, 81, 135) : BV:8
137 : eq(78, 75) : BOOL
138 : eq(78, 82) : BOOL
139 : eq(78, 85) : BOOL
140 : eq(78, 2) : BOOL
141 : eq(78, 90) : BOOL
142 : eq(78, 93) : BOOL
143 : eq(78, 96) : BOOL
144 : ite(143, 98, 99) : BV:8
145 : ite(142, 95, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 87, 147) : BV:8
149 : ite(138, 84, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(106, 121, 136, 150) : BV:32
152 : bvadd(75, 77, 151) : BV:32
153 : eq(152, 75) : BOOL
154 : eq(152, 82) : BOOL
155 : eq(152, 85) : BOOL
156 : eq(152, 2) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 96) : BOOL
160 : ite(159, 98, 99) : BV:8
161 : ite(158, 95, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 87, 163) : BV:8
165 : ite(154, 84, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(96, 77, 151) : BV:32
168 : eq(167, 75) : BOOL
169 : eq(167, 82) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 2) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 96) : BOOL
175 : ite(174, 98, 99) : BV:8
176 : ite(173, 95, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 87, 178) : BV:8
180 : ite(169, 84, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(82, 77, 151) : BV:32
183 : eq(182, 75) : BOOL
184 : eq(182, 82) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 2) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : ite(189, 98, 99) : BV:8
191 : ite(188, 95, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 87, 193) : BV:8
195 : ite(184, 84, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(77, 151) : BV:32
198 : eq(197, 75) : BOOL
199 : eq(197, 82) : BOOL
200 : eq(197, 85) : BOOL
201 : eq(197, 2) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 96) : BOOL
205 : ite(204, 98, 99) : BV:8
206 : ite(203, 95, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 87, 208) : BV:8
210 : ite(199, 84, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(55, 2, 212) : BV:32
214 : ite(74, 212, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43567Var : BV:32
18 : Lambda43568Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43569Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 94 { 0x5e } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 110 { 0x6e } : BV:8
66 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 152 { 0x98 -104 } : BV:8
69 : eq(60, 2) : BOOL
70 : 186 { 0xba -70 } : BV:8
71 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
72 : eq(60, 71) : BOOL
73 : 187 { 0xbb -69 } : BV:8
74 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
75 : eq(60, 74) : BOOL
76 : 160 { 0xa0 -96 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 168 { 0xa8 -88 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(64, 65, 85) : BV:8
87 : ite(61, 62, 86) : BV:8
88 : bvadd(77, 59) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 63) : BOOL
91 : eq(88, 66) : BOOL
92 : eq(88, 2) : BOOL
93 : eq(88, 71) : BOOL
94 : eq(88, 74) : BOOL
95 : eq(88, 77) : BOOL
96 : ite(95, 79, 80) : BV:8
97 : ite(94, 76, 96) : BV:8
98 : ite(93, 73, 97) : BV:8
99 : ite(92, 70, 98) : BV:8
100 : ite(91, 68, 99) : BV:8
101 : ite(90, 65, 100) : BV:8
102 : ite(89, 62, 101) : BV:8
103 : bvadd(63, 59) : BV:32
104 : eq(103, 56) : BOOL
105 : eq(103, 63) : BOOL
106 : eq(103, 66) : BOOL
107 : eq(103, 2) : BOOL
108 : eq(103, 71) : BOOL
109 : eq(103, 74) : BOOL
110 : eq(103, 77) : BOOL
111 : ite(110, 79, 80) : BV:8
112 : ite(109, 76, 111) : BV:8
113 : ite(108, 73, 112) : BV:8
114 : ite(107, 70, 113) : BV:8
115 : ite(106, 68, 114) : BV:8
116 : ite(105, 65, 115) : BV:8
117 : ite(104, 62, 116) : BV:8
118 : eq(59, 56) : BOOL
119 : eq(59, 63) : BOOL
120 : eq(59, 66) : BOOL
121 : eq(59, 2) : BOOL
122 : eq(59, 71) : BOOL
123 : eq(59, 74) : BOOL
124 : eq(59, 77) : BOOL
125 : ite(124, 79, 80) : BV:8
126 : ite(123, 76, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 68, 128) : BV:8
130 : ite(119, 65, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(87, 102, 117, 131) : BV:32
133 : bvadd(56, 58, 132) : BV:32
134 : eq(133, 56) : BOOL
135 : eq(133, 63) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 2) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 77) : BOOL
141 : ite(140, 79, 80) : BV:8
142 : ite(139, 76, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 68, 144) : BV:8
146 : ite(135, 65, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(77, 58, 132) : BV:32
149 : eq(148, 56) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 2) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 77) : BOOL
156 : ite(155, 79, 80) : BV:8
157 : ite(154, 76, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 68, 159) : BV:8
161 : ite(150, 65, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(63, 58, 132) : BV:32
164 : eq(163, 56) : BOOL
165 : eq(163, 63) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 2) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : ite(170, 79, 80) : BV:8
172 : ite(169, 76, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 68, 174) : BV:8
176 : ite(165, 65, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(58, 132) : BV:32
179 : eq(178, 56) : BOOL
180 : eq(178, 63) : BOOL
181 : eq(178, 66) : BOOL
182 : eq(178, 2) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 77) : BOOL
186 : ite(185, 79, 80) : BV:8
187 : ite(184, 76, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 68, 189) : BV:8
191 : ite(180, 65, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(55, 2, 193) : BV:32
195 : lambda(52, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(51, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 186, [ 1; 1 ] -> 110, [ 2; 2 ] -> 168, [ 3; 3 ] -> 94, [ 4; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 160, [ 2147483646; 2147483646 ] -> 152, [ 2147483647; 2147483647 ] -> 187, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1476919935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1476919936; 1476919939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1476919940; 2066646019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2066646020; 2066646023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2066646024; 4194439699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194439700; 4194439703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194439704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194439700 { 0xfa021214 -100527596 -1.1617670e117 } : BV:32
=input.dst.llvm-%m
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2066646020 { 0x7b2e8404 +1.36340379e119 } : BV:32
=input.dst.llvm-%n
1 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1476919936 { 0x58080280 +1.6257629e49 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43573Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43574Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 94 { 0x5e } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 110 { 0x6e } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : eq(23, 2) : BOOL
33 : 186 { 0xba -70 } : BV:8
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
38 : eq(23, 37) : BOOL
39 : 160 { 0xa0 -96 } : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : eq(23, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : bvadd(40, 21, 22) : BV:32
52 : eq(51, 19) : BOOL
53 : eq(51, 26) : BOOL
54 : eq(51, 29) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 40) : BOOL
59 : ite(58, 42, 43) : BV:8
60 : ite(57, 39, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 25, 64) : BV:8
66 : bvadd(26, 21, 22) : BV:32
67 : eq(66, 19) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 40) : BOOL
74 : ite(73, 42, 43) : BV:8
75 : ite(72, 39, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 2) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 40) : BOOL
89 : ite(88, 42, 43) : BV:8
90 : ite(87, 39, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(50, 65, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda43555Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43556Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 94 { 0x5e } : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : eq(25, 28) : BOOL
30 : 110 { 0x6e } : BV:8
31 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
32 : eq(25, 31) : BOOL
33 : 152 { 0x98 -104 } : BV:8
34 : eq(25, 4) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
37 : eq(25, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
40 : eq(25, 39) : BOOL
41 : 160 { 0xa0 -96 } : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : eq(25, 42) : BOOL
44 : 168 { 0xa8 -88 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : bvadd(42, 23, 24) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 28) : BOOL
56 : eq(53, 31) : BOOL
57 : eq(53, 4) : BOOL
58 : eq(53, 36) : BOOL
59 : eq(53, 39) : BOOL
60 : eq(53, 42) : BOOL
61 : ite(60, 44, 45) : BV:8
62 : ite(59, 41, 61) : BV:8
63 : ite(58, 38, 62) : BV:8
64 : ite(57, 35, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : ite(54, 27, 66) : BV:8
68 : bvadd(28, 23, 24) : BV:32
69 : eq(68, 21) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 4) : BOOL
73 : eq(68, 36) : BOOL
74 : eq(68, 39) : BOOL
75 : eq(68, 42) : BOOL
76 : ite(75, 44, 45) : BV:8
77 : ite(74, 41, 76) : BV:8
78 : ite(73, 38, 77) : BV:8
79 : ite(72, 35, 78) : BV:8
80 : ite(71, 33, 79) : BV:8
81 : ite(70, 30, 80) : BV:8
82 : ite(69, 27, 81) : BV:8
83 : bvadd(23, 24) : BV:32
84 : eq(83, 21) : BOOL
85 : eq(83, 28) : BOOL
86 : eq(83, 31) : BOOL
87 : eq(83, 4) : BOOL
88 : eq(83, 36) : BOOL
89 : eq(83, 39) : BOOL
90 : eq(83, 42) : BOOL
91 : ite(90, 44, 45) : BV:8
92 : ite(89, 41, 91) : BV:8
93 : ite(88, 38, 92) : BV:8
94 : ite(87, 35, 93) : BV:8
95 : ite(86, 33, 94) : BV:8
96 : ite(85, 30, 95) : BV:8
97 : ite(84, 27, 96) : BV:8
98 : bvconcat(52, 67, 82, 97) : BV:32
99 : ite(20, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43578Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43579Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 94 { 0x5e } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 110 { 0x6e } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : eq(23, 2) : BOOL
33 : 186 { 0xba -70 } : BV:8
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
38 : eq(23, 37) : BOOL
39 : 160 { 0xa0 -96 } : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : eq(23, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : bvadd(40, 21, 22) : BV:32
52 : eq(51, 19) : BOOL
53 : eq(51, 26) : BOOL
54 : eq(51, 29) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 40) : BOOL
59 : ite(58, 42, 43) : BV:8
60 : ite(57, 39, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 25, 64) : BV:8
66 : bvadd(26, 21, 22) : BV:32
67 : eq(66, 19) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 40) : BOOL
74 : ite(73, 42, 43) : BV:8
75 : ite(72, 39, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 2) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 40) : BOOL
89 : ite(88, 42, 43) : BV:8
90 : ite(87, 39, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(50, 65, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2066646020 { 0x7b2e8404 +1.36340379e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2066646023 { 0x7b2e8407 +1.36340415e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1476919936 { 0x58080280 +1.6257629e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1476919939 { 0x58080283 +1.6257665e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194439700 { 0xfa021214 -100527596 -1.1617670e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194439703 { 0xfa021217 -100527593 -1.1617705e117 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43438Var : BV:32
2 : Lambda43439Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 94 { 0x5e } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 110 { 0x6e } : BV:8
58 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 152 { 0x98 -104 } : BV:8
61 : eq(52, 3) : BOOL
62 : 186 { 0xba -70 } : BV:8
63 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
64 : eq(52, 63) : BOOL
65 : 187 { 0xbb -69 } : BV:8
66 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
67 : eq(52, 66) : BOOL
68 : 160 { 0xa0 -96 } : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : eq(52, 69) : BOOL
71 : 168 { 0xa8 -88 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(56, 57, 77) : BV:8
79 : ite(53, 54, 78) : BV:8
80 : bvadd(69, 51) : BV:32
81 : eq(80, 48) : BOOL
82 : eq(80, 55) : BOOL
83 : eq(80, 58) : BOOL
84 : eq(80, 3) : BOOL
85 : eq(80, 63) : BOOL
86 : eq(80, 66) : BOOL
87 : eq(80, 69) : BOOL
88 : ite(87, 71, 72) : BV:8
89 : ite(86, 68, 88) : BV:8
90 : ite(85, 65, 89) : BV:8
91 : ite(84, 62, 90) : BV:8
92 : ite(83, 60, 91) : BV:8
93 : ite(82, 57, 92) : BV:8
94 : ite(81, 54, 93) : BV:8
95 : bvadd(55, 51) : BV:32
96 : eq(95, 48) : BOOL
97 : eq(95, 55) : BOOL
98 : eq(95, 58) : BOOL
99 : eq(95, 3) : BOOL
100 : eq(95, 63) : BOOL
101 : eq(95, 66) : BOOL
102 : eq(95, 69) : BOOL
103 : ite(102, 71, 72) : BV:8
104 : ite(101, 68, 103) : BV:8
105 : ite(100, 65, 104) : BV:8
106 : ite(99, 62, 105) : BV:8
107 : ite(98, 60, 106) : BV:8
108 : ite(97, 57, 107) : BV:8
109 : ite(96, 54, 108) : BV:8
110 : eq(51, 48) : BOOL
111 : eq(51, 55) : BOOL
112 : eq(51, 58) : BOOL
113 : eq(51, 3) : BOOL
114 : eq(51, 63) : BOOL
115 : eq(51, 66) : BOOL
116 : eq(51, 69) : BOOL
117 : ite(116, 71, 72) : BV:8
118 : ite(115, 68, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 60, 120) : BV:8
122 : ite(111, 57, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(79, 94, 109, 123) : BV:32
125 : bvadd(48, 50, 124) : BV:32
126 : eq(125, 48) : BOOL
127 : eq(125, 55) : BOOL
128 : eq(125, 58) : BOOL
129 : eq(125, 3) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 69) : BOOL
133 : ite(132, 71, 72) : BV:8
134 : ite(131, 68, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 60, 136) : BV:8
138 : ite(127, 57, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(69, 50, 124) : BV:32
141 : eq(140, 48) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 3) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 69) : BOOL
148 : ite(147, 71, 72) : BV:8
149 : ite(146, 68, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 60, 151) : BV:8
153 : ite(142, 57, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(55, 50, 124) : BV:32
156 : eq(155, 48) : BOOL
157 : eq(155, 55) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 3) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : ite(162, 71, 72) : BV:8
164 : ite(161, 68, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 60, 166) : BV:8
168 : ite(157, 57, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(50, 124) : BV:32
171 : eq(170, 48) : BOOL
172 : eq(170, 55) : BOOL
173 : eq(170, 58) : BOOL
174 : eq(170, 3) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 69) : BOOL
178 : ite(177, 71, 72) : BV:8
179 : ite(176, 68, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 60, 181) : BV:8
183 : ite(172, 57, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(47, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43443Var : BV:32
2 : Lambda43444Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2303647413 ] -> true, [ 2303647414; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2303647413 ] -> true, [ 2303647414; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43452Var : BV:32
2 : Lambda43453Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43448Var : BV:32
2 : Lambda43449Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 94 { 0x5e } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 110 { 0x6e } : BV:8
17 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 152 { 0x98 -104 } : BV:8
20 : eq(11, 3) : BOOL
21 : 186 { 0xba -70 } : BV:8
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : eq(11, 22) : BOOL
24 : 187 { 0xbb -69 } : BV:8
25 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : 168 { 0xa8 -88 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : bvadd(28, 10) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 14) : BOOL
42 : eq(39, 17) : BOOL
43 : eq(39, 3) : BOOL
44 : eq(39, 22) : BOOL
45 : eq(39, 25) : BOOL
46 : eq(39, 28) : BOOL
47 : ite(46, 30, 31) : BV:8
48 : ite(45, 27, 47) : BV:8
49 : ite(44, 24, 48) : BV:8
50 : ite(43, 21, 49) : BV:8
51 : ite(42, 19, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : bvadd(14, 10) : BV:32
55 : eq(54, 7) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : eq(54, 3) : BOOL
59 : eq(54, 22) : BOOL
60 : eq(54, 25) : BOOL
61 : eq(54, 28) : BOOL
62 : ite(61, 30, 31) : BV:8
63 : ite(60, 27, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 21, 64) : BV:8
66 : ite(57, 19, 65) : BV:8
67 : ite(56, 16, 66) : BV:8
68 : ite(55, 13, 67) : BV:8
69 : eq(10, 7) : BOOL
70 : eq(10, 14) : BOOL
71 : eq(10, 17) : BOOL
72 : eq(10, 3) : BOOL
73 : eq(10, 22) : BOOL
74 : eq(10, 25) : BOOL
75 : eq(10, 28) : BOOL
76 : ite(75, 30, 31) : BV:8
77 : ite(74, 27, 76) : BV:8
78 : ite(73, 24, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : ite(71, 19, 79) : BV:8
81 : ite(70, 16, 80) : BV:8
82 : ite(69, 13, 81) : BV:8
83 : bvconcat(38, 53, 68, 82) : BV:32
84 : bvadd(7, 9, 83) : BV:32
85 : eq(84, 7) : BOOL
86 : eq(84, 14) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 3) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : ite(91, 30, 31) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 24, 93) : BV:8
95 : ite(88, 21, 94) : BV:8
96 : ite(87, 19, 95) : BV:8
97 : ite(86, 16, 96) : BV:8
98 : ite(85, 13, 97) : BV:8
99 : bvadd(28, 9, 83) : BV:32
100 : eq(99, 7) : BOOL
101 : eq(99, 14) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 3) : BOOL
104 : eq(99, 22) : BOOL
105 : eq(99, 25) : BOOL
106 : eq(99, 28) : BOOL
107 : ite(106, 30, 31) : BV:8
108 : ite(105, 27, 107) : BV:8
109 : ite(104, 24, 108) : BV:8
110 : ite(103, 21, 109) : BV:8
111 : ite(102, 19, 110) : BV:8
112 : ite(101, 16, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : bvadd(14, 9, 83) : BV:32
115 : eq(114, 7) : BOOL
116 : eq(114, 14) : BOOL
117 : eq(114, 17) : BOOL
118 : eq(114, 3) : BOOL
119 : eq(114, 22) : BOOL
120 : eq(114, 25) : BOOL
121 : eq(114, 28) : BOOL
122 : ite(121, 30, 31) : BV:8
123 : ite(120, 27, 122) : BV:8
124 : ite(119, 24, 123) : BV:8
125 : ite(118, 21, 124) : BV:8
126 : ite(117, 19, 125) : BV:8
127 : ite(116, 16, 126) : BV:8
128 : ite(115, 13, 127) : BV:8
129 : bvadd(9, 83) : BV:32
130 : eq(129, 7) : BOOL
131 : eq(129, 14) : BOOL
132 : eq(129, 17) : BOOL
133 : eq(129, 3) : BOOL
134 : eq(129, 22) : BOOL
135 : eq(129, 25) : BOOL
136 : eq(129, 28) : BOOL
137 : ite(136, 30, 31) : BV:8
138 : ite(135, 27, 137) : BV:8
139 : ite(134, 24, 138) : BV:8
140 : ite(133, 21, 139) : BV:8
141 : ite(132, 19, 140) : BV:8
142 : ite(131, 16, 141) : BV:8
143 : ite(130, 13, 142) : BV:8
144 : bvconcat(98, 113, 128, 143) : BV:32
145 : ite(6, 3, 144) : BV:32
146 : lambda(1, 2, 145) : FUNCTION[BV:32,BV:32 -> BV:32]
147 : sym_const(146) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43459Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43463Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43467Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3236462953
=counter_example_end
=global nodece 37 num_edges_traversed 0
=global nodece 37 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 38
=global nodece 38 nodece z3v487.ce3712.num_edges_traversed0
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(epsilon)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3v487.ce3712 decaba6ecbbf4dea40dc264e264b839
=input.spec-%var-x-1
1 : Lambda43627Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43628Var : BV:32
18 : Lambda43629Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 131072 { 0x20000 +1.1562500e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 131073 { 0x20001 +1.1562511e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43630Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 805306371 { 0x30000003 +1.35e225 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 805306368 { 0x30000000 +1.0e225 } : BV:32
63 : eq(61, 62) : BOOL
64 : 1 { 0x1 } : BV:8
65 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
66 : eq(61, 65) : BOOL
67 : 128 { 0x80 -128 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : 805306370 { 0x30000002 +1.23e225 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : eq(72, 65) : BOOL
75 : ite(74, 67, 68) : BV:8
76 : ite(73, 64, 75) : BV:8
77 : 805306369 { 0x30000001 +1.11e225 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : bvadd(62, 60) : BV:32
84 : eq(83, 62) : BOOL
85 : eq(83, 65) : BOOL
86 : ite(85, 67, 68) : BV:8
87 : ite(84, 64, 86) : BV:8
88 : bvconcat(70, 76, 82, 87) : BV:32
89 : bvadd(56, 58, 88) : BV:32
90 : eq(89, 62) : BOOL
91 : eq(89, 65) : BOOL
92 : ite(91, 67, 68) : BV:8
93 : ite(90, 64, 92) : BV:8
94 : 2 { 0x2 +1.23e129 } : BV:32
95 : bvadd(94, 58, 88) : BV:32
96 : eq(95, 62) : BOOL
97 : eq(95, 65) : BOOL
98 : ite(97, 67, 68) : BV:8
99 : ite(96, 64, 98) : BV:8
100 : 1 { 0x1 +1.11e129 } : BV:32
101 : bvadd(100, 58, 88) : BV:32
102 : eq(101, 62) : BOOL
103 : eq(101, 65) : BOOL
104 : ite(103, 67, 68) : BV:8
105 : ite(102, 64, 104) : BV:8
106 : bvadd(58, 88) : BV:32
107 : eq(106, 62) : BOOL
108 : eq(106, 65) : BOOL
109 : ite(108, 67, 68) : BV:8
110 : ite(107, 64, 109) : BV:8
111 : bvconcat(93, 99, 105, 110) : BV:32
112 : ite(55, 2, 111) : BV:32
113 : lambda(52, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(51, 113) : MAP[BV:32 -> BV:32]
115 : lambda(17, 114) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
116 : map(16, 115) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
117 : sym_const(116) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43647Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43648Var : BV:32
18 : Lambda43649Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 131072 { 0x20000 +1.1562500e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 131073 { 0x20001 +1.1562511e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43650Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 805306371 { 0x30000003 +1.35e225 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 805306368 { 0x30000000 +1.0e225 } : BV:32
82 : eq(80, 81) : BOOL
83 : 1 { 0x1 } : BV:8
84 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 805306370 { 0x30000002 +1.23e225 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 805306369 { 0x30000001 +1.11e225 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : bvadd(81, 79) : BV:32
103 : eq(102, 81) : BOOL
104 : eq(102, 84) : BOOL
105 : ite(104, 86, 87) : BV:8
106 : ite(103, 83, 105) : BV:8
107 : bvconcat(89, 95, 101, 106) : BV:32
108 : bvadd(75, 77, 107) : BV:32
109 : eq(108, 81) : BOOL
110 : eq(108, 84) : BOOL
111 : ite(110, 86, 87) : BV:8
112 : ite(109, 83, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 77, 107) : BV:32
115 : eq(114, 81) : BOOL
116 : eq(114, 84) : BOOL
117 : ite(116, 86, 87) : BV:8
118 : ite(115, 83, 117) : BV:8
119 : 1 { 0x1 +1.11e129 } : BV:32
120 : bvadd(119, 77, 107) : BV:32
121 : eq(120, 81) : BOOL
122 : eq(120, 84) : BOOL
123 : ite(122, 86, 87) : BV:8
124 : ite(121, 83, 123) : BV:8
125 : bvadd(77, 107) : BV:32
126 : eq(125, 81) : BOOL
127 : eq(125, 84) : BOOL
128 : ite(127, 86, 87) : BV:8
129 : ite(126, 83, 128) : BV:8
130 : bvconcat(112, 118, 124, 129) : BV:32
131 : ite(55, 2, 130) : BV:32
132 : ite(74, 130, 131) : BV:32
133 : ite(55, 2, 132) : BV:32
134 : lambda(52, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(51, 134) : MAP[BV:32 -> BV:32]
136 : lambda(17, 135) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
137 : map(16, 136) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
138 : sym_const(137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 805306367 ] -> 0, [ 805306368; 805306368 ] -> 1, [ 805306369; 872415230 ] -> 0, [ 872415231; 872415231 ] -> 128, [ 872415232; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2201438467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2201438468; 2201438471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2201438472; 2309464351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2309464352; 2309464355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2309464356; 2353008643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2353008644; 2353008647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2353008648; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2309464352 { 0x89a7a120 -1985502944 -1.30960464e148 } : BV:32
=input.dst.llvm-%m
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2353008644 { 0x8c401004 -1941958652 -1.50048875e153 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2201438468 { 0x83374904 -2093528828 -1.43191576e135 } : BV:32
=input.dst.llvm-%x
1 : 805306368 { 0x30000000 +1.0e225 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1090519039 { 0x40ffffff +1.99999988e2 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43654Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43655Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 805306368 { 0x30000000 +1.0e225 } : BV:32
25 : eq(23, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
28 : eq(23, 27) : BOOL
29 : 128 { 0x80 -128 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : eq(34, 27) : BOOL
37 : ite(36, 29, 30) : BV:8
38 : ite(35, 26, 37) : BV:8
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvadd(39, 21, 22) : BV:32
41 : eq(40, 24) : BOOL
42 : eq(40, 27) : BOOL
43 : ite(42, 29, 30) : BV:8
44 : ite(41, 26, 43) : BV:8
45 : bvadd(21, 22) : BV:32
46 : eq(45, 24) : BOOL
47 : eq(45, 27) : BOOL
48 : ite(47, 29, 30) : BV:8
49 : ite(46, 26, 48) : BV:8
50 : bvconcat(32, 38, 44, 49) : BV:32
51 : ite(18, 2, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sym_const(53) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1090519040 { 0x41000000 +1.0e3 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda43636Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 131072 { 0x20000 +1.1562500e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43637Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 805306368 { 0x30000000 +1.0e225 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 23, 24) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(23, 24) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : ite(20, 4, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : sum(1, 2, 55) : SUM[UNIT,MAP[BV:32 -> BV:32]]
57 : sym_const(56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43659Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43660Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 805306368 { 0x30000000 +1.0e225 } : BV:32
25 : eq(23, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
28 : eq(23, 27) : BOOL
29 : 128 { 0x80 -128 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : eq(34, 27) : BOOL
37 : ite(36, 29, 30) : BV:8
38 : ite(35, 26, 37) : BV:8
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvadd(39, 21, 22) : BV:32
41 : eq(40, 24) : BOOL
42 : eq(40, 27) : BOOL
43 : ite(42, 29, 30) : BV:8
44 : ite(41, 26, 43) : BV:8
45 : bvadd(21, 22) : BV:32
46 : eq(45, 24) : BOOL
47 : eq(45, 27) : BOOL
48 : ite(47, 29, 30) : BV:8
49 : ite(46, 26, 48) : BV:8
50 : bvconcat(32, 38, 44, 49) : BV:32
51 : ite(18, 2, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sym_const(53) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1090519039 { 0x40ffffff +1.99999988e2 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2353008644 { 0x8c401004 -1941958652 -1.50048875e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2353008647 { 0x8c401007 -1941958649 -1.50048911e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2201438468 { 0x83374904 -2093528828 -1.43191576e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2201438471 { 0x83374907 -2093528825 -1.43191611e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2309464352 { 0x89a7a120 -1985502944 -1.30960464e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2309464355 { 0x89a7a123 -1985502941 -1.30960500e148 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43469Var : BV:32
2 : Lambda43470Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 805306371 { 0x30000003 +1.35e225 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 805306368 { 0x30000000 +1.0e225 } : BV:32
14 : eq(12, 13) : BOOL
15 : 1 { 0x1 } : BV:8
16 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : 805306370 { 0x30000002 +1.23e225 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : eq(23, 16) : BOOL
26 : ite(25, 18, 19) : BV:8
27 : ite(24, 15, 26) : BV:8
28 : 805306369 { 0x30000001 +1.11e225 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : ite(31, 18, 19) : BV:8
33 : ite(30, 15, 32) : BV:8
34 : bvadd(13, 11) : BV:32
35 : eq(34, 13) : BOOL
36 : eq(34, 16) : BOOL
37 : ite(36, 18, 19) : BV:8
38 : ite(35, 15, 37) : BV:8
39 : bvconcat(21, 27, 33, 38) : BV:32
40 : bvadd(7, 9, 39) : BV:32
41 : eq(40, 13) : BOOL
42 : eq(40, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 39) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : ite(48, 18, 19) : BV:8
50 : ite(47, 15, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 9, 39) : BV:32
53 : eq(52, 13) : BOOL
54 : eq(52, 16) : BOOL
55 : ite(54, 18, 19) : BV:8
56 : ite(53, 15, 55) : BV:8
57 : bvadd(9, 39) : BV:32
58 : eq(57, 13) : BOOL
59 : eq(57, 16) : BOOL
60 : ite(59, 18, 19) : BV:8
61 : ite(58, 15, 60) : BV:8
62 : bvconcat(44, 50, 56, 61) : BV:32
63 : ite(6, 3, 62) : BV:32
64 : lambda(1, 2, 63) : FUNCTION[BV:32,BV:32 -> BV:32]
65 : sym_const(64) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43471Var : BV:32
2 : Lambda43472Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 131072 { 0x20000 +1.1562500e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 131073 { 0x20001 +1.1562511e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43481Var : BV:32
2 : Lambda43482Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 131072 { 0x20000 +1.1562500e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 131073 { 0x20001 +1.1562511e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43485Var : BV:32
2 : Lambda43486Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 131072 { 0x20000 +1.1562500e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 131073 { 0x20001 +1.1562511e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 805306371 { 0x30000003 +1.35e225 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 805306368 { 0x30000000 +1.0e225 } : BV:32
55 : eq(53, 54) : BOOL
56 : 1 { 0x1 } : BV:8
57 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 805306370 { 0x30000002 +1.23e225 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 805306369 { 0x30000001 +1.11e225 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : bvadd(54, 52) : BV:32
76 : eq(75, 54) : BOOL
77 : eq(75, 57) : BOOL
78 : ite(77, 59, 60) : BV:8
79 : ite(76, 56, 78) : BV:8
80 : bvconcat(62, 68, 74, 79) : BV:32
81 : bvadd(48, 50, 80) : BV:32
82 : eq(81, 54) : BOOL
83 : eq(81, 57) : BOOL
84 : ite(83, 59, 60) : BV:8
85 : ite(82, 56, 84) : BV:8
86 : 2 { 0x2 +1.23e129 } : BV:32
87 : bvadd(86, 50, 80) : BV:32
88 : eq(87, 54) : BOOL
89 : eq(87, 57) : BOOL
90 : ite(89, 59, 60) : BV:8
91 : ite(88, 56, 90) : BV:8
92 : 1 { 0x1 +1.11e129 } : BV:32
93 : bvadd(92, 50, 80) : BV:32
94 : eq(93, 54) : BOOL
95 : eq(93, 57) : BOOL
96 : ite(95, 59, 60) : BV:8
97 : ite(94, 56, 96) : BV:8
98 : bvadd(50, 80) : BV:32
99 : eq(98, 54) : BOOL
100 : eq(98, 57) : BOOL
101 : ite(100, 59, 60) : BV:8
102 : ite(99, 56, 101) : BV:8
103 : bvconcat(85, 91, 97, 102) : BV:32
104 : ite(6, 3, 103) : BV:32
105 : ite(47, 103, 104) : BV:32
106 : ite(6, 3, 105) : BV:32
107 : lambda(1, 2, 106) : FUNCTION[BV:32,BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43490Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 805306368 { 0x30000000 +1.0e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
13 : eq(8, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43494Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 805306368 { 0x30000000 +1.0e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
13 : eq(8, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43498Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 805306368 { 0x30000000 +1.0e225 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
13 : eq(8, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
175919732
=counter_example_end
=global nodece 38 num_edges_traversed 0
=global nodece 38 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce3827.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(epsilon)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce3827 e20765e381e7253e739082614fa73d
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 40
=global nodece 40 nodece z3v487.ce3863.num_edges_traversed4
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3v487.ce3863 168236f1282ba9e87fb28d374756cc6
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 40 num_edges_traversed 4
=global nodece 40 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce3893.num_edges_traversed5
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce3893 e418c2f45ac4fd53dd113e8ac3476a39
=input.spec-%var-x-1
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1880Var : BV:32
18 : Lambda1881Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1882Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
67 : eq(60, 66) : BOOL
68 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
77 : eq(60, 76) : BOOL
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
81 : eq(60, 80) : BOOL
82 : 128 { 0x80 -128 } : BV:8
83 : ite(81, 63, 82) : BV:8
84 : ite(79, 63, 83) : BV:8
85 : ite(77, 63, 84) : BV:8
86 : ite(75, 63, 85) : BV:8
87 : ite(74, 63, 86) : BV:8
88 : ite(72, 63, 87) : BV:8
89 : ite(71, 63, 88) : BV:8
90 : ite(69, 63, 89) : BV:8
91 : ite(67, 63, 90) : BV:8
92 : ite(65, 63, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(70, 59, 2) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 66) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 70) : BOOL
100 : eq(94, 2) : BOOL
101 : eq(94, 73) : BOOL
102 : eq(94, 56) : BOOL
103 : eq(94, 76) : BOOL
104 : eq(94, 78) : BOOL
105 : eq(94, 80) : BOOL
106 : ite(105, 63, 82) : BV:8
107 : ite(104, 63, 106) : BV:8
108 : ite(103, 63, 107) : BV:8
109 : ite(102, 63, 108) : BV:8
110 : ite(101, 63, 109) : BV:8
111 : ite(100, 63, 110) : BV:8
112 : ite(99, 63, 111) : BV:8
113 : ite(98, 63, 112) : BV:8
114 : ite(97, 63, 113) : BV:8
115 : ite(96, 63, 114) : BV:8
116 : ite(95, 63, 115) : BV:8
117 : bvadd(78, 59, 2) : BV:32
118 : eq(117, 61) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 66) : BOOL
121 : eq(117, 68) : BOOL
122 : eq(117, 70) : BOOL
123 : eq(117, 2) : BOOL
124 : eq(117, 73) : BOOL
125 : eq(117, 56) : BOOL
126 : eq(117, 76) : BOOL
127 : eq(117, 78) : BOOL
128 : eq(117, 80) : BOOL
129 : ite(128, 63, 82) : BV:8
130 : ite(127, 63, 129) : BV:8
131 : ite(126, 63, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : ite(124, 63, 132) : BV:8
134 : ite(123, 63, 133) : BV:8
135 : ite(122, 63, 134) : BV:8
136 : ite(121, 63, 135) : BV:8
137 : ite(120, 63, 136) : BV:8
138 : ite(119, 63, 137) : BV:8
139 : ite(118, 63, 138) : BV:8
140 : bvadd(59, 2) : BV:32
141 : eq(140, 61) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 66) : BOOL
144 : eq(140, 68) : BOOL
145 : eq(140, 70) : BOOL
146 : eq(140, 2) : BOOL
147 : eq(140, 73) : BOOL
148 : eq(140, 56) : BOOL
149 : eq(140, 76) : BOOL
150 : eq(140, 78) : BOOL
151 : eq(140, 80) : BOOL
152 : ite(151, 63, 82) : BV:8
153 : ite(150, 63, 152) : BV:8
154 : ite(149, 63, 153) : BV:8
155 : ite(148, 63, 154) : BV:8
156 : ite(147, 63, 155) : BV:8
157 : ite(146, 63, 156) : BV:8
158 : ite(145, 63, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : ite(143, 63, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : ite(141, 63, 161) : BV:8
163 : bvconcat(93, 116, 139, 162) : BV:32
164 : bvadd(56, 58, 163) : BV:32
165 : eq(164, 61) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 66) : BOOL
168 : eq(164, 68) : BOOL
169 : eq(164, 70) : BOOL
170 : eq(164, 2) : BOOL
171 : eq(164, 73) : BOOL
172 : eq(164, 56) : BOOL
173 : eq(164, 76) : BOOL
174 : eq(164, 78) : BOOL
175 : eq(164, 80) : BOOL
176 : ite(175, 63, 82) : BV:8
177 : ite(174, 63, 176) : BV:8
178 : ite(173, 63, 177) : BV:8
179 : ite(172, 63, 178) : BV:8
180 : ite(171, 63, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : ite(168, 63, 182) : BV:8
184 : ite(167, 63, 183) : BV:8
185 : ite(166, 63, 184) : BV:8
186 : ite(165, 63, 185) : BV:8
187 : bvadd(70, 58, 163) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 66) : BOOL
191 : eq(187, 68) : BOOL
192 : eq(187, 70) : BOOL
193 : eq(187, 2) : BOOL
194 : eq(187, 73) : BOOL
195 : eq(187, 56) : BOOL
196 : eq(187, 76) : BOOL
197 : eq(187, 78) : BOOL
198 : eq(187, 80) : BOOL
199 : ite(198, 63, 82) : BV:8
200 : ite(197, 63, 199) : BV:8
201 : ite(196, 63, 200) : BV:8
202 : ite(195, 63, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 63, 203) : BV:8
205 : ite(192, 63, 204) : BV:8
206 : ite(191, 63, 205) : BV:8
207 : ite(190, 63, 206) : BV:8
208 : ite(189, 63, 207) : BV:8
209 : ite(188, 63, 208) : BV:8
210 : bvadd(78, 58, 163) : BV:32
211 : eq(210, 61) : BOOL
212 : eq(210, 64) : BOOL
213 : eq(210, 66) : BOOL
214 : eq(210, 68) : BOOL
215 : eq(210, 70) : BOOL
216 : eq(210, 2) : BOOL
217 : eq(210, 73) : BOOL
218 : eq(210, 56) : BOOL
219 : eq(210, 76) : BOOL
220 : eq(210, 78) : BOOL
221 : eq(210, 80) : BOOL
222 : ite(221, 63, 82) : BV:8
223 : ite(220, 63, 222) : BV:8
224 : ite(219, 63, 223) : BV:8
225 : ite(218, 63, 224) : BV:8
226 : ite(217, 63, 225) : BV:8
227 : ite(216, 63, 226) : BV:8
228 : ite(215, 63, 227) : BV:8
229 : ite(214, 63, 228) : BV:8
230 : ite(213, 63, 229) : BV:8
231 : ite(212, 63, 230) : BV:8
232 : ite(211, 63, 231) : BV:8
233 : bvadd(58, 163) : BV:32
234 : eq(233, 61) : BOOL
235 : eq(233, 64) : BOOL
236 : eq(233, 66) : BOOL
237 : eq(233, 68) : BOOL
238 : eq(233, 70) : BOOL
239 : eq(233, 2) : BOOL
240 : eq(233, 73) : BOOL
241 : eq(233, 56) : BOOL
242 : eq(233, 76) : BOOL
243 : eq(233, 78) : BOOL
244 : eq(233, 80) : BOOL
245 : ite(244, 63, 82) : BV:8
246 : ite(243, 63, 245) : BV:8
247 : ite(242, 63, 246) : BV:8
248 : ite(241, 63, 247) : BV:8
249 : ite(240, 63, 248) : BV:8
250 : ite(239, 63, 249) : BV:8
251 : ite(238, 63, 250) : BV:8
252 : ite(237, 63, 251) : BV:8
253 : ite(236, 63, 252) : BV:8
254 : ite(235, 63, 253) : BV:8
255 : ite(234, 63, 254) : BV:8
256 : bvconcat(186, 209, 232, 255) : BV:32
257 : ite(55, 2, 256) : BV:32
258 : lambda(52, 257) : FUNCTION[BV:32 -> BV:32]
259 : map(51, 258) : MAP[BV:32 -> BV:32]
260 : lambda(17, 259) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
261 : map(16, 260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
262 : sym_const(261) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 1137459739 ] -> 128, [ 1137459740; 1137459742 ] -> 0, [ 1137459743; 2645721235 ] -> 128, [ 2645721236; 2645721239 ] -> 0, [ 2645721240; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1002776847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1002776848; 1002776851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1002776852; 1137459739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1137459740; 1137459743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1137459744; 2645721235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645721236; 2645721239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2645721240; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.llvm-%m
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4349Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4350Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4339Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4340Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
57 : eq(55, 56) : BOOL
58 : 0 { 0x0 } : BV:8
59 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
60 : eq(55, 59) : BOOL
61 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
62 : eq(55, 61) : BOOL
63 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
64 : eq(55, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(55, 65) : BOOL
67 : eq(55, 1) : BOOL
68 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
69 : eq(55, 68) : BOOL
70 : eq(55, 51) : BOOL
71 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
72 : eq(55, 71) : BOOL
73 : eq(55, 15) : BOOL
74 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
75 : eq(55, 74) : BOOL
76 : 128 { 0x80 -128 } : BV:8
77 : ite(75, 58, 76) : BV:8
78 : ite(73, 58, 77) : BV:8
79 : ite(72, 58, 78) : BV:8
80 : ite(70, 58, 79) : BV:8
81 : ite(69, 58, 80) : BV:8
82 : ite(67, 58, 81) : BV:8
83 : ite(66, 58, 82) : BV:8
84 : ite(64, 58, 83) : BV:8
85 : ite(62, 58, 84) : BV:8
86 : ite(60, 58, 85) : BV:8
87 : ite(57, 58, 86) : BV:8
88 : bvadd(65, 54, 1) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 59) : BOOL
91 : eq(88, 61) : BOOL
92 : eq(88, 63) : BOOL
93 : eq(88, 65) : BOOL
94 : eq(88, 1) : BOOL
95 : eq(88, 68) : BOOL
96 : eq(88, 51) : BOOL
97 : eq(88, 71) : BOOL
98 : eq(88, 15) : BOOL
99 : eq(88, 74) : BOOL
100 : ite(99, 58, 76) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 58, 101) : BV:8
103 : ite(96, 58, 102) : BV:8
104 : ite(95, 58, 103) : BV:8
105 : ite(94, 58, 104) : BV:8
106 : ite(93, 58, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 58, 107) : BV:8
109 : ite(90, 58, 108) : BV:8
110 : ite(89, 58, 109) : BV:8
111 : bvadd(15, 54, 1) : BV:32
112 : eq(111, 56) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 63) : BOOL
116 : eq(111, 65) : BOOL
117 : eq(111, 1) : BOOL
118 : eq(111, 68) : BOOL
119 : eq(111, 51) : BOOL
120 : eq(111, 71) : BOOL
121 : eq(111, 15) : BOOL
122 : eq(111, 74) : BOOL
123 : ite(122, 58, 76) : BV:8
124 : ite(121, 58, 123) : BV:8
125 : ite(120, 58, 124) : BV:8
126 : ite(119, 58, 125) : BV:8
127 : ite(118, 58, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 58, 128) : BV:8
130 : ite(115, 58, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 58, 131) : BV:8
133 : ite(112, 58, 132) : BV:8
134 : bvadd(54, 1) : BV:32
135 : eq(134, 56) : BOOL
136 : eq(134, 59) : BOOL
137 : eq(134, 61) : BOOL
138 : eq(134, 63) : BOOL
139 : eq(134, 65) : BOOL
140 : eq(134, 1) : BOOL
141 : eq(134, 68) : BOOL
142 : eq(134, 51) : BOOL
143 : eq(134, 71) : BOOL
144 : eq(134, 15) : BOOL
145 : eq(134, 74) : BOOL
146 : ite(145, 58, 76) : BV:8
147 : ite(144, 58, 146) : BV:8
148 : ite(143, 58, 147) : BV:8
149 : ite(142, 58, 148) : BV:8
150 : ite(141, 58, 149) : BV:8
151 : ite(140, 58, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : ite(137, 58, 153) : BV:8
155 : ite(136, 58, 154) : BV:8
156 : ite(135, 58, 155) : BV:8
157 : bvconcat(87, 110, 133, 156) : BV:32
158 : bvadd(51, 53, 157) : BV:32
159 : eq(158, 56) : BOOL
160 : eq(158, 59) : BOOL
161 : eq(158, 61) : BOOL
162 : eq(158, 63) : BOOL
163 : eq(158, 65) : BOOL
164 : eq(158, 1) : BOOL
165 : eq(158, 68) : BOOL
166 : eq(158, 51) : BOOL
167 : eq(158, 71) : BOOL
168 : eq(158, 15) : BOOL
169 : eq(158, 74) : BOOL
170 : ite(169, 58, 76) : BV:8
171 : ite(168, 58, 170) : BV:8
172 : ite(167, 58, 171) : BV:8
173 : ite(166, 58, 172) : BV:8
174 : ite(165, 58, 173) : BV:8
175 : ite(164, 58, 174) : BV:8
176 : ite(163, 58, 175) : BV:8
177 : ite(162, 58, 176) : BV:8
178 : ite(161, 58, 177) : BV:8
179 : ite(160, 58, 178) : BV:8
180 : ite(159, 58, 179) : BV:8
181 : bvadd(65, 53, 157) : BV:32
182 : eq(181, 56) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 61) : BOOL
185 : eq(181, 63) : BOOL
186 : eq(181, 65) : BOOL
187 : eq(181, 1) : BOOL
188 : eq(181, 68) : BOOL
189 : eq(181, 51) : BOOL
190 : eq(181, 71) : BOOL
191 : eq(181, 15) : BOOL
192 : eq(181, 74) : BOOL
193 : ite(192, 58, 76) : BV:8
194 : ite(191, 58, 193) : BV:8
195 : ite(190, 58, 194) : BV:8
196 : ite(189, 58, 195) : BV:8
197 : ite(188, 58, 196) : BV:8
198 : ite(187, 58, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 58, 199) : BV:8
201 : ite(184, 58, 200) : BV:8
202 : ite(183, 58, 201) : BV:8
203 : ite(182, 58, 202) : BV:8
204 : bvadd(15, 53, 157) : BV:32
205 : eq(204, 56) : BOOL
206 : eq(204, 59) : BOOL
207 : eq(204, 61) : BOOL
208 : eq(204, 63) : BOOL
209 : eq(204, 65) : BOOL
210 : eq(204, 1) : BOOL
211 : eq(204, 68) : BOOL
212 : eq(204, 51) : BOOL
213 : eq(204, 71) : BOOL
214 : eq(204, 15) : BOOL
215 : eq(204, 74) : BOOL
216 : ite(215, 58, 76) : BV:8
217 : ite(214, 58, 216) : BV:8
218 : ite(213, 58, 217) : BV:8
219 : ite(212, 58, 218) : BV:8
220 : ite(211, 58, 219) : BV:8
221 : ite(210, 58, 220) : BV:8
222 : ite(209, 58, 221) : BV:8
223 : ite(208, 58, 222) : BV:8
224 : ite(207, 58, 223) : BV:8
225 : ite(206, 58, 224) : BV:8
226 : ite(205, 58, 225) : BV:8
227 : bvadd(53, 157) : BV:32
228 : eq(227, 56) : BOOL
229 : eq(227, 59) : BOOL
230 : eq(227, 61) : BOOL
231 : eq(227, 63) : BOOL
232 : eq(227, 65) : BOOL
233 : eq(227, 1) : BOOL
234 : eq(227, 68) : BOOL
235 : eq(227, 51) : BOOL
236 : eq(227, 71) : BOOL
237 : eq(227, 15) : BOOL
238 : eq(227, 74) : BOOL
239 : ite(238, 58, 76) : BV:8
240 : ite(237, 58, 239) : BV:8
241 : ite(236, 58, 240) : BV:8
242 : ite(235, 58, 241) : BV:8
243 : ite(234, 58, 242) : BV:8
244 : ite(233, 58, 243) : BV:8
245 : ite(232, 58, 244) : BV:8
246 : ite(231, 58, 245) : BV:8
247 : ite(230, 58, 246) : BV:8
248 : ite(229, 58, 247) : BV:8
249 : ite(228, 58, 248) : BV:8
250 : bvconcat(180, 203, 226, 249) : BV:32
251 : ite(50, 1, 250) : BV:32
252 : lambda(47, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(46, 252) : MAP[BV:32 -> BV:32]
254 : sum(16, 17, 253) : SUM[UNIT,MAP[BV:32 -> BV:32]]
255 : sym_const(254) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4356Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
51 : eq(49, 50) : BOOL
52 : 0 { 0x0 } : BV:8
53 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
54 : eq(49, 53) : BOOL
55 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
56 : eq(49, 55) : BOOL
57 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
58 : eq(49, 57) : BOOL
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : eq(49, 59) : BOOL
61 : eq(49, 2) : BOOL
62 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
63 : eq(49, 62) : BOOL
64 : eq(49, 45) : BOOL
65 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
66 : eq(49, 65) : BOOL
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : eq(49, 67) : BOOL
69 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
70 : eq(49, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : ite(70, 52, 71) : BV:8
73 : ite(68, 52, 72) : BV:8
74 : ite(66, 52, 73) : BV:8
75 : ite(64, 52, 74) : BV:8
76 : ite(63, 52, 75) : BV:8
77 : ite(61, 52, 76) : BV:8
78 : ite(60, 52, 77) : BV:8
79 : ite(58, 52, 78) : BV:8
80 : ite(56, 52, 79) : BV:8
81 : ite(54, 52, 80) : BV:8
82 : ite(51, 52, 81) : BV:8
83 : bvadd(59, 48, 2) : BV:32
84 : eq(83, 50) : BOOL
85 : eq(83, 53) : BOOL
86 : eq(83, 55) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 59) : BOOL
89 : eq(83, 2) : BOOL
90 : eq(83, 62) : BOOL
91 : eq(83, 45) : BOOL
92 : eq(83, 65) : BOOL
93 : eq(83, 67) : BOOL
94 : eq(83, 69) : BOOL
95 : ite(94, 52, 71) : BV:8
96 : ite(93, 52, 95) : BV:8
97 : ite(92, 52, 96) : BV:8
98 : ite(91, 52, 97) : BV:8
99 : ite(90, 52, 98) : BV:8
100 : ite(89, 52, 99) : BV:8
101 : ite(88, 52, 100) : BV:8
102 : ite(87, 52, 101) : BV:8
103 : ite(86, 52, 102) : BV:8
104 : ite(85, 52, 103) : BV:8
105 : ite(84, 52, 104) : BV:8
106 : bvadd(67, 48, 2) : BV:32
107 : eq(106, 50) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 55) : BOOL
110 : eq(106, 57) : BOOL
111 : eq(106, 59) : BOOL
112 : eq(106, 2) : BOOL
113 : eq(106, 62) : BOOL
114 : eq(106, 45) : BOOL
115 : eq(106, 65) : BOOL
116 : eq(106, 67) : BOOL
117 : eq(106, 69) : BOOL
118 : ite(117, 52, 71) : BV:8
119 : ite(116, 52, 118) : BV:8
120 : ite(115, 52, 119) : BV:8
121 : ite(114, 52, 120) : BV:8
122 : ite(113, 52, 121) : BV:8
123 : ite(112, 52, 122) : BV:8
124 : ite(111, 52, 123) : BV:8
125 : ite(110, 52, 124) : BV:8
126 : ite(109, 52, 125) : BV:8
127 : ite(108, 52, 126) : BV:8
128 : ite(107, 52, 127) : BV:8
129 : bvadd(48, 2) : BV:32
130 : eq(129, 50) : BOOL
131 : eq(129, 53) : BOOL
132 : eq(129, 55) : BOOL
133 : eq(129, 57) : BOOL
134 : eq(129, 59) : BOOL
135 : eq(129, 2) : BOOL
136 : eq(129, 62) : BOOL
137 : eq(129, 45) : BOOL
138 : eq(129, 65) : BOOL
139 : eq(129, 67) : BOOL
140 : eq(129, 69) : BOOL
141 : ite(140, 52, 71) : BV:8
142 : ite(139, 52, 141) : BV:8
143 : ite(138, 52, 142) : BV:8
144 : ite(137, 52, 143) : BV:8
145 : ite(136, 52, 144) : BV:8
146 : ite(135, 52, 145) : BV:8
147 : ite(134, 52, 146) : BV:8
148 : ite(133, 52, 147) : BV:8
149 : ite(132, 52, 148) : BV:8
150 : ite(131, 52, 149) : BV:8
151 : ite(130, 52, 150) : BV:8
152 : bvconcat(82, 105, 128, 151) : BV:32
153 : bvadd(45, 47, 152) : BV:32
154 : eq(153, 50) : BOOL
155 : eq(153, 53) : BOOL
156 : eq(153, 55) : BOOL
157 : eq(153, 57) : BOOL
158 : eq(153, 59) : BOOL
159 : eq(153, 2) : BOOL
160 : eq(153, 62) : BOOL
161 : eq(153, 45) : BOOL
162 : eq(153, 65) : BOOL
163 : eq(153, 67) : BOOL
164 : eq(153, 69) : BOOL
165 : ite(164, 52, 71) : BV:8
166 : ite(163, 52, 165) : BV:8
167 : ite(162, 52, 166) : BV:8
168 : ite(161, 52, 167) : BV:8
169 : ite(160, 52, 168) : BV:8
170 : ite(159, 52, 169) : BV:8
171 : ite(158, 52, 170) : BV:8
172 : ite(157, 52, 171) : BV:8
173 : ite(156, 52, 172) : BV:8
174 : ite(155, 52, 173) : BV:8
175 : ite(154, 52, 174) : BV:8
176 : bvadd(59, 47, 152) : BV:32
177 : eq(176, 50) : BOOL
178 : eq(176, 53) : BOOL
179 : eq(176, 55) : BOOL
180 : eq(176, 57) : BOOL
181 : eq(176, 59) : BOOL
182 : eq(176, 2) : BOOL
183 : eq(176, 62) : BOOL
184 : eq(176, 45) : BOOL
185 : eq(176, 65) : BOOL
186 : eq(176, 67) : BOOL
187 : eq(176, 69) : BOOL
188 : ite(187, 52, 71) : BV:8
189 : ite(186, 52, 188) : BV:8
190 : ite(185, 52, 189) : BV:8
191 : ite(184, 52, 190) : BV:8
192 : ite(183, 52, 191) : BV:8
193 : ite(182, 52, 192) : BV:8
194 : ite(181, 52, 193) : BV:8
195 : ite(180, 52, 194) : BV:8
196 : ite(179, 52, 195) : BV:8
197 : ite(178, 52, 196) : BV:8
198 : ite(177, 52, 197) : BV:8
199 : bvadd(67, 47, 152) : BV:32
200 : eq(199, 50) : BOOL
201 : eq(199, 53) : BOOL
202 : eq(199, 55) : BOOL
203 : eq(199, 57) : BOOL
204 : eq(199, 59) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 62) : BOOL
207 : eq(199, 45) : BOOL
208 : eq(199, 65) : BOOL
209 : eq(199, 67) : BOOL
210 : eq(199, 69) : BOOL
211 : ite(210, 52, 71) : BV:8
212 : ite(209, 52, 211) : BV:8
213 : ite(208, 52, 212) : BV:8
214 : ite(207, 52, 213) : BV:8
215 : ite(206, 52, 214) : BV:8
216 : ite(205, 52, 215) : BV:8
217 : ite(204, 52, 216) : BV:8
218 : ite(203, 52, 217) : BV:8
219 : ite(202, 52, 218) : BV:8
220 : ite(201, 52, 219) : BV:8
221 : ite(200, 52, 220) : BV:8
222 : bvadd(47, 152) : BV:32
223 : eq(222, 50) : BOOL
224 : eq(222, 53) : BOOL
225 : eq(222, 55) : BOOL
226 : eq(222, 57) : BOOL
227 : eq(222, 59) : BOOL
228 : eq(222, 2) : BOOL
229 : eq(222, 62) : BOOL
230 : eq(222, 45) : BOOL
231 : eq(222, 65) : BOOL
232 : eq(222, 67) : BOOL
233 : eq(222, 69) : BOOL
234 : ite(233, 52, 71) : BV:8
235 : ite(232, 52, 234) : BV:8
236 : ite(231, 52, 235) : BV:8
237 : ite(230, 52, 236) : BV:8
238 : ite(229, 52, 237) : BV:8
239 : ite(228, 52, 238) : BV:8
240 : ite(227, 52, 239) : BV:8
241 : ite(226, 52, 240) : BV:8
242 : ite(225, 52, 241) : BV:8
243 : ite(224, 52, 242) : BV:8
244 : ite(223, 52, 243) : BV:8
245 : bvconcat(175, 198, 221, 244) : BV:32
246 : ite(44, 2, 245) : BV:32
247 : lambda(41, 246) : FUNCTION[BV:32 -> BV:32]
248 : map(40, 247) : MAP[BV:32 -> BV:32]
249 : sym_const(248) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1301476470 { 0x4d92f476 +1.14808535e28 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1137459743 { 0x43cc421f +1.59576785e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1002776848 { 0x3bc52910 +1.54031562e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1002776851 { 0x3bc52913 +1.54031598e248 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1816Var : BV:32
2 : Lambda1817Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1818Var : BV:32
2 : Lambda1819Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1827Var : BV:32
2 : Lambda1828Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905151 { 0x8080807f -2139062145 -1.392138e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905153 { 0x80808081 -2139062143 -1.392162e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1831Var : BV:32
2 : Lambda1832Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2645721239 { 0x9db28097 -1649246057 -1.39454925e188 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 2645721236 { 0x9db28094 -1649246060 -1.39454889e188 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1137459742 { 0x43cc421e +1.59576773e8 } : BV:32
18 : eq(11, 17) : BOOL
19 : 2645721238 { 0x9db28096 -1649246058 -1.39454913e188 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 2645721237 { 0x9db28095 -1649246059 -1.39454901e188 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 1137459740 { 0x43cc421c +1.59576749e8 } : BV:32
28 : eq(11, 27) : BOOL
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : 1137459741 { 0x43cc421d +1.59576761e8 } : BV:32
32 : eq(11, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : ite(32, 14, 33) : BV:8
35 : ite(30, 14, 34) : BV:8
36 : ite(28, 14, 35) : BV:8
37 : ite(26, 14, 36) : BV:8
38 : ite(25, 14, 37) : BV:8
39 : ite(23, 14, 38) : BV:8
40 : ite(22, 14, 39) : BV:8
41 : ite(20, 14, 40) : BV:8
42 : ite(18, 14, 41) : BV:8
43 : ite(16, 14, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(21, 10, 3) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : eq(45, 21) : BOOL
51 : eq(45, 3) : BOOL
52 : eq(45, 24) : BOOL
53 : eq(45, 7) : BOOL
54 : eq(45, 27) : BOOL
55 : eq(45, 29) : BOOL
56 : eq(45, 31) : BOOL
57 : ite(56, 14, 33) : BV:8
58 : ite(55, 14, 57) : BV:8
59 : ite(54, 14, 58) : BV:8
60 : ite(53, 14, 59) : BV:8
61 : ite(52, 14, 60) : BV:8
62 : ite(51, 14, 61) : BV:8
63 : ite(50, 14, 62) : BV:8
64 : ite(49, 14, 63) : BV:8
65 : ite(48, 14, 64) : BV:8
66 : ite(47, 14, 65) : BV:8
67 : ite(46, 14, 66) : BV:8
68 : bvadd(29, 10, 3) : BV:32
69 : eq(68, 12) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 17) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 3) : BOOL
75 : eq(68, 24) : BOOL
76 : eq(68, 7) : BOOL
77 : eq(68, 27) : BOOL
78 : eq(68, 29) : BOOL
79 : eq(68, 31) : BOOL
80 : ite(79, 14, 33) : BV:8
81 : ite(78, 14, 80) : BV:8
82 : ite(77, 14, 81) : BV:8
83 : ite(76, 14, 82) : BV:8
84 : ite(75, 14, 83) : BV:8
85 : ite(74, 14, 84) : BV:8
86 : ite(73, 14, 85) : BV:8
87 : ite(72, 14, 86) : BV:8
88 : ite(71, 14, 87) : BV:8
89 : ite(70, 14, 88) : BV:8
90 : ite(69, 14, 89) : BV:8
91 : bvadd(10, 3) : BV:32
92 : eq(91, 12) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 17) : BOOL
95 : eq(91, 19) : BOOL
96 : eq(91, 21) : BOOL
97 : eq(91, 3) : BOOL
98 : eq(91, 24) : BOOL
99 : eq(91, 7) : BOOL
100 : eq(91, 27) : BOOL
101 : eq(91, 29) : BOOL
102 : eq(91, 31) : BOOL
103 : ite(102, 14, 33) : BV:8
104 : ite(101, 14, 103) : BV:8
105 : ite(100, 14, 104) : BV:8
106 : ite(99, 14, 105) : BV:8
107 : ite(98, 14, 106) : BV:8
108 : ite(97, 14, 107) : BV:8
109 : ite(96, 14, 108) : BV:8
110 : ite(95, 14, 109) : BV:8
111 : ite(94, 14, 110) : BV:8
112 : ite(93, 14, 111) : BV:8
113 : ite(92, 14, 112) : BV:8
114 : bvconcat(44, 67, 90, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 12) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 17) : BOOL
119 : eq(115, 19) : BOOL
120 : eq(115, 21) : BOOL
121 : eq(115, 3) : BOOL
122 : eq(115, 24) : BOOL
123 : eq(115, 7) : BOOL
124 : eq(115, 27) : BOOL
125 : eq(115, 29) : BOOL
126 : eq(115, 31) : BOOL
127 : ite(126, 14, 33) : BV:8
128 : ite(125, 14, 127) : BV:8
129 : ite(124, 14, 128) : BV:8
130 : ite(123, 14, 129) : BV:8
131 : ite(122, 14, 130) : BV:8
132 : ite(121, 14, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : ite(119, 14, 133) : BV:8
135 : ite(118, 14, 134) : BV:8
136 : ite(117, 14, 135) : BV:8
137 : ite(116, 14, 136) : BV:8
138 : bvadd(21, 9, 114) : BV:32
139 : eq(138, 12) : BOOL
140 : eq(138, 15) : BOOL
141 : eq(138, 17) : BOOL
142 : eq(138, 19) : BOOL
143 : eq(138, 21) : BOOL
144 : eq(138, 3) : BOOL
145 : eq(138, 24) : BOOL
146 : eq(138, 7) : BOOL
147 : eq(138, 27) : BOOL
148 : eq(138, 29) : BOOL
149 : eq(138, 31) : BOOL
150 : ite(149, 14, 33) : BV:8
151 : ite(148, 14, 150) : BV:8
152 : ite(147, 14, 151) : BV:8
153 : ite(146, 14, 152) : BV:8
154 : ite(145, 14, 153) : BV:8
155 : ite(144, 14, 154) : BV:8
156 : ite(143, 14, 155) : BV:8
157 : ite(142, 14, 156) : BV:8
158 : ite(141, 14, 157) : BV:8
159 : ite(140, 14, 158) : BV:8
160 : ite(139, 14, 159) : BV:8
161 : bvadd(29, 9, 114) : BV:32
162 : eq(161, 12) : BOOL
163 : eq(161, 15) : BOOL
164 : eq(161, 17) : BOOL
165 : eq(161, 19) : BOOL
166 : eq(161, 21) : BOOL
167 : eq(161, 3) : BOOL
168 : eq(161, 24) : BOOL
169 : eq(161, 7) : BOOL
170 : eq(161, 27) : BOOL
171 : eq(161, 29) : BOOL
172 : eq(161, 31) : BOOL
173 : ite(172, 14, 33) : BV:8
174 : ite(171, 14, 173) : BV:8
175 : ite(170, 14, 174) : BV:8
176 : ite(169, 14, 175) : BV:8
177 : ite(168, 14, 176) : BV:8
178 : ite(167, 14, 177) : BV:8
179 : ite(166, 14, 178) : BV:8
180 : ite(165, 14, 179) : BV:8
181 : ite(164, 14, 180) : BV:8
182 : ite(163, 14, 181) : BV:8
183 : ite(162, 14, 182) : BV:8
184 : bvadd(9, 114) : BV:32
185 : eq(184, 12) : BOOL
186 : eq(184, 15) : BOOL
187 : eq(184, 17) : BOOL
188 : eq(184, 19) : BOOL
189 : eq(184, 21) : BOOL
190 : eq(184, 3) : BOOL
191 : eq(184, 24) : BOOL
192 : eq(184, 7) : BOOL
193 : eq(184, 27) : BOOL
194 : eq(184, 29) : BOOL
195 : eq(184, 31) : BOOL
196 : ite(195, 14, 33) : BV:8
197 : ite(194, 14, 196) : BV:8
198 : ite(193, 14, 197) : BV:8
199 : ite(192, 14, 198) : BV:8
200 : ite(191, 14, 199) : BV:8
201 : ite(190, 14, 200) : BV:8
202 : ite(189, 14, 201) : BV:8
203 : ite(188, 14, 202) : BV:8
204 : ite(187, 14, 203) : BV:8
205 : ite(186, 14, 204) : BV:8
206 : ite(185, 14, 205) : BV:8
207 : bvconcat(137, 160, 183, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3027663990
=counter_example_end
=global nodece 41 num_edges_traversed 5
=global nodece 41 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce3812.num_edges_traversed2
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce3812 4e9d7588162df9677be4faf26fadacdd
=input.spec-%var-x-1
1 : Lambda11474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11475Var : BV:32
18 : Lambda11476Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11477Var : BV:32
52 : lambda(51, 2) : FUNCTION[BV:32 -> BV:32]
53 : map(50, 52) : MAP[BV:32 -> BV:32]
54 : lambda(17, 53) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
55 : map(16, 54) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
56 : sym_const(55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11488Var : BV:32
18 : Lambda11489Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 129 { 0x81 +1.1537e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda11490Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : ite(54, 2, 2) : BV:32
75 : ite(73, 2, 74) : BV:32
76 : ite(54, 2, 75) : BV:32
77 : lambda(51, 76) : FUNCTION[BV:32 -> BV:32]
78 : map(50, 77) : MAP[BV:32 -> BV:32]
79 : lambda(17, 78) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
80 : map(16, 79) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
81 : sym_const(80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 494115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 494116; 494119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 494120; 155483431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 155483432; 155483435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 155483436; 3645973127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3645973128; 3645973131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3645973132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16093Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16094Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 127 { 0x7f +1.1513e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16083Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 129 { 0x81 +1.1537e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16084Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(1, 45) : BOOL
50 : bvule(45, 1) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(15, 45) : BOOL
53 : bvule(45, 15) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(34, 45) : BOOL
56 : bvule(45, 9) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 34, 34) : BV:32
59 : ite(54, 15, 58) : BV:32
60 : ite(51, 1, 59) : BV:32
61 : eq(60, 1) : BOOL
62 : and(27, 61) : BOOL
63 : ite(62, 6, 12) : BOOL
64 : and(14, 63) : BOOL
65 : ite(48, 1, 1) : BV:32
66 : ite(64, 1, 65) : BV:32
67 : ite(48, 1, 66) : BV:32
68 : lambda(45, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(44, 68) : MAP[BV:32 -> BV:32]
70 : sum(16, 17, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16099Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 128 { 0x80 +1.1525e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 129 { 0x81 +1.1537e129 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 13) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16100Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : and(8, 14) : BOOL
45 : ite(44, 37, 37) : BOOL
46 : ite(6, 36, 45) : BOOL
47 : bvule(2, 40) : BOOL
48 : bvule(40, 2) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(23, 40) : BOOL
51 : bvule(40, 23) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(27, 40) : BOOL
54 : bvule(40, 13) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 27, 27) : BV:32
57 : ite(52, 23, 56) : BV:32
58 : ite(49, 2, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : and(19, 59) : BOOL
61 : ite(60, 36, 37) : BOOL
62 : and(46, 61) : BOOL
63 : ite(43, 2, 2) : BV:32
64 : ite(62, 2, 63) : BV:32
65 : ite(43, 2, 64) : BV:32
66 : lambda(40, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(39, 66) : MAP[BV:32 -> BV:32]
68 : sym_const(67) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 494116 { 0x78a24 +1.5890321e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 494119 { 0x78a27 +1.5890357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3645973128 { 0xd9512288 -648994168 -1.63386631e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3645973131 { 0xd951228b -648994165 -1.63386666e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 155483432 { 0x9447d28 +1.53506946e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 155483435 { 0x9447d2b +1.53506982e147 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11409Var : BV:32
2 : Lambda11410Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11419Var : BV:32
2 : Lambda11420Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 129 { 0x81 +1.1537e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11423Var : BV:32
2 : Lambda11424Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 127 { 0x7f +1.1513e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 128 { 0x80 +1.1525e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 129 { 0x81 +1.1537e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : ite(6, 3, 3) : BV:32
48 : ite(46, 3, 47) : BV:32
49 : ite(6, 3, 48) : BV:32
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3997393353
=counter_example_end
=global nodece 42 num_edges_traversed 2
=global nodece 42 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 43
=global nodece 43 nodece z3.ce3798.num_edges_traversed2
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce3798 b917da74c43f61a7efa598df6198bea
=input.spec-%var-x-1
1 : Lambda12000Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12001Var : BV:32
18 : Lambda12002Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12003Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12013Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12014Var : BV:32
18 : Lambda12015Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12016Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16618Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16607Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16608Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16623Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16624Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11930Var : BV:32
2 : Lambda11931Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11935Var : BV:32
2 : Lambda11936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11944Var : BV:32
2 : Lambda11945Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 43 num_edges_traversed 2
=global nodece 43 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3.ce3950.num_edges_traversed3
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3.ce3950 4d54a04cf85bcb58e4b41e5a2cac6dc
=input.spec-%var-x-1
1 : Lambda12000Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12001Var : BV:32
18 : Lambda12002Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12003Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12013Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12014Var : BV:32
18 : Lambda12015Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12016Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16618Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16607Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16608Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16623Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16624Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11930Var : BV:32
2 : Lambda11931Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11935Var : BV:32
2 : Lambda11936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11944Var : BV:32
2 : Lambda11945Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 44 num_edges_traversed 3
=global nodece 44 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 45
=global nodece 45 nodece z3.ce3980.num_edges_traversed4
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce3980 44a7e2da2051c5f7a12bd4ad49f0
=input.spec-%var-x-1
1 : Lambda12000Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12001Var : BV:32
18 : Lambda12002Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12003Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12013Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12014Var : BV:32
18 : Lambda12015Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12016Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16618Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16607Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16608Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16623Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda16624Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11930Var : BV:32
2 : Lambda11931Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11935Var : BV:32
2 : Lambda11936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11944Var : BV:32
2 : Lambda11945Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11940Var : BV:32
2 : Lambda11941Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2944669951
=counter_example_end
=global nodece 45 num_edges_traversed 4
=global nodece 45 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3.ce3766.num_edges_traversed2
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce3766 dae3156142c1a856a7367d76bc424e
=input.spec-%var-x-1
1 : Lambda33980Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33981Var : BV:32
18 : Lambda33982Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 255 { 0xff +1.3039e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 256 { 0x100 +1.3051e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 257 { 0x101 +1.3063e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda33983Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : ite(84, 7, 86) : BOOL
88 : and(70, 87) : BOOL
89 : bvmul(23, 61) : BV:32
90 : bvmul(23, 17) : BV:32
91 : bvadd(20, 90) : BV:32
92 : 17 { 0x11 +1.202e129 } : BV:32
93 : eq(91, 92) : BOOL
94 : 174 { 0xae -82 } : BV:8
95 : eq(91, 20) : BOOL
96 : 251 { 0xfb -5 } : BV:8
97 : 1 { 0x1 +1.11e129 } : BV:32
98 : eq(91, 97) : BOOL
99 : 63 { 0x3f } : BV:8
100 : 18 { 0x12 +1.214e129 } : BV:32
101 : eq(91, 100) : BOOL
102 : 249 { 0xf9 -7 } : BV:8
103 : eq(91, 2) : BOOL
104 : 252 { 0xfc -4 } : BV:8
105 : 2 { 0x2 +1.23e129 } : BV:32
106 : eq(91, 105) : BOOL
107 : 254 { 0xfe -2 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(91, 108) : BOOL
110 : 83 { 0x53 } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(98, 99, 115) : BV:8
117 : ite(95, 96, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(105, 90) : BV:32
120 : eq(119, 92) : BOOL
121 : eq(119, 20) : BOOL
122 : eq(119, 97) : BOOL
123 : eq(119, 100) : BOOL
124 : eq(119, 2) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 99, 130) : BV:8
132 : ite(121, 96, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(97, 90) : BV:32
135 : eq(134, 92) : BOOL
136 : eq(134, 20) : BOOL
137 : eq(134, 97) : BOOL
138 : eq(134, 100) : BOOL
139 : eq(134, 2) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 99, 145) : BV:8
147 : ite(136, 96, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(90, 92) : BOOL
150 : eq(90, 20) : BOOL
151 : eq(90, 97) : BOOL
152 : eq(90, 100) : BOOL
153 : eq(90, 2) : BOOL
154 : eq(90, 105) : BOOL
155 : eq(90, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 99, 159) : BV:8
161 : ite(150, 96, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(20, 89, 163) : BV:32
165 : eq(164, 92) : BOOL
166 : eq(164, 20) : BOOL
167 : eq(164, 97) : BOOL
168 : eq(164, 100) : BOOL
169 : eq(164, 2) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 99, 175) : BV:8
177 : ite(166, 96, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(105, 89, 163) : BV:32
180 : eq(179, 92) : BOOL
181 : eq(179, 20) : BOOL
182 : eq(179, 97) : BOOL
183 : eq(179, 100) : BOOL
184 : eq(179, 2) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 99, 190) : BV:8
192 : ite(181, 96, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(97, 89, 163) : BV:32
195 : eq(194, 92) : BOOL
196 : eq(194, 20) : BOOL
197 : eq(194, 97) : BOOL
198 : eq(194, 100) : BOOL
199 : eq(194, 2) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 99, 205) : BV:8
207 : ite(196, 96, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(89, 163) : BV:32
210 : eq(209, 92) : BOOL
211 : eq(209, 20) : BOOL
212 : eq(209, 97) : BOOL
213 : eq(209, 100) : BOOL
214 : eq(209, 2) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 99, 220) : BV:8
222 : ite(211, 96, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(66, 2, 224) : BV:32
226 : ite(64, 2, 225) : BV:32
227 : ite(88, 224, 226) : BV:32
228 : ite(66, 2, 227) : BV:32
229 : ite(64, 2, 228) : BV:32
230 : lambda(61, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(60, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33993Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33994Var : BV:32
18 : Lambda33995Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 255 { 0xff +1.3039e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 256 { 0x100 +1.3051e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 257 { 0x101 +1.3063e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 23) : BOOL
57 : and(56, 54) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : ite(55, 7, 58) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda33996Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : bvmul(23, 61) : BV:32
68 : bvmul(23, 17) : BV:32
69 : bvadd(20, 68) : BV:32
70 : 17 { 0x11 +1.202e129 } : BV:32
71 : eq(69, 70) : BOOL
72 : 174 { 0xae -82 } : BV:8
73 : eq(69, 20) : BOOL
74 : 251 { 0xfb -5 } : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 63 { 0x3f } : BV:8
78 : 18 { 0x12 +1.214e129 } : BV:32
79 : eq(69, 78) : BOOL
80 : 249 { 0xf9 -7 } : BV:8
81 : eq(69, 2) : BOOL
82 : 252 { 0xfc -4 } : BV:8
83 : 2 { 0x2 +1.23e129 } : BV:32
84 : eq(69, 83) : BOOL
85 : 254 { 0xfe -2 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(69, 86) : BOOL
88 : 83 { 0x53 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(83, 68) : BV:32
98 : eq(97, 70) : BOOL
99 : eq(97, 20) : BOOL
100 : eq(97, 75) : BOOL
101 : eq(97, 78) : BOOL
102 : eq(97, 2) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 77, 108) : BV:8
110 : ite(99, 74, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(75, 68) : BV:32
113 : eq(112, 70) : BOOL
114 : eq(112, 20) : BOOL
115 : eq(112, 75) : BOOL
116 : eq(112, 78) : BOOL
117 : eq(112, 2) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 77, 123) : BV:8
125 : ite(114, 74, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(68, 70) : BOOL
128 : eq(68, 20) : BOOL
129 : eq(68, 75) : BOOL
130 : eq(68, 78) : BOOL
131 : eq(68, 2) : BOOL
132 : eq(68, 83) : BOOL
133 : eq(68, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 77, 137) : BV:8
139 : ite(128, 74, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(20, 67, 141) : BV:32
143 : eq(142, 70) : BOOL
144 : eq(142, 20) : BOOL
145 : eq(142, 75) : BOOL
146 : eq(142, 78) : BOOL
147 : eq(142, 2) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 77, 153) : BV:8
155 : ite(144, 74, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(83, 67, 141) : BV:32
158 : eq(157, 70) : BOOL
159 : eq(157, 20) : BOOL
160 : eq(157, 75) : BOOL
161 : eq(157, 78) : BOOL
162 : eq(157, 2) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 77, 168) : BV:8
170 : ite(159, 74, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(75, 67, 141) : BV:32
173 : eq(172, 70) : BOOL
174 : eq(172, 20) : BOOL
175 : eq(172, 75) : BOOL
176 : eq(172, 78) : BOOL
177 : eq(172, 2) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 77, 183) : BV:8
185 : ite(174, 74, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(67, 141) : BV:32
188 : eq(187, 70) : BOOL
189 : eq(187, 20) : BOOL
190 : eq(187, 75) : BOOL
191 : eq(187, 78) : BOOL
192 : eq(187, 2) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 77, 198) : BV:8
200 : ite(189, 74, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(66, 2, 202) : BV:32
204 : ite(64, 2, 203) : BV:32
205 : lambda(61, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(60, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 252, [ 1; 1 ] -> 63, [ 2; 2 ] -> 254, [ 3; 3 ] -> 251, [ 4; 16 ] -> 0, [ 17; 17 ] -> 174, [ 18; 18 ] -> 249, [ 19; 19 ] -> 83, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 413654443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 413654444; 413654447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 413654448; 692444487 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 692444488; 692444491 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 692444492; 4064290383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4064290384; 4064290387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4064290388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 413654444 { 0x18a7ddac +1.31145238e178 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 692444488 { 0x2945dd48 +1.54581546e211 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4064290384 { 0xf2402650 -230676912 -1.50116920e101 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34095Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 255 { 0xff +1.3039e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 256 { 0x100 +1.3051e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 257 { 0x101 +1.3063e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda34096Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : bvmul(3, 50) : BV:32
57 : bvmul(3, 3) : BV:32
58 : bvadd(5, 57) : BV:32
59 : 17 { 0x11 +1.202e129 } : BV:32
60 : eq(58, 59) : BOOL
61 : 174 { 0xae -82 } : BV:8
62 : eq(58, 5) : BOOL
63 : 251 { 0xfb -5 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(58, 64) : BOOL
66 : 63 { 0x3f } : BV:8
67 : 18 { 0x12 +1.214e129 } : BV:32
68 : eq(58, 67) : BOOL
69 : 249 { 0xf9 -7 } : BV:8
70 : eq(58, 2) : BOOL
71 : 252 { 0xfc -4 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(58, 72) : BOOL
74 : 254 { 0xfe -2 } : BV:8
75 : 19 { 0x13 +1.226e129 } : BV:32
76 : eq(58, 75) : BOOL
77 : 83 { 0x53 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(68, 69, 81) : BV:8
83 : ite(65, 66, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : ite(60, 61, 84) : BV:8
86 : bvadd(72, 57) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 5) : BOOL
89 : eq(86, 64) : BOOL
90 : eq(86, 67) : BOOL
91 : eq(86, 2) : BOOL
92 : eq(86, 72) : BOOL
93 : eq(86, 75) : BOOL
94 : ite(93, 77, 78) : BV:8
95 : ite(92, 74, 94) : BV:8
96 : ite(91, 71, 95) : BV:8
97 : ite(90, 69, 96) : BV:8
98 : ite(89, 66, 97) : BV:8
99 : ite(88, 63, 98) : BV:8
100 : ite(87, 61, 99) : BV:8
101 : bvadd(64, 57) : BV:32
102 : eq(101, 59) : BOOL
103 : eq(101, 5) : BOOL
104 : eq(101, 64) : BOOL
105 : eq(101, 67) : BOOL
106 : eq(101, 2) : BOOL
107 : eq(101, 72) : BOOL
108 : eq(101, 75) : BOOL
109 : ite(108, 77, 78) : BV:8
110 : ite(107, 74, 109) : BV:8
111 : ite(106, 71, 110) : BV:8
112 : ite(105, 69, 111) : BV:8
113 : ite(104, 66, 112) : BV:8
114 : ite(103, 63, 113) : BV:8
115 : ite(102, 61, 114) : BV:8
116 : eq(57, 59) : BOOL
117 : eq(57, 5) : BOOL
118 : eq(57, 64) : BOOL
119 : eq(57, 67) : BOOL
120 : eq(57, 2) : BOOL
121 : eq(57, 72) : BOOL
122 : eq(57, 75) : BOOL
123 : ite(122, 77, 78) : BV:8
124 : ite(121, 74, 123) : BV:8
125 : ite(120, 71, 124) : BV:8
126 : ite(119, 69, 125) : BV:8
127 : ite(118, 66, 126) : BV:8
128 : ite(117, 63, 127) : BV:8
129 : ite(116, 61, 128) : BV:8
130 : bvconcat(85, 100, 115, 129) : BV:32
131 : bvadd(5, 56, 130) : BV:32
132 : eq(131, 59) : BOOL
133 : eq(131, 5) : BOOL
134 : eq(131, 64) : BOOL
135 : eq(131, 67) : BOOL
136 : eq(131, 2) : BOOL
137 : eq(131, 72) : BOOL
138 : eq(131, 75) : BOOL
139 : ite(138, 77, 78) : BV:8
140 : ite(137, 74, 139) : BV:8
141 : ite(136, 71, 140) : BV:8
142 : ite(135, 69, 141) : BV:8
143 : ite(134, 66, 142) : BV:8
144 : ite(133, 63, 143) : BV:8
145 : ite(132, 61, 144) : BV:8
146 : bvadd(72, 56, 130) : BV:32
147 : eq(146, 59) : BOOL
148 : eq(146, 5) : BOOL
149 : eq(146, 64) : BOOL
150 : eq(146, 67) : BOOL
151 : eq(146, 2) : BOOL
152 : eq(146, 72) : BOOL
153 : eq(146, 75) : BOOL
154 : ite(153, 77, 78) : BV:8
155 : ite(152, 74, 154) : BV:8
156 : ite(151, 71, 155) : BV:8
157 : ite(150, 69, 156) : BV:8
158 : ite(149, 66, 157) : BV:8
159 : ite(148, 63, 158) : BV:8
160 : ite(147, 61, 159) : BV:8
161 : bvadd(64, 56, 130) : BV:32
162 : eq(161, 59) : BOOL
163 : eq(161, 5) : BOOL
164 : eq(161, 64) : BOOL
165 : eq(161, 67) : BOOL
166 : eq(161, 2) : BOOL
167 : eq(161, 72) : BOOL
168 : eq(161, 75) : BOOL
169 : ite(168, 77, 78) : BV:8
170 : ite(167, 74, 169) : BV:8
171 : ite(166, 71, 170) : BV:8
172 : ite(165, 69, 171) : BV:8
173 : ite(164, 66, 172) : BV:8
174 : ite(163, 63, 173) : BV:8
175 : ite(162, 61, 174) : BV:8
176 : bvadd(56, 130) : BV:32
177 : eq(176, 59) : BOOL
178 : eq(176, 5) : BOOL
179 : eq(176, 64) : BOOL
180 : eq(176, 67) : BOOL
181 : eq(176, 2) : BOOL
182 : eq(176, 72) : BOOL
183 : eq(176, 75) : BOOL
184 : ite(183, 77, 78) : BV:8
185 : ite(182, 74, 184) : BV:8
186 : ite(181, 71, 185) : BV:8
187 : ite(180, 69, 186) : BV:8
188 : ite(179, 66, 187) : BV:8
189 : ite(178, 63, 188) : BV:8
190 : ite(177, 61, 189) : BV:8
191 : bvconcat(145, 160, 175, 190) : BV:32
192 : ite(55, 2, 191) : BV:32
193 : ite(53, 2, 192) : BV:32
194 : lambda(50, 193) : FUNCTION[BV:32 -> BV:32]
195 : map(49, 194) : MAP[BV:32 -> BV:32]
196 : sym_const(195) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda34085Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 1) : BOOL
35 : bvule(1, 19) : BOOL
36 : 255 { 0xff +1.3039e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 256 { 0x100 +1.3051e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 257 { 0x101 +1.3063e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 2) : BOOL
53 : and(52, 50) : BOOL
54 : ite(53, 7, 13) : BOOL
55 : ite(51, 7, 54) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda34086Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvmul(2, 57) : BV:32
64 : bvmul(2, 2) : BV:32
65 : bvadd(20, 64) : BV:32
66 : 17 { 0x11 +1.202e129 } : BV:32
67 : eq(65, 66) : BOOL
68 : 174 { 0xae -82 } : BV:8
69 : eq(65, 20) : BOOL
70 : 251 { 0xfb -5 } : BV:8
71 : eq(65, 16) : BOOL
72 : 63 { 0x3f } : BV:8
73 : 18 { 0x12 +1.214e129 } : BV:32
74 : eq(65, 73) : BOOL
75 : 249 { 0xf9 -7 } : BV:8
76 : eq(65, 1) : BOOL
77 : 252 { 0xfc -4 } : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : eq(65, 78) : BOOL
80 : 254 { 0xfe -2 } : BV:8
81 : 19 { 0x13 +1.226e129 } : BV:32
82 : eq(65, 81) : BOOL
83 : 83 { 0x53 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : bvadd(78, 64) : BV:32
93 : eq(92, 66) : BOOL
94 : eq(92, 20) : BOOL
95 : eq(92, 16) : BOOL
96 : eq(92, 73) : BOOL
97 : eq(92, 1) : BOOL
98 : eq(92, 78) : BOOL
99 : eq(92, 81) : BOOL
100 : ite(99, 83, 84) : BV:8
101 : ite(98, 80, 100) : BV:8
102 : ite(97, 77, 101) : BV:8
103 : ite(96, 75, 102) : BV:8
104 : ite(95, 72, 103) : BV:8
105 : ite(94, 70, 104) : BV:8
106 : ite(93, 68, 105) : BV:8
107 : bvadd(16, 64) : BV:32
108 : eq(107, 66) : BOOL
109 : eq(107, 20) : BOOL
110 : eq(107, 16) : BOOL
111 : eq(107, 73) : BOOL
112 : eq(107, 1) : BOOL
113 : eq(107, 78) : BOOL
114 : eq(107, 81) : BOOL
115 : ite(114, 83, 84) : BV:8
116 : ite(113, 80, 115) : BV:8
117 : ite(112, 77, 116) : BV:8
118 : ite(111, 75, 117) : BV:8
119 : ite(110, 72, 118) : BV:8
120 : ite(109, 70, 119) : BV:8
121 : ite(108, 68, 120) : BV:8
122 : eq(64, 66) : BOOL
123 : eq(64, 20) : BOOL
124 : eq(64, 16) : BOOL
125 : eq(64, 73) : BOOL
126 : eq(64, 1) : BOOL
127 : eq(64, 78) : BOOL
128 : eq(64, 81) : BOOL
129 : ite(128, 83, 84) : BV:8
130 : ite(127, 80, 129) : BV:8
131 : ite(126, 77, 130) : BV:8
132 : ite(125, 75, 131) : BV:8
133 : ite(124, 72, 132) : BV:8
134 : ite(123, 70, 133) : BV:8
135 : ite(122, 68, 134) : BV:8
136 : bvconcat(91, 106, 121, 135) : BV:32
137 : bvadd(20, 63, 136) : BV:32
138 : eq(137, 66) : BOOL
139 : eq(137, 20) : BOOL
140 : eq(137, 16) : BOOL
141 : eq(137, 73) : BOOL
142 : eq(137, 1) : BOOL
143 : eq(137, 78) : BOOL
144 : eq(137, 81) : BOOL
145 : ite(144, 83, 84) : BV:8
146 : ite(143, 80, 145) : BV:8
147 : ite(142, 77, 146) : BV:8
148 : ite(141, 75, 147) : BV:8
149 : ite(140, 72, 148) : BV:8
150 : ite(139, 70, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : bvadd(78, 63, 136) : BV:32
153 : eq(152, 66) : BOOL
154 : eq(152, 20) : BOOL
155 : eq(152, 16) : BOOL
156 : eq(152, 73) : BOOL
157 : eq(152, 1) : BOOL
158 : eq(152, 78) : BOOL
159 : eq(152, 81) : BOOL
160 : ite(159, 83, 84) : BV:8
161 : ite(158, 80, 160) : BV:8
162 : ite(157, 77, 161) : BV:8
163 : ite(156, 75, 162) : BV:8
164 : ite(155, 72, 163) : BV:8
165 : ite(154, 70, 164) : BV:8
166 : ite(153, 68, 165) : BV:8
167 : bvadd(16, 63, 136) : BV:32
168 : eq(167, 66) : BOOL
169 : eq(167, 20) : BOOL
170 : eq(167, 16) : BOOL
171 : eq(167, 73) : BOOL
172 : eq(167, 1) : BOOL
173 : eq(167, 78) : BOOL
174 : eq(167, 81) : BOOL
175 : ite(174, 83, 84) : BV:8
176 : ite(173, 80, 175) : BV:8
177 : ite(172, 77, 176) : BV:8
178 : ite(171, 75, 177) : BV:8
179 : ite(170, 72, 178) : BV:8
180 : ite(169, 70, 179) : BV:8
181 : ite(168, 68, 180) : BV:8
182 : bvadd(63, 136) : BV:32
183 : eq(182, 66) : BOOL
184 : eq(182, 20) : BOOL
185 : eq(182, 16) : BOOL
186 : eq(182, 73) : BOOL
187 : eq(182, 1) : BOOL
188 : eq(182, 78) : BOOL
189 : eq(182, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 80, 190) : BV:8
192 : ite(187, 77, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 70, 194) : BV:8
196 : ite(183, 68, 195) : BV:8
197 : bvconcat(151, 166, 181, 196) : BV:32
198 : ite(62, 1, 197) : BV:32
199 : ite(60, 1, 198) : BV:32
200 : lambda(57, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(56, 200) : MAP[BV:32 -> BV:32]
202 : sum(17, 18, 201) : SUM[UNIT,MAP[BV:32 -> BV:32]]
203 : sym_const(202) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34101Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(2, 1) : BOOL
27 : 255 { 0xff +1.3039e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 256 { 0x100 +1.3051e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 257 { 0x101 +1.3063e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : 1 { 0x1 } : BOOL
44 : eq(24, 3) : BOOL
45 : and(44, 41) : BOOL
46 : 0 { 0x0 } : BOOL
47 : ite(45, 43, 46) : BOOL
48 : ite(42, 43, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda34102Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : bvmul(3, 50) : BV:32
57 : bvmul(3, 3) : BV:32
58 : bvadd(5, 57) : BV:32
59 : 17 { 0x11 +1.202e129 } : BV:32
60 : eq(58, 59) : BOOL
61 : 174 { 0xae -82 } : BV:8
62 : eq(58, 5) : BOOL
63 : 251 { 0xfb -5 } : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : eq(58, 64) : BOOL
66 : 63 { 0x3f } : BV:8
67 : 18 { 0x12 +1.214e129 } : BV:32
68 : eq(58, 67) : BOOL
69 : 249 { 0xf9 -7 } : BV:8
70 : eq(58, 2) : BOOL
71 : 252 { 0xfc -4 } : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : eq(58, 72) : BOOL
74 : 254 { 0xfe -2 } : BV:8
75 : 19 { 0x13 +1.226e129 } : BV:32
76 : eq(58, 75) : BOOL
77 : 83 { 0x53 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : ite(68, 69, 81) : BV:8
83 : ite(65, 66, 82) : BV:8
84 : ite(62, 63, 83) : BV:8
85 : ite(60, 61, 84) : BV:8
86 : bvadd(72, 57) : BV:32
87 : eq(86, 59) : BOOL
88 : eq(86, 5) : BOOL
89 : eq(86, 64) : BOOL
90 : eq(86, 67) : BOOL
91 : eq(86, 2) : BOOL
92 : eq(86, 72) : BOOL
93 : eq(86, 75) : BOOL
94 : ite(93, 77, 78) : BV:8
95 : ite(92, 74, 94) : BV:8
96 : ite(91, 71, 95) : BV:8
97 : ite(90, 69, 96) : BV:8
98 : ite(89, 66, 97) : BV:8
99 : ite(88, 63, 98) : BV:8
100 : ite(87, 61, 99) : BV:8
101 : bvadd(64, 57) : BV:32
102 : eq(101, 59) : BOOL
103 : eq(101, 5) : BOOL
104 : eq(101, 64) : BOOL
105 : eq(101, 67) : BOOL
106 : eq(101, 2) : BOOL
107 : eq(101, 72) : BOOL
108 : eq(101, 75) : BOOL
109 : ite(108, 77, 78) : BV:8
110 : ite(107, 74, 109) : BV:8
111 : ite(106, 71, 110) : BV:8
112 : ite(105, 69, 111) : BV:8
113 : ite(104, 66, 112) : BV:8
114 : ite(103, 63, 113) : BV:8
115 : ite(102, 61, 114) : BV:8
116 : eq(57, 59) : BOOL
117 : eq(57, 5) : BOOL
118 : eq(57, 64) : BOOL
119 : eq(57, 67) : BOOL
120 : eq(57, 2) : BOOL
121 : eq(57, 72) : BOOL
122 : eq(57, 75) : BOOL
123 : ite(122, 77, 78) : BV:8
124 : ite(121, 74, 123) : BV:8
125 : ite(120, 71, 124) : BV:8
126 : ite(119, 69, 125) : BV:8
127 : ite(118, 66, 126) : BV:8
128 : ite(117, 63, 127) : BV:8
129 : ite(116, 61, 128) : BV:8
130 : bvconcat(85, 100, 115, 129) : BV:32
131 : bvadd(5, 56, 130) : BV:32
132 : eq(131, 59) : BOOL
133 : eq(131, 5) : BOOL
134 : eq(131, 64) : BOOL
135 : eq(131, 67) : BOOL
136 : eq(131, 2) : BOOL
137 : eq(131, 72) : BOOL
138 : eq(131, 75) : BOOL
139 : ite(138, 77, 78) : BV:8
140 : ite(137, 74, 139) : BV:8
141 : ite(136, 71, 140) : BV:8
142 : ite(135, 69, 141) : BV:8
143 : ite(134, 66, 142) : BV:8
144 : ite(133, 63, 143) : BV:8
145 : ite(132, 61, 144) : BV:8
146 : bvadd(72, 56, 130) : BV:32
147 : eq(146, 59) : BOOL
148 : eq(146, 5) : BOOL
149 : eq(146, 64) : BOOL
150 : eq(146, 67) : BOOL
151 : eq(146, 2) : BOOL
152 : eq(146, 72) : BOOL
153 : eq(146, 75) : BOOL
154 : ite(153, 77, 78) : BV:8
155 : ite(152, 74, 154) : BV:8
156 : ite(151, 71, 155) : BV:8
157 : ite(150, 69, 156) : BV:8
158 : ite(149, 66, 157) : BV:8
159 : ite(148, 63, 158) : BV:8
160 : ite(147, 61, 159) : BV:8
161 : bvadd(64, 56, 130) : BV:32
162 : eq(161, 59) : BOOL
163 : eq(161, 5) : BOOL
164 : eq(161, 64) : BOOL
165 : eq(161, 67) : BOOL
166 : eq(161, 2) : BOOL
167 : eq(161, 72) : BOOL
168 : eq(161, 75) : BOOL
169 : ite(168, 77, 78) : BV:8
170 : ite(167, 74, 169) : BV:8
171 : ite(166, 71, 170) : BV:8
172 : ite(165, 69, 171) : BV:8
173 : ite(164, 66, 172) : BV:8
174 : ite(163, 63, 173) : BV:8
175 : ite(162, 61, 174) : BV:8
176 : bvadd(56, 130) : BV:32
177 : eq(176, 59) : BOOL
178 : eq(176, 5) : BOOL
179 : eq(176, 64) : BOOL
180 : eq(176, 67) : BOOL
181 : eq(176, 2) : BOOL
182 : eq(176, 72) : BOOL
183 : eq(176, 75) : BOOL
184 : ite(183, 77, 78) : BV:8
185 : ite(182, 74, 184) : BV:8
186 : ite(181, 71, 185) : BV:8
187 : ite(180, 69, 186) : BV:8
188 : ite(179, 66, 187) : BV:8
189 : ite(178, 63, 188) : BV:8
190 : ite(177, 61, 189) : BV:8
191 : bvconcat(145, 160, 175, 190) : BV:32
192 : ite(55, 2, 191) : BV:32
193 : ite(53, 2, 192) : BV:32
194 : lambda(50, 193) : FUNCTION[BV:32 -> BV:32]
195 : map(49, 194) : MAP[BV:32 -> BV:32]
196 : sym_const(195) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 692444488 { 0x2945dd48 +1.54581546e211 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 692444491 { 0x2945dd4b +1.54581582e211 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4064290384 { 0xf2402650 -230676912 -1.50116920e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4064290387 { 0xf2402653 -230676909 -1.50116956e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 413654444 { 0x18a7ddac +1.31145238e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 413654447 { 0x18a7ddaf +1.31145274e178 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda33915Var : BV:32
2 : Lambda33916Var : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 5) : BOOL
38 : bvule(5, 2) : BOOL
39 : 255 { 0xff +1.3039e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 256 { 0x100 +1.3051e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 257 { 0x101 +1.3063e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 3) : BOOL
56 : and(55, 53) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : ite(54, 14, 57) : BOOL
59 : and(22, 58) : BOOL
60 : bvmul(3, 2) : BV:32
61 : bvmul(3, 1) : BV:32
62 : bvadd(23, 61) : BV:32
63 : 17 { 0x11 +1.202e129 } : BV:32
64 : eq(62, 63) : BOOL
65 : 174 { 0xae -82 } : BV:8
66 : eq(62, 23) : BOOL
67 : 251 { 0xfb -5 } : BV:8
68 : 1 { 0x1 +1.11e129 } : BV:32
69 : eq(62, 68) : BOOL
70 : 63 { 0x3f } : BV:8
71 : 18 { 0x12 +1.214e129 } : BV:32
72 : eq(62, 71) : BOOL
73 : 249 { 0xf9 -7 } : BV:8
74 : eq(62, 5) : BOOL
75 : 252 { 0xfc -4 } : BV:8
76 : 2 { 0x2 +1.23e129 } : BV:32
77 : eq(62, 76) : BOOL
78 : 254 { 0xfe -2 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(62, 79) : BOOL
81 : 83 { 0x53 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(69, 70, 86) : BV:8
88 : ite(66, 67, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(76, 61) : BV:32
91 : eq(90, 63) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 68) : BOOL
94 : eq(90, 71) : BOOL
95 : eq(90, 5) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 70, 101) : BV:8
103 : ite(92, 67, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(68, 61) : BV:32
106 : eq(105, 63) : BOOL
107 : eq(105, 23) : BOOL
108 : eq(105, 68) : BOOL
109 : eq(105, 71) : BOOL
110 : eq(105, 5) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 70, 116) : BV:8
118 : ite(107, 67, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(61, 63) : BOOL
121 : eq(61, 23) : BOOL
122 : eq(61, 68) : BOOL
123 : eq(61, 71) : BOOL
124 : eq(61, 5) : BOOL
125 : eq(61, 76) : BOOL
126 : eq(61, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 70, 130) : BV:8
132 : ite(121, 67, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(23, 60, 134) : BV:32
136 : eq(135, 63) : BOOL
137 : eq(135, 23) : BOOL
138 : eq(135, 68) : BOOL
139 : eq(135, 71) : BOOL
140 : eq(135, 5) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 70, 146) : BV:8
148 : ite(137, 67, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(76, 60, 134) : BV:32
151 : eq(150, 63) : BOOL
152 : eq(150, 23) : BOOL
153 : eq(150, 68) : BOOL
154 : eq(150, 71) : BOOL
155 : eq(150, 5) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 70, 161) : BV:8
163 : ite(152, 67, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(68, 60, 134) : BV:32
166 : eq(165, 63) : BOOL
167 : eq(165, 23) : BOOL
168 : eq(165, 68) : BOOL
169 : eq(165, 71) : BOOL
170 : eq(165, 5) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 70, 176) : BV:8
178 : ite(167, 67, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(60, 134) : BV:32
181 : eq(180, 63) : BOOL
182 : eq(180, 23) : BOOL
183 : eq(180, 68) : BOOL
184 : eq(180, 71) : BOOL
185 : eq(180, 5) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 70, 191) : BV:8
193 : ite(182, 67, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 5, 195) : BV:32
197 : ite(7, 5, 196) : BV:32
198 : ite(59, 195, 197) : BV:32
199 : ite(9, 5, 198) : BV:32
200 : ite(7, 5, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda33920Var : BV:32
2 : Lambda33921Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 255 { 0xff +1.3039e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 256 { 0x100 +1.3051e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 257 { 0x101 +1.3063e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda33929Var : BV:32
2 : Lambda33930Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 255 { 0xff +1.3039e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 256 { 0x100 +1.3051e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 257 { 0x101 +1.3063e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : eq(25, 8) : BOOL
46 : and(45, 42) : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(46, 44, 47) : BOOL
49 : ite(43, 44, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda33925Var : BV:32
2 : Lambda33926Var : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : bvmul(3, 2) : BV:32
12 : bvmul(3, 1) : BV:32
13 : bvadd(10, 12) : BV:32
14 : 17 { 0x11 +1.202e129 } : BV:32
15 : eq(13, 14) : BOOL
16 : 174 { 0xae -82 } : BV:8
17 : eq(13, 10) : BOOL
18 : 251 { 0xfb -5 } : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(13, 19) : BOOL
21 : 63 { 0x3f } : BV:8
22 : 18 { 0x12 +1.214e129 } : BV:32
23 : eq(13, 22) : BOOL
24 : 249 { 0xf9 -7 } : BV:8
25 : eq(13, 5) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : eq(13, 27) : BOOL
29 : 254 { 0xfe -2 } : BV:8
30 : 19 { 0x13 +1.226e129 } : BV:32
31 : eq(13, 30) : BOOL
32 : 83 { 0x53 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(23, 24, 36) : BV:8
38 : ite(20, 21, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(15, 16, 39) : BV:8
41 : bvadd(27, 12) : BV:32
42 : eq(41, 14) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 19) : BOOL
45 : eq(41, 22) : BOOL
46 : eq(41, 5) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 24, 51) : BV:8
53 : ite(44, 21, 52) : BV:8
54 : ite(43, 18, 53) : BV:8
55 : ite(42, 16, 54) : BV:8
56 : bvadd(19, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 5) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 24, 66) : BV:8
68 : ite(59, 21, 67) : BV:8
69 : ite(58, 18, 68) : BV:8
70 : ite(57, 16, 69) : BV:8
71 : eq(12, 14) : BOOL
72 : eq(12, 10) : BOOL
73 : eq(12, 19) : BOOL
74 : eq(12, 22) : BOOL
75 : eq(12, 5) : BOOL
76 : eq(12, 27) : BOOL
77 : eq(12, 30) : BOOL
78 : ite(77, 32, 33) : BV:8
79 : ite(76, 29, 78) : BV:8
80 : ite(75, 26, 79) : BV:8
81 : ite(74, 24, 80) : BV:8
82 : ite(73, 21, 81) : BV:8
83 : ite(72, 18, 82) : BV:8
84 : ite(71, 16, 83) : BV:8
85 : bvconcat(40, 55, 70, 84) : BV:32
86 : bvadd(10, 11, 85) : BV:32
87 : eq(86, 14) : BOOL
88 : eq(86, 10) : BOOL
89 : eq(86, 19) : BOOL
90 : eq(86, 22) : BOOL
91 : eq(86, 5) : BOOL
92 : eq(86, 27) : BOOL
93 : eq(86, 30) : BOOL
94 : ite(93, 32, 33) : BV:8
95 : ite(92, 29, 94) : BV:8
96 : ite(91, 26, 95) : BV:8
97 : ite(90, 24, 96) : BV:8
98 : ite(89, 21, 97) : BV:8
99 : ite(88, 18, 98) : BV:8
100 : ite(87, 16, 99) : BV:8
101 : bvadd(27, 11, 85) : BV:32
102 : eq(101, 14) : BOOL
103 : eq(101, 10) : BOOL
104 : eq(101, 19) : BOOL
105 : eq(101, 22) : BOOL
106 : eq(101, 5) : BOOL
107 : eq(101, 27) : BOOL
108 : eq(101, 30) : BOOL
109 : ite(108, 32, 33) : BV:8
110 : ite(107, 29, 109) : BV:8
111 : ite(106, 26, 110) : BV:8
112 : ite(105, 24, 111) : BV:8
113 : ite(104, 21, 112) : BV:8
114 : ite(103, 18, 113) : BV:8
115 : ite(102, 16, 114) : BV:8
116 : bvadd(19, 11, 85) : BV:32
117 : eq(116, 14) : BOOL
118 : eq(116, 10) : BOOL
119 : eq(116, 19) : BOOL
120 : eq(116, 22) : BOOL
121 : eq(116, 5) : BOOL
122 : eq(116, 27) : BOOL
123 : eq(116, 30) : BOOL
124 : ite(123, 32, 33) : BV:8
125 : ite(122, 29, 124) : BV:8
126 : ite(121, 26, 125) : BV:8
127 : ite(120, 24, 126) : BV:8
128 : ite(119, 21, 127) : BV:8
129 : ite(118, 18, 128) : BV:8
130 : ite(117, 16, 129) : BV:8
131 : bvadd(11, 85) : BV:32
132 : eq(131, 14) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 19) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 5) : BOOL
137 : eq(131, 27) : BOOL
138 : eq(131, 30) : BOOL
139 : ite(138, 32, 33) : BV:8
140 : ite(137, 29, 139) : BV:8
141 : ite(136, 26, 140) : BV:8
142 : ite(135, 24, 141) : BV:8
143 : ite(134, 21, 142) : BV:8
144 : ite(133, 18, 143) : BV:8
145 : ite(132, 16, 144) : BV:8
146 : bvconcat(100, 115, 130, 145) : BV:32
147 : ite(9, 5, 146) : BV:32
148 : ite(7, 5, 147) : BV:32
149 : lambda(1, 2, 148) : FUNCTION[BV:32,BV:32 -> BV:32]
150 : sym_const(149) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4121540407
=counter_example_end
=global nodece 46 num_edges_traversed 2
=global nodece 46 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3.ce3741.num_edges_traversed1
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3.ce3741 3548e0cd7421560ef6149d958f79fb0
=input.spec-%var-x-1
1 : Lambda43546Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43547Var : BV:32
18 : Lambda43548Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43549Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 94 { 0x5e } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 110 { 0x6e } : BV:8
85 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 152 { 0x98 -104 } : BV:8
88 : eq(79, 2) : BOOL
89 : 186 { 0xba -70 } : BV:8
90 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
91 : eq(79, 90) : BOOL
92 : 187 { 0xbb -69 } : BV:8
93 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
94 : eq(79, 93) : BOOL
95 : 160 { 0xa0 -96 } : BV:8
96 : 2 { 0x2 +1.23e129 } : BV:32
97 : eq(79, 96) : BOOL
98 : 168 { 0xa8 -88 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(86, 87, 103) : BV:8
105 : ite(83, 84, 104) : BV:8
106 : ite(80, 81, 105) : BV:8
107 : bvadd(96, 78) : BV:32
108 : eq(107, 75) : BOOL
109 : eq(107, 82) : BOOL
110 : eq(107, 85) : BOOL
111 : eq(107, 2) : BOOL
112 : eq(107, 90) : BOOL
113 : eq(107, 93) : BOOL
114 : eq(107, 96) : BOOL
115 : ite(114, 98, 99) : BV:8
116 : ite(113, 95, 115) : BV:8
117 : ite(112, 92, 116) : BV:8
118 : ite(111, 89, 117) : BV:8
119 : ite(110, 87, 118) : BV:8
120 : ite(109, 84, 119) : BV:8
121 : ite(108, 81, 120) : BV:8
122 : bvadd(82, 78) : BV:32
123 : eq(122, 75) : BOOL
124 : eq(122, 82) : BOOL
125 : eq(122, 85) : BOOL
126 : eq(122, 2) : BOOL
127 : eq(122, 90) : BOOL
128 : eq(122, 93) : BOOL
129 : eq(122, 96) : BOOL
130 : ite(129, 98, 99) : BV:8
131 : ite(128, 95, 130) : BV:8
132 : ite(127, 92, 131) : BV:8
133 : ite(126, 89, 132) : BV:8
134 : ite(125, 87, 133) : BV:8
135 : ite(124, 84, 134) : BV:8
136 : ite(123, 81, 135) : BV:8
137 : eq(78, 75) : BOOL
138 : eq(78, 82) : BOOL
139 : eq(78, 85) : BOOL
140 : eq(78, 2) : BOOL
141 : eq(78, 90) : BOOL
142 : eq(78, 93) : BOOL
143 : eq(78, 96) : BOOL
144 : ite(143, 98, 99) : BV:8
145 : ite(142, 95, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 87, 147) : BV:8
149 : ite(138, 84, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(106, 121, 136, 150) : BV:32
152 : bvadd(75, 77, 151) : BV:32
153 : eq(152, 75) : BOOL
154 : eq(152, 82) : BOOL
155 : eq(152, 85) : BOOL
156 : eq(152, 2) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 96) : BOOL
160 : ite(159, 98, 99) : BV:8
161 : ite(158, 95, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 87, 163) : BV:8
165 : ite(154, 84, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(96, 77, 151) : BV:32
168 : eq(167, 75) : BOOL
169 : eq(167, 82) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 2) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 96) : BOOL
175 : ite(174, 98, 99) : BV:8
176 : ite(173, 95, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 87, 178) : BV:8
180 : ite(169, 84, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(82, 77, 151) : BV:32
183 : eq(182, 75) : BOOL
184 : eq(182, 82) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 2) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : ite(189, 98, 99) : BV:8
191 : ite(188, 95, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 87, 193) : BV:8
195 : ite(184, 84, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(77, 151) : BV:32
198 : eq(197, 75) : BOOL
199 : eq(197, 82) : BOOL
200 : eq(197, 85) : BOOL
201 : eq(197, 2) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 96) : BOOL
205 : ite(204, 98, 99) : BV:8
206 : ite(203, 95, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 87, 208) : BV:8
210 : ite(199, 84, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(55, 2, 212) : BV:32
214 : ite(74, 212, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43567Var : BV:32
18 : Lambda43568Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43569Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 94 { 0x5e } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 110 { 0x6e } : BV:8
66 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 152 { 0x98 -104 } : BV:8
69 : eq(60, 2) : BOOL
70 : 186 { 0xba -70 } : BV:8
71 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
72 : eq(60, 71) : BOOL
73 : 187 { 0xbb -69 } : BV:8
74 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
75 : eq(60, 74) : BOOL
76 : 160 { 0xa0 -96 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 168 { 0xa8 -88 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(64, 65, 85) : BV:8
87 : ite(61, 62, 86) : BV:8
88 : bvadd(77, 59) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 63) : BOOL
91 : eq(88, 66) : BOOL
92 : eq(88, 2) : BOOL
93 : eq(88, 71) : BOOL
94 : eq(88, 74) : BOOL
95 : eq(88, 77) : BOOL
96 : ite(95, 79, 80) : BV:8
97 : ite(94, 76, 96) : BV:8
98 : ite(93, 73, 97) : BV:8
99 : ite(92, 70, 98) : BV:8
100 : ite(91, 68, 99) : BV:8
101 : ite(90, 65, 100) : BV:8
102 : ite(89, 62, 101) : BV:8
103 : bvadd(63, 59) : BV:32
104 : eq(103, 56) : BOOL
105 : eq(103, 63) : BOOL
106 : eq(103, 66) : BOOL
107 : eq(103, 2) : BOOL
108 : eq(103, 71) : BOOL
109 : eq(103, 74) : BOOL
110 : eq(103, 77) : BOOL
111 : ite(110, 79, 80) : BV:8
112 : ite(109, 76, 111) : BV:8
113 : ite(108, 73, 112) : BV:8
114 : ite(107, 70, 113) : BV:8
115 : ite(106, 68, 114) : BV:8
116 : ite(105, 65, 115) : BV:8
117 : ite(104, 62, 116) : BV:8
118 : eq(59, 56) : BOOL
119 : eq(59, 63) : BOOL
120 : eq(59, 66) : BOOL
121 : eq(59, 2) : BOOL
122 : eq(59, 71) : BOOL
123 : eq(59, 74) : BOOL
124 : eq(59, 77) : BOOL
125 : ite(124, 79, 80) : BV:8
126 : ite(123, 76, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 68, 128) : BV:8
130 : ite(119, 65, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(87, 102, 117, 131) : BV:32
133 : bvadd(56, 58, 132) : BV:32
134 : eq(133, 56) : BOOL
135 : eq(133, 63) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 2) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 77) : BOOL
141 : ite(140, 79, 80) : BV:8
142 : ite(139, 76, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 68, 144) : BV:8
146 : ite(135, 65, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(77, 58, 132) : BV:32
149 : eq(148, 56) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 2) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 77) : BOOL
156 : ite(155, 79, 80) : BV:8
157 : ite(154, 76, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 68, 159) : BV:8
161 : ite(150, 65, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(63, 58, 132) : BV:32
164 : eq(163, 56) : BOOL
165 : eq(163, 63) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 2) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : ite(170, 79, 80) : BV:8
172 : ite(169, 76, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 68, 174) : BV:8
176 : ite(165, 65, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(58, 132) : BV:32
179 : eq(178, 56) : BOOL
180 : eq(178, 63) : BOOL
181 : eq(178, 66) : BOOL
182 : eq(178, 2) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 77) : BOOL
186 : ite(185, 79, 80) : BV:8
187 : ite(184, 76, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 68, 189) : BV:8
191 : ite(180, 65, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(55, 2, 193) : BV:32
195 : lambda(52, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(51, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 186, [ 1; 1 ] -> 110, [ 2; 2 ] -> 168, [ 3; 3 ] -> 94, [ 4; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 160, [ 2147483646; 2147483646 ] -> 152, [ 2147483647; 2147483647 ] -> 187, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1476919935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1476919936; 1476919939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1476919940; 2066646019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2066646020; 2066646023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2066646024; 4194439699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194439700; 4194439703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194439704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194439700 { 0xfa021214 -100527596 -1.1617670e117 } : BV:32
=input.dst.llvm-%m
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2066646020 { 0x7b2e8404 +1.36340379e119 } : BV:32
=input.dst.llvm-%n
1 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1476919936 { 0x58080280 +1.6257629e49 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43573Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43574Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 94 { 0x5e } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 110 { 0x6e } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : eq(23, 2) : BOOL
33 : 186 { 0xba -70 } : BV:8
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
38 : eq(23, 37) : BOOL
39 : 160 { 0xa0 -96 } : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : eq(23, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : bvadd(40, 21, 22) : BV:32
52 : eq(51, 19) : BOOL
53 : eq(51, 26) : BOOL
54 : eq(51, 29) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 40) : BOOL
59 : ite(58, 42, 43) : BV:8
60 : ite(57, 39, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 25, 64) : BV:8
66 : bvadd(26, 21, 22) : BV:32
67 : eq(66, 19) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 40) : BOOL
74 : ite(73, 42, 43) : BV:8
75 : ite(72, 39, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 2) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 40) : BOOL
89 : ite(88, 42, 43) : BV:8
90 : ite(87, 39, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(50, 65, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda43555Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43556Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 94 { 0x5e } : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : eq(25, 28) : BOOL
30 : 110 { 0x6e } : BV:8
31 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
32 : eq(25, 31) : BOOL
33 : 152 { 0x98 -104 } : BV:8
34 : eq(25, 4) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
37 : eq(25, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
40 : eq(25, 39) : BOOL
41 : 160 { 0xa0 -96 } : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : eq(25, 42) : BOOL
44 : 168 { 0xa8 -88 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : bvadd(42, 23, 24) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 28) : BOOL
56 : eq(53, 31) : BOOL
57 : eq(53, 4) : BOOL
58 : eq(53, 36) : BOOL
59 : eq(53, 39) : BOOL
60 : eq(53, 42) : BOOL
61 : ite(60, 44, 45) : BV:8
62 : ite(59, 41, 61) : BV:8
63 : ite(58, 38, 62) : BV:8
64 : ite(57, 35, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : ite(54, 27, 66) : BV:8
68 : bvadd(28, 23, 24) : BV:32
69 : eq(68, 21) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 4) : BOOL
73 : eq(68, 36) : BOOL
74 : eq(68, 39) : BOOL
75 : eq(68, 42) : BOOL
76 : ite(75, 44, 45) : BV:8
77 : ite(74, 41, 76) : BV:8
78 : ite(73, 38, 77) : BV:8
79 : ite(72, 35, 78) : BV:8
80 : ite(71, 33, 79) : BV:8
81 : ite(70, 30, 80) : BV:8
82 : ite(69, 27, 81) : BV:8
83 : bvadd(23, 24) : BV:32
84 : eq(83, 21) : BOOL
85 : eq(83, 28) : BOOL
86 : eq(83, 31) : BOOL
87 : eq(83, 4) : BOOL
88 : eq(83, 36) : BOOL
89 : eq(83, 39) : BOOL
90 : eq(83, 42) : BOOL
91 : ite(90, 44, 45) : BV:8
92 : ite(89, 41, 91) : BV:8
93 : ite(88, 38, 92) : BV:8
94 : ite(87, 35, 93) : BV:8
95 : ite(86, 33, 94) : BV:8
96 : ite(85, 30, 95) : BV:8
97 : ite(84, 27, 96) : BV:8
98 : bvconcat(52, 67, 82, 97) : BV:32
99 : ite(20, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1296654753 { 0x4d4961a1 +1.57329189e27 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43578Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43579Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 94 { 0x5e } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 110 { 0x6e } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : eq(23, 2) : BOOL
33 : 186 { 0xba -70 } : BV:8
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
38 : eq(23, 37) : BOOL
39 : 160 { 0xa0 -96 } : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : eq(23, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : bvadd(40, 21, 22) : BV:32
52 : eq(51, 19) : BOOL
53 : eq(51, 26) : BOOL
54 : eq(51, 29) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 40) : BOOL
59 : ite(58, 42, 43) : BV:8
60 : ite(57, 39, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 25, 64) : BV:8
66 : bvadd(26, 21, 22) : BV:32
67 : eq(66, 19) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 40) : BOOL
74 : ite(73, 42, 43) : BV:8
75 : ite(72, 39, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 2) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 40) : BOOL
89 : ite(88, 42, 43) : BV:8
90 : ite(87, 39, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(50, 65, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 708711094 { 0x2a3e12b6 +1.48494601e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2066646020 { 0x7b2e8404 +1.36340379e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2066646023 { 0x7b2e8407 +1.36340415e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1476919936 { 0x58080280 +1.6257629e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1476919939 { 0x58080283 +1.6257665e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194439700 { 0xfa021214 -100527596 -1.1617670e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194439703 { 0xfa021217 -100527593 -1.1617705e117 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43438Var : BV:32
2 : Lambda43439Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 94 { 0x5e } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 110 { 0x6e } : BV:8
58 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 152 { 0x98 -104 } : BV:8
61 : eq(52, 3) : BOOL
62 : 186 { 0xba -70 } : BV:8
63 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
64 : eq(52, 63) : BOOL
65 : 187 { 0xbb -69 } : BV:8
66 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
67 : eq(52, 66) : BOOL
68 : 160 { 0xa0 -96 } : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : eq(52, 69) : BOOL
71 : 168 { 0xa8 -88 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(56, 57, 77) : BV:8
79 : ite(53, 54, 78) : BV:8
80 : bvadd(69, 51) : BV:32
81 : eq(80, 48) : BOOL
82 : eq(80, 55) : BOOL
83 : eq(80, 58) : BOOL
84 : eq(80, 3) : BOOL
85 : eq(80, 63) : BOOL
86 : eq(80, 66) : BOOL
87 : eq(80, 69) : BOOL
88 : ite(87, 71, 72) : BV:8
89 : ite(86, 68, 88) : BV:8
90 : ite(85, 65, 89) : BV:8
91 : ite(84, 62, 90) : BV:8
92 : ite(83, 60, 91) : BV:8
93 : ite(82, 57, 92) : BV:8
94 : ite(81, 54, 93) : BV:8
95 : bvadd(55, 51) : BV:32
96 : eq(95, 48) : BOOL
97 : eq(95, 55) : BOOL
98 : eq(95, 58) : BOOL
99 : eq(95, 3) : BOOL
100 : eq(95, 63) : BOOL
101 : eq(95, 66) : BOOL
102 : eq(95, 69) : BOOL
103 : ite(102, 71, 72) : BV:8
104 : ite(101, 68, 103) : BV:8
105 : ite(100, 65, 104) : BV:8
106 : ite(99, 62, 105) : BV:8
107 : ite(98, 60, 106) : BV:8
108 : ite(97, 57, 107) : BV:8
109 : ite(96, 54, 108) : BV:8
110 : eq(51, 48) : BOOL
111 : eq(51, 55) : BOOL
112 : eq(51, 58) : BOOL
113 : eq(51, 3) : BOOL
114 : eq(51, 63) : BOOL
115 : eq(51, 66) : BOOL
116 : eq(51, 69) : BOOL
117 : ite(116, 71, 72) : BV:8
118 : ite(115, 68, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 60, 120) : BV:8
122 : ite(111, 57, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(79, 94, 109, 123) : BV:32
125 : bvadd(48, 50, 124) : BV:32
126 : eq(125, 48) : BOOL
127 : eq(125, 55) : BOOL
128 : eq(125, 58) : BOOL
129 : eq(125, 3) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 69) : BOOL
133 : ite(132, 71, 72) : BV:8
134 : ite(131, 68, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 60, 136) : BV:8
138 : ite(127, 57, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(69, 50, 124) : BV:32
141 : eq(140, 48) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 3) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 69) : BOOL
148 : ite(147, 71, 72) : BV:8
149 : ite(146, 68, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 60, 151) : BV:8
153 : ite(142, 57, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(55, 50, 124) : BV:32
156 : eq(155, 48) : BOOL
157 : eq(155, 55) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 3) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : ite(162, 71, 72) : BV:8
164 : ite(161, 68, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 60, 166) : BV:8
168 : ite(157, 57, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(50, 124) : BV:32
171 : eq(170, 48) : BOOL
172 : eq(170, 55) : BOOL
173 : eq(170, 58) : BOOL
174 : eq(170, 3) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 69) : BOOL
178 : ite(177, 71, 72) : BV:8
179 : ite(176, 68, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 60, 181) : BV:8
183 : ite(172, 57, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(47, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43443Var : BV:32
2 : Lambda43444Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2303647413 ] -> true, [ 2303647414; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2303647413 ] -> true, [ 2303647414; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43452Var : BV:32
2 : Lambda43453Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43448Var : BV:32
2 : Lambda43449Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 94 { 0x5e } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 110 { 0x6e } : BV:8
17 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 152 { 0x98 -104 } : BV:8
20 : eq(11, 3) : BOOL
21 : 186 { 0xba -70 } : BV:8
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : eq(11, 22) : BOOL
24 : 187 { 0xbb -69 } : BV:8
25 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : 168 { 0xa8 -88 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : bvadd(28, 10) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 14) : BOOL
42 : eq(39, 17) : BOOL
43 : eq(39, 3) : BOOL
44 : eq(39, 22) : BOOL
45 : eq(39, 25) : BOOL
46 : eq(39, 28) : BOOL
47 : ite(46, 30, 31) : BV:8
48 : ite(45, 27, 47) : BV:8
49 : ite(44, 24, 48) : BV:8
50 : ite(43, 21, 49) : BV:8
51 : ite(42, 19, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : bvadd(14, 10) : BV:32
55 : eq(54, 7) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : eq(54, 3) : BOOL
59 : eq(54, 22) : BOOL
60 : eq(54, 25) : BOOL
61 : eq(54, 28) : BOOL
62 : ite(61, 30, 31) : BV:8
63 : ite(60, 27, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 21, 64) : BV:8
66 : ite(57, 19, 65) : BV:8
67 : ite(56, 16, 66) : BV:8
68 : ite(55, 13, 67) : BV:8
69 : eq(10, 7) : BOOL
70 : eq(10, 14) : BOOL
71 : eq(10, 17) : BOOL
72 : eq(10, 3) : BOOL
73 : eq(10, 22) : BOOL
74 : eq(10, 25) : BOOL
75 : eq(10, 28) : BOOL
76 : ite(75, 30, 31) : BV:8
77 : ite(74, 27, 76) : BV:8
78 : ite(73, 24, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : ite(71, 19, 79) : BV:8
81 : ite(70, 16, 80) : BV:8
82 : ite(69, 13, 81) : BV:8
83 : bvconcat(38, 53, 68, 82) : BV:32
84 : bvadd(7, 9, 83) : BV:32
85 : eq(84, 7) : BOOL
86 : eq(84, 14) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 3) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : ite(91, 30, 31) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 24, 93) : BV:8
95 : ite(88, 21, 94) : BV:8
96 : ite(87, 19, 95) : BV:8
97 : ite(86, 16, 96) : BV:8
98 : ite(85, 13, 97) : BV:8
99 : bvadd(28, 9, 83) : BV:32
100 : eq(99, 7) : BOOL
101 : eq(99, 14) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 3) : BOOL
104 : eq(99, 22) : BOOL
105 : eq(99, 25) : BOOL
106 : eq(99, 28) : BOOL
107 : ite(106, 30, 31) : BV:8
108 : ite(105, 27, 107) : BV:8
109 : ite(104, 24, 108) : BV:8
110 : ite(103, 21, 109) : BV:8
111 : ite(102, 19, 110) : BV:8
112 : ite(101, 16, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : bvadd(14, 9, 83) : BV:32
115 : eq(114, 7) : BOOL
116 : eq(114, 14) : BOOL
117 : eq(114, 17) : BOOL
118 : eq(114, 3) : BOOL
119 : eq(114, 22) : BOOL
120 : eq(114, 25) : BOOL
121 : eq(114, 28) : BOOL
122 : ite(121, 30, 31) : BV:8
123 : ite(120, 27, 122) : BV:8
124 : ite(119, 24, 123) : BV:8
125 : ite(118, 21, 124) : BV:8
126 : ite(117, 19, 125) : BV:8
127 : ite(116, 16, 126) : BV:8
128 : ite(115, 13, 127) : BV:8
129 : bvadd(9, 83) : BV:32
130 : eq(129, 7) : BOOL
131 : eq(129, 14) : BOOL
132 : eq(129, 17) : BOOL
133 : eq(129, 3) : BOOL
134 : eq(129, 22) : BOOL
135 : eq(129, 25) : BOOL
136 : eq(129, 28) : BOOL
137 : ite(136, 30, 31) : BV:8
138 : ite(135, 27, 137) : BV:8
139 : ite(134, 24, 138) : BV:8
140 : ite(133, 21, 139) : BV:8
141 : ite(132, 19, 140) : BV:8
142 : ite(131, 16, 141) : BV:8
143 : ite(130, 13, 142) : BV:8
144 : bvconcat(98, 113, 128, 143) : BV:32
145 : ite(6, 3, 144) : BV:32
146 : lambda(1, 2, 145) : FUNCTION[BV:32,BV:32 -> BV:32]
147 : sym_const(146) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43459Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43463Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43467Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1395935249
=counter_example_end
=global nodece 47 num_edges_traversed 1
=global nodece 47 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 48
=global nodece 48 nodece z3.ce4056.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce4056 bab3a3ec197d754420e5accf70936c1f
=input.spec-%var-x-1
1 : Lambda43546Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43547Var : BV:32
18 : Lambda43548Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43549Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 94 { 0x5e } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 110 { 0x6e } : BV:8
85 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
86 : eq(79, 85) : BOOL
87 : 152 { 0x98 -104 } : BV:8
88 : eq(79, 2) : BOOL
89 : 186 { 0xba -70 } : BV:8
90 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
91 : eq(79, 90) : BOOL
92 : 187 { 0xbb -69 } : BV:8
93 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
94 : eq(79, 93) : BOOL
95 : 160 { 0xa0 -96 } : BV:8
96 : 2 { 0x2 +1.23e129 } : BV:32
97 : eq(79, 96) : BOOL
98 : 168 { 0xa8 -88 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(86, 87, 103) : BV:8
105 : ite(83, 84, 104) : BV:8
106 : ite(80, 81, 105) : BV:8
107 : bvadd(96, 78) : BV:32
108 : eq(107, 75) : BOOL
109 : eq(107, 82) : BOOL
110 : eq(107, 85) : BOOL
111 : eq(107, 2) : BOOL
112 : eq(107, 90) : BOOL
113 : eq(107, 93) : BOOL
114 : eq(107, 96) : BOOL
115 : ite(114, 98, 99) : BV:8
116 : ite(113, 95, 115) : BV:8
117 : ite(112, 92, 116) : BV:8
118 : ite(111, 89, 117) : BV:8
119 : ite(110, 87, 118) : BV:8
120 : ite(109, 84, 119) : BV:8
121 : ite(108, 81, 120) : BV:8
122 : bvadd(82, 78) : BV:32
123 : eq(122, 75) : BOOL
124 : eq(122, 82) : BOOL
125 : eq(122, 85) : BOOL
126 : eq(122, 2) : BOOL
127 : eq(122, 90) : BOOL
128 : eq(122, 93) : BOOL
129 : eq(122, 96) : BOOL
130 : ite(129, 98, 99) : BV:8
131 : ite(128, 95, 130) : BV:8
132 : ite(127, 92, 131) : BV:8
133 : ite(126, 89, 132) : BV:8
134 : ite(125, 87, 133) : BV:8
135 : ite(124, 84, 134) : BV:8
136 : ite(123, 81, 135) : BV:8
137 : eq(78, 75) : BOOL
138 : eq(78, 82) : BOOL
139 : eq(78, 85) : BOOL
140 : eq(78, 2) : BOOL
141 : eq(78, 90) : BOOL
142 : eq(78, 93) : BOOL
143 : eq(78, 96) : BOOL
144 : ite(143, 98, 99) : BV:8
145 : ite(142, 95, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 87, 147) : BV:8
149 : ite(138, 84, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(106, 121, 136, 150) : BV:32
152 : bvadd(75, 77, 151) : BV:32
153 : eq(152, 75) : BOOL
154 : eq(152, 82) : BOOL
155 : eq(152, 85) : BOOL
156 : eq(152, 2) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 96) : BOOL
160 : ite(159, 98, 99) : BV:8
161 : ite(158, 95, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 87, 163) : BV:8
165 : ite(154, 84, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(96, 77, 151) : BV:32
168 : eq(167, 75) : BOOL
169 : eq(167, 82) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 2) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 96) : BOOL
175 : ite(174, 98, 99) : BV:8
176 : ite(173, 95, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 87, 178) : BV:8
180 : ite(169, 84, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(82, 77, 151) : BV:32
183 : eq(182, 75) : BOOL
184 : eq(182, 82) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 2) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : ite(189, 98, 99) : BV:8
191 : ite(188, 95, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 87, 193) : BV:8
195 : ite(184, 84, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(77, 151) : BV:32
198 : eq(197, 75) : BOOL
199 : eq(197, 82) : BOOL
200 : eq(197, 85) : BOOL
201 : eq(197, 2) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 96) : BOOL
205 : ite(204, 98, 99) : BV:8
206 : ite(203, 95, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 87, 208) : BV:8
210 : ite(199, 84, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(55, 2, 212) : BV:32
214 : ite(74, 212, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43566Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43567Var : BV:32
18 : Lambda43568Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43569Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 94 { 0x5e } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 110 { 0x6e } : BV:8
66 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
67 : eq(60, 66) : BOOL
68 : 152 { 0x98 -104 } : BV:8
69 : eq(60, 2) : BOOL
70 : 186 { 0xba -70 } : BV:8
71 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
72 : eq(60, 71) : BOOL
73 : 187 { 0xbb -69 } : BV:8
74 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
75 : eq(60, 74) : BOOL
76 : 160 { 0xa0 -96 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 168 { 0xa8 -88 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(64, 65, 85) : BV:8
87 : ite(61, 62, 86) : BV:8
88 : bvadd(77, 59) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 63) : BOOL
91 : eq(88, 66) : BOOL
92 : eq(88, 2) : BOOL
93 : eq(88, 71) : BOOL
94 : eq(88, 74) : BOOL
95 : eq(88, 77) : BOOL
96 : ite(95, 79, 80) : BV:8
97 : ite(94, 76, 96) : BV:8
98 : ite(93, 73, 97) : BV:8
99 : ite(92, 70, 98) : BV:8
100 : ite(91, 68, 99) : BV:8
101 : ite(90, 65, 100) : BV:8
102 : ite(89, 62, 101) : BV:8
103 : bvadd(63, 59) : BV:32
104 : eq(103, 56) : BOOL
105 : eq(103, 63) : BOOL
106 : eq(103, 66) : BOOL
107 : eq(103, 2) : BOOL
108 : eq(103, 71) : BOOL
109 : eq(103, 74) : BOOL
110 : eq(103, 77) : BOOL
111 : ite(110, 79, 80) : BV:8
112 : ite(109, 76, 111) : BV:8
113 : ite(108, 73, 112) : BV:8
114 : ite(107, 70, 113) : BV:8
115 : ite(106, 68, 114) : BV:8
116 : ite(105, 65, 115) : BV:8
117 : ite(104, 62, 116) : BV:8
118 : eq(59, 56) : BOOL
119 : eq(59, 63) : BOOL
120 : eq(59, 66) : BOOL
121 : eq(59, 2) : BOOL
122 : eq(59, 71) : BOOL
123 : eq(59, 74) : BOOL
124 : eq(59, 77) : BOOL
125 : ite(124, 79, 80) : BV:8
126 : ite(123, 76, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 68, 128) : BV:8
130 : ite(119, 65, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(87, 102, 117, 131) : BV:32
133 : bvadd(56, 58, 132) : BV:32
134 : eq(133, 56) : BOOL
135 : eq(133, 63) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 2) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 77) : BOOL
141 : ite(140, 79, 80) : BV:8
142 : ite(139, 76, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 68, 144) : BV:8
146 : ite(135, 65, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(77, 58, 132) : BV:32
149 : eq(148, 56) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 2) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 77) : BOOL
156 : ite(155, 79, 80) : BV:8
157 : ite(154, 76, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 68, 159) : BV:8
161 : ite(150, 65, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(63, 58, 132) : BV:32
164 : eq(163, 56) : BOOL
165 : eq(163, 63) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 2) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : ite(170, 79, 80) : BV:8
172 : ite(169, 76, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 68, 174) : BV:8
176 : ite(165, 65, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(58, 132) : BV:32
179 : eq(178, 56) : BOOL
180 : eq(178, 63) : BOOL
181 : eq(178, 66) : BOOL
182 : eq(178, 2) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 77) : BOOL
186 : ite(185, 79, 80) : BV:8
187 : ite(184, 76, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 68, 189) : BV:8
191 : ite(180, 65, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(55, 2, 193) : BV:32
195 : lambda(52, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(51, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 186, [ 1; 1 ] -> 110, [ 2; 2 ] -> 168, [ 3; 3 ] -> 94, [ 4; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 160, [ 2147483646; 2147483646 ] -> 152, [ 2147483647; 2147483647 ] -> 187, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1476919935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1476919936; 1476919939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1476919940; 2066646019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2066646020; 2066646023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2066646024; 4194439699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194439700; 4194439703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194439704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194439700 { 0xfa021214 -100527596 -1.1617670e117 } : BV:32
=input.dst.llvm-%m
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2066646020 { 0x7b2e8404 +1.36340379e119 } : BV:32
=input.dst.llvm-%n
1 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1476919936 { 0x58080280 +1.6257629e49 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43573Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43574Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 94 { 0x5e } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 110 { 0x6e } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : eq(23, 2) : BOOL
33 : 186 { 0xba -70 } : BV:8
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
38 : eq(23, 37) : BOOL
39 : 160 { 0xa0 -96 } : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : eq(23, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : bvadd(40, 21, 22) : BV:32
52 : eq(51, 19) : BOOL
53 : eq(51, 26) : BOOL
54 : eq(51, 29) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 40) : BOOL
59 : ite(58, 42, 43) : BV:8
60 : ite(57, 39, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 25, 64) : BV:8
66 : bvadd(26, 21, 22) : BV:32
67 : eq(66, 19) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 40) : BOOL
74 : ite(73, 42, 43) : BV:8
75 : ite(72, 39, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 2) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 40) : BOOL
89 : ite(88, 42, 43) : BV:8
90 : ite(87, 39, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(50, 65, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
2 : unit : UNIT
3 : Lambda43555Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43556Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 94 { 0x5e } : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : eq(25, 28) : BOOL
30 : 110 { 0x6e } : BV:8
31 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
32 : eq(25, 31) : BOOL
33 : 152 { 0x98 -104 } : BV:8
34 : eq(25, 4) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
37 : eq(25, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
40 : eq(25, 39) : BOOL
41 : 160 { 0xa0 -96 } : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : eq(25, 42) : BOOL
44 : 168 { 0xa8 -88 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : bvadd(42, 23, 24) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 28) : BOOL
56 : eq(53, 31) : BOOL
57 : eq(53, 4) : BOOL
58 : eq(53, 36) : BOOL
59 : eq(53, 39) : BOOL
60 : eq(53, 42) : BOOL
61 : ite(60, 44, 45) : BV:8
62 : ite(59, 41, 61) : BV:8
63 : ite(58, 38, 62) : BV:8
64 : ite(57, 35, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : ite(54, 27, 66) : BV:8
68 : bvadd(28, 23, 24) : BV:32
69 : eq(68, 21) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 4) : BOOL
73 : eq(68, 36) : BOOL
74 : eq(68, 39) : BOOL
75 : eq(68, 42) : BOOL
76 : ite(75, 44, 45) : BV:8
77 : ite(74, 41, 76) : BV:8
78 : ite(73, 38, 77) : BV:8
79 : ite(72, 35, 78) : BV:8
80 : ite(71, 33, 79) : BV:8
81 : ite(70, 30, 80) : BV:8
82 : ite(69, 27, 81) : BV:8
83 : bvadd(23, 24) : BV:32
84 : eq(83, 21) : BOOL
85 : eq(83, 28) : BOOL
86 : eq(83, 31) : BOOL
87 : eq(83, 4) : BOOL
88 : eq(83, 36) : BOOL
89 : eq(83, 39) : BOOL
90 : eq(83, 42) : BOOL
91 : ite(90, 44, 45) : BV:8
92 : ite(89, 41, 91) : BV:8
93 : ite(88, 38, 92) : BV:8
94 : ite(87, 35, 93) : BV:8
95 : ite(86, 33, 94) : BV:8
96 : ite(85, 30, 95) : BV:8
97 : ite(84, 27, 96) : BV:8
98 : bvconcat(52, 67, 82, 97) : BV:32
99 : ite(20, 4, 98) : BV:32
100 : lambda(19, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(18, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1296654754 { 0x4d4961a2 +1.57329201e27 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43578Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43579Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 19) : BOOL
25 : 94 { 0x5e } : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : eq(23, 26) : BOOL
28 : 110 { 0x6e } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 152 { 0x98 -104 } : BV:8
32 : eq(23, 2) : BOOL
33 : 186 { 0xba -70 } : BV:8
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 187 { 0xbb -69 } : BV:8
37 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
38 : eq(23, 37) : BOOL
39 : 160 { 0xa0 -96 } : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : eq(23, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(30, 31, 47) : BV:8
49 : ite(27, 28, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : bvadd(40, 21, 22) : BV:32
52 : eq(51, 19) : BOOL
53 : eq(51, 26) : BOOL
54 : eq(51, 29) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 34) : BOOL
57 : eq(51, 37) : BOOL
58 : eq(51, 40) : BOOL
59 : ite(58, 42, 43) : BV:8
60 : ite(57, 39, 59) : BV:8
61 : ite(56, 36, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : ite(52, 25, 64) : BV:8
66 : bvadd(26, 21, 22) : BV:32
67 : eq(66, 19) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 37) : BOOL
73 : eq(66, 40) : BOOL
74 : ite(73, 42, 43) : BV:8
75 : ite(72, 39, 74) : BV:8
76 : ite(71, 36, 75) : BV:8
77 : ite(70, 33, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 2) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 37) : BOOL
88 : eq(81, 40) : BOOL
89 : ite(88, 42, 43) : BV:8
90 : ite(87, 39, 89) : BV:8
91 : ite(86, 36, 90) : BV:8
92 : ite(85, 33, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(50, 65, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 708711095 { 0x2a3e12b7 +1.48494613e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2066646020 { 0x7b2e8404 +1.36340379e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2066646023 { 0x7b2e8407 +1.36340415e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1476919936 { 0x58080280 +1.6257629e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1476919939 { 0x58080283 +1.6257665e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194439700 { 0xfa021214 -100527596 -1.1617670e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194439703 { 0xfa021217 -100527593 -1.1617705e117 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43438Var : BV:32
2 : Lambda43439Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 94 { 0x5e } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 110 { 0x6e } : BV:8
58 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
59 : eq(52, 58) : BOOL
60 : 152 { 0x98 -104 } : BV:8
61 : eq(52, 3) : BOOL
62 : 186 { 0xba -70 } : BV:8
63 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
64 : eq(52, 63) : BOOL
65 : 187 { 0xbb -69 } : BV:8
66 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
67 : eq(52, 66) : BOOL
68 : 160 { 0xa0 -96 } : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : eq(52, 69) : BOOL
71 : 168 { 0xa8 -88 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(56, 57, 77) : BV:8
79 : ite(53, 54, 78) : BV:8
80 : bvadd(69, 51) : BV:32
81 : eq(80, 48) : BOOL
82 : eq(80, 55) : BOOL
83 : eq(80, 58) : BOOL
84 : eq(80, 3) : BOOL
85 : eq(80, 63) : BOOL
86 : eq(80, 66) : BOOL
87 : eq(80, 69) : BOOL
88 : ite(87, 71, 72) : BV:8
89 : ite(86, 68, 88) : BV:8
90 : ite(85, 65, 89) : BV:8
91 : ite(84, 62, 90) : BV:8
92 : ite(83, 60, 91) : BV:8
93 : ite(82, 57, 92) : BV:8
94 : ite(81, 54, 93) : BV:8
95 : bvadd(55, 51) : BV:32
96 : eq(95, 48) : BOOL
97 : eq(95, 55) : BOOL
98 : eq(95, 58) : BOOL
99 : eq(95, 3) : BOOL
100 : eq(95, 63) : BOOL
101 : eq(95, 66) : BOOL
102 : eq(95, 69) : BOOL
103 : ite(102, 71, 72) : BV:8
104 : ite(101, 68, 103) : BV:8
105 : ite(100, 65, 104) : BV:8
106 : ite(99, 62, 105) : BV:8
107 : ite(98, 60, 106) : BV:8
108 : ite(97, 57, 107) : BV:8
109 : ite(96, 54, 108) : BV:8
110 : eq(51, 48) : BOOL
111 : eq(51, 55) : BOOL
112 : eq(51, 58) : BOOL
113 : eq(51, 3) : BOOL
114 : eq(51, 63) : BOOL
115 : eq(51, 66) : BOOL
116 : eq(51, 69) : BOOL
117 : ite(116, 71, 72) : BV:8
118 : ite(115, 68, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 60, 120) : BV:8
122 : ite(111, 57, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(79, 94, 109, 123) : BV:32
125 : bvadd(48, 50, 124) : BV:32
126 : eq(125, 48) : BOOL
127 : eq(125, 55) : BOOL
128 : eq(125, 58) : BOOL
129 : eq(125, 3) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 69) : BOOL
133 : ite(132, 71, 72) : BV:8
134 : ite(131, 68, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 60, 136) : BV:8
138 : ite(127, 57, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(69, 50, 124) : BV:32
141 : eq(140, 48) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 3) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 69) : BOOL
148 : ite(147, 71, 72) : BV:8
149 : ite(146, 68, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 60, 151) : BV:8
153 : ite(142, 57, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(55, 50, 124) : BV:32
156 : eq(155, 48) : BOOL
157 : eq(155, 55) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 3) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : ite(162, 71, 72) : BV:8
164 : ite(161, 68, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 60, 166) : BV:8
168 : ite(157, 57, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(50, 124) : BV:32
171 : eq(170, 48) : BOOL
172 : eq(170, 55) : BOOL
173 : eq(170, 58) : BOOL
174 : eq(170, 3) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 69) : BOOL
178 : ite(177, 71, 72) : BV:8
179 : ite(176, 68, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 60, 181) : BV:8
183 : ite(172, 57, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(47, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43443Var : BV:32
2 : Lambda43444Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2303647413 ] -> true, [ 2303647414; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2303647413 ] -> true, [ 2303647414; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43452Var : BV:32
2 : Lambda43453Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2303647413 { 0x894edeb5 -1991319883 -1.61617147e147 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2303647414 { 0x894edeb6 -1991319882 -1.61617159e147 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2303647415 { 0x894edeb7 -1991319881 -1.61617171e147 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43448Var : BV:32
2 : Lambda43449Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 94 { 0x5e } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 110 { 0x6e } : BV:8
17 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
18 : eq(11, 17) : BOOL
19 : 152 { 0x98 -104 } : BV:8
20 : eq(11, 3) : BOOL
21 : 186 { 0xba -70 } : BV:8
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : eq(11, 22) : BOOL
24 : 187 { 0xbb -69 } : BV:8
25 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
26 : eq(11, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : 168 { 0xa8 -88 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : bvadd(28, 10) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 14) : BOOL
42 : eq(39, 17) : BOOL
43 : eq(39, 3) : BOOL
44 : eq(39, 22) : BOOL
45 : eq(39, 25) : BOOL
46 : eq(39, 28) : BOOL
47 : ite(46, 30, 31) : BV:8
48 : ite(45, 27, 47) : BV:8
49 : ite(44, 24, 48) : BV:8
50 : ite(43, 21, 49) : BV:8
51 : ite(42, 19, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : bvadd(14, 10) : BV:32
55 : eq(54, 7) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : eq(54, 3) : BOOL
59 : eq(54, 22) : BOOL
60 : eq(54, 25) : BOOL
61 : eq(54, 28) : BOOL
62 : ite(61, 30, 31) : BV:8
63 : ite(60, 27, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 21, 64) : BV:8
66 : ite(57, 19, 65) : BV:8
67 : ite(56, 16, 66) : BV:8
68 : ite(55, 13, 67) : BV:8
69 : eq(10, 7) : BOOL
70 : eq(10, 14) : BOOL
71 : eq(10, 17) : BOOL
72 : eq(10, 3) : BOOL
73 : eq(10, 22) : BOOL
74 : eq(10, 25) : BOOL
75 : eq(10, 28) : BOOL
76 : ite(75, 30, 31) : BV:8
77 : ite(74, 27, 76) : BV:8
78 : ite(73, 24, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : ite(71, 19, 79) : BV:8
81 : ite(70, 16, 80) : BV:8
82 : ite(69, 13, 81) : BV:8
83 : bvconcat(38, 53, 68, 82) : BV:32
84 : bvadd(7, 9, 83) : BV:32
85 : eq(84, 7) : BOOL
86 : eq(84, 14) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 3) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : ite(91, 30, 31) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 24, 93) : BV:8
95 : ite(88, 21, 94) : BV:8
96 : ite(87, 19, 95) : BV:8
97 : ite(86, 16, 96) : BV:8
98 : ite(85, 13, 97) : BV:8
99 : bvadd(28, 9, 83) : BV:32
100 : eq(99, 7) : BOOL
101 : eq(99, 14) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 3) : BOOL
104 : eq(99, 22) : BOOL
105 : eq(99, 25) : BOOL
106 : eq(99, 28) : BOOL
107 : ite(106, 30, 31) : BV:8
108 : ite(105, 27, 107) : BV:8
109 : ite(104, 24, 108) : BV:8
110 : ite(103, 21, 109) : BV:8
111 : ite(102, 19, 110) : BV:8
112 : ite(101, 16, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : bvadd(14, 9, 83) : BV:32
115 : eq(114, 7) : BOOL
116 : eq(114, 14) : BOOL
117 : eq(114, 17) : BOOL
118 : eq(114, 3) : BOOL
119 : eq(114, 22) : BOOL
120 : eq(114, 25) : BOOL
121 : eq(114, 28) : BOOL
122 : ite(121, 30, 31) : BV:8
123 : ite(120, 27, 122) : BV:8
124 : ite(119, 24, 123) : BV:8
125 : ite(118, 21, 124) : BV:8
126 : ite(117, 19, 125) : BV:8
127 : ite(116, 16, 126) : BV:8
128 : ite(115, 13, 127) : BV:8
129 : bvadd(9, 83) : BV:32
130 : eq(129, 7) : BOOL
131 : eq(129, 14) : BOOL
132 : eq(129, 17) : BOOL
133 : eq(129, 3) : BOOL
134 : eq(129, 22) : BOOL
135 : eq(129, 25) : BOOL
136 : eq(129, 28) : BOOL
137 : ite(136, 30, 31) : BV:8
138 : ite(135, 27, 137) : BV:8
139 : ite(134, 24, 138) : BV:8
140 : ite(133, 21, 139) : BV:8
141 : ite(132, 19, 140) : BV:8
142 : ite(131, 16, 141) : BV:8
143 : ite(130, 13, 142) : BV:8
144 : bvconcat(98, 113, 128, 143) : BV:32
145 : ite(6, 3, 144) : BV:32
146 : lambda(1, 2, 145) : FUNCTION[BV:32,BV:32 -> BV:32]
147 : sym_const(146) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43459Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43463Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda43467Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3147341824 { 0xbb98a000 -1147625472 -1.19238281e248 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 94 { 0x5e } : BV:8
11 : 1 { 0x1 +1.11e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 110 { 0x6e } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 152 { 0x98 -104 } : BV:8
17 : eq(8, 2) : BOOL
18 : 186 { 0xba -70 } : BV:8
19 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
23 : eq(8, 22) : BOOL
24 : 160 { 0xa0 -96 } : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : eq(8, 25) : BOOL
27 : 168 { 0xa8 -88 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : ite(12, 13, 33) : BV:8
35 : ite(9, 10, 34) : BV:8
36 : bvadd(25, 6, 7) : BV:32
37 : eq(36, 4) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : eq(36, 2) : BOOL
41 : eq(36, 19) : BOOL
42 : eq(36, 22) : BOOL
43 : eq(36, 25) : BOOL
44 : ite(43, 27, 28) : BV:8
45 : ite(42, 24, 44) : BV:8
46 : ite(41, 21, 45) : BV:8
47 : ite(40, 18, 46) : BV:8
48 : ite(39, 16, 47) : BV:8
49 : ite(38, 13, 48) : BV:8
50 : ite(37, 10, 49) : BV:8
51 : bvadd(11, 6, 7) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 2) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 22) : BOOL
58 : eq(51, 25) : BOOL
59 : ite(58, 27, 28) : BV:8
60 : ite(57, 24, 59) : BV:8
61 : ite(56, 21, 60) : BV:8
62 : ite(55, 18, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 2) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 22) : BOOL
73 : eq(66, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(35, 50, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1395935249
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3.ce4067.num_edges_traversed1
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce4067 4fdfe9a3f7bdc1b2afc8ffc9a10f0fd
=input.spec-%var-x-1
1 : Lambda46108Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46109Var : BV:32
18 : Lambda46110Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8388609 { 0x800001 +1.11e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 8388608 { 0x800000 +1.0e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46111Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 119 { 0x77 } : BV:8
83 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
84 : eq(80, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
87 : eq(80, 86) : BOOL
88 : 4 { 0x4 } : BV:8
89 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
90 : eq(80, 89) : BOOL
91 : 69 { 0x45 } : BV:8
92 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
93 : eq(80, 92) : BOOL
94 : 172 { 0xac -84 } : BV:8
95 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
96 : eq(80, 95) : BOOL
97 : 93 { 0x5d } : BV:8
98 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
99 : eq(80, 98) : BOOL
100 : 60 { 0x3c } : BV:8
101 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
102 : eq(80, 101) : BOOL
103 : 111 { 0x6f } : BV:8
104 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
105 : eq(80, 104) : BOOL
106 : 223 { 0xdf -33 } : BV:8
107 : 0 { 0x0 } : BV:8
108 : ite(105, 106, 107) : BV:8
109 : ite(102, 103, 108) : BV:8
110 : ite(99, 100, 109) : BV:8
111 : ite(96, 97, 110) : BV:8
112 : ite(93, 94, 111) : BV:8
113 : ite(90, 91, 112) : BV:8
114 : ite(87, 88, 113) : BV:8
115 : ite(84, 85, 114) : BV:8
116 : ite(81, 82, 115) : BV:8
117 : bvadd(101, 79) : BV:32
118 : eq(117, 78) : BOOL
119 : eq(117, 83) : BOOL
120 : eq(117, 86) : BOOL
121 : eq(117, 89) : BOOL
122 : eq(117, 92) : BOOL
123 : eq(117, 95) : BOOL
124 : eq(117, 98) : BOOL
125 : eq(117, 101) : BOOL
126 : eq(117, 104) : BOOL
127 : ite(126, 106, 107) : BV:8
128 : ite(125, 103, 127) : BV:8
129 : ite(124, 100, 128) : BV:8
130 : ite(123, 97, 129) : BV:8
131 : ite(122, 94, 130) : BV:8
132 : ite(121, 91, 131) : BV:8
133 : ite(120, 88, 132) : BV:8
134 : ite(119, 85, 133) : BV:8
135 : ite(118, 82, 134) : BV:8
136 : bvadd(104, 79) : BV:32
137 : eq(136, 78) : BOOL
138 : eq(136, 83) : BOOL
139 : eq(136, 86) : BOOL
140 : eq(136, 89) : BOOL
141 : eq(136, 92) : BOOL
142 : eq(136, 95) : BOOL
143 : eq(136, 98) : BOOL
144 : eq(136, 101) : BOOL
145 : eq(136, 104) : BOOL
146 : ite(145, 106, 107) : BV:8
147 : ite(144, 103, 146) : BV:8
148 : ite(143, 100, 147) : BV:8
149 : ite(142, 97, 148) : BV:8
150 : ite(141, 94, 149) : BV:8
151 : ite(140, 91, 150) : BV:8
152 : ite(139, 88, 151) : BV:8
153 : ite(138, 85, 152) : BV:8
154 : ite(137, 82, 153) : BV:8
155 : bvadd(92, 79) : BV:32
156 : eq(155, 78) : BOOL
157 : eq(155, 83) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : eq(155, 101) : BOOL
164 : eq(155, 104) : BOOL
165 : ite(164, 106, 107) : BV:8
166 : ite(163, 103, 165) : BV:8
167 : ite(162, 100, 166) : BV:8
168 : ite(161, 97, 167) : BV:8
169 : ite(160, 94, 168) : BV:8
170 : ite(159, 91, 169) : BV:8
171 : ite(158, 88, 170) : BV:8
172 : ite(157, 85, 171) : BV:8
173 : ite(156, 82, 172) : BV:8
174 : bvconcat(116, 135, 154, 173) : BV:32
175 : bvadd(75, 77, 174) : BV:32
176 : eq(175, 78) : BOOL
177 : eq(175, 83) : BOOL
178 : eq(175, 86) : BOOL
179 : eq(175, 89) : BOOL
180 : eq(175, 92) : BOOL
181 : eq(175, 95) : BOOL
182 : eq(175, 98) : BOOL
183 : eq(175, 101) : BOOL
184 : eq(175, 104) : BOOL
185 : ite(184, 106, 107) : BV:8
186 : ite(183, 103, 185) : BV:8
187 : ite(182, 100, 186) : BV:8
188 : ite(181, 97, 187) : BV:8
189 : ite(180, 94, 188) : BV:8
190 : ite(179, 91, 189) : BV:8
191 : ite(178, 88, 190) : BV:8
192 : ite(177, 85, 191) : BV:8
193 : ite(176, 82, 192) : BV:8
194 : 2 { 0x2 +1.23e129 } : BV:32
195 : bvadd(194, 77, 174) : BV:32
196 : eq(195, 78) : BOOL
197 : eq(195, 83) : BOOL
198 : eq(195, 86) : BOOL
199 : eq(195, 89) : BOOL
200 : eq(195, 92) : BOOL
201 : eq(195, 95) : BOOL
202 : eq(195, 98) : BOOL
203 : eq(195, 101) : BOOL
204 : eq(195, 104) : BOOL
205 : ite(204, 106, 107) : BV:8
206 : ite(203, 103, 205) : BV:8
207 : ite(202, 100, 206) : BV:8
208 : ite(201, 97, 207) : BV:8
209 : ite(200, 94, 208) : BV:8
210 : ite(199, 91, 209) : BV:8
211 : ite(198, 88, 210) : BV:8
212 : ite(197, 85, 211) : BV:8
213 : ite(196, 82, 212) : BV:8
214 : 1 { 0x1 +1.11e129 } : BV:32
215 : bvadd(214, 77, 174) : BV:32
216 : eq(215, 78) : BOOL
217 : eq(215, 83) : BOOL
218 : eq(215, 86) : BOOL
219 : eq(215, 89) : BOOL
220 : eq(215, 92) : BOOL
221 : eq(215, 95) : BOOL
222 : eq(215, 98) : BOOL
223 : eq(215, 101) : BOOL
224 : eq(215, 104) : BOOL
225 : ite(224, 106, 107) : BV:8
226 : ite(223, 103, 225) : BV:8
227 : ite(222, 100, 226) : BV:8
228 : ite(221, 97, 227) : BV:8
229 : ite(220, 94, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 88, 230) : BV:8
232 : ite(217, 85, 231) : BV:8
233 : ite(216, 82, 232) : BV:8
234 : bvadd(77, 174) : BV:32
235 : eq(234, 78) : BOOL
236 : eq(234, 83) : BOOL
237 : eq(234, 86) : BOOL
238 : eq(234, 89) : BOOL
239 : eq(234, 92) : BOOL
240 : eq(234, 95) : BOOL
241 : eq(234, 98) : BOOL
242 : eq(234, 101) : BOOL
243 : eq(234, 104) : BOOL
244 : ite(243, 106, 107) : BV:8
245 : ite(242, 103, 244) : BV:8
246 : ite(241, 100, 245) : BV:8
247 : ite(240, 97, 246) : BV:8
248 : ite(239, 94, 247) : BV:8
249 : ite(238, 91, 248) : BV:8
250 : ite(237, 88, 249) : BV:8
251 : ite(236, 85, 250) : BV:8
252 : ite(235, 82, 251) : BV:8
253 : bvconcat(193, 213, 233, 252) : BV:32
254 : ite(55, 2, 253) : BV:32
255 : ite(74, 253, 254) : BV:32
256 : ite(55, 2, 255) : BV:32
257 : lambda(52, 256) : FUNCTION[BV:32 -> BV:32]
258 : map(51, 257) : MAP[BV:32 -> BV:32]
259 : lambda(17, 258) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
260 : map(16, 259) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
261 : sym_const(260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46128Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46129Var : BV:32
18 : Lambda46130Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8388609 { 0x800001 +1.11e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 8388608 { 0x800000 +1.0e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46131Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 119 { 0x77 } : BV:8
64 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
65 : eq(61, 64) : BOOL
66 : 128 { 0x80 -128 } : BV:8
67 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
68 : eq(61, 67) : BOOL
69 : 4 { 0x4 } : BV:8
70 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
71 : eq(61, 70) : BOOL
72 : 69 { 0x45 } : BV:8
73 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
74 : eq(61, 73) : BOOL
75 : 172 { 0xac -84 } : BV:8
76 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
77 : eq(61, 76) : BOOL
78 : 93 { 0x5d } : BV:8
79 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
80 : eq(61, 79) : BOOL
81 : 60 { 0x3c } : BV:8
82 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
83 : eq(61, 82) : BOOL
84 : 111 { 0x6f } : BV:8
85 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
86 : eq(61, 85) : BOOL
87 : 223 { 0xdf -33 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(77, 78, 91) : BV:8
93 : ite(74, 75, 92) : BV:8
94 : ite(71, 72, 93) : BV:8
95 : ite(68, 69, 94) : BV:8
96 : ite(65, 66, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(82, 60) : BV:32
99 : eq(98, 59) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 67) : BOOL
102 : eq(98, 70) : BOOL
103 : eq(98, 73) : BOOL
104 : eq(98, 76) : BOOL
105 : eq(98, 79) : BOOL
106 : eq(98, 82) : BOOL
107 : eq(98, 85) : BOOL
108 : ite(107, 87, 88) : BV:8
109 : ite(106, 84, 108) : BV:8
110 : ite(105, 81, 109) : BV:8
111 : ite(104, 78, 110) : BV:8
112 : ite(103, 75, 111) : BV:8
113 : ite(102, 72, 112) : BV:8
114 : ite(101, 69, 113) : BV:8
115 : ite(100, 66, 114) : BV:8
116 : ite(99, 63, 115) : BV:8
117 : bvadd(85, 60) : BV:32
118 : eq(117, 59) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 67) : BOOL
121 : eq(117, 70) : BOOL
122 : eq(117, 73) : BOOL
123 : eq(117, 76) : BOOL
124 : eq(117, 79) : BOOL
125 : eq(117, 82) : BOOL
126 : eq(117, 85) : BOOL
127 : ite(126, 87, 88) : BV:8
128 : ite(125, 84, 127) : BV:8
129 : ite(124, 81, 128) : BV:8
130 : ite(123, 78, 129) : BV:8
131 : ite(122, 75, 130) : BV:8
132 : ite(121, 72, 131) : BV:8
133 : ite(120, 69, 132) : BV:8
134 : ite(119, 66, 133) : BV:8
135 : ite(118, 63, 134) : BV:8
136 : bvadd(73, 60) : BV:32
137 : eq(136, 59) : BOOL
138 : eq(136, 64) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : eq(136, 82) : BOOL
145 : eq(136, 85) : BOOL
146 : ite(145, 87, 88) : BV:8
147 : ite(144, 84, 146) : BV:8
148 : ite(143, 81, 147) : BV:8
149 : ite(142, 78, 148) : BV:8
150 : ite(141, 75, 149) : BV:8
151 : ite(140, 72, 150) : BV:8
152 : ite(139, 69, 151) : BV:8
153 : ite(138, 66, 152) : BV:8
154 : ite(137, 63, 153) : BV:8
155 : bvconcat(97, 116, 135, 154) : BV:32
156 : bvadd(56, 58, 155) : BV:32
157 : eq(156, 59) : BOOL
158 : eq(156, 64) : BOOL
159 : eq(156, 67) : BOOL
160 : eq(156, 70) : BOOL
161 : eq(156, 73) : BOOL
162 : eq(156, 76) : BOOL
163 : eq(156, 79) : BOOL
164 : eq(156, 82) : BOOL
165 : eq(156, 85) : BOOL
166 : ite(165, 87, 88) : BV:8
167 : ite(164, 84, 166) : BV:8
168 : ite(163, 81, 167) : BV:8
169 : ite(162, 78, 168) : BV:8
170 : ite(161, 75, 169) : BV:8
171 : ite(160, 72, 170) : BV:8
172 : ite(159, 69, 171) : BV:8
173 : ite(158, 66, 172) : BV:8
174 : ite(157, 63, 173) : BV:8
175 : 2 { 0x2 +1.23e129 } : BV:32
176 : bvadd(175, 58, 155) : BV:32
177 : eq(176, 59) : BOOL
178 : eq(176, 64) : BOOL
179 : eq(176, 67) : BOOL
180 : eq(176, 70) : BOOL
181 : eq(176, 73) : BOOL
182 : eq(176, 76) : BOOL
183 : eq(176, 79) : BOOL
184 : eq(176, 82) : BOOL
185 : eq(176, 85) : BOOL
186 : ite(185, 87, 88) : BV:8
187 : ite(184, 84, 186) : BV:8
188 : ite(183, 81, 187) : BV:8
189 : ite(182, 78, 188) : BV:8
190 : ite(181, 75, 189) : BV:8
191 : ite(180, 72, 190) : BV:8
192 : ite(179, 69, 191) : BV:8
193 : ite(178, 66, 192) : BV:8
194 : ite(177, 63, 193) : BV:8
195 : 1 { 0x1 +1.11e129 } : BV:32
196 : bvadd(195, 58, 155) : BV:32
197 : eq(196, 59) : BOOL
198 : eq(196, 64) : BOOL
199 : eq(196, 67) : BOOL
200 : eq(196, 70) : BOOL
201 : eq(196, 73) : BOOL
202 : eq(196, 76) : BOOL
203 : eq(196, 79) : BOOL
204 : eq(196, 82) : BOOL
205 : eq(196, 85) : BOOL
206 : ite(205, 87, 88) : BV:8
207 : ite(204, 84, 206) : BV:8
208 : ite(203, 81, 207) : BV:8
209 : ite(202, 78, 208) : BV:8
210 : ite(201, 75, 209) : BV:8
211 : ite(200, 72, 210) : BV:8
212 : ite(199, 69, 211) : BV:8
213 : ite(198, 66, 212) : BV:8
214 : ite(197, 63, 213) : BV:8
215 : bvadd(58, 155) : BV:32
216 : eq(215, 59) : BOOL
217 : eq(215, 64) : BOOL
218 : eq(215, 67) : BOOL
219 : eq(215, 70) : BOOL
220 : eq(215, 73) : BOOL
221 : eq(215, 76) : BOOL
222 : eq(215, 79) : BOOL
223 : eq(215, 82) : BOOL
224 : eq(215, 85) : BOOL
225 : ite(224, 87, 88) : BV:8
226 : ite(223, 84, 225) : BV:8
227 : ite(222, 81, 226) : BV:8
228 : ite(221, 78, 227) : BV:8
229 : ite(220, 75, 228) : BV:8
230 : ite(219, 72, 229) : BV:8
231 : ite(218, 69, 230) : BV:8
232 : ite(217, 66, 231) : BV:8
233 : ite(216, 63, 232) : BV:8
234 : bvconcat(174, 194, 214, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : lambda(52, 235) : FUNCTION[BV:32 -> BV:32]
237 : map(51, 236) : MAP[BV:32 -> BV:32]
238 : lambda(17, 237) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
239 : map(16, 238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
240 : sym_const(239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1564818559 ] -> 0, [ 1564818560; 1564818560 ] -> 4, [ 1564818561; 3279850495 ] -> 0, [ 3279850496; 3279850496 ] -> 172, [ 3279850497; 3279850497 ] -> 223, [ 3279850498; 3279850498 ] -> 111, [ 3279850499; 3279850499 ] -> 119, [ 3279850500; 3281562619 ] -> 0, [ 3281562620; 3281562620 ] -> 128, [ 3281562621; 3281562621 ] -> 60, [ 3281562622; 3281562622 ] -> 69, [ 3281562623; 3281562623 ] -> 93, [ 3281562624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 162293167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 162293168; 162293171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 162293172; 1972465219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1972465220; 1972465223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1972465224; 2013499699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2013499700; 2013499703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2013499704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 162293168 { 0x9ac65b0 +1.34685325e148 } : BV:32
=input.dst.llvm-%m
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2013499700 { 0x78039134 +1.2786874e113 } : BV:32
=input.dst.llvm-%n
1 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1972465220 { 0x75916e44 +1.13617753e108 } : BV:32
=input.dst.llvm-%x
1 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 1712124 { 0x1a1ffc +1.20410108e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 428031 { 0x687ff +1.5102527e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46135Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46136Var : BV:32
18 : eq(17, 2) : BOOL
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : 428032 { 0x68800 +1.5102539e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(19, 17) : BV:32
24 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
27 : eq(25, 26) : BOOL
28 : 119 { 0x77 } : BV:8
29 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : eq(25, 24) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
35 : eq(25, 34) : BOOL
36 : 69 { 0x45 } : BV:8
37 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
38 : eq(25, 37) : BOOL
39 : 172 { 0xac -84 } : BV:8
40 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
41 : eq(25, 40) : BOOL
42 : 93 { 0x5d } : BV:8
43 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
44 : eq(25, 43) : BOOL
45 : 60 { 0x3c } : BV:8
46 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
47 : eq(25, 46) : BOOL
48 : 111 { 0x6f } : BV:8
49 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
50 : eq(25, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 40) : BOOL
70 : eq(63, 43) : BOOL
71 : eq(63, 46) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : ite(69, 42, 75) : BV:8
77 : ite(68, 39, 76) : BV:8
78 : ite(67, 36, 77) : BV:8
79 : ite(66, 33, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : bvadd(82, 23, 24) : BV:32
84 : eq(83, 26) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 24) : BOOL
87 : eq(83, 34) : BOOL
88 : eq(83, 37) : BOOL
89 : eq(83, 40) : BOOL
90 : eq(83, 43) : BOOL
91 : eq(83, 46) : BOOL
92 : eq(83, 49) : BOOL
93 : ite(92, 51, 52) : BV:8
94 : ite(91, 48, 93) : BV:8
95 : ite(90, 45, 94) : BV:8
96 : ite(89, 42, 95) : BV:8
97 : ite(88, 39, 96) : BV:8
98 : ite(87, 36, 97) : BV:8
99 : ite(86, 33, 98) : BV:8
100 : ite(85, 31, 99) : BV:8
101 : ite(84, 28, 100) : BV:8
102 : bvadd(23, 24) : BV:32
103 : eq(102, 26) : BOOL
104 : eq(102, 29) : BOOL
105 : eq(102, 24) : BOOL
106 : eq(102, 34) : BOOL
107 : eq(102, 37) : BOOL
108 : eq(102, 40) : BOOL
109 : eq(102, 43) : BOOL
110 : eq(102, 46) : BOOL
111 : eq(102, 49) : BOOL
112 : ite(111, 51, 52) : BV:8
113 : ite(110, 48, 112) : BV:8
114 : ite(109, 45, 113) : BV:8
115 : ite(108, 42, 114) : BV:8
116 : ite(107, 39, 115) : BV:8
117 : ite(106, 36, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(104, 31, 118) : BV:8
120 : ite(103, 28, 119) : BV:8
121 : bvconcat(61, 81, 101, 120) : BV:32
122 : ite(21, 2, 121) : BV:32
123 : ite(18, 19, 122) : BV:32
124 : lambda(17, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(16, 124) : MAP[BV:32 -> BV:32]
126 : sym_const(125) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 428032 { 0x68800 +1.5102539e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda46117Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8388608 { 0x800000 +1.0e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46118Var : BV:32
20 : 428032 { 0x68800 +1.5102539e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvmul(23, 19) : BV:32
26 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
27 : bvadd(24, 25, 26) : BV:32
28 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
29 : eq(27, 28) : BOOL
30 : 119 { 0x77 } : BV:8
31 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
32 : eq(27, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : eq(27, 26) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
37 : eq(27, 36) : BOOL
38 : 69 { 0x45 } : BV:8
39 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
40 : eq(27, 39) : BOOL
41 : 172 { 0xac -84 } : BV:8
42 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
43 : eq(27, 42) : BOOL
44 : 93 { 0x5d } : BV:8
45 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
46 : eq(27, 45) : BOOL
47 : 60 { 0x3c } : BV:8
48 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
49 : eq(27, 48) : BOOL
50 : 111 { 0x6f } : BV:8
51 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
52 : eq(27, 51) : BOOL
53 : 223 { 0xdf -33 } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(32, 33, 61) : BV:8
63 : ite(29, 30, 62) : BV:8
64 : 2 { 0x2 +1.23e129 } : BV:32
65 : bvadd(64, 25, 26) : BV:32
66 : eq(65, 28) : BOOL
67 : eq(65, 31) : BOOL
68 : eq(65, 26) : BOOL
69 : eq(65, 36) : BOOL
70 : eq(65, 39) : BOOL
71 : eq(65, 42) : BOOL
72 : eq(65, 45) : BOOL
73 : eq(65, 48) : BOOL
74 : eq(65, 51) : BOOL
75 : ite(74, 53, 54) : BV:8
76 : ite(73, 50, 75) : BV:8
77 : ite(72, 47, 76) : BV:8
78 : ite(71, 44, 77) : BV:8
79 : ite(70, 41, 78) : BV:8
80 : ite(69, 38, 79) : BV:8
81 : ite(68, 35, 80) : BV:8
82 : ite(67, 33, 81) : BV:8
83 : ite(66, 30, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 25, 26) : BV:32
86 : eq(85, 28) : BOOL
87 : eq(85, 31) : BOOL
88 : eq(85, 26) : BOOL
89 : eq(85, 36) : BOOL
90 : eq(85, 39) : BOOL
91 : eq(85, 42) : BOOL
92 : eq(85, 45) : BOOL
93 : eq(85, 48) : BOOL
94 : eq(85, 51) : BOOL
95 : ite(94, 53, 54) : BV:8
96 : ite(93, 50, 95) : BV:8
97 : ite(92, 47, 96) : BV:8
98 : ite(91, 44, 97) : BV:8
99 : ite(90, 41, 98) : BV:8
100 : ite(89, 38, 99) : BV:8
101 : ite(88, 35, 100) : BV:8
102 : ite(87, 33, 101) : BV:8
103 : ite(86, 30, 102) : BV:8
104 : bvadd(25, 26) : BV:32
105 : eq(104, 28) : BOOL
106 : eq(104, 31) : BOOL
107 : eq(104, 26) : BOOL
108 : eq(104, 36) : BOOL
109 : eq(104, 39) : BOOL
110 : eq(104, 42) : BOOL
111 : eq(104, 45) : BOOL
112 : eq(104, 48) : BOOL
113 : eq(104, 51) : BOOL
114 : ite(113, 53, 54) : BV:8
115 : ite(112, 50, 114) : BV:8
116 : ite(111, 47, 115) : BV:8
117 : ite(110, 44, 116) : BV:8
118 : ite(109, 41, 117) : BV:8
119 : ite(108, 38, 118) : BV:8
120 : ite(107, 35, 119) : BV:8
121 : ite(106, 33, 120) : BV:8
122 : ite(105, 30, 121) : BV:8
123 : bvconcat(63, 83, 103, 122) : BV:32
124 : ite(22, 23, 123) : BV:32
125 : ite(21, 4, 124) : BV:32
126 : lambda(19, 125) : FUNCTION[BV:32 -> BV:32]
127 : map(18, 126) : MAP[BV:32 -> BV:32]
128 : sum(1, 2, 127) : SUM[UNIT,MAP[BV:32 -> BV:32]]
129 : sym_const(128) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 8388608 { 0x800000 +1.0e130 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(1, 1) : BOOL
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : 428032 { 0x68800 +1.5102539e129 } : BV:32
21 : eq(1, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(19, 1) : BV:32
24 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
27 : eq(25, 26) : BOOL
28 : 119 { 0x77 } : BV:8
29 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : eq(25, 24) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
35 : eq(25, 34) : BOOL
36 : 69 { 0x45 } : BV:8
37 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
38 : eq(25, 37) : BOOL
39 : 172 { 0xac -84 } : BV:8
40 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
41 : eq(25, 40) : BOOL
42 : 93 { 0x5d } : BV:8
43 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
44 : eq(25, 43) : BOOL
45 : 60 { 0x3c } : BV:8
46 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
47 : eq(25, 46) : BOOL
48 : 111 { 0x6f } : BV:8
49 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
50 : eq(25, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 40) : BOOL
70 : eq(63, 43) : BOOL
71 : eq(63, 46) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : ite(69, 42, 75) : BV:8
77 : ite(68, 39, 76) : BV:8
78 : ite(67, 36, 77) : BV:8
79 : ite(66, 33, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : bvadd(15, 23, 24) : BV:32
83 : eq(82, 26) : BOOL
84 : eq(82, 29) : BOOL
85 : eq(82, 24) : BOOL
86 : eq(82, 34) : BOOL
87 : eq(82, 37) : BOOL
88 : eq(82, 40) : BOOL
89 : eq(82, 43) : BOOL
90 : eq(82, 46) : BOOL
91 : eq(82, 49) : BOOL
92 : ite(91, 51, 52) : BV:8
93 : ite(90, 48, 92) : BV:8
94 : ite(89, 45, 93) : BV:8
95 : ite(88, 42, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(86, 36, 96) : BV:8
98 : ite(85, 33, 97) : BV:8
99 : ite(84, 31, 98) : BV:8
100 : ite(83, 28, 99) : BV:8
101 : bvadd(23, 24) : BV:32
102 : eq(101, 26) : BOOL
103 : eq(101, 29) : BOOL
104 : eq(101, 24) : BOOL
105 : eq(101, 34) : BOOL
106 : eq(101, 37) : BOOL
107 : eq(101, 40) : BOOL
108 : eq(101, 43) : BOOL
109 : eq(101, 46) : BOOL
110 : eq(101, 49) : BOOL
111 : ite(110, 51, 52) : BV:8
112 : ite(109, 48, 111) : BV:8
113 : ite(108, 45, 112) : BV:8
114 : ite(107, 42, 113) : BV:8
115 : ite(106, 39, 114) : BV:8
116 : ite(105, 36, 115) : BV:8
117 : ite(104, 33, 116) : BV:8
118 : ite(103, 31, 117) : BV:8
119 : ite(102, 28, 118) : BV:8
120 : bvconcat(61, 81, 100, 119) : BV:32
121 : ite(21, 1, 120) : BV:32
122 : ite(18, 19, 121) : BV:32
123 : sum(16, 17, 122) : SUM[UNIT,BV:32]
124 : sym_const(123) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1176864551 { 0x46258727 +1.29318702e13 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46140Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46141Var : BV:32
18 : 428032 { 0x68800 +1.5102539e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(21, 17) : BV:32
24 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
27 : eq(25, 26) : BOOL
28 : 119 { 0x77 } : BV:8
29 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : eq(25, 24) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
35 : eq(25, 34) : BOOL
36 : 69 { 0x45 } : BV:8
37 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
38 : eq(25, 37) : BOOL
39 : 172 { 0xac -84 } : BV:8
40 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
41 : eq(25, 40) : BOOL
42 : 93 { 0x5d } : BV:8
43 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
44 : eq(25, 43) : BOOL
45 : 60 { 0x3c } : BV:8
46 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
47 : eq(25, 46) : BOOL
48 : 111 { 0x6f } : BV:8
49 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
50 : eq(25, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 40) : BOOL
70 : eq(63, 43) : BOOL
71 : eq(63, 46) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : ite(69, 42, 75) : BV:8
77 : ite(68, 39, 76) : BV:8
78 : ite(67, 36, 77) : BV:8
79 : ite(66, 33, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : bvadd(82, 23, 24) : BV:32
84 : eq(83, 26) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 24) : BOOL
87 : eq(83, 34) : BOOL
88 : eq(83, 37) : BOOL
89 : eq(83, 40) : BOOL
90 : eq(83, 43) : BOOL
91 : eq(83, 46) : BOOL
92 : eq(83, 49) : BOOL
93 : ite(92, 51, 52) : BV:8
94 : ite(91, 48, 93) : BV:8
95 : ite(90, 45, 94) : BV:8
96 : ite(89, 42, 95) : BV:8
97 : ite(88, 39, 96) : BV:8
98 : ite(87, 36, 97) : BV:8
99 : ite(86, 33, 98) : BV:8
100 : ite(85, 31, 99) : BV:8
101 : ite(84, 28, 100) : BV:8
102 : bvadd(23, 24) : BV:32
103 : eq(102, 26) : BOOL
104 : eq(102, 29) : BOOL
105 : eq(102, 24) : BOOL
106 : eq(102, 34) : BOOL
107 : eq(102, 37) : BOOL
108 : eq(102, 40) : BOOL
109 : eq(102, 43) : BOOL
110 : eq(102, 46) : BOOL
111 : eq(102, 49) : BOOL
112 : ite(111, 51, 52) : BV:8
113 : ite(110, 48, 112) : BV:8
114 : ite(109, 45, 113) : BV:8
115 : ite(108, 42, 114) : BV:8
116 : ite(107, 39, 115) : BV:8
117 : ite(106, 36, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(104, 31, 118) : BV:8
120 : ite(103, 28, 119) : BV:8
121 : bvconcat(61, 81, 101, 120) : BV:32
122 : ite(20, 21, 121) : BV:32
123 : ite(19, 2, 122) : BV:32
124 : lambda(17, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(16, 124) : MAP[BV:32 -> BV:32]
126 : sym_const(125) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 428031 { 0x687ff +1.5102527e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 760583802 { 0x2d55967a +1.66865468e219 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 1712124 { 0x1a1ffc +1.20410108e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2013499700 { 0x78039134 +1.2786874e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2013499703 { 0x78039137 +1.2786910e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1972465220 { 0x75916e44 +1.13617753e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1972465223 { 0x75916e47 +1.13617789e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 162293168 { 0x9ac65b0 +1.34685325e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 162293171 { 0x9ac65b3 +1.34685361e148 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46000Var : BV:32
2 : Lambda46001Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 8388608 { 0x800000 +1.0e130 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 119 { 0x77 } : BV:8
56 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
57 : eq(53, 56) : BOOL
58 : 128 { 0x80 -128 } : BV:8
59 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
60 : eq(53, 59) : BOOL
61 : 4 { 0x4 } : BV:8
62 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
63 : eq(53, 62) : BOOL
64 : 69 { 0x45 } : BV:8
65 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
66 : eq(53, 65) : BOOL
67 : 172 { 0xac -84 } : BV:8
68 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
69 : eq(53, 68) : BOOL
70 : 93 { 0x5d } : BV:8
71 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
72 : eq(53, 71) : BOOL
73 : 60 { 0x3c } : BV:8
74 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
75 : eq(53, 74) : BOOL
76 : 111 { 0x6f } : BV:8
77 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
78 : eq(53, 77) : BOOL
79 : 223 { 0xdf -33 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : ite(60, 61, 86) : BV:8
88 : ite(57, 58, 87) : BV:8
89 : ite(54, 55, 88) : BV:8
90 : bvadd(74, 52) : BV:32
91 : eq(90, 51) : BOOL
92 : eq(90, 56) : BOOL
93 : eq(90, 59) : BOOL
94 : eq(90, 62) : BOOL
95 : eq(90, 65) : BOOL
96 : eq(90, 68) : BOOL
97 : eq(90, 71) : BOOL
98 : eq(90, 74) : BOOL
99 : eq(90, 77) : BOOL
100 : ite(99, 79, 80) : BV:8
101 : ite(98, 76, 100) : BV:8
102 : ite(97, 73, 101) : BV:8
103 : ite(96, 70, 102) : BV:8
104 : ite(95, 67, 103) : BV:8
105 : ite(94, 64, 104) : BV:8
106 : ite(93, 61, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 55, 107) : BV:8
109 : bvadd(77, 52) : BV:32
110 : eq(109, 51) : BOOL
111 : eq(109, 56) : BOOL
112 : eq(109, 59) : BOOL
113 : eq(109, 62) : BOOL
114 : eq(109, 65) : BOOL
115 : eq(109, 68) : BOOL
116 : eq(109, 71) : BOOL
117 : eq(109, 74) : BOOL
118 : eq(109, 77) : BOOL
119 : ite(118, 79, 80) : BV:8
120 : ite(117, 76, 119) : BV:8
121 : ite(116, 73, 120) : BV:8
122 : ite(115, 70, 121) : BV:8
123 : ite(114, 67, 122) : BV:8
124 : ite(113, 64, 123) : BV:8
125 : ite(112, 61, 124) : BV:8
126 : ite(111, 58, 125) : BV:8
127 : ite(110, 55, 126) : BV:8
128 : bvadd(65, 52) : BV:32
129 : eq(128, 51) : BOOL
130 : eq(128, 56) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : eq(128, 74) : BOOL
137 : eq(128, 77) : BOOL
138 : ite(137, 79, 80) : BV:8
139 : ite(136, 76, 138) : BV:8
140 : ite(135, 73, 139) : BV:8
141 : ite(134, 70, 140) : BV:8
142 : ite(133, 67, 141) : BV:8
143 : ite(132, 64, 142) : BV:8
144 : ite(131, 61, 143) : BV:8
145 : ite(130, 58, 144) : BV:8
146 : ite(129, 55, 145) : BV:8
147 : bvconcat(89, 108, 127, 146) : BV:32
148 : bvadd(48, 50, 147) : BV:32
149 : eq(148, 51) : BOOL
150 : eq(148, 56) : BOOL
151 : eq(148, 59) : BOOL
152 : eq(148, 62) : BOOL
153 : eq(148, 65) : BOOL
154 : eq(148, 68) : BOOL
155 : eq(148, 71) : BOOL
156 : eq(148, 74) : BOOL
157 : eq(148, 77) : BOOL
158 : ite(157, 79, 80) : BV:8
159 : ite(156, 76, 158) : BV:8
160 : ite(155, 73, 159) : BV:8
161 : ite(154, 70, 160) : BV:8
162 : ite(153, 67, 161) : BV:8
163 : ite(152, 64, 162) : BV:8
164 : ite(151, 61, 163) : BV:8
165 : ite(150, 58, 164) : BV:8
166 : ite(149, 55, 165) : BV:8
167 : 2 { 0x2 +1.23e129 } : BV:32
168 : bvadd(167, 50, 147) : BV:32
169 : eq(168, 51) : BOOL
170 : eq(168, 56) : BOOL
171 : eq(168, 59) : BOOL
172 : eq(168, 62) : BOOL
173 : eq(168, 65) : BOOL
174 : eq(168, 68) : BOOL
175 : eq(168, 71) : BOOL
176 : eq(168, 74) : BOOL
177 : eq(168, 77) : BOOL
178 : ite(177, 79, 80) : BV:8
179 : ite(176, 76, 178) : BV:8
180 : ite(175, 73, 179) : BV:8
181 : ite(174, 70, 180) : BV:8
182 : ite(173, 67, 181) : BV:8
183 : ite(172, 64, 182) : BV:8
184 : ite(171, 61, 183) : BV:8
185 : ite(170, 58, 184) : BV:8
186 : ite(169, 55, 185) : BV:8
187 : 1 { 0x1 +1.11e129 } : BV:32
188 : bvadd(187, 50, 147) : BV:32
189 : eq(188, 51) : BOOL
190 : eq(188, 56) : BOOL
191 : eq(188, 59) : BOOL
192 : eq(188, 62) : BOOL
193 : eq(188, 65) : BOOL
194 : eq(188, 68) : BOOL
195 : eq(188, 71) : BOOL
196 : eq(188, 74) : BOOL
197 : eq(188, 77) : BOOL
198 : ite(197, 79, 80) : BV:8
199 : ite(196, 76, 198) : BV:8
200 : ite(195, 73, 199) : BV:8
201 : ite(194, 70, 200) : BV:8
202 : ite(193, 67, 201) : BV:8
203 : ite(192, 64, 202) : BV:8
204 : ite(191, 61, 203) : BV:8
205 : ite(190, 58, 204) : BV:8
206 : ite(189, 55, 205) : BV:8
207 : bvadd(50, 147) : BV:32
208 : eq(207, 51) : BOOL
209 : eq(207, 56) : BOOL
210 : eq(207, 59) : BOOL
211 : eq(207, 62) : BOOL
212 : eq(207, 65) : BOOL
213 : eq(207, 68) : BOOL
214 : eq(207, 71) : BOOL
215 : eq(207, 74) : BOOL
216 : eq(207, 77) : BOOL
217 : ite(216, 79, 80) : BV:8
218 : ite(215, 76, 217) : BV:8
219 : ite(214, 73, 218) : BV:8
220 : ite(213, 70, 219) : BV:8
221 : ite(212, 67, 220) : BV:8
222 : ite(211, 64, 221) : BV:8
223 : ite(210, 61, 222) : BV:8
224 : ite(209, 58, 223) : BV:8
225 : ite(208, 55, 224) : BV:8
226 : bvconcat(166, 186, 206, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : ite(47, 226, 227) : BV:32
229 : ite(6, 3, 228) : BV:32
230 : lambda(1, 2, 229) : FUNCTION[BV:32,BV:32 -> BV:32]
231 : sym_const(230) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46005Var : BV:32
2 : Lambda46006Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8388609 { 0x800001 +1.11e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 8388608 { 0x800000 +1.0e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 724213 ] -> true, [ 724214; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 724213 ] -> true, [ 724214; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46014Var : BV:32
2 : Lambda46015Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8388609 { 0x800001 +1.11e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 8388608 { 0x800000 +1.0e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46010Var : BV:32
2 : Lambda46011Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 119 { 0x77 } : BV:8
15 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
16 : eq(12, 15) : BOOL
17 : 128 { 0x80 -128 } : BV:8
18 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
19 : eq(12, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
22 : eq(12, 21) : BOOL
23 : 69 { 0x45 } : BV:8
24 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
25 : eq(12, 24) : BOOL
26 : 172 { 0xac -84 } : BV:8
27 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
28 : eq(12, 27) : BOOL
29 : 93 { 0x5d } : BV:8
30 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
31 : eq(12, 30) : BOOL
32 : 60 { 0x3c } : BV:8
33 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
34 : eq(12, 33) : BOOL
35 : 111 { 0x6f } : BV:8
36 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
37 : eq(12, 36) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46021Var : BV:32
2 : 428032 { 0x68800 +1.5102539e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvmul(6, 1) : BV:32
9 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
10 : bvadd(7, 8, 9) : BV:32
11 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
12 : eq(10, 11) : BOOL
13 : 119 { 0x77 } : BV:8
14 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
15 : eq(10, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : eq(10, 9) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
20 : eq(10, 19) : BOOL
21 : 69 { 0x45 } : BV:8
22 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
23 : eq(10, 22) : BOOL
24 : 172 { 0xac -84 } : BV:8
25 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
26 : eq(10, 25) : BOOL
27 : 93 { 0x5d } : BV:8
28 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
29 : eq(10, 28) : BOOL
30 : 60 { 0x3c } : BV:8
31 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
32 : eq(10, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
35 : eq(10, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 9) : BOOL
52 : eq(48, 19) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 25) : BOOL
55 : eq(48, 28) : BOOL
56 : eq(48, 31) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 30, 59) : BV:8
61 : ite(54, 27, 60) : BV:8
62 : ite(53, 24, 61) : BV:8
63 : ite(52, 21, 62) : BV:8
64 : ite(51, 18, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 9) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 22) : BOOL
74 : eq(68, 25) : BOOL
75 : eq(68, 28) : BOOL
76 : eq(68, 31) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 33, 78) : BV:8
80 : ite(75, 30, 79) : BV:8
81 : ite(74, 27, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(72, 21, 82) : BV:8
84 : ite(71, 18, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 9) : BOOL
91 : eq(87, 19) : BOOL
92 : eq(87, 22) : BOOL
93 : eq(87, 25) : BOOL
94 : eq(87, 28) : BOOL
95 : eq(87, 31) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 33, 97) : BV:8
99 : ite(94, 30, 98) : BV:8
100 : ite(93, 27, 99) : BV:8
101 : ite(92, 24, 100) : BV:8
102 : ite(91, 21, 101) : BV:8
103 : ite(90, 18, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(5, 6, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46025Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 428032 { 0x68800 +1.5102539e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvmul(4, 1) : BV:32
9 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
10 : bvadd(7, 8, 9) : BV:32
11 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
12 : eq(10, 11) : BOOL
13 : 119 { 0x77 } : BV:8
14 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
15 : eq(10, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : eq(10, 9) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
20 : eq(10, 19) : BOOL
21 : 69 { 0x45 } : BV:8
22 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
23 : eq(10, 22) : BOOL
24 : 172 { 0xac -84 } : BV:8
25 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
26 : eq(10, 25) : BOOL
27 : 93 { 0x5d } : BV:8
28 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
29 : eq(10, 28) : BOOL
30 : 60 { 0x3c } : BV:8
31 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
32 : eq(10, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
35 : eq(10, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 9) : BOOL
52 : eq(48, 19) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 25) : BOOL
55 : eq(48, 28) : BOOL
56 : eq(48, 31) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 30, 59) : BV:8
61 : ite(54, 27, 60) : BV:8
62 : ite(53, 24, 61) : BV:8
63 : ite(52, 21, 62) : BV:8
64 : ite(51, 18, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 9) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 22) : BOOL
74 : eq(68, 25) : BOOL
75 : eq(68, 28) : BOOL
76 : eq(68, 31) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 33, 78) : BV:8
80 : ite(75, 30, 79) : BV:8
81 : ite(74, 27, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(72, 21, 82) : BV:8
84 : ite(71, 18, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 9) : BOOL
91 : eq(87, 19) : BOOL
92 : eq(87, 22) : BOOL
93 : eq(87, 25) : BOOL
94 : eq(87, 28) : BOOL
95 : eq(87, 31) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 33, 97) : BV:8
99 : ite(94, 30, 98) : BV:8
100 : ite(93, 27, 99) : BV:8
101 : ite(92, 24, 100) : BV:8
102 : ite(91, 21, 101) : BV:8
103 : ite(90, 18, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(6, 2, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46029Var : BV:32
2 : 428032 { 0x68800 +1.5102539e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvmul(6, 1) : BV:32
9 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
10 : bvadd(7, 8, 9) : BV:32
11 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
12 : eq(10, 11) : BOOL
13 : 119 { 0x77 } : BV:8
14 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
15 : eq(10, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : eq(10, 9) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
20 : eq(10, 19) : BOOL
21 : 69 { 0x45 } : BV:8
22 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
23 : eq(10, 22) : BOOL
24 : 172 { 0xac -84 } : BV:8
25 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
26 : eq(10, 25) : BOOL
27 : 93 { 0x5d } : BV:8
28 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
29 : eq(10, 28) : BOOL
30 : 60 { 0x3c } : BV:8
31 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
32 : eq(10, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
35 : eq(10, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 9) : BOOL
52 : eq(48, 19) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 25) : BOOL
55 : eq(48, 28) : BOOL
56 : eq(48, 31) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 30, 59) : BV:8
61 : ite(54, 27, 60) : BV:8
62 : ite(53, 24, 61) : BV:8
63 : ite(52, 21, 62) : BV:8
64 : ite(51, 18, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 9) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 22) : BOOL
74 : eq(68, 25) : BOOL
75 : eq(68, 28) : BOOL
76 : eq(68, 31) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 33, 78) : BV:8
80 : ite(75, 30, 79) : BV:8
81 : ite(74, 27, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(72, 21, 82) : BV:8
84 : ite(71, 18, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 9) : BOOL
91 : eq(87, 19) : BOOL
92 : eq(87, 22) : BOOL
93 : eq(87, 25) : BOOL
94 : eq(87, 28) : BOOL
95 : eq(87, 31) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 33, 97) : BV:8
99 : ite(94, 30, 98) : BV:8
100 : ite(93, 27, 99) : BV:8
101 : ite(92, 24, 100) : BV:8
102 : ite(91, 21, 101) : BV:8
103 : ite(90, 18, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(5, 6, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2822398015
=counter_example_end
=global nodece 49 num_edges_traversed 1
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3.ce4107.num_edges_traversed2
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3.ce4107 2143552f37778d08926998f9e80d5df
=input.spec-%var-x-1
1 : Lambda46108Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46109Var : BV:32
18 : Lambda46110Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8388609 { 0x800001 +1.11e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 8388608 { 0x800000 +1.0e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46111Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 119 { 0x77 } : BV:8
83 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
84 : eq(80, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
87 : eq(80, 86) : BOOL
88 : 4 { 0x4 } : BV:8
89 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
90 : eq(80, 89) : BOOL
91 : 69 { 0x45 } : BV:8
92 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
93 : eq(80, 92) : BOOL
94 : 172 { 0xac -84 } : BV:8
95 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
96 : eq(80, 95) : BOOL
97 : 93 { 0x5d } : BV:8
98 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
99 : eq(80, 98) : BOOL
100 : 60 { 0x3c } : BV:8
101 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
102 : eq(80, 101) : BOOL
103 : 111 { 0x6f } : BV:8
104 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
105 : eq(80, 104) : BOOL
106 : 223 { 0xdf -33 } : BV:8
107 : 0 { 0x0 } : BV:8
108 : ite(105, 106, 107) : BV:8
109 : ite(102, 103, 108) : BV:8
110 : ite(99, 100, 109) : BV:8
111 : ite(96, 97, 110) : BV:8
112 : ite(93, 94, 111) : BV:8
113 : ite(90, 91, 112) : BV:8
114 : ite(87, 88, 113) : BV:8
115 : ite(84, 85, 114) : BV:8
116 : ite(81, 82, 115) : BV:8
117 : bvadd(101, 79) : BV:32
118 : eq(117, 78) : BOOL
119 : eq(117, 83) : BOOL
120 : eq(117, 86) : BOOL
121 : eq(117, 89) : BOOL
122 : eq(117, 92) : BOOL
123 : eq(117, 95) : BOOL
124 : eq(117, 98) : BOOL
125 : eq(117, 101) : BOOL
126 : eq(117, 104) : BOOL
127 : ite(126, 106, 107) : BV:8
128 : ite(125, 103, 127) : BV:8
129 : ite(124, 100, 128) : BV:8
130 : ite(123, 97, 129) : BV:8
131 : ite(122, 94, 130) : BV:8
132 : ite(121, 91, 131) : BV:8
133 : ite(120, 88, 132) : BV:8
134 : ite(119, 85, 133) : BV:8
135 : ite(118, 82, 134) : BV:8
136 : bvadd(104, 79) : BV:32
137 : eq(136, 78) : BOOL
138 : eq(136, 83) : BOOL
139 : eq(136, 86) : BOOL
140 : eq(136, 89) : BOOL
141 : eq(136, 92) : BOOL
142 : eq(136, 95) : BOOL
143 : eq(136, 98) : BOOL
144 : eq(136, 101) : BOOL
145 : eq(136, 104) : BOOL
146 : ite(145, 106, 107) : BV:8
147 : ite(144, 103, 146) : BV:8
148 : ite(143, 100, 147) : BV:8
149 : ite(142, 97, 148) : BV:8
150 : ite(141, 94, 149) : BV:8
151 : ite(140, 91, 150) : BV:8
152 : ite(139, 88, 151) : BV:8
153 : ite(138, 85, 152) : BV:8
154 : ite(137, 82, 153) : BV:8
155 : bvadd(92, 79) : BV:32
156 : eq(155, 78) : BOOL
157 : eq(155, 83) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : eq(155, 101) : BOOL
164 : eq(155, 104) : BOOL
165 : ite(164, 106, 107) : BV:8
166 : ite(163, 103, 165) : BV:8
167 : ite(162, 100, 166) : BV:8
168 : ite(161, 97, 167) : BV:8
169 : ite(160, 94, 168) : BV:8
170 : ite(159, 91, 169) : BV:8
171 : ite(158, 88, 170) : BV:8
172 : ite(157, 85, 171) : BV:8
173 : ite(156, 82, 172) : BV:8
174 : bvconcat(116, 135, 154, 173) : BV:32
175 : bvadd(75, 77, 174) : BV:32
176 : eq(175, 78) : BOOL
177 : eq(175, 83) : BOOL
178 : eq(175, 86) : BOOL
179 : eq(175, 89) : BOOL
180 : eq(175, 92) : BOOL
181 : eq(175, 95) : BOOL
182 : eq(175, 98) : BOOL
183 : eq(175, 101) : BOOL
184 : eq(175, 104) : BOOL
185 : ite(184, 106, 107) : BV:8
186 : ite(183, 103, 185) : BV:8
187 : ite(182, 100, 186) : BV:8
188 : ite(181, 97, 187) : BV:8
189 : ite(180, 94, 188) : BV:8
190 : ite(179, 91, 189) : BV:8
191 : ite(178, 88, 190) : BV:8
192 : ite(177, 85, 191) : BV:8
193 : ite(176, 82, 192) : BV:8
194 : 2 { 0x2 +1.23e129 } : BV:32
195 : bvadd(194, 77, 174) : BV:32
196 : eq(195, 78) : BOOL
197 : eq(195, 83) : BOOL
198 : eq(195, 86) : BOOL
199 : eq(195, 89) : BOOL
200 : eq(195, 92) : BOOL
201 : eq(195, 95) : BOOL
202 : eq(195, 98) : BOOL
203 : eq(195, 101) : BOOL
204 : eq(195, 104) : BOOL
205 : ite(204, 106, 107) : BV:8
206 : ite(203, 103, 205) : BV:8
207 : ite(202, 100, 206) : BV:8
208 : ite(201, 97, 207) : BV:8
209 : ite(200, 94, 208) : BV:8
210 : ite(199, 91, 209) : BV:8
211 : ite(198, 88, 210) : BV:8
212 : ite(197, 85, 211) : BV:8
213 : ite(196, 82, 212) : BV:8
214 : 1 { 0x1 +1.11e129 } : BV:32
215 : bvadd(214, 77, 174) : BV:32
216 : eq(215, 78) : BOOL
217 : eq(215, 83) : BOOL
218 : eq(215, 86) : BOOL
219 : eq(215, 89) : BOOL
220 : eq(215, 92) : BOOL
221 : eq(215, 95) : BOOL
222 : eq(215, 98) : BOOL
223 : eq(215, 101) : BOOL
224 : eq(215, 104) : BOOL
225 : ite(224, 106, 107) : BV:8
226 : ite(223, 103, 225) : BV:8
227 : ite(222, 100, 226) : BV:8
228 : ite(221, 97, 227) : BV:8
229 : ite(220, 94, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 88, 230) : BV:8
232 : ite(217, 85, 231) : BV:8
233 : ite(216, 82, 232) : BV:8
234 : bvadd(77, 174) : BV:32
235 : eq(234, 78) : BOOL
236 : eq(234, 83) : BOOL
237 : eq(234, 86) : BOOL
238 : eq(234, 89) : BOOL
239 : eq(234, 92) : BOOL
240 : eq(234, 95) : BOOL
241 : eq(234, 98) : BOOL
242 : eq(234, 101) : BOOL
243 : eq(234, 104) : BOOL
244 : ite(243, 106, 107) : BV:8
245 : ite(242, 103, 244) : BV:8
246 : ite(241, 100, 245) : BV:8
247 : ite(240, 97, 246) : BV:8
248 : ite(239, 94, 247) : BV:8
249 : ite(238, 91, 248) : BV:8
250 : ite(237, 88, 249) : BV:8
251 : ite(236, 85, 250) : BV:8
252 : ite(235, 82, 251) : BV:8
253 : bvconcat(193, 213, 233, 252) : BV:32
254 : ite(55, 2, 253) : BV:32
255 : ite(74, 253, 254) : BV:32
256 : ite(55, 2, 255) : BV:32
257 : lambda(52, 256) : FUNCTION[BV:32 -> BV:32]
258 : map(51, 257) : MAP[BV:32 -> BV:32]
259 : lambda(17, 258) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
260 : map(16, 259) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
261 : sym_const(260) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46128Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46129Var : BV:32
18 : Lambda46130Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8388609 { 0x800001 +1.11e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 8388608 { 0x800000 +1.0e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46131Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 119 { 0x77 } : BV:8
64 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
65 : eq(61, 64) : BOOL
66 : 128 { 0x80 -128 } : BV:8
67 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
68 : eq(61, 67) : BOOL
69 : 4 { 0x4 } : BV:8
70 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
71 : eq(61, 70) : BOOL
72 : 69 { 0x45 } : BV:8
73 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
74 : eq(61, 73) : BOOL
75 : 172 { 0xac -84 } : BV:8
76 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
77 : eq(61, 76) : BOOL
78 : 93 { 0x5d } : BV:8
79 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
80 : eq(61, 79) : BOOL
81 : 60 { 0x3c } : BV:8
82 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
83 : eq(61, 82) : BOOL
84 : 111 { 0x6f } : BV:8
85 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
86 : eq(61, 85) : BOOL
87 : 223 { 0xdf -33 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(77, 78, 91) : BV:8
93 : ite(74, 75, 92) : BV:8
94 : ite(71, 72, 93) : BV:8
95 : ite(68, 69, 94) : BV:8
96 : ite(65, 66, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(82, 60) : BV:32
99 : eq(98, 59) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 67) : BOOL
102 : eq(98, 70) : BOOL
103 : eq(98, 73) : BOOL
104 : eq(98, 76) : BOOL
105 : eq(98, 79) : BOOL
106 : eq(98, 82) : BOOL
107 : eq(98, 85) : BOOL
108 : ite(107, 87, 88) : BV:8
109 : ite(106, 84, 108) : BV:8
110 : ite(105, 81, 109) : BV:8
111 : ite(104, 78, 110) : BV:8
112 : ite(103, 75, 111) : BV:8
113 : ite(102, 72, 112) : BV:8
114 : ite(101, 69, 113) : BV:8
115 : ite(100, 66, 114) : BV:8
116 : ite(99, 63, 115) : BV:8
117 : bvadd(85, 60) : BV:32
118 : eq(117, 59) : BOOL
119 : eq(117, 64) : BOOL
120 : eq(117, 67) : BOOL
121 : eq(117, 70) : BOOL
122 : eq(117, 73) : BOOL
123 : eq(117, 76) : BOOL
124 : eq(117, 79) : BOOL
125 : eq(117, 82) : BOOL
126 : eq(117, 85) : BOOL
127 : ite(126, 87, 88) : BV:8
128 : ite(125, 84, 127) : BV:8
129 : ite(124, 81, 128) : BV:8
130 : ite(123, 78, 129) : BV:8
131 : ite(122, 75, 130) : BV:8
132 : ite(121, 72, 131) : BV:8
133 : ite(120, 69, 132) : BV:8
134 : ite(119, 66, 133) : BV:8
135 : ite(118, 63, 134) : BV:8
136 : bvadd(73, 60) : BV:32
137 : eq(136, 59) : BOOL
138 : eq(136, 64) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : eq(136, 82) : BOOL
145 : eq(136, 85) : BOOL
146 : ite(145, 87, 88) : BV:8
147 : ite(144, 84, 146) : BV:8
148 : ite(143, 81, 147) : BV:8
149 : ite(142, 78, 148) : BV:8
150 : ite(141, 75, 149) : BV:8
151 : ite(140, 72, 150) : BV:8
152 : ite(139, 69, 151) : BV:8
153 : ite(138, 66, 152) : BV:8
154 : ite(137, 63, 153) : BV:8
155 : bvconcat(97, 116, 135, 154) : BV:32
156 : bvadd(56, 58, 155) : BV:32
157 : eq(156, 59) : BOOL
158 : eq(156, 64) : BOOL
159 : eq(156, 67) : BOOL
160 : eq(156, 70) : BOOL
161 : eq(156, 73) : BOOL
162 : eq(156, 76) : BOOL
163 : eq(156, 79) : BOOL
164 : eq(156, 82) : BOOL
165 : eq(156, 85) : BOOL
166 : ite(165, 87, 88) : BV:8
167 : ite(164, 84, 166) : BV:8
168 : ite(163, 81, 167) : BV:8
169 : ite(162, 78, 168) : BV:8
170 : ite(161, 75, 169) : BV:8
171 : ite(160, 72, 170) : BV:8
172 : ite(159, 69, 171) : BV:8
173 : ite(158, 66, 172) : BV:8
174 : ite(157, 63, 173) : BV:8
175 : 2 { 0x2 +1.23e129 } : BV:32
176 : bvadd(175, 58, 155) : BV:32
177 : eq(176, 59) : BOOL
178 : eq(176, 64) : BOOL
179 : eq(176, 67) : BOOL
180 : eq(176, 70) : BOOL
181 : eq(176, 73) : BOOL
182 : eq(176, 76) : BOOL
183 : eq(176, 79) : BOOL
184 : eq(176, 82) : BOOL
185 : eq(176, 85) : BOOL
186 : ite(185, 87, 88) : BV:8
187 : ite(184, 84, 186) : BV:8
188 : ite(183, 81, 187) : BV:8
189 : ite(182, 78, 188) : BV:8
190 : ite(181, 75, 189) : BV:8
191 : ite(180, 72, 190) : BV:8
192 : ite(179, 69, 191) : BV:8
193 : ite(178, 66, 192) : BV:8
194 : ite(177, 63, 193) : BV:8
195 : 1 { 0x1 +1.11e129 } : BV:32
196 : bvadd(195, 58, 155) : BV:32
197 : eq(196, 59) : BOOL
198 : eq(196, 64) : BOOL
199 : eq(196, 67) : BOOL
200 : eq(196, 70) : BOOL
201 : eq(196, 73) : BOOL
202 : eq(196, 76) : BOOL
203 : eq(196, 79) : BOOL
204 : eq(196, 82) : BOOL
205 : eq(196, 85) : BOOL
206 : ite(205, 87, 88) : BV:8
207 : ite(204, 84, 206) : BV:8
208 : ite(203, 81, 207) : BV:8
209 : ite(202, 78, 208) : BV:8
210 : ite(201, 75, 209) : BV:8
211 : ite(200, 72, 210) : BV:8
212 : ite(199, 69, 211) : BV:8
213 : ite(198, 66, 212) : BV:8
214 : ite(197, 63, 213) : BV:8
215 : bvadd(58, 155) : BV:32
216 : eq(215, 59) : BOOL
217 : eq(215, 64) : BOOL
218 : eq(215, 67) : BOOL
219 : eq(215, 70) : BOOL
220 : eq(215, 73) : BOOL
221 : eq(215, 76) : BOOL
222 : eq(215, 79) : BOOL
223 : eq(215, 82) : BOOL
224 : eq(215, 85) : BOOL
225 : ite(224, 87, 88) : BV:8
226 : ite(223, 84, 225) : BV:8
227 : ite(222, 81, 226) : BV:8
228 : ite(221, 78, 227) : BV:8
229 : ite(220, 75, 228) : BV:8
230 : ite(219, 72, 229) : BV:8
231 : ite(218, 69, 230) : BV:8
232 : ite(217, 66, 231) : BV:8
233 : ite(216, 63, 232) : BV:8
234 : bvconcat(174, 194, 214, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : lambda(52, 235) : FUNCTION[BV:32 -> BV:32]
237 : map(51, 236) : MAP[BV:32 -> BV:32]
238 : lambda(17, 237) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
239 : map(16, 238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
240 : sym_const(239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1564818559 ] -> 0, [ 1564818560; 1564818560 ] -> 4, [ 1564818561; 3279850495 ] -> 0, [ 3279850496; 3279850496 ] -> 172, [ 3279850497; 3279850497 ] -> 223, [ 3279850498; 3279850498 ] -> 111, [ 3279850499; 3279850499 ] -> 119, [ 3279850500; 3281562619 ] -> 0, [ 3281562620; 3281562620 ] -> 128, [ 3281562621; 3281562621 ] -> 60, [ 3281562622; 3281562622 ] -> 69, [ 3281562623; 3281562623 ] -> 93, [ 3281562624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 162293167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 162293168; 162293171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 162293172; 1972465219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1972465220; 1972465223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1972465224; 2013499699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2013499700; 2013499703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2013499704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 162293168 { 0x9ac65b0 +1.34685325e148 } : BV:32
=input.dst.llvm-%m
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2013499700 { 0x78039134 +1.2786874e113 } : BV:32
=input.dst.llvm-%n
1 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1972465220 { 0x75916e44 +1.13617753e108 } : BV:32
=input.dst.llvm-%x
1 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 428031 { 0x687ff +1.5102527e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46135Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46136Var : BV:32
18 : eq(17, 2) : BOOL
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : 428032 { 0x68800 +1.5102539e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(19, 17) : BV:32
24 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
27 : eq(25, 26) : BOOL
28 : 119 { 0x77 } : BV:8
29 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : eq(25, 24) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
35 : eq(25, 34) : BOOL
36 : 69 { 0x45 } : BV:8
37 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
38 : eq(25, 37) : BOOL
39 : 172 { 0xac -84 } : BV:8
40 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
41 : eq(25, 40) : BOOL
42 : 93 { 0x5d } : BV:8
43 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
44 : eq(25, 43) : BOOL
45 : 60 { 0x3c } : BV:8
46 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
47 : eq(25, 46) : BOOL
48 : 111 { 0x6f } : BV:8
49 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
50 : eq(25, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 40) : BOOL
70 : eq(63, 43) : BOOL
71 : eq(63, 46) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : ite(69, 42, 75) : BV:8
77 : ite(68, 39, 76) : BV:8
78 : ite(67, 36, 77) : BV:8
79 : ite(66, 33, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : bvadd(82, 23, 24) : BV:32
84 : eq(83, 26) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 24) : BOOL
87 : eq(83, 34) : BOOL
88 : eq(83, 37) : BOOL
89 : eq(83, 40) : BOOL
90 : eq(83, 43) : BOOL
91 : eq(83, 46) : BOOL
92 : eq(83, 49) : BOOL
93 : ite(92, 51, 52) : BV:8
94 : ite(91, 48, 93) : BV:8
95 : ite(90, 45, 94) : BV:8
96 : ite(89, 42, 95) : BV:8
97 : ite(88, 39, 96) : BV:8
98 : ite(87, 36, 97) : BV:8
99 : ite(86, 33, 98) : BV:8
100 : ite(85, 31, 99) : BV:8
101 : ite(84, 28, 100) : BV:8
102 : bvadd(23, 24) : BV:32
103 : eq(102, 26) : BOOL
104 : eq(102, 29) : BOOL
105 : eq(102, 24) : BOOL
106 : eq(102, 34) : BOOL
107 : eq(102, 37) : BOOL
108 : eq(102, 40) : BOOL
109 : eq(102, 43) : BOOL
110 : eq(102, 46) : BOOL
111 : eq(102, 49) : BOOL
112 : ite(111, 51, 52) : BV:8
113 : ite(110, 48, 112) : BV:8
114 : ite(109, 45, 113) : BV:8
115 : ite(108, 42, 114) : BV:8
116 : ite(107, 39, 115) : BV:8
117 : ite(106, 36, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(104, 31, 118) : BV:8
120 : ite(103, 28, 119) : BV:8
121 : bvconcat(61, 81, 101, 120) : BV:32
122 : ite(21, 2, 121) : BV:32
123 : ite(18, 19, 122) : BV:32
124 : lambda(17, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(16, 124) : MAP[BV:32 -> BV:32]
126 : sym_const(125) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 428032 { 0x68800 +1.5102539e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda46117Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8388608 { 0x800000 +1.0e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46118Var : BV:32
20 : 428032 { 0x68800 +1.5102539e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvmul(23, 19) : BV:32
26 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
27 : bvadd(24, 25, 26) : BV:32
28 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
29 : eq(27, 28) : BOOL
30 : 119 { 0x77 } : BV:8
31 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
32 : eq(27, 31) : BOOL
33 : 128 { 0x80 -128 } : BV:8
34 : eq(27, 26) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
37 : eq(27, 36) : BOOL
38 : 69 { 0x45 } : BV:8
39 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
40 : eq(27, 39) : BOOL
41 : 172 { 0xac -84 } : BV:8
42 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
43 : eq(27, 42) : BOOL
44 : 93 { 0x5d } : BV:8
45 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
46 : eq(27, 45) : BOOL
47 : 60 { 0x3c } : BV:8
48 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
49 : eq(27, 48) : BOOL
50 : 111 { 0x6f } : BV:8
51 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
52 : eq(27, 51) : BOOL
53 : 223 { 0xdf -33 } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(32, 33, 61) : BV:8
63 : ite(29, 30, 62) : BV:8
64 : 2 { 0x2 +1.23e129 } : BV:32
65 : bvadd(64, 25, 26) : BV:32
66 : eq(65, 28) : BOOL
67 : eq(65, 31) : BOOL
68 : eq(65, 26) : BOOL
69 : eq(65, 36) : BOOL
70 : eq(65, 39) : BOOL
71 : eq(65, 42) : BOOL
72 : eq(65, 45) : BOOL
73 : eq(65, 48) : BOOL
74 : eq(65, 51) : BOOL
75 : ite(74, 53, 54) : BV:8
76 : ite(73, 50, 75) : BV:8
77 : ite(72, 47, 76) : BV:8
78 : ite(71, 44, 77) : BV:8
79 : ite(70, 41, 78) : BV:8
80 : ite(69, 38, 79) : BV:8
81 : ite(68, 35, 80) : BV:8
82 : ite(67, 33, 81) : BV:8
83 : ite(66, 30, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 25, 26) : BV:32
86 : eq(85, 28) : BOOL
87 : eq(85, 31) : BOOL
88 : eq(85, 26) : BOOL
89 : eq(85, 36) : BOOL
90 : eq(85, 39) : BOOL
91 : eq(85, 42) : BOOL
92 : eq(85, 45) : BOOL
93 : eq(85, 48) : BOOL
94 : eq(85, 51) : BOOL
95 : ite(94, 53, 54) : BV:8
96 : ite(93, 50, 95) : BV:8
97 : ite(92, 47, 96) : BV:8
98 : ite(91, 44, 97) : BV:8
99 : ite(90, 41, 98) : BV:8
100 : ite(89, 38, 99) : BV:8
101 : ite(88, 35, 100) : BV:8
102 : ite(87, 33, 101) : BV:8
103 : ite(86, 30, 102) : BV:8
104 : bvadd(25, 26) : BV:32
105 : eq(104, 28) : BOOL
106 : eq(104, 31) : BOOL
107 : eq(104, 26) : BOOL
108 : eq(104, 36) : BOOL
109 : eq(104, 39) : BOOL
110 : eq(104, 42) : BOOL
111 : eq(104, 45) : BOOL
112 : eq(104, 48) : BOOL
113 : eq(104, 51) : BOOL
114 : ite(113, 53, 54) : BV:8
115 : ite(112, 50, 114) : BV:8
116 : ite(111, 47, 115) : BV:8
117 : ite(110, 44, 116) : BV:8
118 : ite(109, 41, 117) : BV:8
119 : ite(108, 38, 118) : BV:8
120 : ite(107, 35, 119) : BV:8
121 : ite(106, 33, 120) : BV:8
122 : ite(105, 30, 121) : BV:8
123 : bvconcat(63, 83, 103, 122) : BV:32
124 : ite(22, 23, 123) : BV:32
125 : ite(21, 4, 124) : BV:32
126 : lambda(19, 125) : FUNCTION[BV:32 -> BV:32]
127 : map(18, 126) : MAP[BV:32 -> BV:32]
128 : sum(1, 2, 127) : SUM[UNIT,MAP[BV:32 -> BV:32]]
129 : sym_const(128) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1176864552 { 0x46258728 +1.29318714e13 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46140Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46141Var : BV:32
18 : 428032 { 0x68800 +1.5102539e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(21, 17) : BV:32
24 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
27 : eq(25, 26) : BOOL
28 : 119 { 0x77 } : BV:8
29 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
30 : eq(25, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : eq(25, 24) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
35 : eq(25, 34) : BOOL
36 : 69 { 0x45 } : BV:8
37 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
38 : eq(25, 37) : BOOL
39 : 172 { 0xac -84 } : BV:8
40 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
41 : eq(25, 40) : BOOL
42 : 93 { 0x5d } : BV:8
43 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
44 : eq(25, 43) : BOOL
45 : 60 { 0x3c } : BV:8
46 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
47 : eq(25, 46) : BOOL
48 : 111 { 0x6f } : BV:8
49 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
50 : eq(25, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(30, 31, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 23, 24) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 40) : BOOL
70 : eq(63, 43) : BOOL
71 : eq(63, 46) : BOOL
72 : eq(63, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : ite(69, 42, 75) : BV:8
77 : ite(68, 39, 76) : BV:8
78 : ite(67, 36, 77) : BV:8
79 : ite(66, 33, 78) : BV:8
80 : ite(65, 31, 79) : BV:8
81 : ite(64, 28, 80) : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : bvadd(82, 23, 24) : BV:32
84 : eq(83, 26) : BOOL
85 : eq(83, 29) : BOOL
86 : eq(83, 24) : BOOL
87 : eq(83, 34) : BOOL
88 : eq(83, 37) : BOOL
89 : eq(83, 40) : BOOL
90 : eq(83, 43) : BOOL
91 : eq(83, 46) : BOOL
92 : eq(83, 49) : BOOL
93 : ite(92, 51, 52) : BV:8
94 : ite(91, 48, 93) : BV:8
95 : ite(90, 45, 94) : BV:8
96 : ite(89, 42, 95) : BV:8
97 : ite(88, 39, 96) : BV:8
98 : ite(87, 36, 97) : BV:8
99 : ite(86, 33, 98) : BV:8
100 : ite(85, 31, 99) : BV:8
101 : ite(84, 28, 100) : BV:8
102 : bvadd(23, 24) : BV:32
103 : eq(102, 26) : BOOL
104 : eq(102, 29) : BOOL
105 : eq(102, 24) : BOOL
106 : eq(102, 34) : BOOL
107 : eq(102, 37) : BOOL
108 : eq(102, 40) : BOOL
109 : eq(102, 43) : BOOL
110 : eq(102, 46) : BOOL
111 : eq(102, 49) : BOOL
112 : ite(111, 51, 52) : BV:8
113 : ite(110, 48, 112) : BV:8
114 : ite(109, 45, 113) : BV:8
115 : ite(108, 42, 114) : BV:8
116 : ite(107, 39, 115) : BV:8
117 : ite(106, 36, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(104, 31, 118) : BV:8
120 : ite(103, 28, 119) : BV:8
121 : bvconcat(61, 81, 101, 120) : BV:32
122 : ite(20, 21, 121) : BV:32
123 : ite(19, 2, 122) : BV:32
124 : lambda(17, 123) : FUNCTION[BV:32 -> BV:32]
125 : map(16, 124) : MAP[BV:32 -> BV:32]
126 : sym_const(125) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 428031 { 0x687ff +1.5102527e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 760583803 { 0x2d55967b +1.66865479e219 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2013499700 { 0x78039134 +1.2786874e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2013499703 { 0x78039137 +1.2786910e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1972465220 { 0x75916e44 +1.13617753e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1972465223 { 0x75916e47 +1.13617789e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 162293168 { 0x9ac65b0 +1.34685325e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 162293171 { 0x9ac65b3 +1.34685361e148 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46000Var : BV:32
2 : Lambda46001Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 8388608 { 0x800000 +1.0e130 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 119 { 0x77 } : BV:8
56 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
57 : eq(53, 56) : BOOL
58 : 128 { 0x80 -128 } : BV:8
59 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
60 : eq(53, 59) : BOOL
61 : 4 { 0x4 } : BV:8
62 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
63 : eq(53, 62) : BOOL
64 : 69 { 0x45 } : BV:8
65 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
66 : eq(53, 65) : BOOL
67 : 172 { 0xac -84 } : BV:8
68 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
69 : eq(53, 68) : BOOL
70 : 93 { 0x5d } : BV:8
71 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
72 : eq(53, 71) : BOOL
73 : 60 { 0x3c } : BV:8
74 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
75 : eq(53, 74) : BOOL
76 : 111 { 0x6f } : BV:8
77 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
78 : eq(53, 77) : BOOL
79 : 223 { 0xdf -33 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : ite(60, 61, 86) : BV:8
88 : ite(57, 58, 87) : BV:8
89 : ite(54, 55, 88) : BV:8
90 : bvadd(74, 52) : BV:32
91 : eq(90, 51) : BOOL
92 : eq(90, 56) : BOOL
93 : eq(90, 59) : BOOL
94 : eq(90, 62) : BOOL
95 : eq(90, 65) : BOOL
96 : eq(90, 68) : BOOL
97 : eq(90, 71) : BOOL
98 : eq(90, 74) : BOOL
99 : eq(90, 77) : BOOL
100 : ite(99, 79, 80) : BV:8
101 : ite(98, 76, 100) : BV:8
102 : ite(97, 73, 101) : BV:8
103 : ite(96, 70, 102) : BV:8
104 : ite(95, 67, 103) : BV:8
105 : ite(94, 64, 104) : BV:8
106 : ite(93, 61, 105) : BV:8
107 : ite(92, 58, 106) : BV:8
108 : ite(91, 55, 107) : BV:8
109 : bvadd(77, 52) : BV:32
110 : eq(109, 51) : BOOL
111 : eq(109, 56) : BOOL
112 : eq(109, 59) : BOOL
113 : eq(109, 62) : BOOL
114 : eq(109, 65) : BOOL
115 : eq(109, 68) : BOOL
116 : eq(109, 71) : BOOL
117 : eq(109, 74) : BOOL
118 : eq(109, 77) : BOOL
119 : ite(118, 79, 80) : BV:8
120 : ite(117, 76, 119) : BV:8
121 : ite(116, 73, 120) : BV:8
122 : ite(115, 70, 121) : BV:8
123 : ite(114, 67, 122) : BV:8
124 : ite(113, 64, 123) : BV:8
125 : ite(112, 61, 124) : BV:8
126 : ite(111, 58, 125) : BV:8
127 : ite(110, 55, 126) : BV:8
128 : bvadd(65, 52) : BV:32
129 : eq(128, 51) : BOOL
130 : eq(128, 56) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : eq(128, 74) : BOOL
137 : eq(128, 77) : BOOL
138 : ite(137, 79, 80) : BV:8
139 : ite(136, 76, 138) : BV:8
140 : ite(135, 73, 139) : BV:8
141 : ite(134, 70, 140) : BV:8
142 : ite(133, 67, 141) : BV:8
143 : ite(132, 64, 142) : BV:8
144 : ite(131, 61, 143) : BV:8
145 : ite(130, 58, 144) : BV:8
146 : ite(129, 55, 145) : BV:8
147 : bvconcat(89, 108, 127, 146) : BV:32
148 : bvadd(48, 50, 147) : BV:32
149 : eq(148, 51) : BOOL
150 : eq(148, 56) : BOOL
151 : eq(148, 59) : BOOL
152 : eq(148, 62) : BOOL
153 : eq(148, 65) : BOOL
154 : eq(148, 68) : BOOL
155 : eq(148, 71) : BOOL
156 : eq(148, 74) : BOOL
157 : eq(148, 77) : BOOL
158 : ite(157, 79, 80) : BV:8
159 : ite(156, 76, 158) : BV:8
160 : ite(155, 73, 159) : BV:8
161 : ite(154, 70, 160) : BV:8
162 : ite(153, 67, 161) : BV:8
163 : ite(152, 64, 162) : BV:8
164 : ite(151, 61, 163) : BV:8
165 : ite(150, 58, 164) : BV:8
166 : ite(149, 55, 165) : BV:8
167 : 2 { 0x2 +1.23e129 } : BV:32
168 : bvadd(167, 50, 147) : BV:32
169 : eq(168, 51) : BOOL
170 : eq(168, 56) : BOOL
171 : eq(168, 59) : BOOL
172 : eq(168, 62) : BOOL
173 : eq(168, 65) : BOOL
174 : eq(168, 68) : BOOL
175 : eq(168, 71) : BOOL
176 : eq(168, 74) : BOOL
177 : eq(168, 77) : BOOL
178 : ite(177, 79, 80) : BV:8
179 : ite(176, 76, 178) : BV:8
180 : ite(175, 73, 179) : BV:8
181 : ite(174, 70, 180) : BV:8
182 : ite(173, 67, 181) : BV:8
183 : ite(172, 64, 182) : BV:8
184 : ite(171, 61, 183) : BV:8
185 : ite(170, 58, 184) : BV:8
186 : ite(169, 55, 185) : BV:8
187 : 1 { 0x1 +1.11e129 } : BV:32
188 : bvadd(187, 50, 147) : BV:32
189 : eq(188, 51) : BOOL
190 : eq(188, 56) : BOOL
191 : eq(188, 59) : BOOL
192 : eq(188, 62) : BOOL
193 : eq(188, 65) : BOOL
194 : eq(188, 68) : BOOL
195 : eq(188, 71) : BOOL
196 : eq(188, 74) : BOOL
197 : eq(188, 77) : BOOL
198 : ite(197, 79, 80) : BV:8
199 : ite(196, 76, 198) : BV:8
200 : ite(195, 73, 199) : BV:8
201 : ite(194, 70, 200) : BV:8
202 : ite(193, 67, 201) : BV:8
203 : ite(192, 64, 202) : BV:8
204 : ite(191, 61, 203) : BV:8
205 : ite(190, 58, 204) : BV:8
206 : ite(189, 55, 205) : BV:8
207 : bvadd(50, 147) : BV:32
208 : eq(207, 51) : BOOL
209 : eq(207, 56) : BOOL
210 : eq(207, 59) : BOOL
211 : eq(207, 62) : BOOL
212 : eq(207, 65) : BOOL
213 : eq(207, 68) : BOOL
214 : eq(207, 71) : BOOL
215 : eq(207, 74) : BOOL
216 : eq(207, 77) : BOOL
217 : ite(216, 79, 80) : BV:8
218 : ite(215, 76, 217) : BV:8
219 : ite(214, 73, 218) : BV:8
220 : ite(213, 70, 219) : BV:8
221 : ite(212, 67, 220) : BV:8
222 : ite(211, 64, 221) : BV:8
223 : ite(210, 61, 222) : BV:8
224 : ite(209, 58, 223) : BV:8
225 : ite(208, 55, 224) : BV:8
226 : bvconcat(166, 186, 206, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : ite(47, 226, 227) : BV:32
229 : ite(6, 3, 228) : BV:32
230 : lambda(1, 2, 229) : FUNCTION[BV:32,BV:32 -> BV:32]
231 : sym_const(230) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46005Var : BV:32
2 : Lambda46006Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8388609 { 0x800001 +1.11e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 8388608 { 0x800000 +1.0e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 724213 ] -> true, [ 724214; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 724213 ] -> true, [ 724214; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46014Var : BV:32
2 : Lambda46015Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 724213 { 0xb0cf5 +1.8633291e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 724214 { 0xb0cf6 +1.8633303e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 724215 { 0xb0cf7 +1.8633315e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8388609 { 0x800001 +1.11e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 8388608 { 0x800000 +1.0e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46010Var : BV:32
2 : Lambda46011Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 119 { 0x77 } : BV:8
15 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
16 : eq(12, 15) : BOOL
17 : 128 { 0x80 -128 } : BV:8
18 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
19 : eq(12, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
22 : eq(12, 21) : BOOL
23 : 69 { 0x45 } : BV:8
24 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
25 : eq(12, 24) : BOOL
26 : 172 { 0xac -84 } : BV:8
27 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
28 : eq(12, 27) : BOOL
29 : 93 { 0x5d } : BV:8
30 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
31 : eq(12, 30) : BOOL
32 : 60 { 0x3c } : BV:8
33 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
34 : eq(12, 33) : BOOL
35 : 111 { 0x6f } : BV:8
36 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
37 : eq(12, 36) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46021Var : BV:32
2 : 428032 { 0x68800 +1.5102539e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvmul(6, 1) : BV:32
9 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
10 : bvadd(7, 8, 9) : BV:32
11 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
12 : eq(10, 11) : BOOL
13 : 119 { 0x77 } : BV:8
14 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
15 : eq(10, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : eq(10, 9) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
20 : eq(10, 19) : BOOL
21 : 69 { 0x45 } : BV:8
22 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
23 : eq(10, 22) : BOOL
24 : 172 { 0xac -84 } : BV:8
25 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
26 : eq(10, 25) : BOOL
27 : 93 { 0x5d } : BV:8
28 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
29 : eq(10, 28) : BOOL
30 : 60 { 0x3c } : BV:8
31 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
32 : eq(10, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
35 : eq(10, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 9) : BOOL
52 : eq(48, 19) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 25) : BOOL
55 : eq(48, 28) : BOOL
56 : eq(48, 31) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 30, 59) : BV:8
61 : ite(54, 27, 60) : BV:8
62 : ite(53, 24, 61) : BV:8
63 : ite(52, 21, 62) : BV:8
64 : ite(51, 18, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 9) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 22) : BOOL
74 : eq(68, 25) : BOOL
75 : eq(68, 28) : BOOL
76 : eq(68, 31) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 33, 78) : BV:8
80 : ite(75, 30, 79) : BV:8
81 : ite(74, 27, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(72, 21, 82) : BV:8
84 : ite(71, 18, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 9) : BOOL
91 : eq(87, 19) : BOOL
92 : eq(87, 22) : BOOL
93 : eq(87, 25) : BOOL
94 : eq(87, 28) : BOOL
95 : eq(87, 31) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 33, 97) : BV:8
99 : ite(94, 30, 98) : BV:8
100 : ite(93, 27, 99) : BV:8
101 : ite(92, 24, 100) : BV:8
102 : ite(91, 21, 101) : BV:8
103 : ite(90, 18, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(5, 6, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46025Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 428032 { 0x68800 +1.5102539e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvmul(4, 1) : BV:32
9 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
10 : bvadd(7, 8, 9) : BV:32
11 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
12 : eq(10, 11) : BOOL
13 : 119 { 0x77 } : BV:8
14 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
15 : eq(10, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : eq(10, 9) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
20 : eq(10, 19) : BOOL
21 : 69 { 0x45 } : BV:8
22 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
23 : eq(10, 22) : BOOL
24 : 172 { 0xac -84 } : BV:8
25 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
26 : eq(10, 25) : BOOL
27 : 93 { 0x5d } : BV:8
28 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
29 : eq(10, 28) : BOOL
30 : 60 { 0x3c } : BV:8
31 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
32 : eq(10, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
35 : eq(10, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 9) : BOOL
52 : eq(48, 19) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 25) : BOOL
55 : eq(48, 28) : BOOL
56 : eq(48, 31) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 30, 59) : BV:8
61 : ite(54, 27, 60) : BV:8
62 : ite(53, 24, 61) : BV:8
63 : ite(52, 21, 62) : BV:8
64 : ite(51, 18, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 9) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 22) : BOOL
74 : eq(68, 25) : BOOL
75 : eq(68, 28) : BOOL
76 : eq(68, 31) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 33, 78) : BV:8
80 : ite(75, 30, 79) : BV:8
81 : ite(74, 27, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(72, 21, 82) : BV:8
84 : ite(71, 18, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 9) : BOOL
91 : eq(87, 19) : BOOL
92 : eq(87, 22) : BOOL
93 : eq(87, 25) : BOOL
94 : eq(87, 28) : BOOL
95 : eq(87, 31) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 33, 97) : BV:8
99 : ite(94, 30, 98) : BV:8
100 : ite(93, 27, 99) : BV:8
101 : ite(92, 24, 100) : BV:8
102 : ite(91, 21, 101) : BV:8
103 : ite(90, 18, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(6, 2, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46029Var : BV:32
2 : 428032 { 0x68800 +1.5102539e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvmul(6, 1) : BV:32
9 : 1564818560 { 0x5d453c80 +1.54090881e59 } : BV:32
10 : bvadd(7, 8, 9) : BV:32
11 : 3279850499 { 0xc37e8c03 -1015116797 -1.98864781e7 } : BV:32
12 : eq(10, 11) : BOOL
13 : 119 { 0x77 } : BV:8
14 : 3281562620 { 0xc398abfc -1013404676 -1.19274854e8 } : BV:32
15 : eq(10, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : eq(10, 9) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 3281562622 { 0xc398abfe -1013404674 -1.19274878e8 } : BV:32
20 : eq(10, 19) : BOOL
21 : 69 { 0x45 } : BV:8
22 : 3279850496 { 0xc37e8c00 -1015116800 -1.98864746e7 } : BV:32
23 : eq(10, 22) : BOOL
24 : 172 { 0xac -84 } : BV:8
25 : 3281562623 { 0xc398abff -1013404673 -1.19274890e8 } : BV:32
26 : eq(10, 25) : BOOL
27 : 93 { 0x5d } : BV:8
28 : 3281562621 { 0xc398abfd -1013404675 -1.19274866e8 } : BV:32
29 : eq(10, 28) : BOOL
30 : 60 { 0x3c } : BV:8
31 : 3279850498 { 0xc37e8c02 -1015116798 -1.98864769e7 } : BV:32
32 : eq(10, 31) : BOOL
33 : 111 { 0x6f } : BV:8
34 : 3279850497 { 0xc37e8c01 -1015116799 -1.98864758e7 } : BV:32
35 : eq(10, 34) : BOOL
36 : 223 { 0xdf -33 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : ite(12, 13, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 8, 9) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : eq(48, 9) : BOOL
52 : eq(48, 19) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 25) : BOOL
55 : eq(48, 28) : BOOL
56 : eq(48, 31) : BOOL
57 : eq(48, 34) : BOOL
58 : ite(57, 36, 37) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 30, 59) : BV:8
61 : ite(54, 27, 60) : BV:8
62 : ite(53, 24, 61) : BV:8
63 : ite(52, 21, 62) : BV:8
64 : ite(51, 18, 63) : BV:8
65 : ite(50, 16, 64) : BV:8
66 : ite(49, 13, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 8, 9) : BV:32
69 : eq(68, 11) : BOOL
70 : eq(68, 14) : BOOL
71 : eq(68, 9) : BOOL
72 : eq(68, 19) : BOOL
73 : eq(68, 22) : BOOL
74 : eq(68, 25) : BOOL
75 : eq(68, 28) : BOOL
76 : eq(68, 31) : BOOL
77 : eq(68, 34) : BOOL
78 : ite(77, 36, 37) : BV:8
79 : ite(76, 33, 78) : BV:8
80 : ite(75, 30, 79) : BV:8
81 : ite(74, 27, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(72, 21, 82) : BV:8
84 : ite(71, 18, 83) : BV:8
85 : ite(70, 16, 84) : BV:8
86 : ite(69, 13, 85) : BV:8
87 : bvadd(8, 9) : BV:32
88 : eq(87, 11) : BOOL
89 : eq(87, 14) : BOOL
90 : eq(87, 9) : BOOL
91 : eq(87, 19) : BOOL
92 : eq(87, 22) : BOOL
93 : eq(87, 25) : BOOL
94 : eq(87, 28) : BOOL
95 : eq(87, 31) : BOOL
96 : eq(87, 34) : BOOL
97 : ite(96, 36, 37) : BV:8
98 : ite(95, 33, 97) : BV:8
99 : ite(94, 30, 98) : BV:8
100 : ite(93, 27, 99) : BV:8
101 : ite(92, 24, 100) : BV:8
102 : ite(91, 21, 101) : BV:8
103 : ite(90, 18, 102) : BV:8
104 : ite(89, 16, 103) : BV:8
105 : ite(88, 13, 104) : BV:8
106 : bvconcat(46, 66, 86, 105) : BV:32
107 : ite(5, 6, 106) : BV:32
108 : ite(3, 4, 107) : BV:32
109 : lambda(1, 108) : FUNCTION[BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2822398015
=counter_example_end
=global nodece 50 num_edges_traversed 2
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3.ce4143.num_edges_traversed1
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3.ce4143 d13ca194f7776065eca07ba48084103
=input.spec-%var-x-1
1 : Lambda46662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46663Var : BV:32
18 : Lambda46664Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46665Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 8388611 { 0x800003 +1.35e130 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 114 { 0x72 } : BV:8
82 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 116 { 0x74 } : BV:8
85 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 173 { 0xad -83 } : BV:8
91 : 8388608 { 0x800000 +1.0e130 } : BV:32
92 : eq(79, 91) : BOOL
93 : 250 { 0xfa -6 } : BV:8
94 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
95 : eq(79, 94) : BOOL
96 : 31 { 0x1f } : BV:8
97 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
98 : eq(79, 97) : BOOL
99 : 84 { 0x54 } : BV:8
100 : 8388610 { 0x800002 +1.23e130 } : BV:32
101 : eq(79, 100) : BOOL
102 : 29 { 0x1d } : BV:8
103 : 8388609 { 0x800001 +1.11e130 } : BV:32
104 : eq(79, 103) : BOOL
105 : 91 { 0x5b } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(101, 102, 107) : BV:8
109 : ite(98, 99, 108) : BV:8
110 : ite(95, 96, 109) : BV:8
111 : ite(92, 93, 110) : BV:8
112 : ite(89, 90, 111) : BV:8
113 : ite(86, 87, 112) : BV:8
114 : ite(83, 84, 113) : BV:8
115 : ite(80, 81, 114) : BV:8
116 : bvadd(100, 78) : BV:32
117 : eq(116, 77) : BOOL
118 : eq(116, 82) : BOOL
119 : eq(116, 85) : BOOL
120 : eq(116, 88) : BOOL
121 : eq(116, 91) : BOOL
122 : eq(116, 94) : BOOL
123 : eq(116, 97) : BOOL
124 : eq(116, 100) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 102, 126) : BV:8
128 : ite(123, 99, 127) : BV:8
129 : ite(122, 96, 128) : BV:8
130 : ite(121, 93, 129) : BV:8
131 : ite(120, 90, 130) : BV:8
132 : ite(119, 87, 131) : BV:8
133 : ite(118, 84, 132) : BV:8
134 : ite(117, 81, 133) : BV:8
135 : bvadd(103, 78) : BV:32
136 : eq(135, 77) : BOOL
137 : eq(135, 82) : BOOL
138 : eq(135, 85) : BOOL
139 : eq(135, 88) : BOOL
140 : eq(135, 91) : BOOL
141 : eq(135, 94) : BOOL
142 : eq(135, 97) : BOOL
143 : eq(135, 100) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 102, 145) : BV:8
147 : ite(142, 99, 146) : BV:8
148 : ite(141, 96, 147) : BV:8
149 : ite(140, 93, 148) : BV:8
150 : ite(139, 90, 149) : BV:8
151 : ite(138, 87, 150) : BV:8
152 : ite(137, 84, 151) : BV:8
153 : ite(136, 81, 152) : BV:8
154 : bvadd(91, 78) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : eq(154, 100) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 102, 164) : BV:8
166 : ite(161, 99, 165) : BV:8
167 : ite(160, 96, 166) : BV:8
168 : ite(159, 93, 167) : BV:8
169 : ite(158, 90, 168) : BV:8
170 : ite(157, 87, 169) : BV:8
171 : ite(156, 84, 170) : BV:8
172 : ite(155, 81, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(74, 76, 173) : BV:32
175 : eq(174, 77) : BOOL
176 : eq(174, 82) : BOOL
177 : eq(174, 85) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : eq(174, 97) : BOOL
182 : eq(174, 100) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 102, 184) : BV:8
186 : ite(181, 99, 185) : BV:8
187 : ite(180, 96, 186) : BV:8
188 : ite(179, 93, 187) : BV:8
189 : ite(178, 90, 188) : BV:8
190 : ite(177, 87, 189) : BV:8
191 : ite(176, 84, 190) : BV:8
192 : ite(175, 81, 191) : BV:8
193 : bvadd(40, 76, 173) : BV:32
194 : eq(193, 77) : BOOL
195 : eq(193, 82) : BOOL
196 : eq(193, 85) : BOOL
197 : eq(193, 88) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 94) : BOOL
200 : eq(193, 97) : BOOL
201 : eq(193, 100) : BOOL
202 : eq(193, 103) : BOOL
203 : ite(202, 105, 106) : BV:8
204 : ite(201, 102, 203) : BV:8
205 : ite(200, 99, 204) : BV:8
206 : ite(199, 96, 205) : BV:8
207 : ite(198, 93, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 87, 208) : BV:8
210 : ite(195, 84, 209) : BV:8
211 : ite(194, 81, 210) : BV:8
212 : bvadd(36, 76, 173) : BV:32
213 : eq(212, 77) : BOOL
214 : eq(212, 82) : BOOL
215 : eq(212, 85) : BOOL
216 : eq(212, 88) : BOOL
217 : eq(212, 91) : BOOL
218 : eq(212, 94) : BOOL
219 : eq(212, 97) : BOOL
220 : eq(212, 100) : BOOL
221 : eq(212, 103) : BOOL
222 : ite(221, 105, 106) : BV:8
223 : ite(220, 102, 222) : BV:8
224 : ite(219, 99, 223) : BV:8
225 : ite(218, 96, 224) : BV:8
226 : ite(217, 93, 225) : BV:8
227 : ite(216, 90, 226) : BV:8
228 : ite(215, 87, 227) : BV:8
229 : ite(214, 84, 228) : BV:8
230 : ite(213, 81, 229) : BV:8
231 : bvadd(76, 173) : BV:32
232 : eq(231, 77) : BOOL
233 : eq(231, 82) : BOOL
234 : eq(231, 85) : BOOL
235 : eq(231, 88) : BOOL
236 : eq(231, 91) : BOOL
237 : eq(231, 94) : BOOL
238 : eq(231, 97) : BOOL
239 : eq(231, 100) : BOOL
240 : eq(231, 103) : BOOL
241 : ite(240, 105, 106) : BV:8
242 : ite(239, 102, 241) : BV:8
243 : ite(238, 99, 242) : BV:8
244 : ite(237, 96, 243) : BV:8
245 : ite(236, 93, 244) : BV:8
246 : ite(235, 90, 245) : BV:8
247 : ite(234, 87, 246) : BV:8
248 : ite(233, 84, 247) : BV:8
249 : ite(232, 81, 248) : BV:8
250 : bvconcat(192, 211, 230, 249) : BV:32
251 : ite(54, 2, 250) : BV:32
252 : ite(73, 250, 251) : BV:32
253 : ite(54, 2, 252) : BV:32
254 : lambda(51, 253) : FUNCTION[BV:32 -> BV:32]
255 : map(50, 254) : MAP[BV:32 -> BV:32]
256 : lambda(17, 255) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
257 : map(16, 256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
258 : sym_const(257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46682Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46683Var : BV:32
18 : Lambda46684Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46685Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 8388611 { 0x800003 +1.35e130 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 114 { 0x72 } : BV:8
63 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 116 { 0x74 } : BV:8
66 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 173 { 0xad -83 } : BV:8
72 : 8388608 { 0x800000 +1.0e130 } : BV:32
73 : eq(60, 72) : BOOL
74 : 250 { 0xfa -6 } : BV:8
75 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 31 { 0x1f } : BV:8
78 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 84 { 0x54 } : BV:8
81 : 8388610 { 0x800002 +1.23e130 } : BV:32
82 : eq(60, 81) : BOOL
83 : 29 { 0x1d } : BV:8
84 : 8388609 { 0x800001 +1.11e130 } : BV:32
85 : eq(60, 84) : BOOL
86 : 91 { 0x5b } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(76, 77, 90) : BV:8
92 : ite(73, 74, 91) : BV:8
93 : ite(70, 71, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : ite(64, 65, 94) : BV:8
96 : ite(61, 62, 95) : BV:8
97 : bvadd(81, 59) : BV:32
98 : eq(97, 58) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 66) : BOOL
101 : eq(97, 69) : BOOL
102 : eq(97, 72) : BOOL
103 : eq(97, 75) : BOOL
104 : eq(97, 78) : BOOL
105 : eq(97, 81) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 83, 107) : BV:8
109 : ite(104, 80, 108) : BV:8
110 : ite(103, 77, 109) : BV:8
111 : ite(102, 74, 110) : BV:8
112 : ite(101, 71, 111) : BV:8
113 : ite(100, 68, 112) : BV:8
114 : ite(99, 65, 113) : BV:8
115 : ite(98, 62, 114) : BV:8
116 : bvadd(84, 59) : BV:32
117 : eq(116, 58) : BOOL
118 : eq(116, 63) : BOOL
119 : eq(116, 66) : BOOL
120 : eq(116, 69) : BOOL
121 : eq(116, 72) : BOOL
122 : eq(116, 75) : BOOL
123 : eq(116, 78) : BOOL
124 : eq(116, 81) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 83, 126) : BV:8
128 : ite(123, 80, 127) : BV:8
129 : ite(122, 77, 128) : BV:8
130 : ite(121, 74, 129) : BV:8
131 : ite(120, 71, 130) : BV:8
132 : ite(119, 68, 131) : BV:8
133 : ite(118, 65, 132) : BV:8
134 : ite(117, 62, 133) : BV:8
135 : bvadd(72, 59) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : eq(135, 81) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 83, 145) : BV:8
147 : ite(142, 80, 146) : BV:8
148 : ite(141, 77, 147) : BV:8
149 : ite(140, 74, 148) : BV:8
150 : ite(139, 71, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : ite(137, 65, 151) : BV:8
153 : ite(136, 62, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(55, 57, 154) : BV:32
156 : eq(155, 58) : BOOL
157 : eq(155, 63) : BOOL
158 : eq(155, 66) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : eq(155, 78) : BOOL
163 : eq(155, 81) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 83, 165) : BV:8
167 : ite(162, 80, 166) : BV:8
168 : ite(161, 77, 167) : BV:8
169 : ite(160, 74, 168) : BV:8
170 : ite(159, 71, 169) : BV:8
171 : ite(158, 68, 170) : BV:8
172 : ite(157, 65, 171) : BV:8
173 : ite(156, 62, 172) : BV:8
174 : bvadd(40, 57, 154) : BV:32
175 : eq(174, 58) : BOOL
176 : eq(174, 63) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 69) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 75) : BOOL
181 : eq(174, 78) : BOOL
182 : eq(174, 81) : BOOL
183 : eq(174, 84) : BOOL
184 : ite(183, 86, 87) : BV:8
185 : ite(182, 83, 184) : BV:8
186 : ite(181, 80, 185) : BV:8
187 : ite(180, 77, 186) : BV:8
188 : ite(179, 74, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 68, 189) : BV:8
191 : ite(176, 65, 190) : BV:8
192 : ite(175, 62, 191) : BV:8
193 : bvadd(36, 57, 154) : BV:32
194 : eq(193, 58) : BOOL
195 : eq(193, 63) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 72) : BOOL
199 : eq(193, 75) : BOOL
200 : eq(193, 78) : BOOL
201 : eq(193, 81) : BOOL
202 : eq(193, 84) : BOOL
203 : ite(202, 86, 87) : BV:8
204 : ite(201, 83, 203) : BV:8
205 : ite(200, 80, 204) : BV:8
206 : ite(199, 77, 205) : BV:8
207 : ite(198, 74, 206) : BV:8
208 : ite(197, 71, 207) : BV:8
209 : ite(196, 68, 208) : BV:8
210 : ite(195, 65, 209) : BV:8
211 : ite(194, 62, 210) : BV:8
212 : bvadd(57, 154) : BV:32
213 : eq(212, 58) : BOOL
214 : eq(212, 63) : BOOL
215 : eq(212, 66) : BOOL
216 : eq(212, 69) : BOOL
217 : eq(212, 72) : BOOL
218 : eq(212, 75) : BOOL
219 : eq(212, 78) : BOOL
220 : eq(212, 81) : BOOL
221 : eq(212, 84) : BOOL
222 : ite(221, 86, 87) : BV:8
223 : ite(220, 83, 222) : BV:8
224 : ite(219, 80, 223) : BV:8
225 : ite(218, 77, 224) : BV:8
226 : ite(217, 74, 225) : BV:8
227 : ite(216, 71, 226) : BV:8
228 : ite(215, 68, 227) : BV:8
229 : ite(214, 65, 228) : BV:8
230 : ite(213, 62, 229) : BV:8
231 : bvconcat(173, 192, 211, 230) : BV:32
232 : ite(54, 2, 231) : BV:32
233 : lambda(51, 232) : FUNCTION[BV:32 -> BV:32]
234 : map(50, 233) : MAP[BV:32 -> BV:32]
235 : lambda(17, 234) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
236 : map(16, 235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
237 : sym_const(236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 8388603 ] -> 0, [ 8388604; 8388604 ] -> 116, [ 8388605; 8388605 ] -> 84, [ 8388606; 8388606 ] -> 173, [ 8388607; 8388607 ] -> 31, [ 8388608; 8388608 ] -> 250, [ 8388609; 8388609 ] -> 91, [ 8388610; 8388610 ] -> 29, [ 8388611; 8388611 ] -> 114, [ 8388612; 531453043 ] -> 0, [ 531453044; 531453044 ] -> 1, [ 531453045; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 736558171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 736558172; 736558175 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 736558176; 1082850815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082850816; 1082850819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082850820; 3620670551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3620670552; 3620670555 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3620670556; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082850816 { 0x408afe00 +1.8587646e2 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3620670552 { 0xd7cf0c58 -674296744 -1.61756420e48 } : BV:32
=input.dst.llvm-%n
1 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 736558172 { 0x2be6fc5c +1.80457639e216 } : BV:32
=input.dst.llvm-%x
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46689Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda46690Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 8388611 { 0x800003 +1.35e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 114 { 0x72 } : BV:8
26 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
27 : eq(22, 26) : BOOL
28 : 116 { 0x74 } : BV:8
29 : eq(22, 21) : BOOL
30 : 1 { 0x1 } : BV:8
31 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
32 : eq(22, 31) : BOOL
33 : 173 { 0xad -83 } : BV:8
34 : 8388608 { 0x800000 +1.0e130 } : BV:32
35 : eq(22, 34) : BOOL
36 : 250 { 0xfa -6 } : BV:8
37 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
38 : eq(22, 37) : BOOL
39 : 31 { 0x1f } : BV:8
40 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
41 : eq(22, 40) : BOOL
42 : 84 { 0x54 } : BV:8
43 : 8388610 { 0x800002 +1.23e130 } : BV:32
44 : eq(22, 43) : BOOL
45 : 29 { 0x1d } : BV:8
46 : 8388609 { 0x800001 +1.11e130 } : BV:32
47 : eq(22, 46) : BOOL
48 : 91 { 0x5b } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 21) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 34) : BOOL
66 : eq(60, 37) : BOOL
67 : eq(60, 40) : BOOL
68 : eq(60, 43) : BOOL
69 : eq(60, 46) : BOOL
70 : ite(69, 48, 49) : BV:8
71 : ite(68, 45, 70) : BV:8
72 : ite(67, 42, 71) : BV:8
73 : ite(66, 39, 72) : BV:8
74 : ite(65, 36, 73) : BV:8
75 : ite(64, 33, 74) : BV:8
76 : ite(63, 30, 75) : BV:8
77 : ite(62, 28, 76) : BV:8
78 : ite(61, 25, 77) : BV:8
79 : bvadd(7, 20, 21) : BV:32
80 : eq(79, 23) : BOOL
81 : eq(79, 26) : BOOL
82 : eq(79, 21) : BOOL
83 : eq(79, 31) : BOOL
84 : eq(79, 34) : BOOL
85 : eq(79, 37) : BOOL
86 : eq(79, 40) : BOOL
87 : eq(79, 43) : BOOL
88 : eq(79, 46) : BOOL
89 : ite(88, 48, 49) : BV:8
90 : ite(87, 45, 89) : BV:8
91 : ite(86, 42, 90) : BV:8
92 : ite(85, 39, 91) : BV:8
93 : ite(84, 36, 92) : BV:8
94 : ite(83, 33, 93) : BV:8
95 : ite(82, 30, 94) : BV:8
96 : ite(81, 28, 95) : BV:8
97 : ite(80, 25, 96) : BV:8
98 : bvadd(20, 21) : BV:32
99 : eq(98, 23) : BOOL
100 : eq(98, 26) : BOOL
101 : eq(98, 21) : BOOL
102 : eq(98, 31) : BOOL
103 : eq(98, 34) : BOOL
104 : eq(98, 37) : BOOL
105 : eq(98, 40) : BOOL
106 : eq(98, 43) : BOOL
107 : eq(98, 46) : BOOL
108 : ite(107, 48, 49) : BV:8
109 : ite(106, 45, 108) : BV:8
110 : ite(105, 42, 109) : BV:8
111 : ite(104, 39, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 33, 112) : BV:8
114 : ite(101, 30, 113) : BV:8
115 : ite(100, 28, 114) : BV:8
116 : ite(99, 25, 115) : BV:8
117 : bvconcat(58, 78, 97, 116) : BV:32
118 : ite(17, 7, 117) : BV:32
119 : lambda(16, 118) : FUNCTION[BV:32 -> BV:32]
120 : map(15, 119) : MAP[BV:32 -> BV:32]
121 : sym_const(120) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda46671Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda46672Var : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 8388611 { 0x800003 +1.35e130 } : BV:32
26 : eq(24, 25) : BOOL
27 : 114 { 0x72 } : BV:8
28 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 116 { 0x74 } : BV:8
31 : eq(24, 23) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
34 : eq(24, 33) : BOOL
35 : 173 { 0xad -83 } : BV:8
36 : 8388608 { 0x800000 +1.0e130 } : BV:32
37 : eq(24, 36) : BOOL
38 : 250 { 0xfa -6 } : BV:8
39 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
40 : eq(24, 39) : BOOL
41 : 31 { 0x1f } : BV:8
42 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
43 : eq(24, 42) : BOOL
44 : 84 { 0x54 } : BV:8
45 : 8388610 { 0x800002 +1.23e130 } : BV:32
46 : eq(24, 45) : BOOL
47 : 29 { 0x1d } : BV:8
48 : 8388609 { 0x800001 +1.11e130 } : BV:32
49 : eq(24, 48) : BOOL
50 : 91 { 0x5b } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(29, 30, 58) : BV:8
60 : ite(26, 27, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 22, 23) : BV:32
63 : eq(62, 25) : BOOL
64 : eq(62, 28) : BOOL
65 : eq(62, 23) : BOOL
66 : eq(62, 33) : BOOL
67 : eq(62, 36) : BOOL
68 : eq(62, 39) : BOOL
69 : eq(62, 42) : BOOL
70 : eq(62, 45) : BOOL
71 : eq(62, 48) : BOOL
72 : ite(71, 50, 51) : BV:8
73 : ite(70, 47, 72) : BV:8
74 : ite(69, 44, 73) : BV:8
75 : ite(68, 41, 74) : BV:8
76 : ite(67, 38, 75) : BV:8
77 : ite(66, 35, 76) : BV:8
78 : ite(65, 32, 77) : BV:8
79 : ite(64, 30, 78) : BV:8
80 : ite(63, 27, 79) : BV:8
81 : bvadd(9, 22, 23) : BV:32
82 : eq(81, 25) : BOOL
83 : eq(81, 28) : BOOL
84 : eq(81, 23) : BOOL
85 : eq(81, 33) : BOOL
86 : eq(81, 36) : BOOL
87 : eq(81, 39) : BOOL
88 : eq(81, 42) : BOOL
89 : eq(81, 45) : BOOL
90 : eq(81, 48) : BOOL
91 : ite(90, 50, 51) : BV:8
92 : ite(89, 47, 91) : BV:8
93 : ite(88, 44, 92) : BV:8
94 : ite(87, 41, 93) : BV:8
95 : ite(86, 38, 94) : BV:8
96 : ite(85, 35, 95) : BV:8
97 : ite(84, 32, 96) : BV:8
98 : ite(83, 30, 97) : BV:8
99 : ite(82, 27, 98) : BV:8
100 : bvadd(22, 23) : BV:32
101 : eq(100, 25) : BOOL
102 : eq(100, 28) : BOOL
103 : eq(100, 23) : BOOL
104 : eq(100, 33) : BOOL
105 : eq(100, 36) : BOOL
106 : eq(100, 39) : BOOL
107 : eq(100, 42) : BOOL
108 : eq(100, 45) : BOOL
109 : eq(100, 48) : BOOL
110 : ite(109, 50, 51) : BV:8
111 : ite(108, 47, 110) : BV:8
112 : ite(107, 44, 111) : BV:8
113 : ite(106, 41, 112) : BV:8
114 : ite(105, 38, 113) : BV:8
115 : ite(104, 35, 114) : BV:8
116 : ite(103, 32, 115) : BV:8
117 : ite(102, 30, 116) : BV:8
118 : ite(101, 27, 117) : BV:8
119 : bvconcat(60, 80, 99, 118) : BV:32
120 : ite(19, 9, 119) : BV:32
121 : lambda(18, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(17, 121) : MAP[BV:32 -> BV:32]
123 : sum(1, 2, 122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
124 : sym_const(123) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : eq(1, 1) : BOOL
16 : 3 { 0x3 +1.35e129 } : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(17, 1) : BV:32
19 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
20 : bvadd(16, 18, 19) : BV:32
21 : 8388611 { 0x800003 +1.35e130 } : BV:32
22 : eq(20, 21) : BOOL
23 : 114 { 0x72 } : BV:8
24 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
25 : eq(20, 24) : BOOL
26 : 116 { 0x74 } : BV:8
27 : eq(20, 19) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
30 : eq(20, 29) : BOOL
31 : 173 { 0xad -83 } : BV:8
32 : 8388608 { 0x800000 +1.0e130 } : BV:32
33 : eq(20, 32) : BOOL
34 : 250 { 0xfa -6 } : BV:8
35 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
36 : eq(20, 35) : BOOL
37 : 31 { 0x1f } : BV:8
38 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
39 : eq(20, 38) : BOOL
40 : 84 { 0x54 } : BV:8
41 : 8388610 { 0x800002 +1.23e130 } : BV:32
42 : eq(20, 41) : BOOL
43 : 29 { 0x1d } : BV:8
44 : 8388609 { 0x800001 +1.11e130 } : BV:32
45 : eq(20, 44) : BOOL
46 : 91 { 0x5b } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(33, 34, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : ite(22, 23, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 18, 19) : BV:32
59 : eq(58, 21) : BOOL
60 : eq(58, 24) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 29) : BOOL
63 : eq(58, 32) : BOOL
64 : eq(58, 35) : BOOL
65 : eq(58, 38) : BOOL
66 : eq(58, 41) : BOOL
67 : eq(58, 44) : BOOL
68 : ite(67, 46, 47) : BV:8
69 : ite(66, 43, 68) : BV:8
70 : ite(65, 40, 69) : BV:8
71 : ite(64, 37, 70) : BV:8
72 : ite(63, 34, 71) : BV:8
73 : ite(62, 31, 72) : BV:8
74 : ite(61, 28, 73) : BV:8
75 : ite(60, 26, 74) : BV:8
76 : ite(59, 23, 75) : BV:8
77 : bvadd(5, 18, 19) : BV:32
78 : eq(77, 21) : BOOL
79 : eq(77, 24) : BOOL
80 : eq(77, 19) : BOOL
81 : eq(77, 29) : BOOL
82 : eq(77, 32) : BOOL
83 : eq(77, 35) : BOOL
84 : eq(77, 38) : BOOL
85 : eq(77, 41) : BOOL
86 : eq(77, 44) : BOOL
87 : ite(86, 46, 47) : BV:8
88 : ite(85, 43, 87) : BV:8
89 : ite(84, 40, 88) : BV:8
90 : ite(83, 37, 89) : BV:8
91 : ite(82, 34, 90) : BV:8
92 : ite(81, 31, 91) : BV:8
93 : ite(80, 28, 92) : BV:8
94 : ite(79, 26, 93) : BV:8
95 : ite(78, 23, 94) : BV:8
96 : bvadd(18, 19) : BV:32
97 : eq(96, 21) : BOOL
98 : eq(96, 24) : BOOL
99 : eq(96, 19) : BOOL
100 : eq(96, 29) : BOOL
101 : eq(96, 32) : BOOL
102 : eq(96, 35) : BOOL
103 : eq(96, 38) : BOOL
104 : eq(96, 41) : BOOL
105 : eq(96, 44) : BOOL
106 : ite(105, 46, 47) : BV:8
107 : ite(104, 43, 106) : BV:8
108 : ite(103, 40, 107) : BV:8
109 : ite(102, 37, 108) : BV:8
110 : ite(101, 34, 109) : BV:8
111 : ite(100, 31, 110) : BV:8
112 : ite(99, 28, 111) : BV:8
113 : ite(98, 26, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(56, 76, 95, 114) : BV:32
116 : ite(15, 5, 115) : BV:32
117 : sum(13, 14, 116) : SUM[UNIT,BV:32]
118 : sym_const(117) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 819247292 { 0x30d4b8bc +1.66188764e226 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46694Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda46695Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 8388611 { 0x800003 +1.35e130 } : BV:32
24 : eq(22, 23) : BOOL
25 : 114 { 0x72 } : BV:8
26 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
27 : eq(22, 26) : BOOL
28 : 116 { 0x74 } : BV:8
29 : eq(22, 21) : BOOL
30 : 1 { 0x1 } : BV:8
31 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
32 : eq(22, 31) : BOOL
33 : 173 { 0xad -83 } : BV:8
34 : 8388608 { 0x800000 +1.0e130 } : BV:32
35 : eq(22, 34) : BOOL
36 : 250 { 0xfa -6 } : BV:8
37 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
38 : eq(22, 37) : BOOL
39 : 31 { 0x1f } : BV:8
40 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
41 : eq(22, 40) : BOOL
42 : 84 { 0x54 } : BV:8
43 : 8388610 { 0x800002 +1.23e130 } : BV:32
44 : eq(22, 43) : BOOL
45 : 29 { 0x1d } : BV:8
46 : 8388609 { 0x800001 +1.11e130 } : BV:32
47 : eq(22, 46) : BOOL
48 : 91 { 0x5b } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(27, 28, 56) : BV:8
58 : ite(24, 25, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 20, 21) : BV:32
61 : eq(60, 23) : BOOL
62 : eq(60, 26) : BOOL
63 : eq(60, 21) : BOOL
64 : eq(60, 31) : BOOL
65 : eq(60, 34) : BOOL
66 : eq(60, 37) : BOOL
67 : eq(60, 40) : BOOL
68 : eq(60, 43) : BOOL
69 : eq(60, 46) : BOOL
70 : ite(69, 48, 49) : BV:8
71 : ite(68, 45, 70) : BV:8
72 : ite(67, 42, 71) : BV:8
73 : ite(66, 39, 72) : BV:8
74 : ite(65, 36, 73) : BV:8
75 : ite(64, 33, 74) : BV:8
76 : ite(63, 30, 75) : BV:8
77 : ite(62, 28, 76) : BV:8
78 : ite(61, 25, 77) : BV:8
79 : bvadd(7, 20, 21) : BV:32
80 : eq(79, 23) : BOOL
81 : eq(79, 26) : BOOL
82 : eq(79, 21) : BOOL
83 : eq(79, 31) : BOOL
84 : eq(79, 34) : BOOL
85 : eq(79, 37) : BOOL
86 : eq(79, 40) : BOOL
87 : eq(79, 43) : BOOL
88 : eq(79, 46) : BOOL
89 : ite(88, 48, 49) : BV:8
90 : ite(87, 45, 89) : BV:8
91 : ite(86, 42, 90) : BV:8
92 : ite(85, 39, 91) : BV:8
93 : ite(84, 36, 92) : BV:8
94 : ite(83, 33, 93) : BV:8
95 : ite(82, 30, 94) : BV:8
96 : ite(81, 28, 95) : BV:8
97 : ite(80, 25, 96) : BV:8
98 : bvadd(20, 21) : BV:32
99 : eq(98, 23) : BOOL
100 : eq(98, 26) : BOOL
101 : eq(98, 21) : BOOL
102 : eq(98, 31) : BOOL
103 : eq(98, 34) : BOOL
104 : eq(98, 37) : BOOL
105 : eq(98, 40) : BOOL
106 : eq(98, 43) : BOOL
107 : eq(98, 46) : BOOL
108 : ite(107, 48, 49) : BV:8
109 : ite(106, 45, 108) : BV:8
110 : ite(105, 42, 109) : BV:8
111 : ite(104, 39, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 33, 112) : BV:8
114 : ite(101, 30, 113) : BV:8
115 : ite(100, 28, 114) : BV:8
116 : ite(99, 25, 115) : BV:8
117 : bvconcat(58, 78, 97, 116) : BV:32
118 : ite(17, 7, 117) : BV:32
119 : lambda(16, 118) : FUNCTION[BV:32 -> BV:32]
120 : map(15, 119) : MAP[BV:32 -> BV:32]
121 : sym_const(120) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 23634218 { 0x168a12a +1.81741833e131 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3620670552 { 0xd7cf0c58 -674296744 -1.61756420e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3620670555 { 0xd7cf0c5b -674296741 -1.61756455e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 736558172 { 0x2be6fc5c +1.80457639e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 736558175 { 0x2be6fc5f +1.80457675e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082850816 { 0x408afe00 +1.8587646e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082850819 { 0x408afe03 +1.8587682e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46554Var : BV:32
2 : Lambda46555Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 8388611 { 0x800003 +1.35e130 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 114 { 0x72 } : BV:8
55 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 116 { 0x74 } : BV:8
58 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 173 { 0xad -83 } : BV:8
64 : 8388608 { 0x800000 +1.0e130 } : BV:32
65 : eq(52, 64) : BOOL
66 : 250 { 0xfa -6 } : BV:8
67 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
68 : eq(52, 67) : BOOL
69 : 31 { 0x1f } : BV:8
70 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
71 : eq(52, 70) : BOOL
72 : 84 { 0x54 } : BV:8
73 : 8388610 { 0x800002 +1.23e130 } : BV:32
74 : eq(52, 73) : BOOL
75 : 29 { 0x1d } : BV:8
76 : 8388609 { 0x800001 +1.11e130 } : BV:32
77 : eq(52, 76) : BOOL
78 : 91 { 0x5b } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(56, 57, 86) : BV:8
88 : ite(53, 54, 87) : BV:8
89 : bvadd(73, 51) : BV:32
90 : eq(89, 50) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 58) : BOOL
93 : eq(89, 61) : BOOL
94 : eq(89, 64) : BOOL
95 : eq(89, 67) : BOOL
96 : eq(89, 70) : BOOL
97 : eq(89, 73) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 75, 99) : BV:8
101 : ite(96, 72, 100) : BV:8
102 : ite(95, 69, 101) : BV:8
103 : ite(94, 66, 102) : BV:8
104 : ite(93, 63, 103) : BV:8
105 : ite(92, 60, 104) : BV:8
106 : ite(91, 57, 105) : BV:8
107 : ite(90, 54, 106) : BV:8
108 : bvadd(76, 51) : BV:32
109 : eq(108, 50) : BOOL
110 : eq(108, 55) : BOOL
111 : eq(108, 58) : BOOL
112 : eq(108, 61) : BOOL
113 : eq(108, 64) : BOOL
114 : eq(108, 67) : BOOL
115 : eq(108, 70) : BOOL
116 : eq(108, 73) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 75, 118) : BV:8
120 : ite(115, 72, 119) : BV:8
121 : ite(114, 69, 120) : BV:8
122 : ite(113, 66, 121) : BV:8
123 : ite(112, 63, 122) : BV:8
124 : ite(111, 60, 123) : BV:8
125 : ite(110, 57, 124) : BV:8
126 : ite(109, 54, 125) : BV:8
127 : bvadd(64, 51) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : eq(127, 73) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 75, 137) : BV:8
139 : ite(134, 72, 138) : BV:8
140 : ite(133, 69, 139) : BV:8
141 : ite(132, 66, 140) : BV:8
142 : ite(131, 63, 141) : BV:8
143 : ite(130, 60, 142) : BV:8
144 : ite(129, 57, 143) : BV:8
145 : ite(128, 54, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(47, 49, 146) : BV:32
148 : eq(147, 50) : BOOL
149 : eq(147, 55) : BOOL
150 : eq(147, 58) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : eq(147, 70) : BOOL
155 : eq(147, 73) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 75, 157) : BV:8
159 : ite(154, 72, 158) : BV:8
160 : ite(153, 69, 159) : BV:8
161 : ite(152, 66, 160) : BV:8
162 : ite(151, 63, 161) : BV:8
163 : ite(150, 60, 162) : BV:8
164 : ite(149, 57, 163) : BV:8
165 : ite(148, 54, 164) : BV:8
166 : bvadd(36, 49, 146) : BV:32
167 : eq(166, 50) : BOOL
168 : eq(166, 55) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 61) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 67) : BOOL
173 : eq(166, 70) : BOOL
174 : eq(166, 73) : BOOL
175 : eq(166, 76) : BOOL
176 : ite(175, 78, 79) : BV:8
177 : ite(174, 75, 176) : BV:8
178 : ite(173, 72, 177) : BV:8
179 : ite(172, 69, 178) : BV:8
180 : ite(171, 66, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 60, 181) : BV:8
183 : ite(168, 57, 182) : BV:8
184 : ite(167, 54, 183) : BV:8
185 : bvadd(32, 49, 146) : BV:32
186 : eq(185, 50) : BOOL
187 : eq(185, 55) : BOOL
188 : eq(185, 58) : BOOL
189 : eq(185, 61) : BOOL
190 : eq(185, 64) : BOOL
191 : eq(185, 67) : BOOL
192 : eq(185, 70) : BOOL
193 : eq(185, 73) : BOOL
194 : eq(185, 76) : BOOL
195 : ite(194, 78, 79) : BV:8
196 : ite(193, 75, 195) : BV:8
197 : ite(192, 72, 196) : BV:8
198 : ite(191, 69, 197) : BV:8
199 : ite(190, 66, 198) : BV:8
200 : ite(189, 63, 199) : BV:8
201 : ite(188, 60, 200) : BV:8
202 : ite(187, 57, 201) : BV:8
203 : ite(186, 54, 202) : BV:8
204 : bvadd(49, 146) : BV:32
205 : eq(204, 50) : BOOL
206 : eq(204, 55) : BOOL
207 : eq(204, 58) : BOOL
208 : eq(204, 61) : BOOL
209 : eq(204, 64) : BOOL
210 : eq(204, 67) : BOOL
211 : eq(204, 70) : BOOL
212 : eq(204, 73) : BOOL
213 : eq(204, 76) : BOOL
214 : ite(213, 78, 79) : BV:8
215 : ite(212, 75, 214) : BV:8
216 : ite(211, 72, 215) : BV:8
217 : ite(210, 69, 216) : BV:8
218 : ite(209, 66, 217) : BV:8
219 : ite(208, 63, 218) : BV:8
220 : ite(207, 60, 219) : BV:8
221 : ite(206, 57, 220) : BV:8
222 : ite(205, 54, 221) : BV:8
223 : bvconcat(165, 184, 203, 222) : BV:32
224 : ite(6, 3, 223) : BV:32
225 : ite(46, 223, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46559Var : BV:32
2 : Lambda46560Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2756605321 ] -> true, [ 2756605322; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2756605321 ] -> true, [ 2756605322; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46568Var : BV:32
2 : Lambda46569Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46564Var : BV:32
2 : Lambda46565Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 114 { 0x72 } : BV:8
15 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 116 { 0x74 } : BV:8
18 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 173 { 0xad -83 } : BV:8
24 : 8388608 { 0x800000 +1.0e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 250 { 0xfa -6 } : BV:8
27 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 31 { 0x1f } : BV:8
30 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 84 { 0x54 } : BV:8
33 : 8388610 { 0x800002 +1.23e130 } : BV:32
34 : eq(12, 33) : BOOL
35 : 29 { 0x1d } : BV:8
36 : 8388609 { 0x800001 +1.11e130 } : BV:32
37 : eq(12, 36) : BOOL
38 : 91 { 0x5b } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46575Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 114 { 0x72 } : BV:8
13 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 173 { 0xad -83 } : BV:8
21 : 8388608 { 0x800000 +1.0e130 } : BV:32
22 : eq(9, 21) : BOOL
23 : 250 { 0xfa -6 } : BV:8
24 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 31 { 0x1f } : BV:8
27 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
28 : eq(9, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 8388610 { 0x800002 +1.23e130 } : BV:32
31 : eq(9, 30) : BOOL
32 : 29 { 0x1d } : BV:8
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : eq(9, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46579Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 114 { 0x72 } : BV:8
13 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 173 { 0xad -83 } : BV:8
21 : 8388608 { 0x800000 +1.0e130 } : BV:32
22 : eq(9, 21) : BOOL
23 : 250 { 0xfa -6 } : BV:8
24 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 31 { 0x1f } : BV:8
27 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
28 : eq(9, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 8388610 { 0x800002 +1.23e130 } : BV:32
31 : eq(9, 30) : BOOL
32 : 29 { 0x1d } : BV:8
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : eq(9, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46583Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 114 { 0x72 } : BV:8
13 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 173 { 0xad -83 } : BV:8
21 : 8388608 { 0x800000 +1.0e130 } : BV:32
22 : eq(9, 21) : BOOL
23 : 250 { 0xfa -6 } : BV:8
24 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 31 { 0x1f } : BV:8
27 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
28 : eq(9, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 8388610 { 0x800002 +1.23e130 } : BV:32
31 : eq(9, 30) : BOOL
32 : 29 { 0x1d } : BV:8
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : eq(9, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2366518870
=counter_example_end
=global nodece 51 num_edges_traversed 1
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3.ce4179.num_edges_traversed3
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce4179 6f85862fd24f25bd24957eb1b52828
=input.spec-%var-x-1
1 : Lambda46662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46663Var : BV:32
18 : Lambda46664Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46665Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 8388611 { 0x800003 +1.35e130 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 114 { 0x72 } : BV:8
82 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 116 { 0x74 } : BV:8
85 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 173 { 0xad -83 } : BV:8
91 : 8388608 { 0x800000 +1.0e130 } : BV:32
92 : eq(79, 91) : BOOL
93 : 250 { 0xfa -6 } : BV:8
94 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
95 : eq(79, 94) : BOOL
96 : 31 { 0x1f } : BV:8
97 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
98 : eq(79, 97) : BOOL
99 : 84 { 0x54 } : BV:8
100 : 8388610 { 0x800002 +1.23e130 } : BV:32
101 : eq(79, 100) : BOOL
102 : 29 { 0x1d } : BV:8
103 : 8388609 { 0x800001 +1.11e130 } : BV:32
104 : eq(79, 103) : BOOL
105 : 91 { 0x5b } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(101, 102, 107) : BV:8
109 : ite(98, 99, 108) : BV:8
110 : ite(95, 96, 109) : BV:8
111 : ite(92, 93, 110) : BV:8
112 : ite(89, 90, 111) : BV:8
113 : ite(86, 87, 112) : BV:8
114 : ite(83, 84, 113) : BV:8
115 : ite(80, 81, 114) : BV:8
116 : bvadd(100, 78) : BV:32
117 : eq(116, 77) : BOOL
118 : eq(116, 82) : BOOL
119 : eq(116, 85) : BOOL
120 : eq(116, 88) : BOOL
121 : eq(116, 91) : BOOL
122 : eq(116, 94) : BOOL
123 : eq(116, 97) : BOOL
124 : eq(116, 100) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 102, 126) : BV:8
128 : ite(123, 99, 127) : BV:8
129 : ite(122, 96, 128) : BV:8
130 : ite(121, 93, 129) : BV:8
131 : ite(120, 90, 130) : BV:8
132 : ite(119, 87, 131) : BV:8
133 : ite(118, 84, 132) : BV:8
134 : ite(117, 81, 133) : BV:8
135 : bvadd(103, 78) : BV:32
136 : eq(135, 77) : BOOL
137 : eq(135, 82) : BOOL
138 : eq(135, 85) : BOOL
139 : eq(135, 88) : BOOL
140 : eq(135, 91) : BOOL
141 : eq(135, 94) : BOOL
142 : eq(135, 97) : BOOL
143 : eq(135, 100) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 102, 145) : BV:8
147 : ite(142, 99, 146) : BV:8
148 : ite(141, 96, 147) : BV:8
149 : ite(140, 93, 148) : BV:8
150 : ite(139, 90, 149) : BV:8
151 : ite(138, 87, 150) : BV:8
152 : ite(137, 84, 151) : BV:8
153 : ite(136, 81, 152) : BV:8
154 : bvadd(91, 78) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : eq(154, 100) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 102, 164) : BV:8
166 : ite(161, 99, 165) : BV:8
167 : ite(160, 96, 166) : BV:8
168 : ite(159, 93, 167) : BV:8
169 : ite(158, 90, 168) : BV:8
170 : ite(157, 87, 169) : BV:8
171 : ite(156, 84, 170) : BV:8
172 : ite(155, 81, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(74, 76, 173) : BV:32
175 : eq(174, 77) : BOOL
176 : eq(174, 82) : BOOL
177 : eq(174, 85) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : eq(174, 97) : BOOL
182 : eq(174, 100) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 102, 184) : BV:8
186 : ite(181, 99, 185) : BV:8
187 : ite(180, 96, 186) : BV:8
188 : ite(179, 93, 187) : BV:8
189 : ite(178, 90, 188) : BV:8
190 : ite(177, 87, 189) : BV:8
191 : ite(176, 84, 190) : BV:8
192 : ite(175, 81, 191) : BV:8
193 : bvadd(40, 76, 173) : BV:32
194 : eq(193, 77) : BOOL
195 : eq(193, 82) : BOOL
196 : eq(193, 85) : BOOL
197 : eq(193, 88) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 94) : BOOL
200 : eq(193, 97) : BOOL
201 : eq(193, 100) : BOOL
202 : eq(193, 103) : BOOL
203 : ite(202, 105, 106) : BV:8
204 : ite(201, 102, 203) : BV:8
205 : ite(200, 99, 204) : BV:8
206 : ite(199, 96, 205) : BV:8
207 : ite(198, 93, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 87, 208) : BV:8
210 : ite(195, 84, 209) : BV:8
211 : ite(194, 81, 210) : BV:8
212 : bvadd(36, 76, 173) : BV:32
213 : eq(212, 77) : BOOL
214 : eq(212, 82) : BOOL
215 : eq(212, 85) : BOOL
216 : eq(212, 88) : BOOL
217 : eq(212, 91) : BOOL
218 : eq(212, 94) : BOOL
219 : eq(212, 97) : BOOL
220 : eq(212, 100) : BOOL
221 : eq(212, 103) : BOOL
222 : ite(221, 105, 106) : BV:8
223 : ite(220, 102, 222) : BV:8
224 : ite(219, 99, 223) : BV:8
225 : ite(218, 96, 224) : BV:8
226 : ite(217, 93, 225) : BV:8
227 : ite(216, 90, 226) : BV:8
228 : ite(215, 87, 227) : BV:8
229 : ite(214, 84, 228) : BV:8
230 : ite(213, 81, 229) : BV:8
231 : bvadd(76, 173) : BV:32
232 : eq(231, 77) : BOOL
233 : eq(231, 82) : BOOL
234 : eq(231, 85) : BOOL
235 : eq(231, 88) : BOOL
236 : eq(231, 91) : BOOL
237 : eq(231, 94) : BOOL
238 : eq(231, 97) : BOOL
239 : eq(231, 100) : BOOL
240 : eq(231, 103) : BOOL
241 : ite(240, 105, 106) : BV:8
242 : ite(239, 102, 241) : BV:8
243 : ite(238, 99, 242) : BV:8
244 : ite(237, 96, 243) : BV:8
245 : ite(236, 93, 244) : BV:8
246 : ite(235, 90, 245) : BV:8
247 : ite(234, 87, 246) : BV:8
248 : ite(233, 84, 247) : BV:8
249 : ite(232, 81, 248) : BV:8
250 : bvconcat(192, 211, 230, 249) : BV:32
251 : ite(54, 2, 250) : BV:32
252 : ite(73, 250, 251) : BV:32
253 : ite(54, 2, 252) : BV:32
254 : lambda(51, 253) : FUNCTION[BV:32 -> BV:32]
255 : map(50, 254) : MAP[BV:32 -> BV:32]
256 : lambda(17, 255) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
257 : map(16, 256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
258 : sym_const(257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46682Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46683Var : BV:32
18 : Lambda46684Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda46685Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 8388611 { 0x800003 +1.35e130 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 114 { 0x72 } : BV:8
63 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 116 { 0x74 } : BV:8
66 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 173 { 0xad -83 } : BV:8
72 : 8388608 { 0x800000 +1.0e130 } : BV:32
73 : eq(60, 72) : BOOL
74 : 250 { 0xfa -6 } : BV:8
75 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 31 { 0x1f } : BV:8
78 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 84 { 0x54 } : BV:8
81 : 8388610 { 0x800002 +1.23e130 } : BV:32
82 : eq(60, 81) : BOOL
83 : 29 { 0x1d } : BV:8
84 : 8388609 { 0x800001 +1.11e130 } : BV:32
85 : eq(60, 84) : BOOL
86 : 91 { 0x5b } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(76, 77, 90) : BV:8
92 : ite(73, 74, 91) : BV:8
93 : ite(70, 71, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : ite(64, 65, 94) : BV:8
96 : ite(61, 62, 95) : BV:8
97 : bvadd(81, 59) : BV:32
98 : eq(97, 58) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 66) : BOOL
101 : eq(97, 69) : BOOL
102 : eq(97, 72) : BOOL
103 : eq(97, 75) : BOOL
104 : eq(97, 78) : BOOL
105 : eq(97, 81) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 83, 107) : BV:8
109 : ite(104, 80, 108) : BV:8
110 : ite(103, 77, 109) : BV:8
111 : ite(102, 74, 110) : BV:8
112 : ite(101, 71, 111) : BV:8
113 : ite(100, 68, 112) : BV:8
114 : ite(99, 65, 113) : BV:8
115 : ite(98, 62, 114) : BV:8
116 : bvadd(84, 59) : BV:32
117 : eq(116, 58) : BOOL
118 : eq(116, 63) : BOOL
119 : eq(116, 66) : BOOL
120 : eq(116, 69) : BOOL
121 : eq(116, 72) : BOOL
122 : eq(116, 75) : BOOL
123 : eq(116, 78) : BOOL
124 : eq(116, 81) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 83, 126) : BV:8
128 : ite(123, 80, 127) : BV:8
129 : ite(122, 77, 128) : BV:8
130 : ite(121, 74, 129) : BV:8
131 : ite(120, 71, 130) : BV:8
132 : ite(119, 68, 131) : BV:8
133 : ite(118, 65, 132) : BV:8
134 : ite(117, 62, 133) : BV:8
135 : bvadd(72, 59) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : eq(135, 81) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 83, 145) : BV:8
147 : ite(142, 80, 146) : BV:8
148 : ite(141, 77, 147) : BV:8
149 : ite(140, 74, 148) : BV:8
150 : ite(139, 71, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : ite(137, 65, 151) : BV:8
153 : ite(136, 62, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(55, 57, 154) : BV:32
156 : eq(155, 58) : BOOL
157 : eq(155, 63) : BOOL
158 : eq(155, 66) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : eq(155, 78) : BOOL
163 : eq(155, 81) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 83, 165) : BV:8
167 : ite(162, 80, 166) : BV:8
168 : ite(161, 77, 167) : BV:8
169 : ite(160, 74, 168) : BV:8
170 : ite(159, 71, 169) : BV:8
171 : ite(158, 68, 170) : BV:8
172 : ite(157, 65, 171) : BV:8
173 : ite(156, 62, 172) : BV:8
174 : bvadd(40, 57, 154) : BV:32
175 : eq(174, 58) : BOOL
176 : eq(174, 63) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 69) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 75) : BOOL
181 : eq(174, 78) : BOOL
182 : eq(174, 81) : BOOL
183 : eq(174, 84) : BOOL
184 : ite(183, 86, 87) : BV:8
185 : ite(182, 83, 184) : BV:8
186 : ite(181, 80, 185) : BV:8
187 : ite(180, 77, 186) : BV:8
188 : ite(179, 74, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 68, 189) : BV:8
191 : ite(176, 65, 190) : BV:8
192 : ite(175, 62, 191) : BV:8
193 : bvadd(36, 57, 154) : BV:32
194 : eq(193, 58) : BOOL
195 : eq(193, 63) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 72) : BOOL
199 : eq(193, 75) : BOOL
200 : eq(193, 78) : BOOL
201 : eq(193, 81) : BOOL
202 : eq(193, 84) : BOOL
203 : ite(202, 86, 87) : BV:8
204 : ite(201, 83, 203) : BV:8
205 : ite(200, 80, 204) : BV:8
206 : ite(199, 77, 205) : BV:8
207 : ite(198, 74, 206) : BV:8
208 : ite(197, 71, 207) : BV:8
209 : ite(196, 68, 208) : BV:8
210 : ite(195, 65, 209) : BV:8
211 : ite(194, 62, 210) : BV:8
212 : bvadd(57, 154) : BV:32
213 : eq(212, 58) : BOOL
214 : eq(212, 63) : BOOL
215 : eq(212, 66) : BOOL
216 : eq(212, 69) : BOOL
217 : eq(212, 72) : BOOL
218 : eq(212, 75) : BOOL
219 : eq(212, 78) : BOOL
220 : eq(212, 81) : BOOL
221 : eq(212, 84) : BOOL
222 : ite(221, 86, 87) : BV:8
223 : ite(220, 83, 222) : BV:8
224 : ite(219, 80, 223) : BV:8
225 : ite(218, 77, 224) : BV:8
226 : ite(217, 74, 225) : BV:8
227 : ite(216, 71, 226) : BV:8
228 : ite(215, 68, 227) : BV:8
229 : ite(214, 65, 228) : BV:8
230 : ite(213, 62, 229) : BV:8
231 : bvconcat(173, 192, 211, 230) : BV:32
232 : ite(54, 2, 231) : BV:32
233 : lambda(51, 232) : FUNCTION[BV:32 -> BV:32]
234 : map(50, 233) : MAP[BV:32 -> BV:32]
235 : lambda(17, 234) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
236 : map(16, 235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
237 : sym_const(236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 8388603 ] -> 0, [ 8388604; 8388604 ] -> 116, [ 8388605; 8388605 ] -> 84, [ 8388606; 8388606 ] -> 173, [ 8388607; 8388607 ] -> 31, [ 8388608; 8388608 ] -> 250, [ 8388609; 8388609 ] -> 91, [ 8388610; 8388610 ] -> 29, [ 8388611; 8388611 ] -> 114, [ 8388612; 531453043 ] -> 0, [ 531453044; 531453044 ] -> 1, [ 531453045; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 736558171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 736558172; 736558175 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 736558176; 1082850815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082850816; 1082850819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1082850820; 3620670551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3620670552; 3620670555 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3620670556; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1082850816 { 0x408afe00 +1.8587646e2 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3620670552 { 0xd7cf0c58 -674296744 -1.61756420e48 } : BV:32
=input.dst.llvm-%n
1 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 736558172 { 0x2be6fc5c +1.80457639e216 } : BV:32
=input.dst.llvm-%x
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1563162925 { 0x5d2bf92d +1.34354174e59 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46895Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda46896Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 8388611 { 0x800003 +1.35e130 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : eq(50, 48) : BOOL
52 : 114 { 0x72 } : BV:8
53 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
54 : eq(50, 53) : BOOL
55 : 116 { 0x74 } : BV:8
56 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
60 : eq(50, 59) : BOOL
61 : 173 { 0xad -83 } : BV:8
62 : 8388608 { 0x800000 +1.0e130 } : BV:32
63 : eq(50, 62) : BOOL
64 : 250 { 0xfa -6 } : BV:8
65 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
66 : eq(50, 65) : BOOL
67 : 31 { 0x1f } : BV:8
68 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
69 : eq(50, 68) : BOOL
70 : 84 { 0x54 } : BV:8
71 : 8388610 { 0x800002 +1.23e130 } : BV:32
72 : eq(50, 71) : BOOL
73 : 29 { 0x1d } : BV:8
74 : 8388609 { 0x800001 +1.11e130 } : BV:32
75 : eq(50, 74) : BOOL
76 : 91 { 0x5b } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(54, 55, 84) : BV:8
86 : ite(51, 52, 85) : BV:8
87 : bvadd(71, 49) : BV:32
88 : eq(87, 48) : BOOL
89 : eq(87, 53) : BOOL
90 : eq(87, 56) : BOOL
91 : eq(87, 59) : BOOL
92 : eq(87, 62) : BOOL
93 : eq(87, 65) : BOOL
94 : eq(87, 68) : BOOL
95 : eq(87, 71) : BOOL
96 : eq(87, 74) : BOOL
97 : ite(96, 76, 77) : BV:8
98 : ite(95, 73, 97) : BV:8
99 : ite(94, 70, 98) : BV:8
100 : ite(93, 67, 99) : BV:8
101 : ite(92, 64, 100) : BV:8
102 : ite(91, 61, 101) : BV:8
103 : ite(90, 58, 102) : BV:8
104 : ite(89, 55, 103) : BV:8
105 : ite(88, 52, 104) : BV:8
106 : bvadd(74, 49) : BV:32
107 : eq(106, 48) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 56) : BOOL
110 : eq(106, 59) : BOOL
111 : eq(106, 62) : BOOL
112 : eq(106, 65) : BOOL
113 : eq(106, 68) : BOOL
114 : eq(106, 71) : BOOL
115 : eq(106, 74) : BOOL
116 : ite(115, 76, 77) : BV:8
117 : ite(114, 73, 116) : BV:8
118 : ite(113, 70, 117) : BV:8
119 : ite(112, 67, 118) : BV:8
120 : ite(111, 64, 119) : BV:8
121 : ite(110, 61, 120) : BV:8
122 : ite(109, 58, 121) : BV:8
123 : ite(108, 55, 122) : BV:8
124 : ite(107, 52, 123) : BV:8
125 : bvadd(62, 49) : BV:32
126 : eq(125, 48) : BOOL
127 : eq(125, 53) : BOOL
128 : eq(125, 56) : BOOL
129 : eq(125, 59) : BOOL
130 : eq(125, 62) : BOOL
131 : eq(125, 65) : BOOL
132 : eq(125, 68) : BOOL
133 : eq(125, 71) : BOOL
134 : eq(125, 74) : BOOL
135 : ite(134, 76, 77) : BV:8
136 : ite(133, 73, 135) : BV:8
137 : ite(132, 70, 136) : BV:8
138 : ite(131, 67, 137) : BV:8
139 : ite(130, 64, 138) : BV:8
140 : ite(129, 61, 139) : BV:8
141 : ite(128, 58, 140) : BV:8
142 : ite(127, 55, 141) : BV:8
143 : ite(126, 52, 142) : BV:8
144 : bvconcat(86, 105, 124, 143) : BV:32
145 : bvadd(45, 47, 144) : BV:32
146 : eq(145, 48) : BOOL
147 : eq(145, 53) : BOOL
148 : eq(145, 56) : BOOL
149 : eq(145, 59) : BOOL
150 : eq(145, 62) : BOOL
151 : eq(145, 65) : BOOL
152 : eq(145, 68) : BOOL
153 : eq(145, 71) : BOOL
154 : eq(145, 74) : BOOL
155 : ite(154, 76, 77) : BV:8
156 : ite(153, 73, 155) : BV:8
157 : ite(152, 70, 156) : BV:8
158 : ite(151, 67, 157) : BV:8
159 : ite(150, 64, 158) : BV:8
160 : ite(149, 61, 159) : BV:8
161 : ite(148, 58, 160) : BV:8
162 : ite(147, 55, 161) : BV:8
163 : ite(146, 52, 162) : BV:8
164 : bvadd(28, 47, 144) : BV:32
165 : eq(164, 48) : BOOL
166 : eq(164, 53) : BOOL
167 : eq(164, 56) : BOOL
168 : eq(164, 59) : BOOL
169 : eq(164, 62) : BOOL
170 : eq(164, 65) : BOOL
171 : eq(164, 68) : BOOL
172 : eq(164, 71) : BOOL
173 : eq(164, 74) : BOOL
174 : ite(173, 76, 77) : BV:8
175 : ite(172, 73, 174) : BV:8
176 : ite(171, 70, 175) : BV:8
177 : ite(170, 67, 176) : BV:8
178 : ite(169, 64, 177) : BV:8
179 : ite(168, 61, 178) : BV:8
180 : ite(167, 58, 179) : BV:8
181 : ite(166, 55, 180) : BV:8
182 : ite(165, 52, 181) : BV:8
183 : bvadd(24, 47, 144) : BV:32
184 : eq(183, 48) : BOOL
185 : eq(183, 53) : BOOL
186 : eq(183, 56) : BOOL
187 : eq(183, 59) : BOOL
188 : eq(183, 62) : BOOL
189 : eq(183, 65) : BOOL
190 : eq(183, 68) : BOOL
191 : eq(183, 71) : BOOL
192 : eq(183, 74) : BOOL
193 : ite(192, 76, 77) : BV:8
194 : ite(191, 73, 193) : BV:8
195 : ite(190, 70, 194) : BV:8
196 : ite(189, 67, 195) : BV:8
197 : ite(188, 64, 196) : BV:8
198 : ite(187, 61, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 55, 199) : BV:8
201 : ite(184, 52, 200) : BV:8
202 : bvadd(47, 144) : BV:32
203 : eq(202, 48) : BOOL
204 : eq(202, 53) : BOOL
205 : eq(202, 56) : BOOL
206 : eq(202, 59) : BOOL
207 : eq(202, 62) : BOOL
208 : eq(202, 65) : BOOL
209 : eq(202, 68) : BOOL
210 : eq(202, 71) : BOOL
211 : eq(202, 74) : BOOL
212 : ite(211, 76, 77) : BV:8
213 : ite(210, 73, 212) : BV:8
214 : ite(209, 70, 213) : BV:8
215 : ite(208, 67, 214) : BV:8
216 : ite(207, 64, 215) : BV:8
217 : ite(206, 61, 216) : BV:8
218 : ite(205, 58, 217) : BV:8
219 : ite(204, 55, 218) : BV:8
220 : ite(203, 52, 219) : BV:8
221 : bvconcat(163, 182, 201, 220) : BV:32
222 : ite(44, 2, 221) : BV:32
223 : lambda(41, 222) : FUNCTION[BV:32 -> BV:32]
224 : map(40, 223) : MAP[BV:32 -> BV:32]
225 : sym_const(224) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda46885Var : BV:32
20 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
21 : bvule(20, 2) : BOOL
22 : and(21, 11) : BOOL
23 : bvule(2, 8) : BOOL
24 : and(9, 23) : BOOL
25 : ite(24, 8, 8) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : bvule(19, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(16, 19) : BOOL
33 : bvule(19, 16) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 19) : BOOL
37 : bvule(19, 10) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 16, 39) : BV:32
41 : ite(31, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(28, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(19, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda46886Var : BV:32
47 : eq(2, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : 8388611 { 0x800003 +1.35e130 } : BV:32
54 : bvmul(51, 2) : BV:32
55 : bvadd(53, 54) : BV:32
56 : eq(55, 53) : BOOL
57 : 114 { 0x72 } : BV:8
58 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
59 : eq(55, 58) : BOOL
60 : 116 { 0x74 } : BV:8
61 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
62 : eq(55, 61) : BOOL
63 : 1 { 0x1 } : BV:8
64 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
65 : eq(55, 64) : BOOL
66 : 173 { 0xad -83 } : BV:8
67 : 8388608 { 0x800000 +1.0e130 } : BV:32
68 : eq(55, 67) : BOOL
69 : 250 { 0xfa -6 } : BV:8
70 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
71 : eq(55, 70) : BOOL
72 : 31 { 0x1f } : BV:8
73 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
74 : eq(55, 73) : BOOL
75 : 84 { 0x54 } : BV:8
76 : 8388610 { 0x800002 +1.23e130 } : BV:32
77 : eq(55, 76) : BOOL
78 : 29 { 0x1d } : BV:8
79 : 8388609 { 0x800001 +1.11e130 } : BV:32
80 : eq(55, 79) : BOOL
81 : 91 { 0x5b } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : ite(59, 60, 89) : BV:8
91 : ite(56, 57, 90) : BV:8
92 : bvadd(76, 54) : BV:32
93 : eq(92, 53) : BOOL
94 : eq(92, 58) : BOOL
95 : eq(92, 61) : BOOL
96 : eq(92, 64) : BOOL
97 : eq(92, 67) : BOOL
98 : eq(92, 70) : BOOL
99 : eq(92, 73) : BOOL
100 : eq(92, 76) : BOOL
101 : eq(92, 79) : BOOL
102 : ite(101, 81, 82) : BV:8
103 : ite(100, 78, 102) : BV:8
104 : ite(99, 75, 103) : BV:8
105 : ite(98, 72, 104) : BV:8
106 : ite(97, 69, 105) : BV:8
107 : ite(96, 66, 106) : BV:8
108 : ite(95, 63, 107) : BV:8
109 : ite(94, 60, 108) : BV:8
110 : ite(93, 57, 109) : BV:8
111 : bvadd(79, 54) : BV:32
112 : eq(111, 53) : BOOL
113 : eq(111, 58) : BOOL
114 : eq(111, 61) : BOOL
115 : eq(111, 64) : BOOL
116 : eq(111, 67) : BOOL
117 : eq(111, 70) : BOOL
118 : eq(111, 73) : BOOL
119 : eq(111, 76) : BOOL
120 : eq(111, 79) : BOOL
121 : ite(120, 81, 82) : BV:8
122 : ite(119, 78, 121) : BV:8
123 : ite(118, 75, 122) : BV:8
124 : ite(117, 72, 123) : BV:8
125 : ite(116, 69, 124) : BV:8
126 : ite(115, 66, 125) : BV:8
127 : ite(114, 63, 126) : BV:8
128 : ite(113, 60, 127) : BV:8
129 : ite(112, 57, 128) : BV:8
130 : bvadd(67, 54) : BV:32
131 : eq(130, 53) : BOOL
132 : eq(130, 58) : BOOL
133 : eq(130, 61) : BOOL
134 : eq(130, 64) : BOOL
135 : eq(130, 67) : BOOL
136 : eq(130, 70) : BOOL
137 : eq(130, 73) : BOOL
138 : eq(130, 76) : BOOL
139 : eq(130, 79) : BOOL
140 : ite(139, 81, 82) : BV:8
141 : ite(138, 78, 140) : BV:8
142 : ite(137, 75, 141) : BV:8
143 : ite(136, 72, 142) : BV:8
144 : ite(135, 69, 143) : BV:8
145 : ite(134, 66, 144) : BV:8
146 : ite(133, 63, 145) : BV:8
147 : ite(132, 60, 146) : BV:8
148 : ite(131, 57, 147) : BV:8
149 : bvconcat(91, 110, 129, 148) : BV:32
150 : bvadd(50, 52, 149) : BV:32
151 : eq(150, 53) : BOOL
152 : eq(150, 58) : BOOL
153 : eq(150, 61) : BOOL
154 : eq(150, 64) : BOOL
155 : eq(150, 67) : BOOL
156 : eq(150, 70) : BOOL
157 : eq(150, 73) : BOOL
158 : eq(150, 76) : BOOL
159 : eq(150, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 63, 165) : BV:8
167 : ite(152, 60, 166) : BV:8
168 : ite(151, 57, 167) : BV:8
169 : bvadd(35, 52, 149) : BV:32
170 : eq(169, 53) : BOOL
171 : eq(169, 58) : BOOL
172 : eq(169, 61) : BOOL
173 : eq(169, 64) : BOOL
174 : eq(169, 67) : BOOL
175 : eq(169, 70) : BOOL
176 : eq(169, 73) : BOOL
177 : eq(169, 76) : BOOL
178 : eq(169, 79) : BOOL
179 : ite(178, 81, 82) : BV:8
180 : ite(177, 78, 179) : BV:8
181 : ite(176, 75, 180) : BV:8
182 : ite(175, 72, 181) : BV:8
183 : ite(174, 69, 182) : BV:8
184 : ite(173, 66, 183) : BV:8
185 : ite(172, 63, 184) : BV:8
186 : ite(171, 60, 185) : BV:8
187 : ite(170, 57, 186) : BV:8
188 : bvadd(16, 52, 149) : BV:32
189 : eq(188, 53) : BOOL
190 : eq(188, 58) : BOOL
191 : eq(188, 61) : BOOL
192 : eq(188, 64) : BOOL
193 : eq(188, 67) : BOOL
194 : eq(188, 70) : BOOL
195 : eq(188, 73) : BOOL
196 : eq(188, 76) : BOOL
197 : eq(188, 79) : BOOL
198 : ite(197, 81, 82) : BV:8
199 : ite(196, 78, 198) : BV:8
200 : ite(195, 75, 199) : BV:8
201 : ite(194, 72, 200) : BV:8
202 : ite(193, 69, 201) : BV:8
203 : ite(192, 66, 202) : BV:8
204 : ite(191, 63, 203) : BV:8
205 : ite(190, 60, 204) : BV:8
206 : ite(189, 57, 205) : BV:8
207 : bvadd(52, 149) : BV:32
208 : eq(207, 53) : BOOL
209 : eq(207, 58) : BOOL
210 : eq(207, 61) : BOOL
211 : eq(207, 64) : BOOL
212 : eq(207, 67) : BOOL
213 : eq(207, 70) : BOOL
214 : eq(207, 73) : BOOL
215 : eq(207, 76) : BOOL
216 : eq(207, 79) : BOOL
217 : ite(216, 81, 82) : BV:8
218 : ite(215, 78, 217) : BV:8
219 : ite(214, 75, 218) : BV:8
220 : ite(213, 72, 219) : BV:8
221 : ite(212, 69, 220) : BV:8
222 : ite(211, 66, 221) : BV:8
223 : ite(210, 63, 222) : BV:8
224 : ite(209, 60, 223) : BV:8
225 : ite(208, 57, 224) : BV:8
226 : bvconcat(168, 187, 206, 225) : BV:32
227 : ite(49, 1, 226) : BV:32
228 : lambda(46, 227) : FUNCTION[BV:32 -> BV:32]
229 : map(45, 228) : MAP[BV:32 -> BV:32]
230 : sum(17, 18, 229) : SUM[UNIT,MAP[BV:32 -> BV:32]]
231 : sym_const(230) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46901Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
9 : bvule(8, 3) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(3, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
14 : bvule(13, 3) : BOOL
15 : bvule(3, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : bvule(1, 2) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda46902Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : 8388611 { 0x800003 +1.35e130 } : BV:32
49 : bvmul(46, 3) : BV:32
50 : bvadd(48, 49) : BV:32
51 : eq(50, 48) : BOOL
52 : 114 { 0x72 } : BV:8
53 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
54 : eq(50, 53) : BOOL
55 : 116 { 0x74 } : BV:8
56 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
57 : eq(50, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
60 : eq(50, 59) : BOOL
61 : 173 { 0xad -83 } : BV:8
62 : 8388608 { 0x800000 +1.0e130 } : BV:32
63 : eq(50, 62) : BOOL
64 : 250 { 0xfa -6 } : BV:8
65 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
66 : eq(50, 65) : BOOL
67 : 31 { 0x1f } : BV:8
68 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
69 : eq(50, 68) : BOOL
70 : 84 { 0x54 } : BV:8
71 : 8388610 { 0x800002 +1.23e130 } : BV:32
72 : eq(50, 71) : BOOL
73 : 29 { 0x1d } : BV:8
74 : 8388609 { 0x800001 +1.11e130 } : BV:32
75 : eq(50, 74) : BOOL
76 : 91 { 0x5b } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(54, 55, 84) : BV:8
86 : ite(51, 52, 85) : BV:8
87 : bvadd(71, 49) : BV:32
88 : eq(87, 48) : BOOL
89 : eq(87, 53) : BOOL
90 : eq(87, 56) : BOOL
91 : eq(87, 59) : BOOL
92 : eq(87, 62) : BOOL
93 : eq(87, 65) : BOOL
94 : eq(87, 68) : BOOL
95 : eq(87, 71) : BOOL
96 : eq(87, 74) : BOOL
97 : ite(96, 76, 77) : BV:8
98 : ite(95, 73, 97) : BV:8
99 : ite(94, 70, 98) : BV:8
100 : ite(93, 67, 99) : BV:8
101 : ite(92, 64, 100) : BV:8
102 : ite(91, 61, 101) : BV:8
103 : ite(90, 58, 102) : BV:8
104 : ite(89, 55, 103) : BV:8
105 : ite(88, 52, 104) : BV:8
106 : bvadd(74, 49) : BV:32
107 : eq(106, 48) : BOOL
108 : eq(106, 53) : BOOL
109 : eq(106, 56) : BOOL
110 : eq(106, 59) : BOOL
111 : eq(106, 62) : BOOL
112 : eq(106, 65) : BOOL
113 : eq(106, 68) : BOOL
114 : eq(106, 71) : BOOL
115 : eq(106, 74) : BOOL
116 : ite(115, 76, 77) : BV:8
117 : ite(114, 73, 116) : BV:8
118 : ite(113, 70, 117) : BV:8
119 : ite(112, 67, 118) : BV:8
120 : ite(111, 64, 119) : BV:8
121 : ite(110, 61, 120) : BV:8
122 : ite(109, 58, 121) : BV:8
123 : ite(108, 55, 122) : BV:8
124 : ite(107, 52, 123) : BV:8
125 : bvadd(62, 49) : BV:32
126 : eq(125, 48) : BOOL
127 : eq(125, 53) : BOOL
128 : eq(125, 56) : BOOL
129 : eq(125, 59) : BOOL
130 : eq(125, 62) : BOOL
131 : eq(125, 65) : BOOL
132 : eq(125, 68) : BOOL
133 : eq(125, 71) : BOOL
134 : eq(125, 74) : BOOL
135 : ite(134, 76, 77) : BV:8
136 : ite(133, 73, 135) : BV:8
137 : ite(132, 70, 136) : BV:8
138 : ite(131, 67, 137) : BV:8
139 : ite(130, 64, 138) : BV:8
140 : ite(129, 61, 139) : BV:8
141 : ite(128, 58, 140) : BV:8
142 : ite(127, 55, 141) : BV:8
143 : ite(126, 52, 142) : BV:8
144 : bvconcat(86, 105, 124, 143) : BV:32
145 : bvadd(45, 47, 144) : BV:32
146 : eq(145, 48) : BOOL
147 : eq(145, 53) : BOOL
148 : eq(145, 56) : BOOL
149 : eq(145, 59) : BOOL
150 : eq(145, 62) : BOOL
151 : eq(145, 65) : BOOL
152 : eq(145, 68) : BOOL
153 : eq(145, 71) : BOOL
154 : eq(145, 74) : BOOL
155 : ite(154, 76, 77) : BV:8
156 : ite(153, 73, 155) : BV:8
157 : ite(152, 70, 156) : BV:8
158 : ite(151, 67, 157) : BV:8
159 : ite(150, 64, 158) : BV:8
160 : ite(149, 61, 159) : BV:8
161 : ite(148, 58, 160) : BV:8
162 : ite(147, 55, 161) : BV:8
163 : ite(146, 52, 162) : BV:8
164 : bvadd(28, 47, 144) : BV:32
165 : eq(164, 48) : BOOL
166 : eq(164, 53) : BOOL
167 : eq(164, 56) : BOOL
168 : eq(164, 59) : BOOL
169 : eq(164, 62) : BOOL
170 : eq(164, 65) : BOOL
171 : eq(164, 68) : BOOL
172 : eq(164, 71) : BOOL
173 : eq(164, 74) : BOOL
174 : ite(173, 76, 77) : BV:8
175 : ite(172, 73, 174) : BV:8
176 : ite(171, 70, 175) : BV:8
177 : ite(170, 67, 176) : BV:8
178 : ite(169, 64, 177) : BV:8
179 : ite(168, 61, 178) : BV:8
180 : ite(167, 58, 179) : BV:8
181 : ite(166, 55, 180) : BV:8
182 : ite(165, 52, 181) : BV:8
183 : bvadd(24, 47, 144) : BV:32
184 : eq(183, 48) : BOOL
185 : eq(183, 53) : BOOL
186 : eq(183, 56) : BOOL
187 : eq(183, 59) : BOOL
188 : eq(183, 62) : BOOL
189 : eq(183, 65) : BOOL
190 : eq(183, 68) : BOOL
191 : eq(183, 71) : BOOL
192 : eq(183, 74) : BOOL
193 : ite(192, 76, 77) : BV:8
194 : ite(191, 73, 193) : BV:8
195 : ite(190, 70, 194) : BV:8
196 : ite(189, 67, 195) : BV:8
197 : ite(188, 64, 196) : BV:8
198 : ite(187, 61, 197) : BV:8
199 : ite(186, 58, 198) : BV:8
200 : ite(185, 55, 199) : BV:8
201 : ite(184, 52, 200) : BV:8
202 : bvadd(47, 144) : BV:32
203 : eq(202, 48) : BOOL
204 : eq(202, 53) : BOOL
205 : eq(202, 56) : BOOL
206 : eq(202, 59) : BOOL
207 : eq(202, 62) : BOOL
208 : eq(202, 65) : BOOL
209 : eq(202, 68) : BOOL
210 : eq(202, 71) : BOOL
211 : eq(202, 74) : BOOL
212 : ite(211, 76, 77) : BV:8
213 : ite(210, 73, 212) : BV:8
214 : ite(209, 70, 213) : BV:8
215 : ite(208, 67, 214) : BV:8
216 : ite(207, 64, 215) : BV:8
217 : ite(206, 61, 216) : BV:8
218 : ite(205, 58, 217) : BV:8
219 : ite(204, 55, 218) : BV:8
220 : ite(203, 52, 219) : BV:8
221 : bvconcat(163, 182, 201, 220) : BV:32
222 : ite(44, 2, 221) : BV:32
223 : lambda(41, 222) : FUNCTION[BV:32 -> BV:32]
224 : map(40, 223) : MAP[BV:32 -> BV:32]
225 : sym_const(224) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 32977398 { 0x1f731f6 +1.93121218e132 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3620670552 { 0xd7cf0c58 -674296744 -1.61756420e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3620670555 { 0xd7cf0c5b -674296741 -1.61756455e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 736558172 { 0x2be6fc5c +1.80457639e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 736558175 { 0x2be6fc5f +1.80457675e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1082850816 { 0x408afe00 +1.8587646e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1082850819 { 0x408afe03 +1.8587682e2 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46554Var : BV:32
2 : Lambda46555Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 8388611 { 0x800003 +1.35e130 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 114 { 0x72 } : BV:8
55 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 116 { 0x74 } : BV:8
58 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 173 { 0xad -83 } : BV:8
64 : 8388608 { 0x800000 +1.0e130 } : BV:32
65 : eq(52, 64) : BOOL
66 : 250 { 0xfa -6 } : BV:8
67 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
68 : eq(52, 67) : BOOL
69 : 31 { 0x1f } : BV:8
70 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
71 : eq(52, 70) : BOOL
72 : 84 { 0x54 } : BV:8
73 : 8388610 { 0x800002 +1.23e130 } : BV:32
74 : eq(52, 73) : BOOL
75 : 29 { 0x1d } : BV:8
76 : 8388609 { 0x800001 +1.11e130 } : BV:32
77 : eq(52, 76) : BOOL
78 : 91 { 0x5b } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(56, 57, 86) : BV:8
88 : ite(53, 54, 87) : BV:8
89 : bvadd(73, 51) : BV:32
90 : eq(89, 50) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 58) : BOOL
93 : eq(89, 61) : BOOL
94 : eq(89, 64) : BOOL
95 : eq(89, 67) : BOOL
96 : eq(89, 70) : BOOL
97 : eq(89, 73) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 75, 99) : BV:8
101 : ite(96, 72, 100) : BV:8
102 : ite(95, 69, 101) : BV:8
103 : ite(94, 66, 102) : BV:8
104 : ite(93, 63, 103) : BV:8
105 : ite(92, 60, 104) : BV:8
106 : ite(91, 57, 105) : BV:8
107 : ite(90, 54, 106) : BV:8
108 : bvadd(76, 51) : BV:32
109 : eq(108, 50) : BOOL
110 : eq(108, 55) : BOOL
111 : eq(108, 58) : BOOL
112 : eq(108, 61) : BOOL
113 : eq(108, 64) : BOOL
114 : eq(108, 67) : BOOL
115 : eq(108, 70) : BOOL
116 : eq(108, 73) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 75, 118) : BV:8
120 : ite(115, 72, 119) : BV:8
121 : ite(114, 69, 120) : BV:8
122 : ite(113, 66, 121) : BV:8
123 : ite(112, 63, 122) : BV:8
124 : ite(111, 60, 123) : BV:8
125 : ite(110, 57, 124) : BV:8
126 : ite(109, 54, 125) : BV:8
127 : bvadd(64, 51) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : eq(127, 73) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 75, 137) : BV:8
139 : ite(134, 72, 138) : BV:8
140 : ite(133, 69, 139) : BV:8
141 : ite(132, 66, 140) : BV:8
142 : ite(131, 63, 141) : BV:8
143 : ite(130, 60, 142) : BV:8
144 : ite(129, 57, 143) : BV:8
145 : ite(128, 54, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(47, 49, 146) : BV:32
148 : eq(147, 50) : BOOL
149 : eq(147, 55) : BOOL
150 : eq(147, 58) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : eq(147, 70) : BOOL
155 : eq(147, 73) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 75, 157) : BV:8
159 : ite(154, 72, 158) : BV:8
160 : ite(153, 69, 159) : BV:8
161 : ite(152, 66, 160) : BV:8
162 : ite(151, 63, 161) : BV:8
163 : ite(150, 60, 162) : BV:8
164 : ite(149, 57, 163) : BV:8
165 : ite(148, 54, 164) : BV:8
166 : bvadd(36, 49, 146) : BV:32
167 : eq(166, 50) : BOOL
168 : eq(166, 55) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 61) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 67) : BOOL
173 : eq(166, 70) : BOOL
174 : eq(166, 73) : BOOL
175 : eq(166, 76) : BOOL
176 : ite(175, 78, 79) : BV:8
177 : ite(174, 75, 176) : BV:8
178 : ite(173, 72, 177) : BV:8
179 : ite(172, 69, 178) : BV:8
180 : ite(171, 66, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 60, 181) : BV:8
183 : ite(168, 57, 182) : BV:8
184 : ite(167, 54, 183) : BV:8
185 : bvadd(32, 49, 146) : BV:32
186 : eq(185, 50) : BOOL
187 : eq(185, 55) : BOOL
188 : eq(185, 58) : BOOL
189 : eq(185, 61) : BOOL
190 : eq(185, 64) : BOOL
191 : eq(185, 67) : BOOL
192 : eq(185, 70) : BOOL
193 : eq(185, 73) : BOOL
194 : eq(185, 76) : BOOL
195 : ite(194, 78, 79) : BV:8
196 : ite(193, 75, 195) : BV:8
197 : ite(192, 72, 196) : BV:8
198 : ite(191, 69, 197) : BV:8
199 : ite(190, 66, 198) : BV:8
200 : ite(189, 63, 199) : BV:8
201 : ite(188, 60, 200) : BV:8
202 : ite(187, 57, 201) : BV:8
203 : ite(186, 54, 202) : BV:8
204 : bvadd(49, 146) : BV:32
205 : eq(204, 50) : BOOL
206 : eq(204, 55) : BOOL
207 : eq(204, 58) : BOOL
208 : eq(204, 61) : BOOL
209 : eq(204, 64) : BOOL
210 : eq(204, 67) : BOOL
211 : eq(204, 70) : BOOL
212 : eq(204, 73) : BOOL
213 : eq(204, 76) : BOOL
214 : ite(213, 78, 79) : BV:8
215 : ite(212, 75, 214) : BV:8
216 : ite(211, 72, 215) : BV:8
217 : ite(210, 69, 216) : BV:8
218 : ite(209, 66, 217) : BV:8
219 : ite(208, 63, 218) : BV:8
220 : ite(207, 60, 219) : BV:8
221 : ite(206, 57, 220) : BV:8
222 : ite(205, 54, 221) : BV:8
223 : bvconcat(165, 184, 203, 222) : BV:32
224 : ite(6, 3, 223) : BV:32
225 : ite(46, 223, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46559Var : BV:32
2 : Lambda46560Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2756605321 ] -> true, [ 2756605322; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2756605321 ] -> true, [ 2756605322; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46568Var : BV:32
2 : Lambda46569Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2756605321 { 0xa44e7589 -1538361975 -1.61296188e201 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2756605323 { 0xa44e758b -1538361973 -1.61296212e201 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2756605322 { 0xa44e758a -1538361974 -1.61296200e201 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46564Var : BV:32
2 : Lambda46565Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 114 { 0x72 } : BV:8
15 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 116 { 0x74 } : BV:8
18 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 173 { 0xad -83 } : BV:8
24 : 8388608 { 0x800000 +1.0e130 } : BV:32
25 : eq(12, 24) : BOOL
26 : 250 { 0xfa -6 } : BV:8
27 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 31 { 0x1f } : BV:8
30 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 84 { 0x54 } : BV:8
33 : 8388610 { 0x800002 +1.23e130 } : BV:32
34 : eq(12, 33) : BOOL
35 : 29 { 0x1d } : BV:8
36 : 8388609 { 0x800001 +1.11e130 } : BV:32
37 : eq(12, 36) : BOOL
38 : 91 { 0x5b } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46575Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 114 { 0x72 } : BV:8
13 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 173 { 0xad -83 } : BV:8
21 : 8388608 { 0x800000 +1.0e130 } : BV:32
22 : eq(9, 21) : BOOL
23 : 250 { 0xfa -6 } : BV:8
24 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 31 { 0x1f } : BV:8
27 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
28 : eq(9, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 8388610 { 0x800002 +1.23e130 } : BV:32
31 : eq(9, 30) : BOOL
32 : 29 { 0x1d } : BV:8
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : eq(9, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46579Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 114 { 0x72 } : BV:8
13 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 173 { 0xad -83 } : BV:8
21 : 8388608 { 0x800000 +1.0e130 } : BV:32
22 : eq(9, 21) : BOOL
23 : 250 { 0xfa -6 } : BV:8
24 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 31 { 0x1f } : BV:8
27 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
28 : eq(9, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 8388610 { 0x800002 +1.23e130 } : BV:32
31 : eq(9, 30) : BOOL
32 : 29 { 0x1d } : BV:8
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : eq(9, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46583Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 531453044 { 0x1fad5474 +1.35413980e192 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 8388611 { 0x800003 +1.35e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 114 { 0x72 } : BV:8
13 : 8388604 { 0x7ffffc +1.99999952e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 8388606 { 0x7ffffe +1.99999976e129 } : BV:32
19 : eq(9, 18) : BOOL
20 : 173 { 0xad -83 } : BV:8
21 : 8388608 { 0x800000 +1.0e130 } : BV:32
22 : eq(9, 21) : BOOL
23 : 250 { 0xfa -6 } : BV:8
24 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
25 : eq(9, 24) : BOOL
26 : 31 { 0x1f } : BV:8
27 : 8388605 { 0x7ffffd +1.99999964e129 } : BV:32
28 : eq(9, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 8388610 { 0x800002 +1.23e130 } : BV:32
31 : eq(9, 30) : BOOL
32 : 29 { 0x1d } : BV:8
33 : 8388609 { 0x800001 +1.11e130 } : BV:32
34 : eq(9, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1835731678
=counter_example_end
=global nodece 52 num_edges_traversed 3
=global nodece 52 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3v487.ce4144.num_edges_traversed1
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce4144 fea0d995a2aac9d72128bab45bdd575
=input.spec-%var-x-1
1 : Lambda46743Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46744Var : BV:32
18 : Lambda46745Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46746Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
63 : eq(61, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
66 : eq(61, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
69 : eq(61, 68) : BOOL
70 : 5 { 0x5 } : BV:8
71 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
72 : eq(61, 71) : BOOL
73 : 220 { 0xdc -36 } : BV:8
74 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
75 : eq(61, 74) : BOOL
76 : 126 { 0x7e } : BV:8
77 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
78 : eq(61, 77) : BOOL
79 : 17 { 0x11 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
88 : bvadd(87, 60) : BV:32
89 : eq(88, 62) : BOOL
90 : eq(88, 65) : BOOL
91 : eq(88, 68) : BOOL
92 : eq(88, 71) : BOOL
93 : eq(88, 74) : BOOL
94 : eq(88, 77) : BOOL
95 : ite(94, 79, 80) : BV:8
96 : ite(93, 76, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
102 : bvadd(101, 60) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : eq(102, 68) : BOOL
106 : eq(102, 71) : BOOL
107 : eq(102, 74) : BOOL
108 : eq(102, 77) : BOOL
109 : ite(108, 79, 80) : BV:8
110 : ite(107, 76, 109) : BV:8
111 : ite(106, 73, 110) : BV:8
112 : ite(105, 70, 111) : BV:8
113 : ite(104, 67, 112) : BV:8
114 : ite(103, 64, 113) : BV:8
115 : bvadd(65, 60) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 68) : BOOL
119 : eq(115, 71) : BOOL
120 : eq(115, 74) : BOOL
121 : eq(115, 77) : BOOL
122 : ite(121, 79, 80) : BV:8
123 : ite(120, 76, 122) : BV:8
124 : ite(119, 73, 123) : BV:8
125 : ite(118, 70, 124) : BV:8
126 : ite(117, 67, 125) : BV:8
127 : ite(116, 64, 126) : BV:8
128 : bvconcat(86, 100, 114, 127) : BV:32
129 : bvadd(56, 58, 128) : BV:32
130 : eq(129, 62) : BOOL
131 : eq(129, 65) : BOOL
132 : eq(129, 68) : BOOL
133 : eq(129, 71) : BOOL
134 : eq(129, 74) : BOOL
135 : eq(129, 77) : BOOL
136 : ite(135, 79, 80) : BV:8
137 : ite(134, 76, 136) : BV:8
138 : ite(133, 73, 137) : BV:8
139 : ite(132, 70, 138) : BV:8
140 : ite(131, 67, 139) : BV:8
141 : ite(130, 64, 140) : BV:8
142 : 2 { 0x2 +1.23e129 } : BV:32
143 : bvadd(142, 58, 128) : BV:32
144 : eq(143, 62) : BOOL
145 : eq(143, 65) : BOOL
146 : eq(143, 68) : BOOL
147 : eq(143, 71) : BOOL
148 : eq(143, 74) : BOOL
149 : eq(143, 77) : BOOL
150 : ite(149, 79, 80) : BV:8
151 : ite(148, 76, 150) : BV:8
152 : ite(147, 73, 151) : BV:8
153 : ite(146, 70, 152) : BV:8
154 : ite(145, 67, 153) : BV:8
155 : ite(144, 64, 154) : BV:8
156 : 1 { 0x1 +1.11e129 } : BV:32
157 : bvadd(156, 58, 128) : BV:32
158 : eq(157, 62) : BOOL
159 : eq(157, 65) : BOOL
160 : eq(157, 68) : BOOL
161 : eq(157, 71) : BOOL
162 : eq(157, 74) : BOOL
163 : eq(157, 77) : BOOL
164 : ite(163, 79, 80) : BV:8
165 : ite(162, 76, 164) : BV:8
166 : ite(161, 73, 165) : BV:8
167 : ite(160, 70, 166) : BV:8
168 : ite(159, 67, 167) : BV:8
169 : ite(158, 64, 168) : BV:8
170 : bvadd(58, 128) : BV:32
171 : eq(170, 62) : BOOL
172 : eq(170, 65) : BOOL
173 : eq(170, 68) : BOOL
174 : eq(170, 71) : BOOL
175 : eq(170, 74) : BOOL
176 : eq(170, 77) : BOOL
177 : ite(176, 79, 80) : BV:8
178 : ite(175, 76, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 67, 180) : BV:8
182 : ite(171, 64, 181) : BV:8
183 : bvconcat(141, 155, 169, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46764Var : BV:32
18 : Lambda46765Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46766Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
82 : eq(80, 81) : BOOL
83 : 2 { 0x2 } : BV:8
84 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
85 : eq(80, 84) : BOOL
86 : 1 { 0x1 } : BV:8
87 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
88 : eq(80, 87) : BOOL
89 : 5 { 0x5 } : BV:8
90 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
91 : eq(80, 90) : BOOL
92 : 220 { 0xdc -36 } : BV:8
93 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
94 : eq(80, 93) : BOOL
95 : 126 { 0x7e } : BV:8
96 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
97 : eq(80, 96) : BOOL
98 : 17 { 0x11 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(85, 86, 103) : BV:8
105 : ite(82, 83, 104) : BV:8
106 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 90) : BOOL
112 : eq(107, 93) : BOOL
113 : eq(107, 96) : BOOL
114 : ite(113, 98, 99) : BV:8
115 : ite(112, 95, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
121 : bvadd(120, 79) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : eq(121, 87) : BOOL
125 : eq(121, 90) : BOOL
126 : eq(121, 93) : BOOL
127 : eq(121, 96) : BOOL
128 : ite(127, 98, 99) : BV:8
129 : ite(126, 95, 128) : BV:8
130 : ite(125, 92, 129) : BV:8
131 : ite(124, 89, 130) : BV:8
132 : ite(123, 86, 131) : BV:8
133 : ite(122, 83, 132) : BV:8
134 : bvadd(84, 79) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 87) : BOOL
138 : eq(134, 90) : BOOL
139 : eq(134, 93) : BOOL
140 : eq(134, 96) : BOOL
141 : ite(140, 98, 99) : BV:8
142 : ite(139, 95, 141) : BV:8
143 : ite(138, 92, 142) : BV:8
144 : ite(137, 89, 143) : BV:8
145 : ite(136, 86, 144) : BV:8
146 : ite(135, 83, 145) : BV:8
147 : bvconcat(105, 119, 133, 146) : BV:32
148 : bvadd(75, 77, 147) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 87) : BOOL
152 : eq(148, 90) : BOOL
153 : eq(148, 93) : BOOL
154 : eq(148, 96) : BOOL
155 : ite(154, 98, 99) : BV:8
156 : ite(153, 95, 155) : BV:8
157 : ite(152, 92, 156) : BV:8
158 : ite(151, 89, 157) : BV:8
159 : ite(150, 86, 158) : BV:8
160 : ite(149, 83, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 77, 147) : BV:32
163 : eq(162, 81) : BOOL
164 : eq(162, 84) : BOOL
165 : eq(162, 87) : BOOL
166 : eq(162, 90) : BOOL
167 : eq(162, 93) : BOOL
168 : eq(162, 96) : BOOL
169 : ite(168, 98, 99) : BV:8
170 : ite(167, 95, 169) : BV:8
171 : ite(166, 92, 170) : BV:8
172 : ite(165, 89, 171) : BV:8
173 : ite(164, 86, 172) : BV:8
174 : ite(163, 83, 173) : BV:8
175 : 1 { 0x1 +1.11e129 } : BV:32
176 : bvadd(175, 77, 147) : BV:32
177 : eq(176, 81) : BOOL
178 : eq(176, 84) : BOOL
179 : eq(176, 87) : BOOL
180 : eq(176, 90) : BOOL
181 : eq(176, 93) : BOOL
182 : eq(176, 96) : BOOL
183 : ite(182, 98, 99) : BV:8
184 : ite(181, 95, 183) : BV:8
185 : ite(180, 92, 184) : BV:8
186 : ite(179, 89, 185) : BV:8
187 : ite(178, 86, 186) : BV:8
188 : ite(177, 83, 187) : BV:8
189 : bvadd(77, 147) : BV:32
190 : eq(189, 81) : BOOL
191 : eq(189, 84) : BOOL
192 : eq(189, 87) : BOOL
193 : eq(189, 90) : BOOL
194 : eq(189, 93) : BOOL
195 : eq(189, 96) : BOOL
196 : ite(195, 98, 99) : BV:8
197 : ite(194, 95, 196) : BV:8
198 : ite(193, 92, 197) : BV:8
199 : ite(192, 89, 198) : BV:8
200 : ite(191, 86, 199) : BV:8
201 : ite(190, 83, 200) : BV:8
202 : bvconcat(160, 174, 188, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : ite(74, 202, 203) : BV:32
205 : ite(55, 2, 204) : BV:32
206 : lambda(52, 205) : FUNCTION[BV:32 -> BV:32]
207 : map(51, 206) : MAP[BV:32 -> BV:32]
208 : lambda(17, 207) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
209 : map(16, 208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
210 : sym_const(209) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 85032679 ] -> 0, [ 85032680; 85032680 ] -> 2, [ 85032681; 160956415 ] -> 0, [ 160956416; 160956416 ] -> 1, [ 160956417; 1338507259 ] -> 0, [ 1338507260; 1338507260 ] -> 220, [ 1338507261; 1338507261 ] -> 126, [ 1338507262; 1338507262 ] -> 17, [ 1338507263; 1338507263 ] -> 5, [ 1338507264; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 1071742275 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1071742276; 1071742279 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1071742280; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1071742276 { 0x3fe17d44 +1.76163530e0 } : BV:32
=input.dst.llvm-%n
1 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 1177550844 { 0x462ffffc +1.37499952e13 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 294387711 { 0x118bffff +1.9374988e164 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46770Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46771Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
24 : bvadd(18, 22, 23) : BV:32
25 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1 { 0x1 } : BV:8
31 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
32 : eq(24, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
35 : eq(24, 34) : BOOL
36 : 220 { 0xdc -36 } : BV:8
37 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
38 : eq(24, 37) : BOOL
39 : 126 { 0x7e } : BV:8
40 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
41 : eq(24, 40) : BOOL
42 : 17 { 0x11 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : ite(26, 27, 48) : BV:8
50 : bvadd(20, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 40) : BOOL
57 : ite(56, 42, 43) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 22, 23) : BV:32
65 : eq(64, 25) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 31) : BOOL
68 : eq(64, 34) : BOOL
69 : eq(64, 37) : BOOL
70 : eq(64, 40) : BOOL
71 : ite(70, 42, 43) : BV:8
72 : ite(69, 39, 71) : BV:8
73 : ite(68, 36, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : ite(66, 30, 74) : BV:8
76 : ite(65, 27, 75) : BV:8
77 : bvadd(22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : ite(83, 42, 43) : BV:8
85 : ite(82, 39, 84) : BV:8
86 : ite(81, 36, 85) : BV:8
87 : ite(80, 33, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 27, 88) : BV:8
90 : bvconcat(49, 62, 76, 89) : BV:32
91 : ite(19, 20, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 294387712 { 0x118c0000 +1.9375000e164 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda46752Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46753Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(19, 4) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
27 : bvadd(20, 25, 26) : BV:32
28 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
29 : eq(27, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
32 : eq(27, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
35 : eq(27, 34) : BOOL
36 : 5 { 0x5 } : BV:8
37 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
38 : eq(27, 37) : BOOL
39 : 220 { 0xdc -36 } : BV:8
40 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
41 : eq(27, 40) : BOOL
42 : 126 { 0x7e } : BV:8
43 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
44 : eq(27, 43) : BOOL
45 : 17 { 0x11 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : bvadd(22, 25, 26) : BV:32
54 : eq(53, 28) : BOOL
55 : eq(53, 31) : BOOL
56 : eq(53, 34) : BOOL
57 : eq(53, 37) : BOOL
58 : eq(53, 40) : BOOL
59 : eq(53, 43) : BOOL
60 : ite(59, 45, 46) : BV:8
61 : ite(58, 42, 60) : BV:8
62 : ite(57, 39, 61) : BV:8
63 : ite(56, 36, 62) : BV:8
64 : ite(55, 33, 63) : BV:8
65 : ite(54, 30, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 25, 26) : BV:32
68 : eq(67, 28) : BOOL
69 : eq(67, 31) : BOOL
70 : eq(67, 34) : BOOL
71 : eq(67, 37) : BOOL
72 : eq(67, 40) : BOOL
73 : eq(67, 43) : BOOL
74 : ite(73, 45, 46) : BV:8
75 : ite(72, 42, 74) : BV:8
76 : ite(71, 39, 75) : BV:8
77 : ite(70, 36, 76) : BV:8
78 : ite(69, 33, 77) : BV:8
79 : ite(68, 30, 78) : BV:8
80 : bvadd(25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 42, 87) : BV:8
89 : ite(84, 39, 88) : BV:8
90 : ite(83, 36, 89) : BV:8
91 : ite(82, 33, 90) : BV:8
92 : ite(81, 30, 91) : BV:8
93 : bvconcat(52, 65, 79, 92) : BV:32
94 : ite(23, 4, 93) : BV:32
95 : ite(21, 22, 94) : BV:32
96 : lambda(19, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(18, 96) : MAP[BV:32 -> BV:32]
98 : sum(1, 2, 97) : SUM[UNIT,MAP[BV:32 -> BV:32]]
99 : sym_const(98) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 2) : BV:32
23 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
24 : bvadd(2, 22, 23) : BV:32
25 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1 { 0x1 } : BV:8
31 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
32 : eq(24, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
35 : eq(24, 34) : BOOL
36 : 220 { 0xdc -36 } : BV:8
37 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
38 : eq(24, 37) : BOOL
39 : 126 { 0x7e } : BV:8
40 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
41 : eq(24, 40) : BOOL
42 : 17 { 0x11 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : ite(26, 27, 48) : BV:8
50 : bvadd(20, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 40) : BOOL
57 : ite(56, 42, 43) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : bvadd(16, 22, 23) : BV:32
64 : eq(63, 25) : BOOL
65 : eq(63, 28) : BOOL
66 : eq(63, 31) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 40) : BOOL
70 : ite(69, 42, 43) : BV:8
71 : ite(68, 39, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 33, 72) : BV:8
74 : ite(65, 30, 73) : BV:8
75 : ite(64, 27, 74) : BV:8
76 : bvadd(22, 23) : BV:32
77 : eq(76, 25) : BOOL
78 : eq(76, 28) : BOOL
79 : eq(76, 31) : BOOL
80 : eq(76, 34) : BOOL
81 : eq(76, 37) : BOOL
82 : eq(76, 40) : BOOL
83 : ite(82, 42, 43) : BV:8
84 : ite(81, 39, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 33, 85) : BV:8
87 : ite(78, 30, 86) : BV:8
88 : ite(77, 27, 87) : BV:8
89 : bvconcat(49, 62, 75, 88) : BV:32
90 : ite(19, 20, 89) : BV:32
91 : sum(17, 18, 90) : SUM[UNIT,BV:32]
92 : sym_const(91) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 634812219 { 0x25d6773b +1.67551362e204 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46775Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46776Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(17, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
25 : bvadd(18, 23, 24) : BV:32
26 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
30 : eq(25, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
33 : eq(25, 32) : BOOL
34 : 5 { 0x5 } : BV:8
35 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
36 : eq(25, 35) : BOOL
37 : 220 { 0xdc -36 } : BV:8
38 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
39 : eq(25, 38) : BOOL
40 : 126 { 0x7e } : BV:8
41 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
42 : eq(25, 41) : BOOL
43 : 17 { 0x11 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : bvadd(20, 23, 24) : BV:32
52 : eq(51, 26) : BOOL
53 : eq(51, 29) : BOOL
54 : eq(51, 32) : BOOL
55 : eq(51, 35) : BOOL
56 : eq(51, 38) : BOOL
57 : eq(51, 41) : BOOL
58 : ite(57, 43, 44) : BV:8
59 : ite(56, 40, 58) : BV:8
60 : ite(55, 37, 59) : BV:8
61 : ite(54, 34, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 23, 24) : BV:32
66 : eq(65, 26) : BOOL
67 : eq(65, 29) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 35) : BOOL
70 : eq(65, 38) : BOOL
71 : eq(65, 41) : BOOL
72 : ite(71, 43, 44) : BV:8
73 : ite(70, 40, 72) : BV:8
74 : ite(69, 37, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : ite(67, 31, 75) : BV:8
77 : ite(66, 28, 76) : BV:8
78 : bvadd(23, 24) : BV:32
79 : eq(78, 26) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : ite(84, 43, 44) : BV:8
86 : ite(83, 40, 85) : BV:8
87 : ite(82, 37, 86) : BV:8
88 : ite(81, 34, 87) : BV:8
89 : ite(80, 31, 88) : BV:8
90 : ite(79, 28, 89) : BV:8
91 : bvconcat(50, 63, 77, 90) : BV:32
92 : ite(21, 2, 91) : BV:32
93 : ite(19, 20, 92) : BV:32
94 : lambda(17, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(16, 94) : MAP[BV:32 -> BV:32]
96 : sym_const(95) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 294387711 { 0x118bffff +1.9374988e164 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1304729837 { 0x4dc498ed +1.53591692e28 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 1177550844 { 0x462ffffc +1.37499952e13 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1071742276 { 0x3fe17d44 +1.76163530e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1071742279 { 0x3fe17d47 +1.76163566e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46585Var : BV:32
2 : Lambda46586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
14 : eq(12, 13) : BOOL
15 : 2 { 0x2 } : BV:8
16 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
17 : eq(12, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
20 : eq(12, 19) : BOOL
21 : 5 { 0x5 } : BV:8
22 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
23 : eq(12, 22) : BOOL
24 : 220 { 0xdc -36 } : BV:8
25 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
26 : eq(12, 25) : BOOL
27 : 126 { 0x7e } : BV:8
28 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
29 : eq(12, 28) : BOOL
30 : 17 { 0x11 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
39 : bvadd(38, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
53 : bvadd(52, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(16, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : bvadd(7, 9, 79) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 16) : BOOL
83 : eq(80, 19) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : eq(80, 28) : BOOL
87 : ite(86, 30, 31) : BV:8
88 : ite(85, 27, 87) : BV:8
89 : ite(84, 24, 88) : BV:8
90 : ite(83, 21, 89) : BV:8
91 : ite(82, 18, 90) : BV:8
92 : ite(81, 15, 91) : BV:8
93 : 2 { 0x2 +1.23e129 } : BV:32
94 : bvadd(93, 9, 79) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 19) : BOOL
98 : eq(94, 22) : BOOL
99 : eq(94, 25) : BOOL
100 : eq(94, 28) : BOOL
101 : ite(100, 30, 31) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 24, 102) : BV:8
104 : ite(97, 21, 103) : BV:8
105 : ite(96, 18, 104) : BV:8
106 : ite(95, 15, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 9, 79) : BV:32
109 : eq(108, 13) : BOOL
110 : eq(108, 16) : BOOL
111 : eq(108, 19) : BOOL
112 : eq(108, 22) : BOOL
113 : eq(108, 25) : BOOL
114 : eq(108, 28) : BOOL
115 : ite(114, 30, 31) : BV:8
116 : ite(113, 27, 115) : BV:8
117 : ite(112, 24, 116) : BV:8
118 : ite(111, 21, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 15, 119) : BV:8
121 : bvadd(9, 79) : BV:32
122 : eq(121, 13) : BOOL
123 : eq(121, 16) : BOOL
124 : eq(121, 19) : BOOL
125 : eq(121, 22) : BOOL
126 : eq(121, 25) : BOOL
127 : eq(121, 28) : BOOL
128 : ite(127, 30, 31) : BV:8
129 : ite(126, 27, 128) : BV:8
130 : ite(125, 24, 129) : BV:8
131 : ite(124, 21, 130) : BV:8
132 : ite(123, 18, 131) : BV:8
133 : ite(122, 15, 132) : BV:8
134 : bvconcat(92, 106, 120, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46587Var : BV:32
2 : Lambda46588Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2177151975 ] -> true, [ 2177151976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2177151975 ] -> true, [ 2177151976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46597Var : BV:32
2 : Lambda46598Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46601Var : BV:32
2 : Lambda46602Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 5 { 0x5 +1.59e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 7 { 0x7 +1.83e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
55 : eq(53, 54) : BOOL
56 : 2 { 0x2 } : BV:8
57 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
58 : eq(53, 57) : BOOL
59 : 1 { 0x1 } : BV:8
60 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
61 : eq(53, 60) : BOOL
62 : 5 { 0x5 } : BV:8
63 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
64 : eq(53, 63) : BOOL
65 : 220 { 0xdc -36 } : BV:8
66 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
67 : eq(53, 66) : BOOL
68 : 126 { 0x7e } : BV:8
69 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
70 : eq(53, 69) : BOOL
71 : 17 { 0x11 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(58, 59, 76) : BV:8
78 : ite(55, 56, 77) : BV:8
79 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 63) : BOOL
85 : eq(80, 66) : BOOL
86 : eq(80, 69) : BOOL
87 : ite(86, 71, 72) : BV:8
88 : ite(85, 68, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
94 : bvadd(93, 52) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : eq(94, 60) : BOOL
98 : eq(94, 63) : BOOL
99 : eq(94, 66) : BOOL
100 : eq(94, 69) : BOOL
101 : ite(100, 71, 72) : BV:8
102 : ite(99, 68, 101) : BV:8
103 : ite(98, 65, 102) : BV:8
104 : ite(97, 62, 103) : BV:8
105 : ite(96, 59, 104) : BV:8
106 : ite(95, 56, 105) : BV:8
107 : bvadd(57, 52) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 60) : BOOL
111 : eq(107, 63) : BOOL
112 : eq(107, 66) : BOOL
113 : eq(107, 69) : BOOL
114 : ite(113, 71, 72) : BV:8
115 : ite(112, 68, 114) : BV:8
116 : ite(111, 65, 115) : BV:8
117 : ite(110, 62, 116) : BV:8
118 : ite(109, 59, 117) : BV:8
119 : ite(108, 56, 118) : BV:8
120 : bvconcat(78, 92, 106, 119) : BV:32
121 : bvadd(48, 50, 120) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 60) : BOOL
125 : eq(121, 63) : BOOL
126 : eq(121, 66) : BOOL
127 : eq(121, 69) : BOOL
128 : ite(127, 71, 72) : BV:8
129 : ite(126, 68, 128) : BV:8
130 : ite(125, 65, 129) : BV:8
131 : ite(124, 62, 130) : BV:8
132 : ite(123, 59, 131) : BV:8
133 : ite(122, 56, 132) : BV:8
134 : 2 { 0x2 +1.23e129 } : BV:32
135 : bvadd(134, 50, 120) : BV:32
136 : eq(135, 54) : BOOL
137 : eq(135, 57) : BOOL
138 : eq(135, 60) : BOOL
139 : eq(135, 63) : BOOL
140 : eq(135, 66) : BOOL
141 : eq(135, 69) : BOOL
142 : ite(141, 71, 72) : BV:8
143 : ite(140, 68, 142) : BV:8
144 : ite(139, 65, 143) : BV:8
145 : ite(138, 62, 144) : BV:8
146 : ite(137, 59, 145) : BV:8
147 : ite(136, 56, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 50, 120) : BV:32
150 : eq(149, 54) : BOOL
151 : eq(149, 57) : BOOL
152 : eq(149, 60) : BOOL
153 : eq(149, 63) : BOOL
154 : eq(149, 66) : BOOL
155 : eq(149, 69) : BOOL
156 : ite(155, 71, 72) : BV:8
157 : ite(154, 68, 156) : BV:8
158 : ite(153, 65, 157) : BV:8
159 : ite(152, 62, 158) : BV:8
160 : ite(151, 59, 159) : BV:8
161 : ite(150, 56, 160) : BV:8
162 : bvadd(50, 120) : BV:32
163 : eq(162, 54) : BOOL
164 : eq(162, 57) : BOOL
165 : eq(162, 60) : BOOL
166 : eq(162, 63) : BOOL
167 : eq(162, 66) : BOOL
168 : eq(162, 69) : BOOL
169 : ite(168, 71, 72) : BV:8
170 : ite(167, 68, 169) : BV:8
171 : ite(166, 65, 170) : BV:8
172 : ite(165, 62, 171) : BV:8
173 : ite(164, 59, 172) : BV:8
174 : ite(163, 56, 173) : BV:8
175 : bvconcat(133, 147, 161, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : ite(47, 175, 176) : BV:32
178 : ite(6, 3, 177) : BV:32
179 : lambda(1, 2, 178) : FUNCTION[BV:32,BV:32 -> BV:32]
180 : sym_const(179) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46606Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1 { 0x1 } : BV:8
17 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
18 : eq(10, 17) : BOOL
19 : 5 { 0x5 } : BV:8
20 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
21 : eq(10, 20) : BOOL
22 : 220 { 0xdc -36 } : BV:8
23 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
24 : eq(10, 23) : BOOL
25 : 126 { 0x7e } : BV:8
26 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
27 : eq(10, 26) : BOOL
28 : 17 { 0x11 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : bvadd(4, 8, 9) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 20) : BOOL
41 : eq(36, 23) : BOOL
42 : eq(36, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 22, 44) : BV:8
46 : ite(39, 19, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 8, 9) : BV:32
51 : eq(50, 11) : BOOL
52 : eq(50, 14) : BOOL
53 : eq(50, 17) : BOOL
54 : eq(50, 20) : BOOL
55 : eq(50, 23) : BOOL
56 : eq(50, 26) : BOOL
57 : ite(56, 28, 29) : BV:8
58 : ite(55, 25, 57) : BV:8
59 : ite(54, 22, 58) : BV:8
60 : ite(53, 19, 59) : BV:8
61 : ite(52, 16, 60) : BV:8
62 : ite(51, 13, 61) : BV:8
63 : bvadd(8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : ite(69, 28, 29) : BV:8
71 : ite(68, 25, 70) : BV:8
72 : ite(67, 22, 71) : BV:8
73 : ite(66, 19, 72) : BV:8
74 : ite(65, 16, 73) : BV:8
75 : ite(64, 13, 74) : BV:8
76 : bvconcat(35, 48, 62, 75) : BV:32
77 : ite(6, 5, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46610Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
16 : eq(8, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
19 : eq(8, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
22 : eq(8, 21) : BOOL
23 : 126 { 0x7e } : BV:8
24 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
25 : eq(8, 24) : BOOL
26 : 17 { 0x11 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : bvadd(4, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 15) : BOOL
38 : eq(34, 18) : BOOL
39 : eq(34, 21) : BOOL
40 : eq(34, 24) : BOOL
41 : ite(40, 26, 27) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 20, 42) : BV:8
44 : ite(37, 17, 43) : BV:8
45 : ite(36, 14, 44) : BV:8
46 : ite(35, 11, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 6, 7) : BV:32
49 : eq(48, 9) : BOOL
50 : eq(48, 12) : BOOL
51 : eq(48, 15) : BOOL
52 : eq(48, 18) : BOOL
53 : eq(48, 21) : BOOL
54 : eq(48, 24) : BOOL
55 : ite(54, 26, 27) : BV:8
56 : ite(53, 23, 55) : BV:8
57 : ite(52, 20, 56) : BV:8
58 : ite(51, 17, 57) : BV:8
59 : ite(50, 14, 58) : BV:8
60 : ite(49, 11, 59) : BV:8
61 : bvadd(6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : ite(67, 26, 27) : BV:8
69 : ite(66, 23, 68) : BV:8
70 : ite(65, 20, 69) : BV:8
71 : ite(64, 17, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 11, 72) : BV:8
74 : bvconcat(33, 46, 60, 73) : BV:32
75 : ite(3, 4, 74) : BV:32
76 : lambda(1, 75) : FUNCTION[BV:32 -> BV:32]
77 : sym_const(76) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46614Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1 { 0x1 } : BV:8
17 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
18 : eq(10, 17) : BOOL
19 : 5 { 0x5 } : BV:8
20 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
21 : eq(10, 20) : BOOL
22 : 220 { 0xdc -36 } : BV:8
23 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
24 : eq(10, 23) : BOOL
25 : 126 { 0x7e } : BV:8
26 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
27 : eq(10, 26) : BOOL
28 : 17 { 0x11 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : bvadd(4, 8, 9) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 20) : BOOL
41 : eq(36, 23) : BOOL
42 : eq(36, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 22, 44) : BV:8
46 : ite(39, 19, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 8, 9) : BV:32
51 : eq(50, 11) : BOOL
52 : eq(50, 14) : BOOL
53 : eq(50, 17) : BOOL
54 : eq(50, 20) : BOOL
55 : eq(50, 23) : BOOL
56 : eq(50, 26) : BOOL
57 : ite(56, 28, 29) : BV:8
58 : ite(55, 25, 57) : BV:8
59 : ite(54, 22, 58) : BV:8
60 : ite(53, 19, 59) : BV:8
61 : ite(52, 16, 60) : BV:8
62 : ite(51, 13, 61) : BV:8
63 : bvadd(8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : ite(69, 28, 29) : BV:8
71 : ite(68, 25, 70) : BV:8
72 : ite(67, 22, 71) : BV:8
73 : ite(66, 19, 72) : BV:8
74 : ite(65, 16, 73) : BV:8
75 : ite(64, 13, 74) : BV:8
76 : bvconcat(35, 48, 62, 75) : BV:32
77 : ite(6, 5, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4098100155
=counter_example_end
=global nodece 53 num_edges_traversed 1
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3v487.ce4255.num_edges_traversed2
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3v487.ce4255 a3824ef91e6bc1664a2262ac3b2
=input.spec-%var-x-1
1 : Lambda46743Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46744Var : BV:32
18 : Lambda46745Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46746Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
63 : eq(61, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
66 : eq(61, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
69 : eq(61, 68) : BOOL
70 : 5 { 0x5 } : BV:8
71 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
72 : eq(61, 71) : BOOL
73 : 220 { 0xdc -36 } : BV:8
74 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
75 : eq(61, 74) : BOOL
76 : 126 { 0x7e } : BV:8
77 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
78 : eq(61, 77) : BOOL
79 : 17 { 0x11 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
88 : bvadd(87, 60) : BV:32
89 : eq(88, 62) : BOOL
90 : eq(88, 65) : BOOL
91 : eq(88, 68) : BOOL
92 : eq(88, 71) : BOOL
93 : eq(88, 74) : BOOL
94 : eq(88, 77) : BOOL
95 : ite(94, 79, 80) : BV:8
96 : ite(93, 76, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
102 : bvadd(101, 60) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : eq(102, 68) : BOOL
106 : eq(102, 71) : BOOL
107 : eq(102, 74) : BOOL
108 : eq(102, 77) : BOOL
109 : ite(108, 79, 80) : BV:8
110 : ite(107, 76, 109) : BV:8
111 : ite(106, 73, 110) : BV:8
112 : ite(105, 70, 111) : BV:8
113 : ite(104, 67, 112) : BV:8
114 : ite(103, 64, 113) : BV:8
115 : bvadd(65, 60) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 68) : BOOL
119 : eq(115, 71) : BOOL
120 : eq(115, 74) : BOOL
121 : eq(115, 77) : BOOL
122 : ite(121, 79, 80) : BV:8
123 : ite(120, 76, 122) : BV:8
124 : ite(119, 73, 123) : BV:8
125 : ite(118, 70, 124) : BV:8
126 : ite(117, 67, 125) : BV:8
127 : ite(116, 64, 126) : BV:8
128 : bvconcat(86, 100, 114, 127) : BV:32
129 : bvadd(56, 58, 128) : BV:32
130 : eq(129, 62) : BOOL
131 : eq(129, 65) : BOOL
132 : eq(129, 68) : BOOL
133 : eq(129, 71) : BOOL
134 : eq(129, 74) : BOOL
135 : eq(129, 77) : BOOL
136 : ite(135, 79, 80) : BV:8
137 : ite(134, 76, 136) : BV:8
138 : ite(133, 73, 137) : BV:8
139 : ite(132, 70, 138) : BV:8
140 : ite(131, 67, 139) : BV:8
141 : ite(130, 64, 140) : BV:8
142 : 2 { 0x2 +1.23e129 } : BV:32
143 : bvadd(142, 58, 128) : BV:32
144 : eq(143, 62) : BOOL
145 : eq(143, 65) : BOOL
146 : eq(143, 68) : BOOL
147 : eq(143, 71) : BOOL
148 : eq(143, 74) : BOOL
149 : eq(143, 77) : BOOL
150 : ite(149, 79, 80) : BV:8
151 : ite(148, 76, 150) : BV:8
152 : ite(147, 73, 151) : BV:8
153 : ite(146, 70, 152) : BV:8
154 : ite(145, 67, 153) : BV:8
155 : ite(144, 64, 154) : BV:8
156 : 1 { 0x1 +1.11e129 } : BV:32
157 : bvadd(156, 58, 128) : BV:32
158 : eq(157, 62) : BOOL
159 : eq(157, 65) : BOOL
160 : eq(157, 68) : BOOL
161 : eq(157, 71) : BOOL
162 : eq(157, 74) : BOOL
163 : eq(157, 77) : BOOL
164 : ite(163, 79, 80) : BV:8
165 : ite(162, 76, 164) : BV:8
166 : ite(161, 73, 165) : BV:8
167 : ite(160, 70, 166) : BV:8
168 : ite(159, 67, 167) : BV:8
169 : ite(158, 64, 168) : BV:8
170 : bvadd(58, 128) : BV:32
171 : eq(170, 62) : BOOL
172 : eq(170, 65) : BOOL
173 : eq(170, 68) : BOOL
174 : eq(170, 71) : BOOL
175 : eq(170, 74) : BOOL
176 : eq(170, 77) : BOOL
177 : ite(176, 79, 80) : BV:8
178 : ite(175, 76, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 67, 180) : BV:8
182 : ite(171, 64, 181) : BV:8
183 : bvconcat(141, 155, 169, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda46763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46764Var : BV:32
18 : Lambda46765Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda46766Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
82 : eq(80, 81) : BOOL
83 : 2 { 0x2 } : BV:8
84 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
85 : eq(80, 84) : BOOL
86 : 1 { 0x1 } : BV:8
87 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
88 : eq(80, 87) : BOOL
89 : 5 { 0x5 } : BV:8
90 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
91 : eq(80, 90) : BOOL
92 : 220 { 0xdc -36 } : BV:8
93 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
94 : eq(80, 93) : BOOL
95 : 126 { 0x7e } : BV:8
96 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
97 : eq(80, 96) : BOOL
98 : 17 { 0x11 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(85, 86, 103) : BV:8
105 : ite(82, 83, 104) : BV:8
106 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 90) : BOOL
112 : eq(107, 93) : BOOL
113 : eq(107, 96) : BOOL
114 : ite(113, 98, 99) : BV:8
115 : ite(112, 95, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
121 : bvadd(120, 79) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : eq(121, 87) : BOOL
125 : eq(121, 90) : BOOL
126 : eq(121, 93) : BOOL
127 : eq(121, 96) : BOOL
128 : ite(127, 98, 99) : BV:8
129 : ite(126, 95, 128) : BV:8
130 : ite(125, 92, 129) : BV:8
131 : ite(124, 89, 130) : BV:8
132 : ite(123, 86, 131) : BV:8
133 : ite(122, 83, 132) : BV:8
134 : bvadd(84, 79) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 87) : BOOL
138 : eq(134, 90) : BOOL
139 : eq(134, 93) : BOOL
140 : eq(134, 96) : BOOL
141 : ite(140, 98, 99) : BV:8
142 : ite(139, 95, 141) : BV:8
143 : ite(138, 92, 142) : BV:8
144 : ite(137, 89, 143) : BV:8
145 : ite(136, 86, 144) : BV:8
146 : ite(135, 83, 145) : BV:8
147 : bvconcat(105, 119, 133, 146) : BV:32
148 : bvadd(75, 77, 147) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 87) : BOOL
152 : eq(148, 90) : BOOL
153 : eq(148, 93) : BOOL
154 : eq(148, 96) : BOOL
155 : ite(154, 98, 99) : BV:8
156 : ite(153, 95, 155) : BV:8
157 : ite(152, 92, 156) : BV:8
158 : ite(151, 89, 157) : BV:8
159 : ite(150, 86, 158) : BV:8
160 : ite(149, 83, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 77, 147) : BV:32
163 : eq(162, 81) : BOOL
164 : eq(162, 84) : BOOL
165 : eq(162, 87) : BOOL
166 : eq(162, 90) : BOOL
167 : eq(162, 93) : BOOL
168 : eq(162, 96) : BOOL
169 : ite(168, 98, 99) : BV:8
170 : ite(167, 95, 169) : BV:8
171 : ite(166, 92, 170) : BV:8
172 : ite(165, 89, 171) : BV:8
173 : ite(164, 86, 172) : BV:8
174 : ite(163, 83, 173) : BV:8
175 : 1 { 0x1 +1.11e129 } : BV:32
176 : bvadd(175, 77, 147) : BV:32
177 : eq(176, 81) : BOOL
178 : eq(176, 84) : BOOL
179 : eq(176, 87) : BOOL
180 : eq(176, 90) : BOOL
181 : eq(176, 93) : BOOL
182 : eq(176, 96) : BOOL
183 : ite(182, 98, 99) : BV:8
184 : ite(181, 95, 183) : BV:8
185 : ite(180, 92, 184) : BV:8
186 : ite(179, 89, 185) : BV:8
187 : ite(178, 86, 186) : BV:8
188 : ite(177, 83, 187) : BV:8
189 : bvadd(77, 147) : BV:32
190 : eq(189, 81) : BOOL
191 : eq(189, 84) : BOOL
192 : eq(189, 87) : BOOL
193 : eq(189, 90) : BOOL
194 : eq(189, 93) : BOOL
195 : eq(189, 96) : BOOL
196 : ite(195, 98, 99) : BV:8
197 : ite(194, 95, 196) : BV:8
198 : ite(193, 92, 197) : BV:8
199 : ite(192, 89, 198) : BV:8
200 : ite(191, 86, 199) : BV:8
201 : ite(190, 83, 200) : BV:8
202 : bvconcat(160, 174, 188, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : ite(74, 202, 203) : BV:32
205 : ite(55, 2, 204) : BV:32
206 : lambda(52, 205) : FUNCTION[BV:32 -> BV:32]
207 : map(51, 206) : MAP[BV:32 -> BV:32]
208 : lambda(17, 207) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
209 : map(16, 208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
210 : sym_const(209) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 85032679 ] -> 0, [ 85032680; 85032680 ] -> 2, [ 85032681; 160956415 ] -> 0, [ 160956416; 160956416 ] -> 1, [ 160956417; 1338507259 ] -> 0, [ 1338507260; 1338507260 ] -> 220, [ 1338507261; 1338507261 ] -> 126, [ 1338507262; 1338507262 ] -> 17, [ 1338507263; 1338507263 ] -> 5, [ 1338507264; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 1071742275 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1071742276; 1071742279 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1071742280; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1071742276 { 0x3fe17d44 +1.76163530e0 } : BV:32
=input.dst.llvm-%n
1 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 294387711 { 0x118bffff +1.9374988e164 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda46770Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46771Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
24 : bvadd(18, 22, 23) : BV:32
25 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1 { 0x1 } : BV:8
31 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
32 : eq(24, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
35 : eq(24, 34) : BOOL
36 : 220 { 0xdc -36 } : BV:8
37 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
38 : eq(24, 37) : BOOL
39 : 126 { 0x7e } : BV:8
40 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
41 : eq(24, 40) : BOOL
42 : 17 { 0x11 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : ite(26, 27, 48) : BV:8
50 : bvadd(20, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 40) : BOOL
57 : ite(56, 42, 43) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 22, 23) : BV:32
65 : eq(64, 25) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 31) : BOOL
68 : eq(64, 34) : BOOL
69 : eq(64, 37) : BOOL
70 : eq(64, 40) : BOOL
71 : ite(70, 42, 43) : BV:8
72 : ite(69, 39, 71) : BV:8
73 : ite(68, 36, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : ite(66, 30, 74) : BV:8
76 : ite(65, 27, 75) : BV:8
77 : bvadd(22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : ite(83, 42, 43) : BV:8
85 : ite(82, 39, 84) : BV:8
86 : ite(81, 36, 85) : BV:8
87 : ite(80, 33, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 27, 88) : BV:8
90 : bvconcat(49, 62, 76, 89) : BV:32
91 : ite(19, 20, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 294387712 { 0x118c0000 +1.9375000e164 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda46752Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda46753Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(19, 4) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
27 : bvadd(20, 25, 26) : BV:32
28 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
29 : eq(27, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
32 : eq(27, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
35 : eq(27, 34) : BOOL
36 : 5 { 0x5 } : BV:8
37 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
38 : eq(27, 37) : BOOL
39 : 220 { 0xdc -36 } : BV:8
40 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
41 : eq(27, 40) : BOOL
42 : 126 { 0x7e } : BV:8
43 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
44 : eq(27, 43) : BOOL
45 : 17 { 0x11 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : bvadd(22, 25, 26) : BV:32
54 : eq(53, 28) : BOOL
55 : eq(53, 31) : BOOL
56 : eq(53, 34) : BOOL
57 : eq(53, 37) : BOOL
58 : eq(53, 40) : BOOL
59 : eq(53, 43) : BOOL
60 : ite(59, 45, 46) : BV:8
61 : ite(58, 42, 60) : BV:8
62 : ite(57, 39, 61) : BV:8
63 : ite(56, 36, 62) : BV:8
64 : ite(55, 33, 63) : BV:8
65 : ite(54, 30, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 25, 26) : BV:32
68 : eq(67, 28) : BOOL
69 : eq(67, 31) : BOOL
70 : eq(67, 34) : BOOL
71 : eq(67, 37) : BOOL
72 : eq(67, 40) : BOOL
73 : eq(67, 43) : BOOL
74 : ite(73, 45, 46) : BV:8
75 : ite(72, 42, 74) : BV:8
76 : ite(71, 39, 75) : BV:8
77 : ite(70, 36, 76) : BV:8
78 : ite(69, 33, 77) : BV:8
79 : ite(68, 30, 78) : BV:8
80 : bvadd(25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : ite(86, 45, 46) : BV:8
88 : ite(85, 42, 87) : BV:8
89 : ite(84, 39, 88) : BV:8
90 : ite(83, 36, 89) : BV:8
91 : ite(82, 33, 90) : BV:8
92 : ite(81, 30, 91) : BV:8
93 : bvconcat(52, 65, 79, 92) : BV:32
94 : ite(23, 4, 93) : BV:32
95 : ite(21, 22, 94) : BV:32
96 : lambda(19, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(18, 96) : MAP[BV:32 -> BV:32]
98 : sum(1, 2, 97) : SUM[UNIT,MAP[BV:32 -> BV:32]]
99 : sym_const(98) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 634812220 { 0x25d6773c +1.67551374e204 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda46775Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda46776Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(17, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
25 : bvadd(18, 23, 24) : BV:32
26 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
30 : eq(25, 29) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
33 : eq(25, 32) : BOOL
34 : 5 { 0x5 } : BV:8
35 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
36 : eq(25, 35) : BOOL
37 : 220 { 0xdc -36 } : BV:8
38 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
39 : eq(25, 38) : BOOL
40 : 126 { 0x7e } : BV:8
41 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
42 : eq(25, 41) : BOOL
43 : 17 { 0x11 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : bvadd(20, 23, 24) : BV:32
52 : eq(51, 26) : BOOL
53 : eq(51, 29) : BOOL
54 : eq(51, 32) : BOOL
55 : eq(51, 35) : BOOL
56 : eq(51, 38) : BOOL
57 : eq(51, 41) : BOOL
58 : ite(57, 43, 44) : BV:8
59 : ite(56, 40, 58) : BV:8
60 : ite(55, 37, 59) : BV:8
61 : ite(54, 34, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 23, 24) : BV:32
66 : eq(65, 26) : BOOL
67 : eq(65, 29) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 35) : BOOL
70 : eq(65, 38) : BOOL
71 : eq(65, 41) : BOOL
72 : ite(71, 43, 44) : BV:8
73 : ite(70, 40, 72) : BV:8
74 : ite(69, 37, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : ite(67, 31, 75) : BV:8
77 : ite(66, 28, 76) : BV:8
78 : bvadd(23, 24) : BV:32
79 : eq(78, 26) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : ite(84, 43, 44) : BV:8
86 : ite(83, 40, 85) : BV:8
87 : ite(82, 37, 86) : BV:8
88 : ite(81, 34, 87) : BV:8
89 : ite(80, 31, 88) : BV:8
90 : ite(79, 28, 89) : BV:8
91 : bvconcat(50, 63, 77, 90) : BV:32
92 : ite(21, 2, 91) : BV:32
93 : ite(19, 20, 92) : BV:32
94 : lambda(17, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(16, 94) : MAP[BV:32 -> BV:32]
96 : sym_const(95) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 294387711 { 0x118bffff +1.9374988e164 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1304729838 { 0x4dc498ee +1.53591704e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1071742276 { 0x3fe17d44 +1.76163530e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1071742279 { 0x3fe17d47 +1.76163566e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda46585Var : BV:32
2 : Lambda46586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
14 : eq(12, 13) : BOOL
15 : 2 { 0x2 } : BV:8
16 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
17 : eq(12, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
20 : eq(12, 19) : BOOL
21 : 5 { 0x5 } : BV:8
22 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
23 : eq(12, 22) : BOOL
24 : 220 { 0xdc -36 } : BV:8
25 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
26 : eq(12, 25) : BOOL
27 : 126 { 0x7e } : BV:8
28 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
29 : eq(12, 28) : BOOL
30 : 17 { 0x11 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
39 : bvadd(38, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
53 : bvadd(52, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(16, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : bvadd(7, 9, 79) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 16) : BOOL
83 : eq(80, 19) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : eq(80, 28) : BOOL
87 : ite(86, 30, 31) : BV:8
88 : ite(85, 27, 87) : BV:8
89 : ite(84, 24, 88) : BV:8
90 : ite(83, 21, 89) : BV:8
91 : ite(82, 18, 90) : BV:8
92 : ite(81, 15, 91) : BV:8
93 : 2 { 0x2 +1.23e129 } : BV:32
94 : bvadd(93, 9, 79) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 19) : BOOL
98 : eq(94, 22) : BOOL
99 : eq(94, 25) : BOOL
100 : eq(94, 28) : BOOL
101 : ite(100, 30, 31) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 24, 102) : BV:8
104 : ite(97, 21, 103) : BV:8
105 : ite(96, 18, 104) : BV:8
106 : ite(95, 15, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 9, 79) : BV:32
109 : eq(108, 13) : BOOL
110 : eq(108, 16) : BOOL
111 : eq(108, 19) : BOOL
112 : eq(108, 22) : BOOL
113 : eq(108, 25) : BOOL
114 : eq(108, 28) : BOOL
115 : ite(114, 30, 31) : BV:8
116 : ite(113, 27, 115) : BV:8
117 : ite(112, 24, 116) : BV:8
118 : ite(111, 21, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 15, 119) : BV:8
121 : bvadd(9, 79) : BV:32
122 : eq(121, 13) : BOOL
123 : eq(121, 16) : BOOL
124 : eq(121, 19) : BOOL
125 : eq(121, 22) : BOOL
126 : eq(121, 25) : BOOL
127 : eq(121, 28) : BOOL
128 : ite(127, 30, 31) : BV:8
129 : ite(126, 27, 128) : BV:8
130 : ite(125, 24, 129) : BV:8
131 : ite(124, 21, 130) : BV:8
132 : ite(123, 18, 131) : BV:8
133 : ite(122, 15, 132) : BV:8
134 : bvconcat(92, 106, 120, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda46587Var : BV:32
2 : Lambda46588Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2177151975 ] -> true, [ 2177151976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2177151975 ] -> true, [ 2177151976; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda46597Var : BV:32
2 : Lambda46598Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda46601Var : BV:32
2 : Lambda46602Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2177151975 { 0x81c4b3e7 -2117815321 -1.53674018e132 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2177151976 { 0x81c4b3e8 -2117815320 -1.53674030e132 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2177151977 { 0x81c4b3e9 -2117815319 -1.53674042e132 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 5 { 0x5 +1.59e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 7 { 0x7 +1.83e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 160956419 { 0x9980003 +1.18750035e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
55 : eq(53, 54) : BOOL
56 : 2 { 0x2 } : BV:8
57 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
58 : eq(53, 57) : BOOL
59 : 1 { 0x1 } : BV:8
60 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
61 : eq(53, 60) : BOOL
62 : 5 { 0x5 } : BV:8
63 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
64 : eq(53, 63) : BOOL
65 : 220 { 0xdc -36 } : BV:8
66 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
67 : eq(53, 66) : BOOL
68 : 126 { 0x7e } : BV:8
69 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
70 : eq(53, 69) : BOOL
71 : 17 { 0x11 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(58, 59, 76) : BV:8
78 : ite(55, 56, 77) : BV:8
79 : 160956418 { 0x9980002 +1.18750023e148 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 63) : BOOL
85 : eq(80, 66) : BOOL
86 : eq(80, 69) : BOOL
87 : ite(86, 71, 72) : BV:8
88 : ite(85, 68, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : 160956417 { 0x9980001 +1.18750011e148 } : BV:32
94 : bvadd(93, 52) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : eq(94, 60) : BOOL
98 : eq(94, 63) : BOOL
99 : eq(94, 66) : BOOL
100 : eq(94, 69) : BOOL
101 : ite(100, 71, 72) : BV:8
102 : ite(99, 68, 101) : BV:8
103 : ite(98, 65, 102) : BV:8
104 : ite(97, 62, 103) : BV:8
105 : ite(96, 59, 104) : BV:8
106 : ite(95, 56, 105) : BV:8
107 : bvadd(57, 52) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 60) : BOOL
111 : eq(107, 63) : BOOL
112 : eq(107, 66) : BOOL
113 : eq(107, 69) : BOOL
114 : ite(113, 71, 72) : BV:8
115 : ite(112, 68, 114) : BV:8
116 : ite(111, 65, 115) : BV:8
117 : ite(110, 62, 116) : BV:8
118 : ite(109, 59, 117) : BV:8
119 : ite(108, 56, 118) : BV:8
120 : bvconcat(78, 92, 106, 119) : BV:32
121 : bvadd(48, 50, 120) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 60) : BOOL
125 : eq(121, 63) : BOOL
126 : eq(121, 66) : BOOL
127 : eq(121, 69) : BOOL
128 : ite(127, 71, 72) : BV:8
129 : ite(126, 68, 128) : BV:8
130 : ite(125, 65, 129) : BV:8
131 : ite(124, 62, 130) : BV:8
132 : ite(123, 59, 131) : BV:8
133 : ite(122, 56, 132) : BV:8
134 : 2 { 0x2 +1.23e129 } : BV:32
135 : bvadd(134, 50, 120) : BV:32
136 : eq(135, 54) : BOOL
137 : eq(135, 57) : BOOL
138 : eq(135, 60) : BOOL
139 : eq(135, 63) : BOOL
140 : eq(135, 66) : BOOL
141 : eq(135, 69) : BOOL
142 : ite(141, 71, 72) : BV:8
143 : ite(140, 68, 142) : BV:8
144 : ite(139, 65, 143) : BV:8
145 : ite(138, 62, 144) : BV:8
146 : ite(137, 59, 145) : BV:8
147 : ite(136, 56, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 50, 120) : BV:32
150 : eq(149, 54) : BOOL
151 : eq(149, 57) : BOOL
152 : eq(149, 60) : BOOL
153 : eq(149, 63) : BOOL
154 : eq(149, 66) : BOOL
155 : eq(149, 69) : BOOL
156 : ite(155, 71, 72) : BV:8
157 : ite(154, 68, 156) : BV:8
158 : ite(153, 65, 157) : BV:8
159 : ite(152, 62, 158) : BV:8
160 : ite(151, 59, 159) : BV:8
161 : ite(150, 56, 160) : BV:8
162 : bvadd(50, 120) : BV:32
163 : eq(162, 54) : BOOL
164 : eq(162, 57) : BOOL
165 : eq(162, 60) : BOOL
166 : eq(162, 63) : BOOL
167 : eq(162, 66) : BOOL
168 : eq(162, 69) : BOOL
169 : ite(168, 71, 72) : BV:8
170 : ite(167, 68, 169) : BV:8
171 : ite(166, 65, 170) : BV:8
172 : ite(165, 62, 171) : BV:8
173 : ite(164, 59, 172) : BV:8
174 : ite(163, 56, 173) : BV:8
175 : bvconcat(133, 147, 161, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : ite(47, 175, 176) : BV:32
178 : ite(6, 3, 177) : BV:32
179 : lambda(1, 2, 178) : FUNCTION[BV:32,BV:32 -> BV:32]
180 : sym_const(179) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda46606Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1 { 0x1 } : BV:8
17 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
18 : eq(10, 17) : BOOL
19 : 5 { 0x5 } : BV:8
20 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
21 : eq(10, 20) : BOOL
22 : 220 { 0xdc -36 } : BV:8
23 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
24 : eq(10, 23) : BOOL
25 : 126 { 0x7e } : BV:8
26 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
27 : eq(10, 26) : BOOL
28 : 17 { 0x11 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : bvadd(4, 8, 9) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 20) : BOOL
41 : eq(36, 23) : BOOL
42 : eq(36, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 22, 44) : BV:8
46 : ite(39, 19, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 8, 9) : BV:32
51 : eq(50, 11) : BOOL
52 : eq(50, 14) : BOOL
53 : eq(50, 17) : BOOL
54 : eq(50, 20) : BOOL
55 : eq(50, 23) : BOOL
56 : eq(50, 26) : BOOL
57 : ite(56, 28, 29) : BV:8
58 : ite(55, 25, 57) : BV:8
59 : ite(54, 22, 58) : BV:8
60 : ite(53, 19, 59) : BV:8
61 : ite(52, 16, 60) : BV:8
62 : ite(51, 13, 61) : BV:8
63 : bvadd(8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : ite(69, 28, 29) : BV:8
71 : ite(68, 25, 70) : BV:8
72 : ite(67, 22, 71) : BV:8
73 : ite(66, 19, 72) : BV:8
74 : ite(65, 16, 73) : BV:8
75 : ite(64, 13, 74) : BV:8
76 : bvconcat(35, 48, 62, 75) : BV:32
77 : ite(6, 5, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda46610Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
16 : eq(8, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
19 : eq(8, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
22 : eq(8, 21) : BOOL
23 : 126 { 0x7e } : BV:8
24 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
25 : eq(8, 24) : BOOL
26 : 17 { 0x11 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : bvadd(4, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 15) : BOOL
38 : eq(34, 18) : BOOL
39 : eq(34, 21) : BOOL
40 : eq(34, 24) : BOOL
41 : ite(40, 26, 27) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 20, 42) : BV:8
44 : ite(37, 17, 43) : BV:8
45 : ite(36, 14, 44) : BV:8
46 : ite(35, 11, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 6, 7) : BV:32
49 : eq(48, 9) : BOOL
50 : eq(48, 12) : BOOL
51 : eq(48, 15) : BOOL
52 : eq(48, 18) : BOOL
53 : eq(48, 21) : BOOL
54 : eq(48, 24) : BOOL
55 : ite(54, 26, 27) : BV:8
56 : ite(53, 23, 55) : BV:8
57 : ite(52, 20, 56) : BV:8
58 : ite(51, 17, 57) : BV:8
59 : ite(50, 14, 58) : BV:8
60 : ite(49, 11, 59) : BV:8
61 : bvadd(6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : ite(67, 26, 27) : BV:8
69 : ite(66, 23, 68) : BV:8
70 : ite(65, 20, 69) : BV:8
71 : ite(64, 17, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 11, 72) : BV:8
74 : bvconcat(33, 46, 60, 73) : BV:32
75 : ite(3, 4, 74) : BV:32
76 : lambda(1, 75) : FUNCTION[BV:32 -> BV:32]
77 : sym_const(76) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda46614Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 85032668 { 0x5117edc +1.13668394e139 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 85032680 { 0x5117ee8 +1.13668537e139 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 160956416 { 0x9980000 +1.18750000e148 } : BV:32
15 : eq(10, 14) : BOOL
16 : 1 { 0x1 } : BV:8
17 : 1338507263 { 0x4fc7ffff +1.56249988e32 } : BV:32
18 : eq(10, 17) : BOOL
19 : 5 { 0x5 } : BV:8
20 : 1338507260 { 0x4fc7fffc +1.56249952e32 } : BV:32
21 : eq(10, 20) : BOOL
22 : 220 { 0xdc -36 } : BV:8
23 : 1338507261 { 0x4fc7fffd +1.56249964e32 } : BV:32
24 : eq(10, 23) : BOOL
25 : 126 { 0x7e } : BV:8
26 : 1338507262 { 0x4fc7fffe +1.56249976e32 } : BV:32
27 : eq(10, 26) : BOOL
28 : 17 { 0x11 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : bvadd(4, 8, 9) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 20) : BOOL
41 : eq(36, 23) : BOOL
42 : eq(36, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 22, 44) : BV:8
46 : ite(39, 19, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 8, 9) : BV:32
51 : eq(50, 11) : BOOL
52 : eq(50, 14) : BOOL
53 : eq(50, 17) : BOOL
54 : eq(50, 20) : BOOL
55 : eq(50, 23) : BOOL
56 : eq(50, 26) : BOOL
57 : ite(56, 28, 29) : BV:8
58 : ite(55, 25, 57) : BV:8
59 : ite(54, 22, 58) : BV:8
60 : ite(53, 19, 59) : BV:8
61 : ite(52, 16, 60) : BV:8
62 : ite(51, 13, 61) : BV:8
63 : bvadd(8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : ite(69, 28, 29) : BV:8
71 : ite(68, 25, 70) : BV:8
72 : ite(67, 22, 71) : BV:8
73 : ite(66, 19, 72) : BV:8
74 : ite(65, 16, 73) : BV:8
75 : ite(64, 13, 74) : BV:8
76 : bvconcat(35, 48, 62, 75) : BV:32
77 : ite(6, 5, 76) : BV:32
78 : ite(3, 4, 77) : BV:32
79 : lambda(1, 78) : FUNCTION[BV:32 -> BV:32]
80 : sym_const(79) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4098100155
=counter_example_end
=global nodece 54 num_edges_traversed 2
=global nodece 54 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce4266.num_edges_traversed1
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce4266 db45d9bc97417effb7710a766caad6
=input.spec-%var-x-1
1 : Lambda47341Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47342Var : BV:32
18 : Lambda47343Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 35 { 0x23 +1.417e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 36 { 0x24 +1.429e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 37 { 0x25 +1.441e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47344Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 252 { 0xfc -4 } : BV:8
83 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
84 : eq(80, 83) : BOOL
85 : 52 { 0x34 } : BV:8
86 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
87 : eq(80, 86) : BOOL
88 : 45 { 0x2d } : BV:8
89 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
90 : eq(80, 89) : BOOL
91 : 247 { 0xf7 -9 } : BV:8
92 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
93 : eq(80, 92) : BOOL
94 : 87 { 0x57 } : BV:8
95 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
96 : eq(80, 95) : BOOL
97 : 14 { 0xe } : BV:8
98 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
99 : eq(80, 98) : BOOL
100 : 246 { 0xf6 -10 } : BV:8
101 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
102 : eq(80, 101) : BOOL
103 : 123 { 0x7b } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(81, 82, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 78) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 82, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 78) : BOOL
132 : eq(130, 83) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 82, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 78) : BOOL
149 : eq(147, 83) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 82, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 78) : BOOL
167 : eq(165, 83) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 82, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 78) : BOOL
185 : eq(183, 83) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 82, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 78) : BOOL
203 : eq(201, 83) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 82, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 78) : BOOL
220 : eq(218, 83) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 82, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47361Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47362Var : BV:32
18 : Lambda47363Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 35 { 0x23 +1.417e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 36 { 0x24 +1.429e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 37 { 0x25 +1.441e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47364Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 252 { 0xfc -4 } : BV:8
64 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
65 : eq(61, 64) : BOOL
66 : 52 { 0x34 } : BV:8
67 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
68 : eq(61, 67) : BOOL
69 : 45 { 0x2d } : BV:8
70 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
71 : eq(61, 70) : BOOL
72 : 247 { 0xf7 -9 } : BV:8
73 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
74 : eq(61, 73) : BOOL
75 : 87 { 0x57 } : BV:8
76 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
77 : eq(61, 76) : BOOL
78 : 14 { 0xe } : BV:8
79 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
80 : eq(61, 79) : BOOL
81 : 246 { 0xf6 -10 } : BV:8
82 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
83 : eq(61, 82) : BOOL
84 : 123 { 0x7b } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 59) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 63, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 59) : BOOL
113 : eq(111, 64) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 63, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 59) : BOOL
130 : eq(128, 64) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 63, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 59) : BOOL
148 : eq(146, 64) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 63, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 59) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 63, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 59) : BOOL
184 : eq(182, 64) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 63, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 59) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 63, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1644167171 ] -> 0, [ 1644167172; 1644167172 ] -> 247, [ 1644167173; 1644167173 ] -> 123, [ 1644167174; 1644167174 ] -> 246, [ 1644167175; 1644167175 ] -> 252, [ 1644167176; 3791650815 ] -> 0, [ 3791650816; 3791650816 ] -> 52, [ 3791650817; 3791650817 ] -> 14, [ 3791650818; 3791650818 ] -> 45, [ 3791650819; 3791650819 ] -> 87, [ 3791650820; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 673193939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 673193940; 673193943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 673193944; 3064210383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3064210384; 3064210387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3064210388; 3555336671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3555336672; 3555336675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3555336676; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3064210384 { 0xb6a423d0 -1230756912 -1.28234291e238 } : BV:32
=input.dst.llvm-%m
1 : 36 { 0x24 +1.429e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 673193940 { 0x28201fd4 +1.25097131e209 } : BV:32
=input.dst.llvm-%n
1 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3555336672 { 0xd3ea21e0 -739630624 -1.82915878e40 } : BV:32
=input.dst.llvm-%x
1 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47368Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 35 { 0x23 +1.417e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 36 { 0x24 +1.429e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47369Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
28 : eq(23, 27) : BOOL
29 : 52 { 0x34 } : BV:8
30 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
31 : eq(23, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
34 : eq(23, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
37 : eq(23, 36) : BOOL
38 : 87 { 0x57 } : BV:8
39 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
40 : eq(23, 39) : BOOL
41 : 14 { 0xe } : BV:8
42 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
46 : eq(23, 45) : BOOL
47 : 123 { 0x7b } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
2 : unit : UNIT
3 : Lambda47350Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 35 { 0x23 +1.417e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 36 { 0x24 +1.429e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda47351Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(20, 19) : BV:32
24 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
27 : eq(25, 26) : BOOL
28 : 252 { 0xfc -4 } : BV:8
29 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
30 : eq(25, 29) : BOOL
31 : 52 { 0x34 } : BV:8
32 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
33 : eq(25, 32) : BOOL
34 : 45 { 0x2d } : BV:8
35 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
36 : eq(25, 35) : BOOL
37 : 247 { 0xf7 -9 } : BV:8
38 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
39 : eq(25, 38) : BOOL
40 : 87 { 0x57 } : BV:8
41 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
42 : eq(25, 41) : BOOL
43 : 14 { 0xe } : BV:8
44 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
45 : eq(25, 44) : BOOL
46 : 246 { 0xf6 -10 } : BV:8
47 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
48 : eq(25, 47) : BOOL
49 : 123 { 0x7b } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 34, 73) : BV:8
75 : ite(62, 31, 74) : BV:8
76 : ite(61, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 24) : BV:32
79 : eq(78, 26) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 43, 88) : BV:8
90 : ite(83, 40, 89) : BV:8
91 : ite(82, 37, 90) : BV:8
92 : ite(81, 34, 91) : BV:8
93 : ite(80, 31, 92) : BV:8
94 : ite(79, 28, 93) : BV:8
95 : bvadd(23, 24) : BV:32
96 : eq(95, 26) : BOOL
97 : eq(95, 29) : BOOL
98 : eq(95, 32) : BOOL
99 : eq(95, 35) : BOOL
100 : eq(95, 38) : BOOL
101 : eq(95, 41) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 43, 105) : BV:8
107 : ite(100, 40, 106) : BV:8
108 : ite(99, 37, 107) : BV:8
109 : ite(98, 34, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(21, 4, 112) : BV:32
114 : lambda(19, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(18, 114) : MAP[BV:32 -> BV:32]
116 : sum(1, 2, 115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
117 : sym_const(116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 35 { 0x23 +1.417e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 36 { 0x24 +1.429e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(2, 2) : BV:32
22 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
28 : eq(23, 27) : BOOL
29 : 52 { 0x34 } : BV:8
30 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
31 : eq(23, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
34 : eq(23, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
37 : eq(23, 36) : BOOL
38 : 87 { 0x57 } : BV:8
39 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
40 : eq(23, 39) : BOOL
41 : 14 { 0xe } : BV:8
42 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
46 : eq(23, 45) : BOOL
47 : 123 { 0x7b } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : bvadd(16, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 45) : BOOL
84 : ite(83, 47, 48) : BV:8
85 : ite(82, 44, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 45) : BOOL
101 : ite(100, 47, 48) : BV:8
102 : ite(99, 44, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(56, 74, 91, 108) : BV:32
110 : ite(19, 1, 109) : BV:32
111 : sum(17, 18, 110) : SUM[UNIT,BV:32]
112 : sym_const(111) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1726501007 { 0x66e8508f +1.81495845e78 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47373Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 35 { 0x23 +1.417e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 36 { 0x24 +1.429e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47374Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
28 : eq(23, 27) : BOOL
29 : 52 { 0x34 } : BV:8
30 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
31 : eq(23, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
34 : eq(23, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
37 : eq(23, 36) : BOOL
38 : 87 { 0x57 } : BV:8
39 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
40 : eq(23, 39) : BOOL
41 : 14 { 0xe } : BV:8
42 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
46 : eq(23, 45) : BOOL
47 : 123 { 0x7b } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1209386597 { 0x4815c665 +1.17011702e17 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1462570564 { 0x572d0e44 +1.35199785e47 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1462570564 { 0x572d0e44 +1.35199785e47 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 673193940 { 0x28201fd4 +1.25097131e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 673193943 { 0x28201fd7 +1.25097167e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3555336672 { 0xd3ea21e0 -739630624 -1.82915878e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3555336675 { 0xd3ea21e3 -739630621 -1.82915914e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3064210384 { 0xb6a423d0 -1230756912 -1.28234291e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3064210387 { 0xb6a423d3 -1230756909 -1.28234326e238 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47233Var : BV:32
2 : Lambda47234Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 35 { 0x23 +1.417e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 36 { 0x24 +1.429e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 37 { 0x25 +1.441e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 252 { 0xfc -4 } : BV:8
56 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
57 : eq(53, 56) : BOOL
58 : 52 { 0x34 } : BV:8
59 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
60 : eq(53, 59) : BOOL
61 : 45 { 0x2d } : BV:8
62 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
63 : eq(53, 62) : BOOL
64 : 247 { 0xf7 -9 } : BV:8
65 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
66 : eq(53, 65) : BOOL
67 : 87 { 0x57 } : BV:8
68 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
69 : eq(53, 68) : BOOL
70 : 14 { 0xe } : BV:8
71 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
72 : eq(53, 71) : BOOL
73 : 246 { 0xf6 -10 } : BV:8
74 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
75 : eq(53, 74) : BOOL
76 : 123 { 0x7b } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(54, 55, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 51) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 55, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 51) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 55, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 51) : BOOL
122 : eq(120, 56) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 55, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 51) : BOOL
140 : eq(138, 56) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 55, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 51) : BOOL
158 : eq(156, 56) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 55, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 51) : BOOL
176 : eq(174, 56) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 55, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 51) : BOOL
193 : eq(191, 56) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 55, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47238Var : BV:32
2 : Lambda47239Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 35 { 0x23 +1.417e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 36 { 0x24 +1.429e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 37 { 0x25 +1.441e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 880581636 ] -> true, [ 880581637; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 880581636 ] -> true, [ 880581637; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47247Var : BV:32
2 : Lambda47248Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 35 { 0x23 +1.417e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 36 { 0x24 +1.429e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 37 { 0x25 +1.441e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47243Var : BV:32
2 : Lambda47244Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 252 { 0xfc -4 } : BV:8
15 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
16 : eq(12, 15) : BOOL
17 : 52 { 0x34 } : BV:8
18 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
19 : eq(12, 18) : BOOL
20 : 45 { 0x2d } : BV:8
21 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
22 : eq(12, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
25 : eq(12, 24) : BOOL
26 : 87 { 0x57 } : BV:8
27 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
28 : eq(12, 27) : BOOL
29 : 14 { 0xe } : BV:8
30 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
31 : eq(12, 30) : BOOL
32 : 246 { 0xf6 -10 } : BV:8
33 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
34 : eq(12, 33) : BOOL
35 : 123 { 0x7b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 10) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 15) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 15) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 14, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 10) : BOOL
99 : eq(97, 15) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 10) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 14, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 10) : BOOL
135 : eq(133, 15) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 14, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 10) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 14, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 35 ] -> true, [ 36; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47254Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
13 : eq(8, 12) : BOOL
14 : 52 { 0x34 } : BV:8
15 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
16 : eq(8, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
19 : eq(8, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
22 : eq(8, 21) : BOOL
23 : 87 { 0x57 } : BV:8
24 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
25 : eq(8, 24) : BOOL
26 : 14 { 0xe } : BV:8
27 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
31 : eq(8, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 35 ] -> true, [ 36; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47258Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
13 : eq(8, 12) : BOOL
14 : 52 { 0x34 } : BV:8
15 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
16 : eq(8, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
19 : eq(8, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
22 : eq(8, 21) : BOOL
23 : 87 { 0x57 } : BV:8
24 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
25 : eq(8, 24) : BOOL
26 : 14 { 0xe } : BV:8
27 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
31 : eq(8, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 35 ] -> true, [ 36; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda47262Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
13 : eq(8, 12) : BOOL
14 : 52 { 0x34 } : BV:8
15 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
16 : eq(8, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
19 : eq(8, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
22 : eq(8, 21) : BOOL
23 : 87 { 0x57 } : BV:8
24 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
25 : eq(8, 24) : BOOL
26 : 14 { 0xe } : BV:8
27 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
31 : eq(8, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2031525298
=counter_example_end
=global nodece 55 num_edges_traversed 1
=global nodece 55 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce4306.num_edges_traversed2
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce4306 6a9e36139893c1fb14b21ea98d26715
=input.spec-%var-x-1
1 : Lambda47341Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47342Var : BV:32
18 : Lambda47343Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 35 { 0x23 +1.417e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 36 { 0x24 +1.429e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 37 { 0x25 +1.441e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47344Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 252 { 0xfc -4 } : BV:8
83 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
84 : eq(80, 83) : BOOL
85 : 52 { 0x34 } : BV:8
86 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
87 : eq(80, 86) : BOOL
88 : 45 { 0x2d } : BV:8
89 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
90 : eq(80, 89) : BOOL
91 : 247 { 0xf7 -9 } : BV:8
92 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
93 : eq(80, 92) : BOOL
94 : 87 { 0x57 } : BV:8
95 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
96 : eq(80, 95) : BOOL
97 : 14 { 0xe } : BV:8
98 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
99 : eq(80, 98) : BOOL
100 : 246 { 0xf6 -10 } : BV:8
101 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
102 : eq(80, 101) : BOOL
103 : 123 { 0x7b } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(81, 82, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 78) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 82, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 78) : BOOL
132 : eq(130, 83) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 82, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 78) : BOOL
149 : eq(147, 83) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 82, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 78) : BOOL
167 : eq(165, 83) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 82, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 78) : BOOL
185 : eq(183, 83) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 82, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 78) : BOOL
203 : eq(201, 83) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 82, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 78) : BOOL
220 : eq(218, 83) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 82, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47361Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47362Var : BV:32
18 : Lambda47363Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 35 { 0x23 +1.417e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 36 { 0x24 +1.429e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 37 { 0x25 +1.441e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47364Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 252 { 0xfc -4 } : BV:8
64 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
65 : eq(61, 64) : BOOL
66 : 52 { 0x34 } : BV:8
67 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
68 : eq(61, 67) : BOOL
69 : 45 { 0x2d } : BV:8
70 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
71 : eq(61, 70) : BOOL
72 : 247 { 0xf7 -9 } : BV:8
73 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
74 : eq(61, 73) : BOOL
75 : 87 { 0x57 } : BV:8
76 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
77 : eq(61, 76) : BOOL
78 : 14 { 0xe } : BV:8
79 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
80 : eq(61, 79) : BOOL
81 : 246 { 0xf6 -10 } : BV:8
82 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
83 : eq(61, 82) : BOOL
84 : 123 { 0x7b } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(62, 63, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 59) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 63, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 59) : BOOL
113 : eq(111, 64) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 63, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 59) : BOOL
130 : eq(128, 64) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 63, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 59) : BOOL
148 : eq(146, 64) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 63, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 59) : BOOL
166 : eq(164, 64) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 63, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 59) : BOOL
184 : eq(182, 64) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 63, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 59) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 63, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1644167171 ] -> 0, [ 1644167172; 1644167172 ] -> 247, [ 1644167173; 1644167173 ] -> 123, [ 1644167174; 1644167174 ] -> 246, [ 1644167175; 1644167175 ] -> 252, [ 1644167176; 3791650815 ] -> 0, [ 3791650816; 3791650816 ] -> 52, [ 3791650817; 3791650817 ] -> 14, [ 3791650818; 3791650818 ] -> 45, [ 3791650819; 3791650819 ] -> 87, [ 3791650820; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 673193939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 673193940; 673193943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 673193944; 3064210383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3064210384; 3064210387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3064210388; 3555336671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3555336672; 3555336675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3555336676; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3064210384 { 0xb6a423d0 -1230756912 -1.28234291e238 } : BV:32
=input.dst.llvm-%m
1 : 36 { 0x24 +1.429e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 673193940 { 0x28201fd4 +1.25097131e209 } : BV:32
=input.dst.llvm-%n
1 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3555336672 { 0xd3ea21e0 -739630624 -1.82915878e40 } : BV:32
=input.dst.llvm-%x
1 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47368Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 35 { 0x23 +1.417e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 36 { 0x24 +1.429e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47369Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
28 : eq(23, 27) : BOOL
29 : 52 { 0x34 } : BV:8
30 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
31 : eq(23, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
34 : eq(23, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
37 : eq(23, 36) : BOOL
38 : 87 { 0x57 } : BV:8
39 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
40 : eq(23, 39) : BOOL
41 : 14 { 0xe } : BV:8
42 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
46 : eq(23, 45) : BOOL
47 : 123 { 0x7b } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
2 : unit : UNIT
3 : Lambda47350Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 35 { 0x23 +1.417e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 36 { 0x24 +1.429e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda47351Var : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(20, 19) : BV:32
24 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
27 : eq(25, 26) : BOOL
28 : 252 { 0xfc -4 } : BV:8
29 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
30 : eq(25, 29) : BOOL
31 : 52 { 0x34 } : BV:8
32 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
33 : eq(25, 32) : BOOL
34 : 45 { 0x2d } : BV:8
35 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
36 : eq(25, 35) : BOOL
37 : 247 { 0xf7 -9 } : BV:8
38 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
39 : eq(25, 38) : BOOL
40 : 87 { 0x57 } : BV:8
41 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
42 : eq(25, 41) : BOOL
43 : 14 { 0xe } : BV:8
44 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
45 : eq(25, 44) : BOOL
46 : 246 { 0xf6 -10 } : BV:8
47 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
48 : eq(25, 47) : BOOL
49 : 123 { 0x7b } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 34, 73) : BV:8
75 : ite(62, 31, 74) : BV:8
76 : ite(61, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 24) : BV:32
79 : eq(78, 26) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 43, 88) : BV:8
90 : ite(83, 40, 89) : BV:8
91 : ite(82, 37, 90) : BV:8
92 : ite(81, 34, 91) : BV:8
93 : ite(80, 31, 92) : BV:8
94 : ite(79, 28, 93) : BV:8
95 : bvadd(23, 24) : BV:32
96 : eq(95, 26) : BOOL
97 : eq(95, 29) : BOOL
98 : eq(95, 32) : BOOL
99 : eq(95, 35) : BOOL
100 : eq(95, 38) : BOOL
101 : eq(95, 41) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 43, 105) : BV:8
107 : ite(100, 40, 106) : BV:8
108 : ite(99, 37, 107) : BV:8
109 : ite(98, 34, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(21, 4, 112) : BV:32
114 : lambda(19, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(18, 114) : MAP[BV:32 -> BV:32]
116 : sum(1, 2, 115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
117 : sym_const(116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1726501008 { 0x66e85090 +1.81495857e78 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47373Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 35 { 0x23 +1.417e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 36 { 0x24 +1.429e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47374Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
25 : eq(23, 24) : BOOL
26 : 252 { 0xfc -4 } : BV:8
27 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
28 : eq(23, 27) : BOOL
29 : 52 { 0x34 } : BV:8
30 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
31 : eq(23, 30) : BOOL
32 : 45 { 0x2d } : BV:8
33 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
34 : eq(23, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
37 : eq(23, 36) : BOOL
38 : 87 { 0x57 } : BV:8
39 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
40 : eq(23, 39) : BOOL
41 : 14 { 0xe } : BV:8
42 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
46 : eq(23, 45) : BOOL
47 : 123 { 0x7b } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1209386598 { 0x4815c666 +1.17011713e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 673193940 { 0x28201fd4 +1.25097131e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 673193943 { 0x28201fd7 +1.25097167e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3555336672 { 0xd3ea21e0 -739630624 -1.82915878e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3555336675 { 0xd3ea21e3 -739630621 -1.82915914e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3064210384 { 0xb6a423d0 -1230756912 -1.28234291e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3064210387 { 0xb6a423d3 -1230756909 -1.28234326e238 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47233Var : BV:32
2 : Lambda47234Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 35 { 0x23 +1.417e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 36 { 0x24 +1.429e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 37 { 0x25 +1.441e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 252 { 0xfc -4 } : BV:8
56 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
57 : eq(53, 56) : BOOL
58 : 52 { 0x34 } : BV:8
59 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
60 : eq(53, 59) : BOOL
61 : 45 { 0x2d } : BV:8
62 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
63 : eq(53, 62) : BOOL
64 : 247 { 0xf7 -9 } : BV:8
65 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
66 : eq(53, 65) : BOOL
67 : 87 { 0x57 } : BV:8
68 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
69 : eq(53, 68) : BOOL
70 : 14 { 0xe } : BV:8
71 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
72 : eq(53, 71) : BOOL
73 : 246 { 0xf6 -10 } : BV:8
74 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
75 : eq(53, 74) : BOOL
76 : 123 { 0x7b } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(54, 55, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 51) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 55, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 51) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 55, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 51) : BOOL
122 : eq(120, 56) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 55, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 51) : BOOL
140 : eq(138, 56) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 55, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 51) : BOOL
158 : eq(156, 56) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 55, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 51) : BOOL
176 : eq(174, 56) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 55, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 51) : BOOL
193 : eq(191, 56) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 55, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47238Var : BV:32
2 : Lambda47239Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 35 { 0x23 +1.417e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 36 { 0x24 +1.429e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 37 { 0x25 +1.441e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 880581636 ] -> true, [ 880581637; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 880581636 ] -> true, [ 880581637; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47247Var : BV:32
2 : Lambda47248Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 880581636 { 0x347c9c04 +1.97351121e233 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 880581637 { 0x347c9c05 +1.97351133e233 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 880581638 { 0x347c9c06 +1.97351145e233 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 35 { 0x23 +1.417e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 36 { 0x24 +1.429e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 37 { 0x25 +1.441e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47243Var : BV:32
2 : Lambda47244Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 252 { 0xfc -4 } : BV:8
15 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
16 : eq(12, 15) : BOOL
17 : 52 { 0x34 } : BV:8
18 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
19 : eq(12, 18) : BOOL
20 : 45 { 0x2d } : BV:8
21 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
22 : eq(12, 21) : BOOL
23 : 247 { 0xf7 -9 } : BV:8
24 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
25 : eq(12, 24) : BOOL
26 : 87 { 0x57 } : BV:8
27 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
28 : eq(12, 27) : BOOL
29 : 14 { 0xe } : BV:8
30 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
31 : eq(12, 30) : BOOL
32 : 246 { 0xf6 -10 } : BV:8
33 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
34 : eq(12, 33) : BOOL
35 : 123 { 0x7b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 10) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 15) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 14, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 15) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 14, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 10) : BOOL
99 : eq(97, 15) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 10) : BOOL
117 : eq(115, 15) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 14, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 10) : BOOL
135 : eq(133, 15) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 14, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 10) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 14, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 35 ] -> true, [ 36; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47254Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
13 : eq(8, 12) : BOOL
14 : 52 { 0x34 } : BV:8
15 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
16 : eq(8, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
19 : eq(8, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
22 : eq(8, 21) : BOOL
23 : 87 { 0x57 } : BV:8
24 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
25 : eq(8, 24) : BOOL
26 : 14 { 0xe } : BV:8
27 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
31 : eq(8, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 35 ] -> true, [ 36; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47258Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
13 : eq(8, 12) : BOOL
14 : 52 { 0x34 } : BV:8
15 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
16 : eq(8, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
19 : eq(8, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
22 : eq(8, 21) : BOOL
23 : 87 { 0x57 } : BV:8
24 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
25 : eq(8, 24) : BOOL
26 : 14 { 0xe } : BV:8
27 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
31 : eq(8, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 35 ] -> true, [ 36; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda47262Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1462570548 { 0x572d0e34 +1.35199594e47 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1644167175 { 0x62000007 +1.83e69 } : BV:32
10 : eq(8, 9) : BOOL
11 : 252 { 0xfc -4 } : BV:8
12 : 3791650816 { 0xe2000000 -503316480 -1.0e69 } : BV:32
13 : eq(8, 12) : BOOL
14 : 52 { 0x34 } : BV:8
15 : 3791650818 { 0xe2000002 -503316478 -1.23e69 } : BV:32
16 : eq(8, 15) : BOOL
17 : 45 { 0x2d } : BV:8
18 : 1644167172 { 0x62000004 +1.47e69 } : BV:32
19 : eq(8, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 3791650819 { 0xe2000003 -503316477 -1.35e69 } : BV:32
22 : eq(8, 21) : BOOL
23 : 87 { 0x57 } : BV:8
24 : 3791650817 { 0xe2000001 -503316479 -1.11e69 } : BV:32
25 : eq(8, 24) : BOOL
26 : 14 { 0xe } : BV:8
27 : 1644167174 { 0x62000006 +1.71e69 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1644167173 { 0x62000005 +1.59e69 } : BV:32
31 : eq(8, 30) : BOOL
32 : 123 { 0x7b } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2031525298
=counter_example_end
=global nodece 56 num_edges_traversed 2
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce4342.num_edges_traversed1
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce4342 5f516adc5bb8c0e311e837781569c91a
=input.spec-%var-x-1
1 : Lambda48923Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48924Var : BV:32
18 : Lambda48925Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda48926Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 192 { 0xc0 -64 } : BV:8
84 : eq(80, 78) : BOOL
85 : 183 { 0xb7 -73 } : BV:8
86 : eq(80, 10) : BOOL
87 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
88 : eq(80, 87) : BOOL
89 : 105 { 0x69 } : BV:8
90 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
91 : eq(80, 90) : BOOL
92 : 4 { 0x4 } : BV:8
93 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
94 : eq(80, 93) : BOOL
95 : 239 { 0xef -17 } : BV:8
96 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
97 : eq(80, 96) : BOOL
98 : 202 { 0xca -54 } : BV:8
99 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
100 : eq(80, 99) : BOOL
101 : 132 { 0x84 -124 } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(88, 89, 106) : BV:8
108 : ite(86, 83, 107) : BV:8
109 : ite(84, 85, 108) : BV:8
110 : ite(82, 83, 109) : BV:8
111 : bvadd(93, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 78) : BOOL
114 : eq(111, 10) : BOOL
115 : eq(111, 87) : BOOL
116 : eq(111, 90) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 89, 123) : BV:8
125 : ite(114, 83, 124) : BV:8
126 : ite(113, 85, 125) : BV:8
127 : ite(112, 83, 126) : BV:8
128 : bvadd(96, 79) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 78) : BOOL
131 : eq(128, 10) : BOOL
132 : eq(128, 87) : BOOL
133 : eq(128, 90) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 89, 140) : BV:8
142 : ite(131, 83, 141) : BV:8
143 : ite(130, 85, 142) : BV:8
144 : ite(129, 83, 143) : BV:8
145 : bvadd(87, 79) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 78) : BOOL
148 : eq(145, 10) : BOOL
149 : eq(145, 87) : BOOL
150 : eq(145, 90) : BOOL
151 : eq(145, 93) : BOOL
152 : eq(145, 96) : BOOL
153 : eq(145, 99) : BOOL
154 : ite(153, 101, 102) : BV:8
155 : ite(152, 98, 154) : BV:8
156 : ite(151, 95, 155) : BV:8
157 : ite(150, 92, 156) : BV:8
158 : ite(149, 89, 157) : BV:8
159 : ite(148, 83, 158) : BV:8
160 : ite(147, 85, 159) : BV:8
161 : ite(146, 83, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : bvadd(75, 77, 162) : BV:32
164 : eq(163, 81) : BOOL
165 : eq(163, 78) : BOOL
166 : eq(163, 10) : BOOL
167 : eq(163, 87) : BOOL
168 : eq(163, 90) : BOOL
169 : eq(163, 93) : BOOL
170 : eq(163, 96) : BOOL
171 : eq(163, 99) : BOOL
172 : ite(171, 101, 102) : BV:8
173 : ite(170, 98, 172) : BV:8
174 : ite(169, 95, 173) : BV:8
175 : ite(168, 92, 174) : BV:8
176 : ite(167, 89, 175) : BV:8
177 : ite(166, 83, 176) : BV:8
178 : ite(165, 85, 177) : BV:8
179 : ite(164, 83, 178) : BV:8
180 : 2 { 0x2 +1.23e129 } : BV:32
181 : bvadd(180, 77, 162) : BV:32
182 : eq(181, 81) : BOOL
183 : eq(181, 78) : BOOL
184 : eq(181, 10) : BOOL
185 : eq(181, 87) : BOOL
186 : eq(181, 90) : BOOL
187 : eq(181, 93) : BOOL
188 : eq(181, 96) : BOOL
189 : eq(181, 99) : BOOL
190 : ite(189, 101, 102) : BV:8
191 : ite(188, 98, 190) : BV:8
192 : ite(187, 95, 191) : BV:8
193 : ite(186, 92, 192) : BV:8
194 : ite(185, 89, 193) : BV:8
195 : ite(184, 83, 194) : BV:8
196 : ite(183, 85, 195) : BV:8
197 : ite(182, 83, 196) : BV:8
198 : 1 { 0x1 +1.11e129 } : BV:32
199 : bvadd(198, 77, 162) : BV:32
200 : eq(199, 81) : BOOL
201 : eq(199, 78) : BOOL
202 : eq(199, 10) : BOOL
203 : eq(199, 87) : BOOL
204 : eq(199, 90) : BOOL
205 : eq(199, 93) : BOOL
206 : eq(199, 96) : BOOL
207 : eq(199, 99) : BOOL
208 : ite(207, 101, 102) : BV:8
209 : ite(206, 98, 208) : BV:8
210 : ite(205, 95, 209) : BV:8
211 : ite(204, 92, 210) : BV:8
212 : ite(203, 89, 211) : BV:8
213 : ite(202, 83, 212) : BV:8
214 : ite(201, 85, 213) : BV:8
215 : ite(200, 83, 214) : BV:8
216 : bvadd(77, 162) : BV:32
217 : eq(216, 81) : BOOL
218 : eq(216, 78) : BOOL
219 : eq(216, 10) : BOOL
220 : eq(216, 87) : BOOL
221 : eq(216, 90) : BOOL
222 : eq(216, 93) : BOOL
223 : eq(216, 96) : BOOL
224 : eq(216, 99) : BOOL
225 : ite(224, 101, 102) : BV:8
226 : ite(223, 98, 225) : BV:8
227 : ite(222, 95, 226) : BV:8
228 : ite(221, 92, 227) : BV:8
229 : ite(220, 89, 228) : BV:8
230 : ite(219, 83, 229) : BV:8
231 : ite(218, 85, 230) : BV:8
232 : ite(217, 83, 231) : BV:8
233 : bvconcat(179, 197, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda48943Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48944Var : BV:32
18 : Lambda48945Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda48946Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 192 { 0xc0 -64 } : BV:8
65 : eq(61, 59) : BOOL
66 : 183 { 0xb7 -73 } : BV:8
67 : eq(61, 10) : BOOL
68 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
69 : eq(61, 68) : BOOL
70 : 105 { 0x69 } : BV:8
71 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
72 : eq(61, 71) : BOOL
73 : 4 { 0x4 } : BV:8
74 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
75 : eq(61, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
78 : eq(61, 77) : BOOL
79 : 202 { 0xca -54 } : BV:8
80 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
81 : eq(61, 80) : BOOL
82 : 132 { 0x84 -124 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(69, 70, 87) : BV:8
89 : ite(67, 64, 88) : BV:8
90 : ite(65, 66, 89) : BV:8
91 : ite(63, 64, 90) : BV:8
92 : bvadd(74, 60) : BV:32
93 : eq(92, 62) : BOOL
94 : eq(92, 59) : BOOL
95 : eq(92, 10) : BOOL
96 : eq(92, 68) : BOOL
97 : eq(92, 71) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 70, 104) : BV:8
106 : ite(95, 64, 105) : BV:8
107 : ite(94, 66, 106) : BV:8
108 : ite(93, 64, 107) : BV:8
109 : bvadd(77, 60) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 59) : BOOL
112 : eq(109, 10) : BOOL
113 : eq(109, 68) : BOOL
114 : eq(109, 71) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 70, 121) : BV:8
123 : ite(112, 64, 122) : BV:8
124 : ite(111, 66, 123) : BV:8
125 : ite(110, 64, 124) : BV:8
126 : bvadd(68, 60) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 59) : BOOL
129 : eq(126, 10) : BOOL
130 : eq(126, 68) : BOOL
131 : eq(126, 71) : BOOL
132 : eq(126, 74) : BOOL
133 : eq(126, 77) : BOOL
134 : eq(126, 80) : BOOL
135 : ite(134, 82, 83) : BV:8
136 : ite(133, 79, 135) : BV:8
137 : ite(132, 76, 136) : BV:8
138 : ite(131, 73, 137) : BV:8
139 : ite(130, 70, 138) : BV:8
140 : ite(129, 64, 139) : BV:8
141 : ite(128, 66, 140) : BV:8
142 : ite(127, 64, 141) : BV:8
143 : bvconcat(91, 108, 125, 142) : BV:32
144 : bvadd(56, 58, 143) : BV:32
145 : eq(144, 62) : BOOL
146 : eq(144, 59) : BOOL
147 : eq(144, 10) : BOOL
148 : eq(144, 68) : BOOL
149 : eq(144, 71) : BOOL
150 : eq(144, 74) : BOOL
151 : eq(144, 77) : BOOL
152 : eq(144, 80) : BOOL
153 : ite(152, 82, 83) : BV:8
154 : ite(151, 79, 153) : BV:8
155 : ite(150, 76, 154) : BV:8
156 : ite(149, 73, 155) : BV:8
157 : ite(148, 70, 156) : BV:8
158 : ite(147, 64, 157) : BV:8
159 : ite(146, 66, 158) : BV:8
160 : ite(145, 64, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 58, 143) : BV:32
163 : eq(162, 62) : BOOL
164 : eq(162, 59) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 74) : BOOL
169 : eq(162, 77) : BOOL
170 : eq(162, 80) : BOOL
171 : ite(170, 82, 83) : BV:8
172 : ite(169, 79, 171) : BV:8
173 : ite(168, 76, 172) : BV:8
174 : ite(167, 73, 173) : BV:8
175 : ite(166, 70, 174) : BV:8
176 : ite(165, 64, 175) : BV:8
177 : ite(164, 66, 176) : BV:8
178 : ite(163, 64, 177) : BV:8
179 : 1 { 0x1 +1.11e129 } : BV:32
180 : bvadd(179, 58, 143) : BV:32
181 : eq(180, 62) : BOOL
182 : eq(180, 59) : BOOL
183 : eq(180, 10) : BOOL
184 : eq(180, 68) : BOOL
185 : eq(180, 71) : BOOL
186 : eq(180, 74) : BOOL
187 : eq(180, 77) : BOOL
188 : eq(180, 80) : BOOL
189 : ite(188, 82, 83) : BV:8
190 : ite(187, 79, 189) : BV:8
191 : ite(186, 76, 190) : BV:8
192 : ite(185, 73, 191) : BV:8
193 : ite(184, 70, 192) : BV:8
194 : ite(183, 64, 193) : BV:8
195 : ite(182, 66, 194) : BV:8
196 : ite(181, 64, 195) : BV:8
197 : bvadd(58, 143) : BV:32
198 : eq(197, 62) : BOOL
199 : eq(197, 59) : BOOL
200 : eq(197, 10) : BOOL
201 : eq(197, 68) : BOOL
202 : eq(197, 71) : BOOL
203 : eq(197, 74) : BOOL
204 : eq(197, 77) : BOOL
205 : eq(197, 80) : BOOL
206 : ite(205, 82, 83) : BV:8
207 : ite(204, 79, 206) : BV:8
208 : ite(203, 76, 207) : BV:8
209 : ite(202, 73, 208) : BV:8
210 : ite(201, 70, 209) : BV:8
211 : ite(200, 64, 210) : BV:8
212 : ite(199, 66, 211) : BV:8
213 : ite(198, 64, 212) : BV:8
214 : bvconcat(160, 178, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4227858431 ] -> 0, [ 4227858432; 4227858432 ] -> 105, [ 4227858433; 4227858433 ] -> 202, [ 4227858434; 4227858434 ] -> 239, [ 4227858435; 4227858435 ] -> 183, [ 4227858436; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 132, [ 4294967293; 4294967293 ] -> 192, [ 4294967294; 4294967294 ] -> 4, [ 4294967295; 4294967295 ] -> 192, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 527751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 527752; 527755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 527756; 1082133283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082133284; 1082133287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1082133288; 1101042767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1101042768; 1101042771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1101042772; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1101042768 { 0x41a09450 +1.25452613e4 } : BV:32
=input.dst.llvm-%m
1 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 527752 { 0x80d88 +1.6291294e129 } : BV:32
=input.dst.llvm-%n
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1082133284 { 0x40800b24 +1.33998e2 } : BV:32
=input.dst.llvm-%x
1 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 67108860 { 0x3fffffc +1.99999952e136 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda48950Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48951Var : BV:32
18 : 16777216 { 0x1000000 +1.0e131 } : BV:32
19 : eq(17, 18) : BOOL
20 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 192 { 0xc0 -64 } : BV:8
30 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
31 : eq(26, 30) : BOOL
32 : 183 { 0xb7 -73 } : BV:8
33 : eq(26, 10) : BOOL
34 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
35 : eq(26, 34) : BOOL
36 : 105 { 0x69 } : BV:8
37 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
38 : eq(26, 37) : BOOL
39 : 4 { 0x4 } : BV:8
40 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
41 : eq(26, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
44 : eq(26, 43) : BOOL
45 : 202 { 0xca -54 } : BV:8
46 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 132 { 0x84 -124 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(33, 29, 54) : BV:8
56 : ite(31, 32, 55) : BV:8
57 : ite(28, 29, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 10) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 29, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 24, 25) : BV:32
78 : eq(77, 27) : BOOL
79 : eq(77, 30) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 29, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : bvadd(24, 25) : BV:32
95 : eq(94, 27) : BOOL
96 : eq(94, 30) : BOOL
97 : eq(94, 10) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 29, 107) : BV:8
109 : ite(96, 32, 108) : BV:8
110 : ite(95, 29, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(21, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
2 : unit : UNIT
3 : Lambda48932Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda48933Var : BV:32
20 : 16777216 { 0x1000000 +1.0e131 } : BV:32
21 : eq(19, 20) : BOOL
22 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
31 : eq(29, 30) : BOOL
32 : 192 { 0xc0 -64 } : BV:8
33 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
34 : eq(29, 33) : BOOL
35 : 183 { 0xb7 -73 } : BV:8
36 : eq(29, 12) : BOOL
37 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
38 : eq(29, 37) : BOOL
39 : 105 { 0x69 } : BV:8
40 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
41 : eq(29, 40) : BOOL
42 : 4 { 0x4 } : BV:8
43 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
44 : eq(29, 43) : BOOL
45 : 239 { 0xef -17 } : BV:8
46 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
47 : eq(29, 46) : BOOL
48 : 202 { 0xca -54 } : BV:8
49 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
50 : eq(29, 49) : BOOL
51 : 132 { 0x84 -124 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 32, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 27, 28) : BV:32
63 : eq(62, 30) : BOOL
64 : eq(62, 33) : BOOL
65 : eq(62, 12) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 32, 75) : BV:8
77 : ite(64, 35, 76) : BV:8
78 : ite(63, 32, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 27, 28) : BV:32
81 : eq(80, 30) : BOOL
82 : eq(80, 33) : BOOL
83 : eq(80, 12) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 32, 93) : BV:8
95 : ite(82, 35, 94) : BV:8
96 : ite(81, 32, 95) : BV:8
97 : bvadd(27, 28) : BV:32
98 : eq(97, 30) : BOOL
99 : eq(97, 33) : BOOL
100 : eq(97, 12) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 32, 110) : BV:8
112 : ite(99, 35, 111) : BV:8
113 : ite(98, 32, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(24, 4, 114) : BV:32
116 : ite(23, 4, 115) : BV:32
117 : ite(21, 4, 116) : BV:32
118 : lambda(19, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(18, 118) : MAP[BV:32 -> BV:32]
120 : sum(1, 2, 119) : SUM[UNIT,MAP[BV:32 -> BV:32]]
121 : sym_const(120) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 16777216 { 0x1000000 +1.0e131 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 192 { 0xc0 -64 } : BV:8
30 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
31 : eq(26, 30) : BOOL
32 : 183 { 0xb7 -73 } : BV:8
33 : eq(26, 10) : BOOL
34 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
35 : eq(26, 34) : BOOL
36 : 105 { 0x69 } : BV:8
37 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
38 : eq(26, 37) : BOOL
39 : 4 { 0x4 } : BV:8
40 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
41 : eq(26, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
44 : eq(26, 43) : BOOL
45 : 202 { 0xca -54 } : BV:8
46 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 132 { 0x84 -124 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(33, 29, 54) : BV:8
56 : ite(31, 32, 55) : BV:8
57 : ite(28, 29, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 10) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 29, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : bvadd(16, 24, 25) : BV:32
77 : eq(76, 27) : BOOL
78 : eq(76, 30) : BOOL
79 : eq(76, 10) : BOOL
80 : eq(76, 34) : BOOL
81 : eq(76, 37) : BOOL
82 : eq(76, 40) : BOOL
83 : eq(76, 43) : BOOL
84 : eq(76, 46) : BOOL
85 : ite(84, 48, 49) : BV:8
86 : ite(83, 45, 85) : BV:8
87 : ite(82, 42, 86) : BV:8
88 : ite(81, 39, 87) : BV:8
89 : ite(80, 36, 88) : BV:8
90 : ite(79, 29, 89) : BV:8
91 : ite(78, 32, 90) : BV:8
92 : ite(77, 29, 91) : BV:8
93 : bvadd(24, 25) : BV:32
94 : eq(93, 27) : BOOL
95 : eq(93, 30) : BOOL
96 : eq(93, 10) : BOOL
97 : eq(93, 34) : BOOL
98 : eq(93, 37) : BOOL
99 : eq(93, 40) : BOOL
100 : eq(93, 43) : BOOL
101 : eq(93, 46) : BOOL
102 : ite(101, 48, 49) : BV:8
103 : ite(100, 45, 102) : BV:8
104 : ite(99, 42, 103) : BV:8
105 : ite(98, 39, 104) : BV:8
106 : ite(97, 36, 105) : BV:8
107 : ite(96, 29, 106) : BV:8
108 : ite(95, 32, 107) : BV:8
109 : ite(94, 29, 108) : BV:8
110 : bvconcat(57, 75, 92, 109) : BV:32
111 : ite(21, 1, 110) : BV:32
112 : ite(20, 1, 111) : BV:32
113 : sum(17, 18, 112) : SUM[UNIT,BV:32]
114 : sym_const(113) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 284345153 { 0x10f2c341 +1.89658367e162 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda48955Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48956Var : BV:32
18 : 16777216 { 0x1000000 +1.0e131 } : BV:32
19 : eq(17, 18) : BOOL
20 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
29 : eq(27, 28) : BOOL
30 : 192 { 0xc0 -64 } : BV:8
31 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
32 : eq(27, 31) : BOOL
33 : 183 { 0xb7 -73 } : BV:8
34 : eq(27, 10) : BOOL
35 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
36 : eq(27, 35) : BOOL
37 : 105 { 0x69 } : BV:8
38 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
39 : eq(27, 38) : BOOL
40 : 4 { 0x4 } : BV:8
41 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
42 : eq(27, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
45 : eq(27, 44) : BOOL
46 : 202 { 0xca -54 } : BV:8
47 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
48 : eq(27, 47) : BOOL
49 : 132 { 0x84 -124 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(34, 30, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(29, 30, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 25, 26) : BV:32
61 : eq(60, 28) : BOOL
62 : eq(60, 31) : BOOL
63 : eq(60, 10) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 30, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(61, 30, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 25, 26) : BV:32
79 : eq(78, 28) : BOOL
80 : eq(78, 31) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 43, 88) : BV:8
90 : ite(83, 40, 89) : BV:8
91 : ite(82, 37, 90) : BV:8
92 : ite(81, 30, 91) : BV:8
93 : ite(80, 33, 92) : BV:8
94 : ite(79, 30, 93) : BV:8
95 : bvadd(25, 26) : BV:32
96 : eq(95, 28) : BOOL
97 : eq(95, 31) : BOOL
98 : eq(95, 10) : BOOL
99 : eq(95, 35) : BOOL
100 : eq(95, 38) : BOOL
101 : eq(95, 41) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 43, 105) : BV:8
107 : ite(100, 40, 106) : BV:8
108 : ite(99, 37, 107) : BV:8
109 : ite(98, 30, 108) : BV:8
110 : ite(97, 33, 109) : BV:8
111 : ite(96, 30, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(22, 2, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1410985892 { 0x5419efa4 +1.20262575e41 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 536871680 { 0x20000300 +1.9155e193 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 3758408580 { 0xe004c384 -536558716 -1.3721666e65 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 536871680 { 0x20000300 +1.9155e193 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 3758408580 { 0xe004c384 -536558716 -1.3721666e65 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 67108860 { 0x3fffffc +1.99999952e136 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 527752 { 0x80d88 +1.6291294e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 527755 { 0x80d8b +1.6291329e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1082133284 { 0x40800b24 +1.33998e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1082133287 { 0x40800b27 +1.34034e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1101042768 { 0x41a09450 +1.25452613e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1101042771 { 0x41a09453 +1.25452649e4 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda48815Var : BV:32
2 : Lambda48816Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 192 { 0xc0 -64 } : BV:8
57 : eq(53, 51) : BOOL
58 : 183 { 0xb7 -73 } : BV:8
59 : eq(53, 14) : BOOL
60 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
61 : eq(53, 60) : BOOL
62 : 105 { 0x69 } : BV:8
63 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
64 : eq(53, 63) : BOOL
65 : 4 { 0x4 } : BV:8
66 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
67 : eq(53, 66) : BOOL
68 : 239 { 0xef -17 } : BV:8
69 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
70 : eq(53, 69) : BOOL
71 : 202 { 0xca -54 } : BV:8
72 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
73 : eq(53, 72) : BOOL
74 : 132 { 0x84 -124 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(59, 56, 80) : BV:8
82 : ite(57, 58, 81) : BV:8
83 : ite(55, 56, 82) : BV:8
84 : bvadd(66, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 51) : BOOL
87 : eq(84, 14) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 56, 97) : BV:8
99 : ite(86, 58, 98) : BV:8
100 : ite(85, 56, 99) : BV:8
101 : bvadd(69, 52) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 51) : BOOL
104 : eq(101, 14) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 56, 114) : BV:8
116 : ite(103, 58, 115) : BV:8
117 : ite(102, 56, 116) : BV:8
118 : bvadd(60, 52) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 51) : BOOL
121 : eq(118, 14) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 56, 131) : BV:8
133 : ite(120, 58, 132) : BV:8
134 : ite(119, 56, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(48, 50, 135) : BV:32
137 : eq(136, 54) : BOOL
138 : eq(136, 51) : BOOL
139 : eq(136, 14) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 56, 149) : BV:8
151 : ite(138, 58, 150) : BV:8
152 : ite(137, 56, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 50, 135) : BV:32
155 : eq(154, 54) : BOOL
156 : eq(154, 51) : BOOL
157 : eq(154, 14) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 56, 167) : BV:8
169 : ite(156, 58, 168) : BV:8
170 : ite(155, 56, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 50, 135) : BV:32
173 : eq(172, 54) : BOOL
174 : eq(172, 51) : BOOL
175 : eq(172, 14) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 56, 185) : BV:8
187 : ite(174, 58, 186) : BV:8
188 : ite(173, 56, 187) : BV:8
189 : bvadd(50, 135) : BV:32
190 : eq(189, 54) : BOOL
191 : eq(189, 51) : BOOL
192 : eq(189, 14) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 56, 202) : BV:8
204 : ite(191, 58, 203) : BV:8
205 : ite(190, 56, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda48820Var : BV:32
2 : Lambda48821Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 134217920 ] -> true, [ 134217921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 134217920 ] -> true, [ 134217921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda48829Var : BV:32
2 : Lambda48830Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda48825Var : BV:32
2 : Lambda48826Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : eq(12, 10) : BOOL
17 : 183 { 0xb7 -73 } : BV:8
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : eq(12, 18) : BOOL
20 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
21 : eq(12, 20) : BOOL
22 : 105 { 0x69 } : BV:8
23 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
24 : eq(12, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
27 : eq(12, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
30 : eq(12, 29) : BOOL
31 : 202 { 0xca -54 } : BV:8
32 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
33 : eq(12, 32) : BOOL
34 : 132 { 0x84 -124 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 15, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(26, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 20) : BOOL
49 : eq(44, 23) : BOOL
50 : eq(44, 26) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 28, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : ite(48, 22, 56) : BV:8
58 : ite(47, 15, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(29, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 10) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 20) : BOOL
66 : eq(61, 23) : BOOL
67 : eq(61, 26) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 28, 71) : BV:8
73 : ite(66, 25, 72) : BV:8
74 : ite(65, 22, 73) : BV:8
75 : ite(64, 15, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(20, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 10) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 20) : BOOL
83 : eq(78, 23) : BOOL
84 : eq(78, 26) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : ite(83, 25, 89) : BV:8
91 : ite(82, 22, 90) : BV:8
92 : ite(81, 15, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 10) : BOOL
99 : eq(96, 18) : BOOL
100 : eq(96, 20) : BOOL
101 : eq(96, 23) : BOOL
102 : eq(96, 26) : BOOL
103 : eq(96, 29) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 31, 105) : BV:8
107 : ite(102, 28, 106) : BV:8
108 : ite(101, 25, 107) : BV:8
109 : ite(100, 22, 108) : BV:8
110 : ite(99, 15, 109) : BV:8
111 : ite(98, 17, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 18) : BOOL
118 : eq(114, 20) : BOOL
119 : eq(114, 23) : BOOL
120 : eq(114, 26) : BOOL
121 : eq(114, 29) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 31, 123) : BV:8
125 : ite(120, 28, 124) : BV:8
126 : ite(119, 25, 125) : BV:8
127 : ite(118, 22, 126) : BV:8
128 : ite(117, 15, 127) : BV:8
129 : ite(116, 17, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 10) : BOOL
135 : eq(132, 18) : BOOL
136 : eq(132, 20) : BOOL
137 : eq(132, 23) : BOOL
138 : eq(132, 26) : BOOL
139 : eq(132, 29) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 31, 141) : BV:8
143 : ite(138, 28, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 15, 145) : BV:8
147 : ite(134, 17, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 10) : BOOL
152 : eq(149, 18) : BOOL
153 : eq(149, 20) : BOOL
154 : eq(149, 23) : BOOL
155 : eq(149, 26) : BOOL
156 : eq(149, 29) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 31, 158) : BV:8
160 : ite(155, 28, 159) : BV:8
161 : ite(154, 25, 160) : BV:8
162 : ite(153, 22, 161) : BV:8
163 : ite(152, 15, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268437505 ] -> true, [ 268437506; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda48836Var : BV:32
2 : 16777216 { 0x1000000 +1.0e131 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
17 : eq(12, 16) : BOOL
18 : 183 { 0xb7 -73 } : BV:8
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : eq(12, 19) : BOOL
21 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
22 : eq(12, 21) : BOOL
23 : 105 { 0x69 } : BV:8
24 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
28 : eq(12, 27) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
31 : eq(12, 30) : BOOL
32 : 202 { 0xca -54 } : BV:8
33 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 132 { 0x84 -124 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(20, 15, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 10, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 15, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(47, 15, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 10, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 19) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : ite(66, 18, 78) : BV:8
80 : ite(65, 15, 79) : BV:8
81 : bvadd(10, 11) : BV:32
82 : eq(81, 13) : BOOL
83 : eq(81, 16) : BOOL
84 : eq(81, 19) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 15, 94) : BV:8
96 : ite(83, 18, 95) : BV:8
97 : ite(82, 15, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(7, 4, 98) : BV:32
100 : ite(6, 4, 99) : BV:32
101 : ite(3, 4, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268437505 ] -> true, [ 268437506; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda48840Var : BV:32
2 : 16777216 { 0x1000000 +1.0e131 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 192 { 0xc0 -64 } : BV:8
15 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
16 : eq(11, 15) : BOOL
17 : 183 { 0xb7 -73 } : BV:8
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
21 : eq(11, 20) : BOOL
22 : 105 { 0x69 } : BV:8
23 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
27 : eq(11, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
30 : eq(11, 29) : BOOL
31 : 202 { 0xca -54 } : BV:8
32 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 132 { 0x84 -124 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 14, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 14, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 9, 10) : BV:32
64 : eq(63, 12) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 14, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : bvadd(9, 10) : BV:32
81 : eq(80, 12) : BOOL
82 : eq(80, 15) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 14, 93) : BV:8
95 : ite(82, 17, 94) : BV:8
96 : ite(81, 14, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(6, 4, 97) : BV:32
99 : ite(3, 4, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 268437505 ] -> true, [ 268437506; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda48844Var : BV:32
2 : 16777216 { 0x1000000 +1.0e131 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
17 : eq(12, 16) : BOOL
18 : 183 { 0xb7 -73 } : BV:8
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : eq(12, 19) : BOOL
21 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
22 : eq(12, 21) : BOOL
23 : 105 { 0x69 } : BV:8
24 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
28 : eq(12, 27) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
31 : eq(12, 30) : BOOL
32 : 202 { 0xca -54 } : BV:8
33 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 132 { 0x84 -124 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(20, 15, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 10, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 15, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(47, 15, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 10, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 19) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : ite(66, 18, 78) : BV:8
80 : ite(65, 15, 79) : BV:8
81 : bvadd(10, 11) : BV:32
82 : eq(81, 13) : BOOL
83 : eq(81, 16) : BOOL
84 : eq(81, 19) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 15, 94) : BV:8
96 : ite(83, 18, 95) : BV:8
97 : ite(82, 15, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(7, 4, 98) : BV:32
100 : ite(6, 4, 99) : BV:32
101 : ite(3, 4, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4168390288
=counter_example_end
=global nodece 57 num_edges_traversed 1
=global nodece 57 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce4382.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce4382 b79ec3717627b7e92337db6589b7a676
=input.spec-%var-x-1
1 : Lambda48923Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48924Var : BV:32
18 : Lambda48925Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda48926Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 192 { 0xc0 -64 } : BV:8
84 : eq(80, 78) : BOOL
85 : 183 { 0xb7 -73 } : BV:8
86 : eq(80, 10) : BOOL
87 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
88 : eq(80, 87) : BOOL
89 : 105 { 0x69 } : BV:8
90 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
91 : eq(80, 90) : BOOL
92 : 4 { 0x4 } : BV:8
93 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
94 : eq(80, 93) : BOOL
95 : 239 { 0xef -17 } : BV:8
96 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
97 : eq(80, 96) : BOOL
98 : 202 { 0xca -54 } : BV:8
99 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
100 : eq(80, 99) : BOOL
101 : 132 { 0x84 -124 } : BV:8
102 : 0 { 0x0 } : BV:8
103 : ite(100, 101, 102) : BV:8
104 : ite(97, 98, 103) : BV:8
105 : ite(94, 95, 104) : BV:8
106 : ite(91, 92, 105) : BV:8
107 : ite(88, 89, 106) : BV:8
108 : ite(86, 83, 107) : BV:8
109 : ite(84, 85, 108) : BV:8
110 : ite(82, 83, 109) : BV:8
111 : bvadd(93, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 78) : BOOL
114 : eq(111, 10) : BOOL
115 : eq(111, 87) : BOOL
116 : eq(111, 90) : BOOL
117 : eq(111, 93) : BOOL
118 : eq(111, 96) : BOOL
119 : eq(111, 99) : BOOL
120 : ite(119, 101, 102) : BV:8
121 : ite(118, 98, 120) : BV:8
122 : ite(117, 95, 121) : BV:8
123 : ite(116, 92, 122) : BV:8
124 : ite(115, 89, 123) : BV:8
125 : ite(114, 83, 124) : BV:8
126 : ite(113, 85, 125) : BV:8
127 : ite(112, 83, 126) : BV:8
128 : bvadd(96, 79) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 78) : BOOL
131 : eq(128, 10) : BOOL
132 : eq(128, 87) : BOOL
133 : eq(128, 90) : BOOL
134 : eq(128, 93) : BOOL
135 : eq(128, 96) : BOOL
136 : eq(128, 99) : BOOL
137 : ite(136, 101, 102) : BV:8
138 : ite(135, 98, 137) : BV:8
139 : ite(134, 95, 138) : BV:8
140 : ite(133, 92, 139) : BV:8
141 : ite(132, 89, 140) : BV:8
142 : ite(131, 83, 141) : BV:8
143 : ite(130, 85, 142) : BV:8
144 : ite(129, 83, 143) : BV:8
145 : bvadd(87, 79) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 78) : BOOL
148 : eq(145, 10) : BOOL
149 : eq(145, 87) : BOOL
150 : eq(145, 90) : BOOL
151 : eq(145, 93) : BOOL
152 : eq(145, 96) : BOOL
153 : eq(145, 99) : BOOL
154 : ite(153, 101, 102) : BV:8
155 : ite(152, 98, 154) : BV:8
156 : ite(151, 95, 155) : BV:8
157 : ite(150, 92, 156) : BV:8
158 : ite(149, 89, 157) : BV:8
159 : ite(148, 83, 158) : BV:8
160 : ite(147, 85, 159) : BV:8
161 : ite(146, 83, 160) : BV:8
162 : bvconcat(110, 127, 144, 161) : BV:32
163 : bvadd(75, 77, 162) : BV:32
164 : eq(163, 81) : BOOL
165 : eq(163, 78) : BOOL
166 : eq(163, 10) : BOOL
167 : eq(163, 87) : BOOL
168 : eq(163, 90) : BOOL
169 : eq(163, 93) : BOOL
170 : eq(163, 96) : BOOL
171 : eq(163, 99) : BOOL
172 : ite(171, 101, 102) : BV:8
173 : ite(170, 98, 172) : BV:8
174 : ite(169, 95, 173) : BV:8
175 : ite(168, 92, 174) : BV:8
176 : ite(167, 89, 175) : BV:8
177 : ite(166, 83, 176) : BV:8
178 : ite(165, 85, 177) : BV:8
179 : ite(164, 83, 178) : BV:8
180 : 2 { 0x2 +1.23e129 } : BV:32
181 : bvadd(180, 77, 162) : BV:32
182 : eq(181, 81) : BOOL
183 : eq(181, 78) : BOOL
184 : eq(181, 10) : BOOL
185 : eq(181, 87) : BOOL
186 : eq(181, 90) : BOOL
187 : eq(181, 93) : BOOL
188 : eq(181, 96) : BOOL
189 : eq(181, 99) : BOOL
190 : ite(189, 101, 102) : BV:8
191 : ite(188, 98, 190) : BV:8
192 : ite(187, 95, 191) : BV:8
193 : ite(186, 92, 192) : BV:8
194 : ite(185, 89, 193) : BV:8
195 : ite(184, 83, 194) : BV:8
196 : ite(183, 85, 195) : BV:8
197 : ite(182, 83, 196) : BV:8
198 : 1 { 0x1 +1.11e129 } : BV:32
199 : bvadd(198, 77, 162) : BV:32
200 : eq(199, 81) : BOOL
201 : eq(199, 78) : BOOL
202 : eq(199, 10) : BOOL
203 : eq(199, 87) : BOOL
204 : eq(199, 90) : BOOL
205 : eq(199, 93) : BOOL
206 : eq(199, 96) : BOOL
207 : eq(199, 99) : BOOL
208 : ite(207, 101, 102) : BV:8
209 : ite(206, 98, 208) : BV:8
210 : ite(205, 95, 209) : BV:8
211 : ite(204, 92, 210) : BV:8
212 : ite(203, 89, 211) : BV:8
213 : ite(202, 83, 212) : BV:8
214 : ite(201, 85, 213) : BV:8
215 : ite(200, 83, 214) : BV:8
216 : bvadd(77, 162) : BV:32
217 : eq(216, 81) : BOOL
218 : eq(216, 78) : BOOL
219 : eq(216, 10) : BOOL
220 : eq(216, 87) : BOOL
221 : eq(216, 90) : BOOL
222 : eq(216, 93) : BOOL
223 : eq(216, 96) : BOOL
224 : eq(216, 99) : BOOL
225 : ite(224, 101, 102) : BV:8
226 : ite(223, 98, 225) : BV:8
227 : ite(222, 95, 226) : BV:8
228 : ite(221, 92, 227) : BV:8
229 : ite(220, 89, 228) : BV:8
230 : ite(219, 83, 229) : BV:8
231 : ite(218, 85, 230) : BV:8
232 : ite(217, 83, 231) : BV:8
233 : bvconcat(179, 197, 215, 232) : BV:32
234 : ite(55, 2, 233) : BV:32
235 : ite(74, 233, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : lambda(52, 236) : FUNCTION[BV:32 -> BV:32]
238 : map(51, 237) : MAP[BV:32 -> BV:32]
239 : lambda(17, 238) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
240 : map(16, 239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
241 : sym_const(240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda48943Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48944Var : BV:32
18 : Lambda48945Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda48946Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 192 { 0xc0 -64 } : BV:8
65 : eq(61, 59) : BOOL
66 : 183 { 0xb7 -73 } : BV:8
67 : eq(61, 10) : BOOL
68 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
69 : eq(61, 68) : BOOL
70 : 105 { 0x69 } : BV:8
71 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
72 : eq(61, 71) : BOOL
73 : 4 { 0x4 } : BV:8
74 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
75 : eq(61, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
78 : eq(61, 77) : BOOL
79 : 202 { 0xca -54 } : BV:8
80 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
81 : eq(61, 80) : BOOL
82 : 132 { 0x84 -124 } : BV:8
83 : 0 { 0x0 } : BV:8
84 : ite(81, 82, 83) : BV:8
85 : ite(78, 79, 84) : BV:8
86 : ite(75, 76, 85) : BV:8
87 : ite(72, 73, 86) : BV:8
88 : ite(69, 70, 87) : BV:8
89 : ite(67, 64, 88) : BV:8
90 : ite(65, 66, 89) : BV:8
91 : ite(63, 64, 90) : BV:8
92 : bvadd(74, 60) : BV:32
93 : eq(92, 62) : BOOL
94 : eq(92, 59) : BOOL
95 : eq(92, 10) : BOOL
96 : eq(92, 68) : BOOL
97 : eq(92, 71) : BOOL
98 : eq(92, 74) : BOOL
99 : eq(92, 77) : BOOL
100 : eq(92, 80) : BOOL
101 : ite(100, 82, 83) : BV:8
102 : ite(99, 79, 101) : BV:8
103 : ite(98, 76, 102) : BV:8
104 : ite(97, 73, 103) : BV:8
105 : ite(96, 70, 104) : BV:8
106 : ite(95, 64, 105) : BV:8
107 : ite(94, 66, 106) : BV:8
108 : ite(93, 64, 107) : BV:8
109 : bvadd(77, 60) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 59) : BOOL
112 : eq(109, 10) : BOOL
113 : eq(109, 68) : BOOL
114 : eq(109, 71) : BOOL
115 : eq(109, 74) : BOOL
116 : eq(109, 77) : BOOL
117 : eq(109, 80) : BOOL
118 : ite(117, 82, 83) : BV:8
119 : ite(116, 79, 118) : BV:8
120 : ite(115, 76, 119) : BV:8
121 : ite(114, 73, 120) : BV:8
122 : ite(113, 70, 121) : BV:8
123 : ite(112, 64, 122) : BV:8
124 : ite(111, 66, 123) : BV:8
125 : ite(110, 64, 124) : BV:8
126 : bvadd(68, 60) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 59) : BOOL
129 : eq(126, 10) : BOOL
130 : eq(126, 68) : BOOL
131 : eq(126, 71) : BOOL
132 : eq(126, 74) : BOOL
133 : eq(126, 77) : BOOL
134 : eq(126, 80) : BOOL
135 : ite(134, 82, 83) : BV:8
136 : ite(133, 79, 135) : BV:8
137 : ite(132, 76, 136) : BV:8
138 : ite(131, 73, 137) : BV:8
139 : ite(130, 70, 138) : BV:8
140 : ite(129, 64, 139) : BV:8
141 : ite(128, 66, 140) : BV:8
142 : ite(127, 64, 141) : BV:8
143 : bvconcat(91, 108, 125, 142) : BV:32
144 : bvadd(56, 58, 143) : BV:32
145 : eq(144, 62) : BOOL
146 : eq(144, 59) : BOOL
147 : eq(144, 10) : BOOL
148 : eq(144, 68) : BOOL
149 : eq(144, 71) : BOOL
150 : eq(144, 74) : BOOL
151 : eq(144, 77) : BOOL
152 : eq(144, 80) : BOOL
153 : ite(152, 82, 83) : BV:8
154 : ite(151, 79, 153) : BV:8
155 : ite(150, 76, 154) : BV:8
156 : ite(149, 73, 155) : BV:8
157 : ite(148, 70, 156) : BV:8
158 : ite(147, 64, 157) : BV:8
159 : ite(146, 66, 158) : BV:8
160 : ite(145, 64, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 58, 143) : BV:32
163 : eq(162, 62) : BOOL
164 : eq(162, 59) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 71) : BOOL
168 : eq(162, 74) : BOOL
169 : eq(162, 77) : BOOL
170 : eq(162, 80) : BOOL
171 : ite(170, 82, 83) : BV:8
172 : ite(169, 79, 171) : BV:8
173 : ite(168, 76, 172) : BV:8
174 : ite(167, 73, 173) : BV:8
175 : ite(166, 70, 174) : BV:8
176 : ite(165, 64, 175) : BV:8
177 : ite(164, 66, 176) : BV:8
178 : ite(163, 64, 177) : BV:8
179 : 1 { 0x1 +1.11e129 } : BV:32
180 : bvadd(179, 58, 143) : BV:32
181 : eq(180, 62) : BOOL
182 : eq(180, 59) : BOOL
183 : eq(180, 10) : BOOL
184 : eq(180, 68) : BOOL
185 : eq(180, 71) : BOOL
186 : eq(180, 74) : BOOL
187 : eq(180, 77) : BOOL
188 : eq(180, 80) : BOOL
189 : ite(188, 82, 83) : BV:8
190 : ite(187, 79, 189) : BV:8
191 : ite(186, 76, 190) : BV:8
192 : ite(185, 73, 191) : BV:8
193 : ite(184, 70, 192) : BV:8
194 : ite(183, 64, 193) : BV:8
195 : ite(182, 66, 194) : BV:8
196 : ite(181, 64, 195) : BV:8
197 : bvadd(58, 143) : BV:32
198 : eq(197, 62) : BOOL
199 : eq(197, 59) : BOOL
200 : eq(197, 10) : BOOL
201 : eq(197, 68) : BOOL
202 : eq(197, 71) : BOOL
203 : eq(197, 74) : BOOL
204 : eq(197, 77) : BOOL
205 : eq(197, 80) : BOOL
206 : ite(205, 82, 83) : BV:8
207 : ite(204, 79, 206) : BV:8
208 : ite(203, 76, 207) : BV:8
209 : ite(202, 73, 208) : BV:8
210 : ite(201, 70, 209) : BV:8
211 : ite(200, 64, 210) : BV:8
212 : ite(199, 66, 211) : BV:8
213 : ite(198, 64, 212) : BV:8
214 : bvconcat(160, 178, 196, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4227858431 ] -> 0, [ 4227858432; 4227858432 ] -> 105, [ 4227858433; 4227858433 ] -> 202, [ 4227858434; 4227858434 ] -> 239, [ 4227858435; 4227858435 ] -> 183, [ 4227858436; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 132, [ 4294967293; 4294967293 ] -> 192, [ 4294967294; 4294967294 ] -> 4, [ 4294967295; 4294967295 ] -> 192, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 527751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 527752; 527755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 527756; 1082133283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1082133284; 1082133287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1082133288; 1101042767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1101042768; 1101042771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1101042772; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1101042768 { 0x41a09450 +1.25452613e4 } : BV:32
=input.dst.llvm-%m
1 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 527752 { 0x80d88 +1.6291294e129 } : BV:32
=input.dst.llvm-%n
1 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1082133284 { 0x40800b24 +1.33998e2 } : BV:32
=input.dst.llvm-%x
1 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda48950Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48951Var : BV:32
18 : 16777216 { 0x1000000 +1.0e131 } : BV:32
19 : eq(17, 18) : BOOL
20 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 192 { 0xc0 -64 } : BV:8
30 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
31 : eq(26, 30) : BOOL
32 : 183 { 0xb7 -73 } : BV:8
33 : eq(26, 10) : BOOL
34 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
35 : eq(26, 34) : BOOL
36 : 105 { 0x69 } : BV:8
37 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
38 : eq(26, 37) : BOOL
39 : 4 { 0x4 } : BV:8
40 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
41 : eq(26, 40) : BOOL
42 : 239 { 0xef -17 } : BV:8
43 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
44 : eq(26, 43) : BOOL
45 : 202 { 0xca -54 } : BV:8
46 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
47 : eq(26, 46) : BOOL
48 : 132 { 0x84 -124 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(33, 29, 54) : BV:8
56 : ite(31, 32, 55) : BV:8
57 : ite(28, 29, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 24, 25) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : eq(59, 10) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 29, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : ite(60, 29, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 24, 25) : BV:32
78 : eq(77, 27) : BOOL
79 : eq(77, 30) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 29, 90) : BV:8
92 : ite(79, 32, 91) : BV:8
93 : ite(78, 29, 92) : BV:8
94 : bvadd(24, 25) : BV:32
95 : eq(94, 27) : BOOL
96 : eq(94, 30) : BOOL
97 : eq(94, 10) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 29, 107) : BV:8
109 : ite(96, 32, 108) : BV:8
110 : ite(95, 29, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(21, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
2 : unit : UNIT
3 : Lambda48932Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda48933Var : BV:32
20 : 16777216 { 0x1000000 +1.0e131 } : BV:32
21 : eq(19, 20) : BOOL
22 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
31 : eq(29, 30) : BOOL
32 : 192 { 0xc0 -64 } : BV:8
33 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
34 : eq(29, 33) : BOOL
35 : 183 { 0xb7 -73 } : BV:8
36 : eq(29, 12) : BOOL
37 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
38 : eq(29, 37) : BOOL
39 : 105 { 0x69 } : BV:8
40 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
41 : eq(29, 40) : BOOL
42 : 4 { 0x4 } : BV:8
43 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
44 : eq(29, 43) : BOOL
45 : 239 { 0xef -17 } : BV:8
46 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
47 : eq(29, 46) : BOOL
48 : 202 { 0xca -54 } : BV:8
49 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
50 : eq(29, 49) : BOOL
51 : 132 { 0x84 -124 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 32, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 27, 28) : BV:32
63 : eq(62, 30) : BOOL
64 : eq(62, 33) : BOOL
65 : eq(62, 12) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 32, 75) : BV:8
77 : ite(64, 35, 76) : BV:8
78 : ite(63, 32, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 27, 28) : BV:32
81 : eq(80, 30) : BOOL
82 : eq(80, 33) : BOOL
83 : eq(80, 12) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 32, 93) : BV:8
95 : ite(82, 35, 94) : BV:8
96 : ite(81, 32, 95) : BV:8
97 : bvadd(27, 28) : BV:32
98 : eq(97, 30) : BOOL
99 : eq(97, 33) : BOOL
100 : eq(97, 12) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 32, 110) : BV:8
112 : ite(99, 35, 111) : BV:8
113 : ite(98, 32, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(24, 4, 114) : BV:32
116 : ite(23, 4, 115) : BV:32
117 : ite(21, 4, 116) : BV:32
118 : lambda(19, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(18, 118) : MAP[BV:32 -> BV:32]
120 : sum(1, 2, 119) : SUM[UNIT,MAP[BV:32 -> BV:32]]
121 : sym_const(120) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 284345154 { 0x10f2c342 +1.89658379e162 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda48955Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48956Var : BV:32
18 : 16777216 { 0x1000000 +1.0e131 } : BV:32
19 : eq(17, 18) : BOOL
20 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
29 : eq(27, 28) : BOOL
30 : 192 { 0xc0 -64 } : BV:8
31 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
32 : eq(27, 31) : BOOL
33 : 183 { 0xb7 -73 } : BV:8
34 : eq(27, 10) : BOOL
35 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
36 : eq(27, 35) : BOOL
37 : 105 { 0x69 } : BV:8
38 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
39 : eq(27, 38) : BOOL
40 : 4 { 0x4 } : BV:8
41 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
42 : eq(27, 41) : BOOL
43 : 239 { 0xef -17 } : BV:8
44 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
45 : eq(27, 44) : BOOL
46 : 202 { 0xca -54 } : BV:8
47 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
48 : eq(27, 47) : BOOL
49 : 132 { 0x84 -124 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(34, 30, 55) : BV:8
57 : ite(32, 33, 56) : BV:8
58 : ite(29, 30, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 25, 26) : BV:32
61 : eq(60, 28) : BOOL
62 : eq(60, 31) : BOOL
63 : eq(60, 10) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 30, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(61, 30, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 25, 26) : BV:32
79 : eq(78, 28) : BOOL
80 : eq(78, 31) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 43, 88) : BV:8
90 : ite(83, 40, 89) : BV:8
91 : ite(82, 37, 90) : BV:8
92 : ite(81, 30, 91) : BV:8
93 : ite(80, 33, 92) : BV:8
94 : ite(79, 30, 93) : BV:8
95 : bvadd(25, 26) : BV:32
96 : eq(95, 28) : BOOL
97 : eq(95, 31) : BOOL
98 : eq(95, 10) : BOOL
99 : eq(95, 35) : BOOL
100 : eq(95, 38) : BOOL
101 : eq(95, 41) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 43, 105) : BV:8
107 : ite(100, 40, 106) : BV:8
108 : ite(99, 37, 107) : BV:8
109 : ite(98, 30, 108) : BV:8
110 : ite(97, 33, 109) : BV:8
111 : ite(96, 30, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(22, 2, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1410985893 { 0x5419efa5 +1.20262587e41 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 527752 { 0x80d88 +1.6291294e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 527755 { 0x80d8b +1.6291329e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1082133284 { 0x40800b24 +1.33998e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1082133287 { 0x40800b27 +1.34034e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1101042768 { 0x41a09450 +1.25452613e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1101042771 { 0x41a09453 +1.25452649e4 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda48815Var : BV:32
2 : Lambda48816Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 192 { 0xc0 -64 } : BV:8
57 : eq(53, 51) : BOOL
58 : 183 { 0xb7 -73 } : BV:8
59 : eq(53, 14) : BOOL
60 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
61 : eq(53, 60) : BOOL
62 : 105 { 0x69 } : BV:8
63 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
64 : eq(53, 63) : BOOL
65 : 4 { 0x4 } : BV:8
66 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
67 : eq(53, 66) : BOOL
68 : 239 { 0xef -17 } : BV:8
69 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
70 : eq(53, 69) : BOOL
71 : 202 { 0xca -54 } : BV:8
72 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
73 : eq(53, 72) : BOOL
74 : 132 { 0x84 -124 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(59, 56, 80) : BV:8
82 : ite(57, 58, 81) : BV:8
83 : ite(55, 56, 82) : BV:8
84 : bvadd(66, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 51) : BOOL
87 : eq(84, 14) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 56, 97) : BV:8
99 : ite(86, 58, 98) : BV:8
100 : ite(85, 56, 99) : BV:8
101 : bvadd(69, 52) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 51) : BOOL
104 : eq(101, 14) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 56, 114) : BV:8
116 : ite(103, 58, 115) : BV:8
117 : ite(102, 56, 116) : BV:8
118 : bvadd(60, 52) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 51) : BOOL
121 : eq(118, 14) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 56, 131) : BV:8
133 : ite(120, 58, 132) : BV:8
134 : ite(119, 56, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(48, 50, 135) : BV:32
137 : eq(136, 54) : BOOL
138 : eq(136, 51) : BOOL
139 : eq(136, 14) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 56, 149) : BV:8
151 : ite(138, 58, 150) : BV:8
152 : ite(137, 56, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 50, 135) : BV:32
155 : eq(154, 54) : BOOL
156 : eq(154, 51) : BOOL
157 : eq(154, 14) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 56, 167) : BV:8
169 : ite(156, 58, 168) : BV:8
170 : ite(155, 56, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 50, 135) : BV:32
173 : eq(172, 54) : BOOL
174 : eq(172, 51) : BOOL
175 : eq(172, 14) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 56, 185) : BV:8
187 : ite(174, 58, 186) : BV:8
188 : ite(173, 56, 187) : BV:8
189 : bvadd(50, 135) : BV:32
190 : eq(189, 54) : BOOL
191 : eq(189, 51) : BOOL
192 : eq(189, 14) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 56, 202) : BV:8
204 : ite(191, 58, 203) : BV:8
205 : ite(190, 56, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(6, 3, 206) : BV:32
208 : ite(47, 206, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda48820Var : BV:32
2 : Lambda48821Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 134217920 ] -> true, [ 134217921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 134217920 ] -> true, [ 134217921; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda48829Var : BV:32
2 : Lambda48830Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217921 { 0x80000c1 +1.2300e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217922 { 0x80000c2 +1.2312e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 268437505 { 0x10000801 +1.24425e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 268437506 { 0x10000802 +1.24437e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 268437507 { 0x10000803 +1.24449e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda48825Var : BV:32
2 : Lambda48826Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : eq(12, 10) : BOOL
17 : 183 { 0xb7 -73 } : BV:8
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : eq(12, 18) : BOOL
20 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
21 : eq(12, 20) : BOOL
22 : 105 { 0x69 } : BV:8
23 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
24 : eq(12, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
27 : eq(12, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
30 : eq(12, 29) : BOOL
31 : 202 { 0xca -54 } : BV:8
32 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
33 : eq(12, 32) : BOOL
34 : 132 { 0x84 -124 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 15, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(26, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 20) : BOOL
49 : eq(44, 23) : BOOL
50 : eq(44, 26) : BOOL
51 : eq(44, 29) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 31, 53) : BV:8
55 : ite(50, 28, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : ite(48, 22, 56) : BV:8
58 : ite(47, 15, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(29, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 10) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 20) : BOOL
66 : eq(61, 23) : BOOL
67 : eq(61, 26) : BOOL
68 : eq(61, 29) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 28, 71) : BV:8
73 : ite(66, 25, 72) : BV:8
74 : ite(65, 22, 73) : BV:8
75 : ite(64, 15, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(20, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 10) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 20) : BOOL
83 : eq(78, 23) : BOOL
84 : eq(78, 26) : BOOL
85 : eq(78, 29) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 31, 87) : BV:8
89 : ite(84, 28, 88) : BV:8
90 : ite(83, 25, 89) : BV:8
91 : ite(82, 22, 90) : BV:8
92 : ite(81, 15, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 10) : BOOL
99 : eq(96, 18) : BOOL
100 : eq(96, 20) : BOOL
101 : eq(96, 23) : BOOL
102 : eq(96, 26) : BOOL
103 : eq(96, 29) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 31, 105) : BV:8
107 : ite(102, 28, 106) : BV:8
108 : ite(101, 25, 107) : BV:8
109 : ite(100, 22, 108) : BV:8
110 : ite(99, 15, 109) : BV:8
111 : ite(98, 17, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 18) : BOOL
118 : eq(114, 20) : BOOL
119 : eq(114, 23) : BOOL
120 : eq(114, 26) : BOOL
121 : eq(114, 29) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 31, 123) : BV:8
125 : ite(120, 28, 124) : BV:8
126 : ite(119, 25, 125) : BV:8
127 : ite(118, 22, 126) : BV:8
128 : ite(117, 15, 127) : BV:8
129 : ite(116, 17, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 10) : BOOL
135 : eq(132, 18) : BOOL
136 : eq(132, 20) : BOOL
137 : eq(132, 23) : BOOL
138 : eq(132, 26) : BOOL
139 : eq(132, 29) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 31, 141) : BV:8
143 : ite(138, 28, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 15, 145) : BV:8
147 : ite(134, 17, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 10) : BOOL
152 : eq(149, 18) : BOOL
153 : eq(149, 20) : BOOL
154 : eq(149, 23) : BOOL
155 : eq(149, 26) : BOOL
156 : eq(149, 29) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 31, 158) : BV:8
160 : ite(155, 28, 159) : BV:8
161 : ite(154, 25, 160) : BV:8
162 : ite(153, 22, 161) : BV:8
163 : ite(152, 15, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 268437505 ] -> true, [ 268437506; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda48836Var : BV:32
2 : 16777216 { 0x1000000 +1.0e131 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
17 : eq(12, 16) : BOOL
18 : 183 { 0xb7 -73 } : BV:8
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : eq(12, 19) : BOOL
21 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
22 : eq(12, 21) : BOOL
23 : 105 { 0x69 } : BV:8
24 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
28 : eq(12, 27) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
31 : eq(12, 30) : BOOL
32 : 202 { 0xca -54 } : BV:8
33 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 132 { 0x84 -124 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(20, 15, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 10, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 15, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(47, 15, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 10, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 19) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : ite(66, 18, 78) : BV:8
80 : ite(65, 15, 79) : BV:8
81 : bvadd(10, 11) : BV:32
82 : eq(81, 13) : BOOL
83 : eq(81, 16) : BOOL
84 : eq(81, 19) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 15, 94) : BV:8
96 : ite(83, 18, 95) : BV:8
97 : ite(82, 15, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(7, 4, 98) : BV:32
100 : ite(6, 4, 99) : BV:32
101 : ite(3, 4, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 268437505 ] -> true, [ 268437506; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda48840Var : BV:32
2 : 16777216 { 0x1000000 +1.0e131 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 192 { 0xc0 -64 } : BV:8
15 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
16 : eq(11, 15) : BOOL
17 : 183 { 0xb7 -73 } : BV:8
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
21 : eq(11, 20) : BOOL
22 : 105 { 0x69 } : BV:8
23 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
24 : eq(11, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
27 : eq(11, 26) : BOOL
28 : 239 { 0xef -17 } : BV:8
29 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
30 : eq(11, 29) : BOOL
31 : 202 { 0xca -54 } : BV:8
32 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
33 : eq(11, 32) : BOOL
34 : 132 { 0x84 -124 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 14, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 14, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 9, 10) : BV:32
64 : eq(63, 12) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 14, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : bvadd(9, 10) : BV:32
81 : eq(80, 12) : BOOL
82 : eq(80, 15) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 14, 93) : BV:8
95 : ite(82, 17, 94) : BV:8
96 : ite(81, 14, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(6, 4, 97) : BV:32
99 : ite(3, 4, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 268437505 ] -> true, [ 268437506; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda48844Var : BV:32
2 : 16777216 { 0x1000000 +1.0e131 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 134217920 { 0x80000c0 +1.2288e145 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3221536900 { 0xc004c084 -1073430396 -1.3712511e1 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 192 { 0xc0 -64 } : BV:8
16 : 4227858435 { 0xfc000003 -67108861 -1.35e121 } : BV:32
17 : eq(12, 16) : BOOL
18 : 183 { 0xb7 -73 } : BV:8
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : eq(12, 19) : BOOL
21 : 4227858432 { 0xfc000000 -67108864 -1.0e121 } : BV:32
22 : eq(12, 21) : BOOL
23 : 105 { 0x69 } : BV:8
24 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 4227858434 { 0xfc000002 -67108862 -1.23e121 } : BV:32
28 : eq(12, 27) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 4227858433 { 0xfc000001 -67108863 -1.11e121 } : BV:32
31 : eq(12, 30) : BOOL
32 : 202 { 0xca -54 } : BV:8
33 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 132 { 0x84 -124 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(20, 15, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 10, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 15, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(47, 15, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 10, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 19) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : ite(66, 18, 78) : BV:8
80 : ite(65, 15, 79) : BV:8
81 : bvadd(10, 11) : BV:32
82 : eq(81, 13) : BOOL
83 : eq(81, 16) : BOOL
84 : eq(81, 19) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 15, 94) : BV:8
96 : ite(83, 18, 95) : BV:8
97 : ite(82, 15, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(7, 4, 98) : BV:32
100 : ite(6, 4, 99) : BV:32
101 : ite(3, 4, 100) : BV:32
102 : lambda(1, 101) : FUNCTION[BV:32 -> BV:32]
103 : sym_const(102) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4168390288
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce4418.num_edges_traversed1
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce4418 12a02f13299ac51d2ee999e7b1a96e7
=input.spec-%var-x-1
1 : Lambda51963Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51964Var : BV:32
18 : Lambda51965Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 25) : BOOL
35 : and(33, 34) : BOOL
36 : 536870915 { 0x20000003 +1.35e193 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : 536870914 { 0x20000002 +1.23e193 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 40) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda51966Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 25) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 10) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 40) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 198 { 0xc6 -58 } : BV:8
85 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
86 : eq(79, 85) : BOOL
87 : 128 { 0x80 -128 } : BV:8
88 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 162 { 0xa2 -94 } : BV:8
91 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
92 : eq(79, 91) : BOOL
93 : 6 { 0x6 } : BV:8
94 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
95 : eq(79, 94) : BOOL
96 : 197 { 0xc5 -59 } : BV:8
97 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
98 : eq(79, 97) : BOOL
99 : 30 { 0x1e } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(80, 81, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 82) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 81, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 82) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 81, 136) : BV:8
138 : bvadd(85, 78) : BV:32
139 : eq(138, 77) : BOOL
140 : eq(138, 82) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 81, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 81, 167) : BV:8
169 : 2 { 0x2 +1.23e129 } : BV:32
170 : bvadd(169, 76, 153) : BV:32
171 : eq(170, 77) : BOOL
172 : eq(170, 82) : BOOL
173 : eq(170, 85) : BOOL
174 : eq(170, 88) : BOOL
175 : eq(170, 91) : BOOL
176 : eq(170, 94) : BOOL
177 : eq(170, 97) : BOOL
178 : ite(177, 99, 100) : BV:8
179 : ite(176, 96, 178) : BV:8
180 : ite(175, 93, 179) : BV:8
181 : ite(174, 90, 180) : BV:8
182 : ite(173, 87, 181) : BV:8
183 : ite(172, 84, 182) : BV:8
184 : ite(171, 81, 183) : BV:8
185 : 1 { 0x1 +1.11e129 } : BV:32
186 : bvadd(185, 76, 153) : BV:32
187 : eq(186, 77) : BOOL
188 : eq(186, 82) : BOOL
189 : eq(186, 85) : BOOL
190 : eq(186, 88) : BOOL
191 : eq(186, 91) : BOOL
192 : eq(186, 94) : BOOL
193 : eq(186, 97) : BOOL
194 : ite(193, 99, 100) : BV:8
195 : ite(192, 96, 194) : BV:8
196 : ite(191, 93, 195) : BV:8
197 : ite(190, 90, 196) : BV:8
198 : ite(189, 87, 197) : BV:8
199 : ite(188, 84, 198) : BV:8
200 : ite(187, 81, 199) : BV:8
201 : bvadd(76, 153) : BV:32
202 : eq(201, 77) : BOOL
203 : eq(201, 82) : BOOL
204 : eq(201, 85) : BOOL
205 : eq(201, 88) : BOOL
206 : eq(201, 91) : BOOL
207 : eq(201, 94) : BOOL
208 : eq(201, 97) : BOOL
209 : ite(208, 99, 100) : BV:8
210 : ite(207, 96, 209) : BV:8
211 : ite(206, 93, 210) : BV:8
212 : ite(205, 90, 211) : BV:8
213 : ite(204, 87, 212) : BV:8
214 : ite(203, 84, 213) : BV:8
215 : ite(202, 81, 214) : BV:8
216 : bvconcat(168, 184, 200, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : ite(73, 216, 217) : BV:32
219 : ite(54, 2, 218) : BV:32
220 : lambda(51, 219) : FUNCTION[BV:32 -> BV:32]
221 : map(50, 220) : MAP[BV:32 -> BV:32]
222 : lambda(17, 221) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
223 : map(16, 222) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
224 : sym_const(223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1310716 { 0x13fffc +1.15624952e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda51983Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51984Var : BV:32
18 : Lambda51985Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 25) : BOOL
35 : and(33, 34) : BOOL
36 : 536870915 { 0x20000003 +1.35e193 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : 536870914 { 0x20000002 +1.23e193 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 40) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda51986Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 255 { 0xff -1 } : BV:8
63 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 198 { 0xc6 -58 } : BV:8
66 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 128 { 0x80 -128 } : BV:8
69 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 162 { 0xa2 -94 } : BV:8
72 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 6 { 0x6 } : BV:8
75 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 197 { 0xc5 -59 } : BV:8
78 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 30 { 0x1e } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 63) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 62, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 63) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 62, 117) : BV:8
119 : bvadd(66, 59) : BV:32
120 : eq(119, 58) : BOOL
121 : eq(119, 63) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 62, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 62, 148) : BV:8
150 : 2 { 0x2 +1.23e129 } : BV:32
151 : bvadd(150, 57, 134) : BV:32
152 : eq(151, 58) : BOOL
153 : eq(151, 63) : BOOL
154 : eq(151, 66) : BOOL
155 : eq(151, 69) : BOOL
156 : eq(151, 72) : BOOL
157 : eq(151, 75) : BOOL
158 : eq(151, 78) : BOOL
159 : ite(158, 80, 81) : BV:8
160 : ite(157, 77, 159) : BV:8
161 : ite(156, 74, 160) : BV:8
162 : ite(155, 71, 161) : BV:8
163 : ite(154, 68, 162) : BV:8
164 : ite(153, 65, 163) : BV:8
165 : ite(152, 62, 164) : BV:8
166 : 1 { 0x1 +1.11e129 } : BV:32
167 : bvadd(166, 57, 134) : BV:32
168 : eq(167, 58) : BOOL
169 : eq(167, 63) : BOOL
170 : eq(167, 66) : BOOL
171 : eq(167, 69) : BOOL
172 : eq(167, 72) : BOOL
173 : eq(167, 75) : BOOL
174 : eq(167, 78) : BOOL
175 : ite(174, 80, 81) : BV:8
176 : ite(173, 77, 175) : BV:8
177 : ite(172, 74, 176) : BV:8
178 : ite(171, 71, 177) : BV:8
179 : ite(170, 68, 178) : BV:8
180 : ite(169, 65, 179) : BV:8
181 : ite(168, 62, 180) : BV:8
182 : bvadd(57, 134) : BV:32
183 : eq(182, 58) : BOOL
184 : eq(182, 63) : BOOL
185 : eq(182, 66) : BOOL
186 : eq(182, 69) : BOOL
187 : eq(182, 72) : BOOL
188 : eq(182, 75) : BOOL
189 : eq(182, 78) : BOOL
190 : ite(189, 80, 81) : BV:8
191 : ite(188, 77, 190) : BV:8
192 : ite(187, 74, 191) : BV:8
193 : ite(186, 71, 192) : BV:8
194 : ite(185, 68, 193) : BV:8
195 : ite(184, 65, 194) : BV:8
196 : ite(183, 62, 195) : BV:8
197 : bvconcat(149, 165, 181, 196) : BV:32
198 : ite(54, 2, 197) : BV:32
199 : lambda(51, 198) : FUNCTION[BV:32 -> BV:32]
200 : map(50, 199) : MAP[BV:32 -> BV:32]
201 : lambda(17, 200) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
202 : map(16, 201) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
203 : sym_const(202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 786431 ] -> 0, [ 786432; 786432 ] -> 128, [ 786433; 786433 ] -> 30, [ 786434; 786434 ] -> 197, [ 786435; 786435 ] -> 255, [ 786436; 1310716 ] -> 0, [ 1310717; 1310717 ] -> 6, [ 1310718; 1310718 ] -> 198, [ 1310719; 1310719 ] -> 162, [ 1310720; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2696263675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2696263676; 2696263679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2696263680; 3791572947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3791572948; 3791572951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3791572952; 4076662519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4076662520; 4076662523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4076662524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4076662520 { 0xf2fceef8 -218304776 -1.97604274e102 } : BV:32
=input.dst.llvm-%m
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2696263676 { 0xa0b5b7fc -1598703620 -1.41967725e194 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3791572948 { 0xe1fecfd4 -503394348 -1.99071741e68 } : BV:32
=input.dst.llvm-%x
1 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 524284 { 0x7fffc +1.6249952e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda51990Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870913 { 0x20000001 +1.11e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870914 { 0x20000002 +1.23e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51991Var : BV:32
18 : 131072 { 0x20000 +1.1562500e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 198 { 0xc6 -58 } : BV:8
33 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
34 : eq(26, 33) : BOOL
35 : 128 { 0x80 -128 } : BV:8
36 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 162 { 0xa2 -94 } : BV:8
39 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 6 { 0x6 } : BV:8
42 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 197 { 0xc5 -59 } : BV:8
45 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 30 { 0x1e } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(19, 2, 104) : BV:32
106 : lambda(17, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(16, 106) : MAP[BV:32 -> BV:32]
108 : sym_const(107) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : Lambda51972Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 536870913 { 0x20000001 +1.11e193 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536870914 { 0x20000002 +1.23e193 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda51973Var : BV:32
20 : 131072 { 0x20000 +1.1562500e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870912 { 0x20000000 +1.0e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
31 : eq(29, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
34 : eq(29, 33) : BOOL
35 : 198 { 0xc6 -58 } : BV:8
36 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
37 : eq(29, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
40 : eq(29, 39) : BOOL
41 : 162 { 0xa2 -94 } : BV:8
42 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
43 : eq(29, 42) : BOOL
44 : 6 { 0x6 } : BV:8
45 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
46 : eq(29, 45) : BOOL
47 : 197 { 0xc5 -59 } : BV:8
48 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 30 { 0x1e } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 27, 28) : BV:32
61 : eq(60, 30) : BOOL
62 : eq(60, 33) : BOOL
63 : eq(60, 36) : BOOL
64 : eq(60, 39) : BOOL
65 : eq(60, 42) : BOOL
66 : eq(60, 45) : BOOL
67 : eq(60, 48) : BOOL
68 : ite(67, 50, 51) : BV:8
69 : ite(66, 47, 68) : BV:8
70 : ite(65, 44, 69) : BV:8
71 : ite(64, 41, 70) : BV:8
72 : ite(63, 38, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 27, 28) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 36) : BOOL
80 : eq(76, 39) : BOOL
81 : eq(76, 42) : BOOL
82 : eq(76, 45) : BOOL
83 : eq(76, 48) : BOOL
84 : ite(83, 50, 51) : BV:8
85 : ite(82, 47, 84) : BV:8
86 : ite(81, 44, 85) : BV:8
87 : ite(80, 41, 86) : BV:8
88 : ite(79, 38, 87) : BV:8
89 : ite(78, 35, 88) : BV:8
90 : ite(77, 32, 89) : BV:8
91 : bvadd(27, 28) : BV:32
92 : eq(91, 30) : BOOL
93 : eq(91, 33) : BOOL
94 : eq(91, 36) : BOOL
95 : eq(91, 39) : BOOL
96 : eq(91, 42) : BOOL
97 : eq(91, 45) : BOOL
98 : eq(91, 48) : BOOL
99 : ite(98, 50, 51) : BV:8
100 : ite(97, 47, 99) : BV:8
101 : ite(96, 44, 100) : BV:8
102 : ite(95, 41, 101) : BV:8
103 : ite(94, 38, 102) : BV:8
104 : ite(93, 35, 103) : BV:8
105 : ite(92, 32, 104) : BV:8
106 : bvconcat(58, 74, 90, 105) : BV:32
107 : ite(24, 4, 106) : BV:32
108 : ite(23, 4, 107) : BV:32
109 : ite(21, 4, 108) : BV:32
110 : lambda(19, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(18, 110) : MAP[BV:32 -> BV:32]
112 : sum(1, 2, 111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
113 : sym_const(112) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 536870913 { 0x20000001 +1.11e193 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870914 { 0x20000002 +1.23e193 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 131072 { 0x20000 +1.1562500e129 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 198 { 0xc6 -58 } : BV:8
33 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
34 : eq(26, 33) : BOOL
35 : 128 { 0x80 -128 } : BV:8
36 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 162 { 0xa2 -94 } : BV:8
39 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 6 { 0x6 } : BV:8
42 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 197 { 0xc5 -59 } : BV:8
45 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 30 { 0x1e } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : bvadd(16, 24, 25) : BV:32
73 : eq(72, 27) : BOOL
74 : eq(72, 30) : BOOL
75 : eq(72, 33) : BOOL
76 : eq(72, 36) : BOOL
77 : eq(72, 39) : BOOL
78 : eq(72, 42) : BOOL
79 : eq(72, 45) : BOOL
80 : ite(79, 47, 48) : BV:8
81 : ite(78, 44, 80) : BV:8
82 : ite(77, 41, 81) : BV:8
83 : ite(76, 38, 82) : BV:8
84 : ite(75, 35, 83) : BV:8
85 : ite(74, 32, 84) : BV:8
86 : ite(73, 29, 85) : BV:8
87 : bvadd(24, 25) : BV:32
88 : eq(87, 27) : BOOL
89 : eq(87, 30) : BOOL
90 : eq(87, 33) : BOOL
91 : eq(87, 36) : BOOL
92 : eq(87, 39) : BOOL
93 : eq(87, 42) : BOOL
94 : eq(87, 45) : BOOL
95 : ite(94, 47, 48) : BV:8
96 : ite(93, 44, 95) : BV:8
97 : ite(92, 41, 96) : BV:8
98 : ite(91, 38, 97) : BV:8
99 : ite(90, 35, 98) : BV:8
100 : ite(89, 32, 99) : BV:8
101 : ite(88, 29, 100) : BV:8
102 : bvconcat(55, 71, 86, 101) : BV:32
103 : ite(21, 1, 102) : BV:32
104 : ite(20, 1, 103) : BV:32
105 : sum(17, 18, 104) : SUM[UNIT,BV:32]
106 : sym_const(105) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1406987741 { 0x53dceddd +1.72600901e40 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda51995Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870913 { 0x20000001 +1.11e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870914 { 0x20000002 +1.23e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51996Var : BV:32
18 : 131072 { 0x20000 +1.1562500e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
29 : eq(27, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
32 : eq(27, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
35 : eq(27, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
38 : eq(27, 37) : BOOL
39 : 162 { 0xa2 -94 } : BV:8
40 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
41 : eq(27, 40) : BOOL
42 : 6 { 0x6 } : BV:8
43 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
44 : eq(27, 43) : BOOL
45 : 197 { 0xc5 -59 } : BV:8
46 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
47 : eq(27, 46) : BOOL
48 : 30 { 0x1e } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 25, 26) : BV:32
59 : eq(58, 28) : BOOL
60 : eq(58, 31) : BOOL
61 : eq(58, 34) : BOOL
62 : eq(58, 37) : BOOL
63 : eq(58, 40) : BOOL
64 : eq(58, 43) : BOOL
65 : eq(58, 46) : BOOL
66 : ite(65, 48, 49) : BV:8
67 : ite(64, 45, 66) : BV:8
68 : ite(63, 42, 67) : BV:8
69 : ite(62, 39, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 25, 26) : BV:32
75 : eq(74, 28) : BOOL
76 : eq(74, 31) : BOOL
77 : eq(74, 34) : BOOL
78 : eq(74, 37) : BOOL
79 : eq(74, 40) : BOOL
80 : eq(74, 43) : BOOL
81 : eq(74, 46) : BOOL
82 : ite(81, 48, 49) : BV:8
83 : ite(80, 45, 82) : BV:8
84 : ite(79, 42, 83) : BV:8
85 : ite(78, 39, 84) : BV:8
86 : ite(77, 36, 85) : BV:8
87 : ite(76, 33, 86) : BV:8
88 : ite(75, 30, 87) : BV:8
89 : bvadd(25, 26) : BV:32
90 : eq(89, 28) : BOOL
91 : eq(89, 31) : BOOL
92 : eq(89, 34) : BOOL
93 : eq(89, 37) : BOOL
94 : eq(89, 40) : BOOL
95 : eq(89, 43) : BOOL
96 : eq(89, 46) : BOOL
97 : ite(96, 48, 49) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 42, 98) : BV:8
100 : ite(93, 39, 99) : BV:8
101 : ite(92, 36, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 30, 102) : BV:8
104 : bvconcat(56, 72, 88, 103) : BV:32
105 : ite(22, 2, 104) : BV:32
106 : ite(21, 2, 105) : BV:32
107 : ite(19, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 385708627 { 0x16fd7253 +1.98005139e174 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 583403008 { 0x22c60600 +1.54705810e198 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1310716 { 0x13fffc +1.15624952e129 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 583403008 { 0x22c60600 +1.54705810e198 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 524284 { 0x7fffc +1.6249952e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2696263676 { 0xa0b5b7fc -1598703620 -1.41967725e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2696263679 { 0xa0b5b7ff -1598703617 -1.41967761e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3791572948 { 0xe1fecfd4 -503394348 -1.99071741e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3791572951 { 0xe1fecfd7 -503394345 -1.99071776e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4076662520 { 0xf2fceef8 -218304776 -1.97604274e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4076662523 { 0xf2fceefb -218304773 -1.97604310e102 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda51855Var : BV:32
2 : Lambda51856Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 22) : BOOL
31 : and(29, 30) : BOOL
32 : 536870915 { 0x20000003 +1.35e193 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : 536870914 { 0x20000002 +1.23e193 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 36) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 198 { 0xc6 -58 } : BV:8
58 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
59 : eq(52, 58) : BOOL
60 : 128 { 0x80 -128 } : BV:8
61 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 162 { 0xa2 -94 } : BV:8
64 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
65 : eq(52, 64) : BOOL
66 : 6 { 0x6 } : BV:8
67 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
68 : eq(52, 67) : BOOL
69 : 197 { 0xc5 -59 } : BV:8
70 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
71 : eq(52, 70) : BOOL
72 : 30 { 0x1e } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(53, 54, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 55) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 54, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 55) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 54, 109) : BV:8
111 : bvadd(58, 51) : BV:32
112 : eq(111, 50) : BOOL
113 : eq(111, 55) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 54, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 54, 140) : BV:8
142 : 2 { 0x2 +1.23e129 } : BV:32
143 : bvadd(142, 49, 126) : BV:32
144 : eq(143, 50) : BOOL
145 : eq(143, 55) : BOOL
146 : eq(143, 58) : BOOL
147 : eq(143, 61) : BOOL
148 : eq(143, 64) : BOOL
149 : eq(143, 67) : BOOL
150 : eq(143, 70) : BOOL
151 : ite(150, 72, 73) : BV:8
152 : ite(149, 69, 151) : BV:8
153 : ite(148, 66, 152) : BV:8
154 : ite(147, 63, 153) : BV:8
155 : ite(146, 60, 154) : BV:8
156 : ite(145, 57, 155) : BV:8
157 : ite(144, 54, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 49, 126) : BV:32
160 : eq(159, 50) : BOOL
161 : eq(159, 55) : BOOL
162 : eq(159, 58) : BOOL
163 : eq(159, 61) : BOOL
164 : eq(159, 64) : BOOL
165 : eq(159, 67) : BOOL
166 : eq(159, 70) : BOOL
167 : ite(166, 72, 73) : BV:8
168 : ite(165, 69, 167) : BV:8
169 : ite(164, 66, 168) : BV:8
170 : ite(163, 63, 169) : BV:8
171 : ite(162, 60, 170) : BV:8
172 : ite(161, 57, 171) : BV:8
173 : ite(160, 54, 172) : BV:8
174 : bvadd(49, 126) : BV:32
175 : eq(174, 50) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 58) : BOOL
178 : eq(174, 61) : BOOL
179 : eq(174, 64) : BOOL
180 : eq(174, 67) : BOOL
181 : eq(174, 70) : BOOL
182 : ite(181, 72, 73) : BV:8
183 : ite(180, 69, 182) : BV:8
184 : ite(179, 66, 183) : BV:8
185 : ite(178, 63, 184) : BV:8
186 : ite(177, 60, 185) : BV:8
187 : ite(176, 57, 186) : BV:8
188 : ite(175, 54, 187) : BV:8
189 : bvconcat(141, 157, 173, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : ite(46, 189, 190) : BV:32
192 : ite(6, 3, 191) : BV:32
193 : lambda(1, 2, 192) : FUNCTION[BV:32,BV:32 -> BV:32]
194 : sym_const(193) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda51860Var : BV:32
2 : Lambda51861Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 12) : BOOL
23 : and(21, 22) : BOOL
24 : 536870915 { 0x20000003 +1.35e193 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : 536870914 { 0x20000002 +1.23e193 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda51869Var : BV:32
2 : Lambda51870Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 12) : BOOL
23 : and(21, 22) : BOOL
24 : 536870915 { 0x20000003 +1.35e193 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : 536870914 { 0x20000002 +1.23e193 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda51865Var : BV:32
2 : Lambda51866Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 198 { 0xc6 -58 } : BV:8
18 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 128 { 0x80 -128 } : BV:8
21 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 162 { 0xa2 -94 } : BV:8
24 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 6 { 0x6 } : BV:8
27 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 197 { 0xc5 -59 } : BV:8
30 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 30 { 0x1e } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 536870913 ] -> true, [ 536870914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda51876Var : BV:32
2 : 131072 { 0x20000 +1.1562500e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 198 { 0xc6 -58 } : BV:8
19 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
20 : eq(12, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 162 { 0xa2 -94 } : BV:8
25 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
26 : eq(12, 25) : BOOL
27 : 6 { 0x6 } : BV:8
28 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
29 : eq(12, 28) : BOOL
30 : 197 { 0xc5 -59 } : BV:8
31 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 30 { 0x1e } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 536870913 ] -> true, [ 536870914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda51880Var : BV:32
2 : 131072 { 0x20000 +1.1562500e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 198 { 0xc6 -58 } : BV:8
18 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 128 { 0x80 -128 } : BV:8
21 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 162 { 0xa2 -94 } : BV:8
24 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : 6 { 0x6 } : BV:8
27 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 197 { 0xc5 -59 } : BV:8
30 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 30 { 0x1e } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 536870913 ] -> true, [ 536870914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda51884Var : BV:32
2 : 131072 { 0x20000 +1.1562500e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 198 { 0xc6 -58 } : BV:8
19 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
20 : eq(12, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 162 { 0xa2 -94 } : BV:8
25 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
26 : eq(12, 25) : BOOL
27 : 6 { 0x6 } : BV:8
28 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
29 : eq(12, 28) : BOOL
30 : 197 { 0xc5 -59 } : BV:8
31 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 30 { 0x1e } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2286079300
=counter_example_end
=global nodece 59 num_edges_traversed 1
=global nodece 59 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce4458.num_edges_traversed2
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(epsilon)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce4458 d7701d92c7d75196201b566840fab1
=input.spec-%var-x-1
1 : Lambda51963Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51964Var : BV:32
18 : Lambda51965Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 25) : BOOL
35 : and(33, 34) : BOOL
36 : 536870915 { 0x20000003 +1.35e193 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : 536870914 { 0x20000002 +1.23e193 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 40) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda51966Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 25) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 10) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 40) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 198 { 0xc6 -58 } : BV:8
85 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
86 : eq(79, 85) : BOOL
87 : 128 { 0x80 -128 } : BV:8
88 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
89 : eq(79, 88) : BOOL
90 : 162 { 0xa2 -94 } : BV:8
91 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
92 : eq(79, 91) : BOOL
93 : 6 { 0x6 } : BV:8
94 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
95 : eq(79, 94) : BOOL
96 : 197 { 0xc5 -59 } : BV:8
97 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
98 : eq(79, 97) : BOOL
99 : 30 { 0x1e } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(80, 81, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 82) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 81, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 82) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 81, 136) : BV:8
138 : bvadd(85, 78) : BV:32
139 : eq(138, 77) : BOOL
140 : eq(138, 82) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 81, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 81, 167) : BV:8
169 : 2 { 0x2 +1.23e129 } : BV:32
170 : bvadd(169, 76, 153) : BV:32
171 : eq(170, 77) : BOOL
172 : eq(170, 82) : BOOL
173 : eq(170, 85) : BOOL
174 : eq(170, 88) : BOOL
175 : eq(170, 91) : BOOL
176 : eq(170, 94) : BOOL
177 : eq(170, 97) : BOOL
178 : ite(177, 99, 100) : BV:8
179 : ite(176, 96, 178) : BV:8
180 : ite(175, 93, 179) : BV:8
181 : ite(174, 90, 180) : BV:8
182 : ite(173, 87, 181) : BV:8
183 : ite(172, 84, 182) : BV:8
184 : ite(171, 81, 183) : BV:8
185 : 1 { 0x1 +1.11e129 } : BV:32
186 : bvadd(185, 76, 153) : BV:32
187 : eq(186, 77) : BOOL
188 : eq(186, 82) : BOOL
189 : eq(186, 85) : BOOL
190 : eq(186, 88) : BOOL
191 : eq(186, 91) : BOOL
192 : eq(186, 94) : BOOL
193 : eq(186, 97) : BOOL
194 : ite(193, 99, 100) : BV:8
195 : ite(192, 96, 194) : BV:8
196 : ite(191, 93, 195) : BV:8
197 : ite(190, 90, 196) : BV:8
198 : ite(189, 87, 197) : BV:8
199 : ite(188, 84, 198) : BV:8
200 : ite(187, 81, 199) : BV:8
201 : bvadd(76, 153) : BV:32
202 : eq(201, 77) : BOOL
203 : eq(201, 82) : BOOL
204 : eq(201, 85) : BOOL
205 : eq(201, 88) : BOOL
206 : eq(201, 91) : BOOL
207 : eq(201, 94) : BOOL
208 : eq(201, 97) : BOOL
209 : ite(208, 99, 100) : BV:8
210 : ite(207, 96, 209) : BV:8
211 : ite(206, 93, 210) : BV:8
212 : ite(205, 90, 211) : BV:8
213 : ite(204, 87, 212) : BV:8
214 : ite(203, 84, 213) : BV:8
215 : ite(202, 81, 214) : BV:8
216 : bvconcat(168, 184, 200, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : ite(73, 216, 217) : BV:32
219 : ite(54, 2, 218) : BV:32
220 : lambda(51, 219) : FUNCTION[BV:32 -> BV:32]
221 : map(50, 220) : MAP[BV:32 -> BV:32]
222 : lambda(17, 221) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
223 : map(16, 222) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
224 : sym_const(223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda51983Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51984Var : BV:32
18 : Lambda51985Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 25) : BOOL
35 : and(33, 34) : BOOL
36 : 536870915 { 0x20000003 +1.35e193 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : 536870914 { 0x20000002 +1.23e193 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 40) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda51986Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 255 { 0xff -1 } : BV:8
63 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 198 { 0xc6 -58 } : BV:8
66 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 128 { 0x80 -128 } : BV:8
69 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
70 : eq(60, 69) : BOOL
71 : 162 { 0xa2 -94 } : BV:8
72 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 6 { 0x6 } : BV:8
75 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
76 : eq(60, 75) : BOOL
77 : 197 { 0xc5 -59 } : BV:8
78 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : 30 { 0x1e } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 63) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 62, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 63) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 62, 117) : BV:8
119 : bvadd(66, 59) : BV:32
120 : eq(119, 58) : BOOL
121 : eq(119, 63) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 62, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 62, 148) : BV:8
150 : 2 { 0x2 +1.23e129 } : BV:32
151 : bvadd(150, 57, 134) : BV:32
152 : eq(151, 58) : BOOL
153 : eq(151, 63) : BOOL
154 : eq(151, 66) : BOOL
155 : eq(151, 69) : BOOL
156 : eq(151, 72) : BOOL
157 : eq(151, 75) : BOOL
158 : eq(151, 78) : BOOL
159 : ite(158, 80, 81) : BV:8
160 : ite(157, 77, 159) : BV:8
161 : ite(156, 74, 160) : BV:8
162 : ite(155, 71, 161) : BV:8
163 : ite(154, 68, 162) : BV:8
164 : ite(153, 65, 163) : BV:8
165 : ite(152, 62, 164) : BV:8
166 : 1 { 0x1 +1.11e129 } : BV:32
167 : bvadd(166, 57, 134) : BV:32
168 : eq(167, 58) : BOOL
169 : eq(167, 63) : BOOL
170 : eq(167, 66) : BOOL
171 : eq(167, 69) : BOOL
172 : eq(167, 72) : BOOL
173 : eq(167, 75) : BOOL
174 : eq(167, 78) : BOOL
175 : ite(174, 80, 81) : BV:8
176 : ite(173, 77, 175) : BV:8
177 : ite(172, 74, 176) : BV:8
178 : ite(171, 71, 177) : BV:8
179 : ite(170, 68, 178) : BV:8
180 : ite(169, 65, 179) : BV:8
181 : ite(168, 62, 180) : BV:8
182 : bvadd(57, 134) : BV:32
183 : eq(182, 58) : BOOL
184 : eq(182, 63) : BOOL
185 : eq(182, 66) : BOOL
186 : eq(182, 69) : BOOL
187 : eq(182, 72) : BOOL
188 : eq(182, 75) : BOOL
189 : eq(182, 78) : BOOL
190 : ite(189, 80, 81) : BV:8
191 : ite(188, 77, 190) : BV:8
192 : ite(187, 74, 191) : BV:8
193 : ite(186, 71, 192) : BV:8
194 : ite(185, 68, 193) : BV:8
195 : ite(184, 65, 194) : BV:8
196 : ite(183, 62, 195) : BV:8
197 : bvconcat(149, 165, 181, 196) : BV:32
198 : ite(54, 2, 197) : BV:32
199 : lambda(51, 198) : FUNCTION[BV:32 -> BV:32]
200 : map(50, 199) : MAP[BV:32 -> BV:32]
201 : lambda(17, 200) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
202 : map(16, 201) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
203 : sym_const(202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 786431 ] -> 0, [ 786432; 786432 ] -> 128, [ 786433; 786433 ] -> 30, [ 786434; 786434 ] -> 197, [ 786435; 786435 ] -> 255, [ 786436; 1310716 ] -> 0, [ 1310717; 1310717 ] -> 6, [ 1310718; 1310718 ] -> 198, [ 1310719; 1310719 ] -> 162, [ 1310720; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2696263675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2696263676; 2696263679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2696263680; 3791572947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3791572948; 3791572951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3791572952; 4076662519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4076662520; 4076662523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4076662524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4076662520 { 0xf2fceef8 -218304776 -1.97604274e102 } : BV:32
=input.dst.llvm-%m
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2696263676 { 0xa0b5b7fc -1598703620 -1.41967725e194 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3791572948 { 0xe1fecfd4 -503394348 -1.99071741e68 } : BV:32
=input.dst.llvm-%x
1 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda51990Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870913 { 0x20000001 +1.11e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870914 { 0x20000002 +1.23e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51991Var : BV:32
18 : 131072 { 0x20000 +1.1562500e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 198 { 0xc6 -58 } : BV:8
33 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
34 : eq(26, 33) : BOOL
35 : 128 { 0x80 -128 } : BV:8
36 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
37 : eq(26, 36) : BOOL
38 : 162 { 0xa2 -94 } : BV:8
39 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 6 { 0x6 } : BV:8
42 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 197 { 0xc5 -59 } : BV:8
45 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
46 : eq(26, 45) : BOOL
47 : 30 { 0x1e } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(19, 2, 104) : BV:32
106 : lambda(17, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(16, 106) : MAP[BV:32 -> BV:32]
108 : sym_const(107) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : Lambda51972Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 536870913 { 0x20000001 +1.11e193 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536870914 { 0x20000002 +1.23e193 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda51973Var : BV:32
20 : 131072 { 0x20000 +1.1562500e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870912 { 0x20000000 +1.0e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
31 : eq(29, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
34 : eq(29, 33) : BOOL
35 : 198 { 0xc6 -58 } : BV:8
36 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
37 : eq(29, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
40 : eq(29, 39) : BOOL
41 : 162 { 0xa2 -94 } : BV:8
42 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
43 : eq(29, 42) : BOOL
44 : 6 { 0x6 } : BV:8
45 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
46 : eq(29, 45) : BOOL
47 : 197 { 0xc5 -59 } : BV:8
48 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
49 : eq(29, 48) : BOOL
50 : 30 { 0x1e } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 27, 28) : BV:32
61 : eq(60, 30) : BOOL
62 : eq(60, 33) : BOOL
63 : eq(60, 36) : BOOL
64 : eq(60, 39) : BOOL
65 : eq(60, 42) : BOOL
66 : eq(60, 45) : BOOL
67 : eq(60, 48) : BOOL
68 : ite(67, 50, 51) : BV:8
69 : ite(66, 47, 68) : BV:8
70 : ite(65, 44, 69) : BV:8
71 : ite(64, 41, 70) : BV:8
72 : ite(63, 38, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 27, 28) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 36) : BOOL
80 : eq(76, 39) : BOOL
81 : eq(76, 42) : BOOL
82 : eq(76, 45) : BOOL
83 : eq(76, 48) : BOOL
84 : ite(83, 50, 51) : BV:8
85 : ite(82, 47, 84) : BV:8
86 : ite(81, 44, 85) : BV:8
87 : ite(80, 41, 86) : BV:8
88 : ite(79, 38, 87) : BV:8
89 : ite(78, 35, 88) : BV:8
90 : ite(77, 32, 89) : BV:8
91 : bvadd(27, 28) : BV:32
92 : eq(91, 30) : BOOL
93 : eq(91, 33) : BOOL
94 : eq(91, 36) : BOOL
95 : eq(91, 39) : BOOL
96 : eq(91, 42) : BOOL
97 : eq(91, 45) : BOOL
98 : eq(91, 48) : BOOL
99 : ite(98, 50, 51) : BV:8
100 : ite(97, 47, 99) : BV:8
101 : ite(96, 44, 100) : BV:8
102 : ite(95, 41, 101) : BV:8
103 : ite(94, 38, 102) : BV:8
104 : ite(93, 35, 103) : BV:8
105 : ite(92, 32, 104) : BV:8
106 : bvconcat(58, 74, 90, 105) : BV:32
107 : ite(24, 4, 106) : BV:32
108 : ite(23, 4, 107) : BV:32
109 : ite(21, 4, 108) : BV:32
110 : lambda(19, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(18, 110) : MAP[BV:32 -> BV:32]
112 : sum(1, 2, 111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
113 : sym_const(112) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1406987742 { 0x53dcedde +1.72600913e40 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda51995Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870913 { 0x20000001 +1.11e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870914 { 0x20000002 +1.23e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51996Var : BV:32
18 : 131072 { 0x20000 +1.1562500e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
29 : eq(27, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
32 : eq(27, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
35 : eq(27, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
38 : eq(27, 37) : BOOL
39 : 162 { 0xa2 -94 } : BV:8
40 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
41 : eq(27, 40) : BOOL
42 : 6 { 0x6 } : BV:8
43 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
44 : eq(27, 43) : BOOL
45 : 197 { 0xc5 -59 } : BV:8
46 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
47 : eq(27, 46) : BOOL
48 : 30 { 0x1e } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 25, 26) : BV:32
59 : eq(58, 28) : BOOL
60 : eq(58, 31) : BOOL
61 : eq(58, 34) : BOOL
62 : eq(58, 37) : BOOL
63 : eq(58, 40) : BOOL
64 : eq(58, 43) : BOOL
65 : eq(58, 46) : BOOL
66 : ite(65, 48, 49) : BV:8
67 : ite(64, 45, 66) : BV:8
68 : ite(63, 42, 67) : BV:8
69 : ite(62, 39, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 25, 26) : BV:32
75 : eq(74, 28) : BOOL
76 : eq(74, 31) : BOOL
77 : eq(74, 34) : BOOL
78 : eq(74, 37) : BOOL
79 : eq(74, 40) : BOOL
80 : eq(74, 43) : BOOL
81 : eq(74, 46) : BOOL
82 : ite(81, 48, 49) : BV:8
83 : ite(80, 45, 82) : BV:8
84 : ite(79, 42, 83) : BV:8
85 : ite(78, 39, 84) : BV:8
86 : ite(77, 36, 85) : BV:8
87 : ite(76, 33, 86) : BV:8
88 : ite(75, 30, 87) : BV:8
89 : bvadd(25, 26) : BV:32
90 : eq(89, 28) : BOOL
91 : eq(89, 31) : BOOL
92 : eq(89, 34) : BOOL
93 : eq(89, 37) : BOOL
94 : eq(89, 40) : BOOL
95 : eq(89, 43) : BOOL
96 : eq(89, 46) : BOOL
97 : ite(96, 48, 49) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 42, 98) : BV:8
100 : ite(93, 39, 99) : BV:8
101 : ite(92, 36, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 30, 102) : BV:8
104 : bvconcat(56, 72, 88, 103) : BV:32
105 : ite(22, 2, 104) : BV:32
106 : ite(21, 2, 105) : BV:32
107 : ite(19, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 385708628 { 0x16fd7254 +1.98005151e174 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2696263676 { 0xa0b5b7fc -1598703620 -1.41967725e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2696263679 { 0xa0b5b7ff -1598703617 -1.41967761e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3791572948 { 0xe1fecfd4 -503394348 -1.99071741e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3791572951 { 0xe1fecfd7 -503394345 -1.99071776e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4076662520 { 0xf2fceef8 -218304776 -1.97604274e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4076662523 { 0xf2fceefb -218304773 -1.97604310e102 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda51855Var : BV:32
2 : Lambda51856Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 22) : BOOL
31 : and(29, 30) : BOOL
32 : 536870915 { 0x20000003 +1.35e193 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : 536870914 { 0x20000002 +1.23e193 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 36) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 198 { 0xc6 -58 } : BV:8
58 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
59 : eq(52, 58) : BOOL
60 : 128 { 0x80 -128 } : BV:8
61 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
62 : eq(52, 61) : BOOL
63 : 162 { 0xa2 -94 } : BV:8
64 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
65 : eq(52, 64) : BOOL
66 : 6 { 0x6 } : BV:8
67 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
68 : eq(52, 67) : BOOL
69 : 197 { 0xc5 -59 } : BV:8
70 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
71 : eq(52, 70) : BOOL
72 : 30 { 0x1e } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(53, 54, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 55) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 54, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 55) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 54, 109) : BV:8
111 : bvadd(58, 51) : BV:32
112 : eq(111, 50) : BOOL
113 : eq(111, 55) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 54, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 54, 140) : BV:8
142 : 2 { 0x2 +1.23e129 } : BV:32
143 : bvadd(142, 49, 126) : BV:32
144 : eq(143, 50) : BOOL
145 : eq(143, 55) : BOOL
146 : eq(143, 58) : BOOL
147 : eq(143, 61) : BOOL
148 : eq(143, 64) : BOOL
149 : eq(143, 67) : BOOL
150 : eq(143, 70) : BOOL
151 : ite(150, 72, 73) : BV:8
152 : ite(149, 69, 151) : BV:8
153 : ite(148, 66, 152) : BV:8
154 : ite(147, 63, 153) : BV:8
155 : ite(146, 60, 154) : BV:8
156 : ite(145, 57, 155) : BV:8
157 : ite(144, 54, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 49, 126) : BV:32
160 : eq(159, 50) : BOOL
161 : eq(159, 55) : BOOL
162 : eq(159, 58) : BOOL
163 : eq(159, 61) : BOOL
164 : eq(159, 64) : BOOL
165 : eq(159, 67) : BOOL
166 : eq(159, 70) : BOOL
167 : ite(166, 72, 73) : BV:8
168 : ite(165, 69, 167) : BV:8
169 : ite(164, 66, 168) : BV:8
170 : ite(163, 63, 169) : BV:8
171 : ite(162, 60, 170) : BV:8
172 : ite(161, 57, 171) : BV:8
173 : ite(160, 54, 172) : BV:8
174 : bvadd(49, 126) : BV:32
175 : eq(174, 50) : BOOL
176 : eq(174, 55) : BOOL
177 : eq(174, 58) : BOOL
178 : eq(174, 61) : BOOL
179 : eq(174, 64) : BOOL
180 : eq(174, 67) : BOOL
181 : eq(174, 70) : BOOL
182 : ite(181, 72, 73) : BV:8
183 : ite(180, 69, 182) : BV:8
184 : ite(179, 66, 183) : BV:8
185 : ite(178, 63, 184) : BV:8
186 : ite(177, 60, 185) : BV:8
187 : ite(176, 57, 186) : BV:8
188 : ite(175, 54, 187) : BV:8
189 : bvconcat(141, 157, 173, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : ite(46, 189, 190) : BV:32
192 : ite(6, 3, 191) : BV:32
193 : lambda(1, 2, 192) : FUNCTION[BV:32,BV:32 -> BV:32]
194 : sym_const(193) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda51860Var : BV:32
2 : Lambda51861Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 12) : BOOL
23 : and(21, 22) : BOOL
24 : 536870915 { 0x20000003 +1.35e193 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : 536870914 { 0x20000002 +1.23e193 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda51869Var : BV:32
2 : Lambda51870Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 12) : BOOL
23 : and(21, 22) : BOOL
24 : 536870915 { 0x20000003 +1.35e193 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : 536870914 { 0x20000002 +1.23e193 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda51865Var : BV:32
2 : Lambda51866Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 198 { 0xc6 -58 } : BV:8
18 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 128 { 0x80 -128 } : BV:8
21 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 162 { 0xa2 -94 } : BV:8
24 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 6 { 0x6 } : BV:8
27 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 197 { 0xc5 -59 } : BV:8
30 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 30 { 0x1e } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 536870913 ] -> true, [ 536870914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda51876Var : BV:32
2 : 131072 { 0x20000 +1.1562500e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 198 { 0xc6 -58 } : BV:8
19 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
20 : eq(12, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 162 { 0xa2 -94 } : BV:8
25 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
26 : eq(12, 25) : BOOL
27 : 6 { 0x6 } : BV:8
28 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
29 : eq(12, 28) : BOOL
30 : 197 { 0xc5 -59 } : BV:8
31 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 30 { 0x1e } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 536870913 ] -> true, [ 536870914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda51880Var : BV:32
2 : 131072 { 0x20000 +1.1562500e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 198 { 0xc6 -58 } : BV:8
18 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 128 { 0x80 -128 } : BV:8
21 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 162 { 0xa2 -94 } : BV:8
24 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : 6 { 0x6 } : BV:8
27 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 197 { 0xc5 -59 } : BV:8
30 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
31 : eq(11, 30) : BOOL
32 : 30 { 0x1e } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 536870913 ] -> true, [ 536870914; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda51884Var : BV:32
2 : 131072 { 0x20000 +1.1562500e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2730886656 { 0xa2c60600 -1564080640 -1.54705810e198 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 786435 { 0xc0003 +1.9375035e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 1310718 { 0x13fffe +1.15624976e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 198 { 0xc6 -58 } : BV:8
19 : 786432 { 0xc0000 +1.9375000e129 } : BV:32
20 : eq(12, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 1310719 { 0x13ffff +1.15624988e129 } : BV:32
23 : eq(12, 22) : BOOL
24 : 162 { 0xa2 -94 } : BV:8
25 : 1310717 { 0x13fffd +1.15624964e129 } : BV:32
26 : eq(12, 25) : BOOL
27 : 6 { 0x6 } : BV:8
28 : 786434 { 0xc0002 +1.9375023e129 } : BV:32
29 : eq(12, 28) : BOOL
30 : 197 { 0xc5 -59 } : BV:8
31 : 786433 { 0xc0001 +1.9375011e129 } : BV:32
32 : eq(12, 31) : BOOL
33 : 30 { 0x1e } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2286079300
=counter_example_end
=global nodece 60 num_edges_traversed 2
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce4511.num_edges_traversed1
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce4511 8281905b469685cc9dd2d95a98689d5
=input.spec-%var-x-1
1 : Lambda55697Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2319668227 { 0x8a435403 -1975299069 -1.52600133e149 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2319668228 { 0x8a435404 -1975299068 -1.52600145e149 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda55698Var : BV:32
18 : Lambda55699Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2319668229 { 0x8a435405 -1975299067 -1.52600157e149 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1689547145 { 0x64b47189 +1.40971481e74 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda55700Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 75) : BOOL
81 : 251 { 0xfb -5 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(79, 82) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
86 : eq(79, 85) : BOOL
87 : 233 { 0xe9 -23 } : BV:8
88 : eq(79, 2) : BOOL
89 : 234 { 0xea -22 } : BV:8
90 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
91 : eq(79, 90) : BOOL
92 : 236 { 0xec -20 } : BV:8
93 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
94 : eq(79, 93) : BOOL
95 : 198 { 0xc6 -58 } : BV:8
96 : 2 { 0x2 +1.23e129 } : BV:32
97 : eq(79, 96) : BOOL
98 : 247 { 0xf7 -9 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(86, 87, 103) : BV:8
105 : ite(83, 84, 104) : BV:8
106 : ite(80, 81, 105) : BV:8
107 : bvadd(96, 78) : BV:32
108 : eq(107, 75) : BOOL
109 : eq(107, 82) : BOOL
110 : eq(107, 85) : BOOL
111 : eq(107, 2) : BOOL
112 : eq(107, 90) : BOOL
113 : eq(107, 93) : BOOL
114 : eq(107, 96) : BOOL
115 : ite(114, 98, 99) : BV:8
116 : ite(113, 95, 115) : BV:8
117 : ite(112, 92, 116) : BV:8
118 : ite(111, 89, 117) : BV:8
119 : ite(110, 87, 118) : BV:8
120 : ite(109, 84, 119) : BV:8
121 : ite(108, 81, 120) : BV:8
122 : bvadd(82, 78) : BV:32
123 : eq(122, 75) : BOOL
124 : eq(122, 82) : BOOL
125 : eq(122, 85) : BOOL
126 : eq(122, 2) : BOOL
127 : eq(122, 90) : BOOL
128 : eq(122, 93) : BOOL
129 : eq(122, 96) : BOOL
130 : ite(129, 98, 99) : BV:8
131 : ite(128, 95, 130) : BV:8
132 : ite(127, 92, 131) : BV:8
133 : ite(126, 89, 132) : BV:8
134 : ite(125, 87, 133) : BV:8
135 : ite(124, 84, 134) : BV:8
136 : ite(123, 81, 135) : BV:8
137 : eq(78, 75) : BOOL
138 : eq(78, 82) : BOOL
139 : eq(78, 85) : BOOL
140 : eq(78, 2) : BOOL
141 : eq(78, 90) : BOOL
142 : eq(78, 93) : BOOL
143 : eq(78, 96) : BOOL
144 : ite(143, 98, 99) : BV:8
145 : ite(142, 95, 144) : BV:8
146 : ite(141, 92, 145) : BV:8
147 : ite(140, 89, 146) : BV:8
148 : ite(139, 87, 147) : BV:8
149 : ite(138, 84, 148) : BV:8
150 : ite(137, 81, 149) : BV:8
151 : bvconcat(106, 121, 136, 150) : BV:32
152 : bvadd(75, 77, 151) : BV:32
153 : eq(152, 75) : BOOL
154 : eq(152, 82) : BOOL
155 : eq(152, 85) : BOOL
156 : eq(152, 2) : BOOL
157 : eq(152, 90) : BOOL
158 : eq(152, 93) : BOOL
159 : eq(152, 96) : BOOL
160 : ite(159, 98, 99) : BV:8
161 : ite(158, 95, 160) : BV:8
162 : ite(157, 92, 161) : BV:8
163 : ite(156, 89, 162) : BV:8
164 : ite(155, 87, 163) : BV:8
165 : ite(154, 84, 164) : BV:8
166 : ite(153, 81, 165) : BV:8
167 : bvadd(96, 77, 151) : BV:32
168 : eq(167, 75) : BOOL
169 : eq(167, 82) : BOOL
170 : eq(167, 85) : BOOL
171 : eq(167, 2) : BOOL
172 : eq(167, 90) : BOOL
173 : eq(167, 93) : BOOL
174 : eq(167, 96) : BOOL
175 : ite(174, 98, 99) : BV:8
176 : ite(173, 95, 175) : BV:8
177 : ite(172, 92, 176) : BV:8
178 : ite(171, 89, 177) : BV:8
179 : ite(170, 87, 178) : BV:8
180 : ite(169, 84, 179) : BV:8
181 : ite(168, 81, 180) : BV:8
182 : bvadd(82, 77, 151) : BV:32
183 : eq(182, 75) : BOOL
184 : eq(182, 82) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 2) : BOOL
187 : eq(182, 90) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : ite(189, 98, 99) : BV:8
191 : ite(188, 95, 190) : BV:8
192 : ite(187, 92, 191) : BV:8
193 : ite(186, 89, 192) : BV:8
194 : ite(185, 87, 193) : BV:8
195 : ite(184, 84, 194) : BV:8
196 : ite(183, 81, 195) : BV:8
197 : bvadd(77, 151) : BV:32
198 : eq(197, 75) : BOOL
199 : eq(197, 82) : BOOL
200 : eq(197, 85) : BOOL
201 : eq(197, 2) : BOOL
202 : eq(197, 90) : BOOL
203 : eq(197, 93) : BOOL
204 : eq(197, 96) : BOOL
205 : ite(204, 98, 99) : BV:8
206 : ite(203, 95, 205) : BV:8
207 : ite(202, 92, 206) : BV:8
208 : ite(201, 89, 207) : BV:8
209 : ite(200, 87, 208) : BV:8
210 : ite(199, 84, 209) : BV:8
211 : ite(198, 81, 210) : BV:8
212 : bvconcat(166, 181, 196, 211) : BV:32
213 : ite(55, 2, 212) : BV:32
214 : ite(74, 212, 213) : BV:32
215 : ite(55, 2, 214) : BV:32
216 : lambda(52, 215) : FUNCTION[BV:32 -> BV:32]
217 : map(51, 216) : MAP[BV:32 -> BV:32]
218 : lambda(17, 217) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
219 : map(16, 218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
220 : sym_const(219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda55717Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2319668227 { 0x8a435403 -1975299069 -1.52600133e149 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2319668228 { 0x8a435404 -1975299068 -1.52600145e149 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda55718Var : BV:32
18 : Lambda55719Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2319668229 { 0x8a435405 -1975299067 -1.52600157e149 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1689547145 { 0x64b47189 +1.40971481e74 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda55720Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 56) : BOOL
62 : 251 { 0xfb -5 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(60, 63) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
67 : eq(60, 66) : BOOL
68 : 233 { 0xe9 -23 } : BV:8
69 : eq(60, 2) : BOOL
70 : 234 { 0xea -22 } : BV:8
71 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
72 : eq(60, 71) : BOOL
73 : 236 { 0xec -20 } : BV:8
74 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
75 : eq(60, 74) : BOOL
76 : 198 { 0xc6 -58 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(60, 77) : BOOL
79 : 247 { 0xf7 -9 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(64, 65, 85) : BV:8
87 : ite(61, 62, 86) : BV:8
88 : bvadd(77, 59) : BV:32
89 : eq(88, 56) : BOOL
90 : eq(88, 63) : BOOL
91 : eq(88, 66) : BOOL
92 : eq(88, 2) : BOOL
93 : eq(88, 71) : BOOL
94 : eq(88, 74) : BOOL
95 : eq(88, 77) : BOOL
96 : ite(95, 79, 80) : BV:8
97 : ite(94, 76, 96) : BV:8
98 : ite(93, 73, 97) : BV:8
99 : ite(92, 70, 98) : BV:8
100 : ite(91, 68, 99) : BV:8
101 : ite(90, 65, 100) : BV:8
102 : ite(89, 62, 101) : BV:8
103 : bvadd(63, 59) : BV:32
104 : eq(103, 56) : BOOL
105 : eq(103, 63) : BOOL
106 : eq(103, 66) : BOOL
107 : eq(103, 2) : BOOL
108 : eq(103, 71) : BOOL
109 : eq(103, 74) : BOOL
110 : eq(103, 77) : BOOL
111 : ite(110, 79, 80) : BV:8
112 : ite(109, 76, 111) : BV:8
113 : ite(108, 73, 112) : BV:8
114 : ite(107, 70, 113) : BV:8
115 : ite(106, 68, 114) : BV:8
116 : ite(105, 65, 115) : BV:8
117 : ite(104, 62, 116) : BV:8
118 : eq(59, 56) : BOOL
119 : eq(59, 63) : BOOL
120 : eq(59, 66) : BOOL
121 : eq(59, 2) : BOOL
122 : eq(59, 71) : BOOL
123 : eq(59, 74) : BOOL
124 : eq(59, 77) : BOOL
125 : ite(124, 79, 80) : BV:8
126 : ite(123, 76, 125) : BV:8
127 : ite(122, 73, 126) : BV:8
128 : ite(121, 70, 127) : BV:8
129 : ite(120, 68, 128) : BV:8
130 : ite(119, 65, 129) : BV:8
131 : ite(118, 62, 130) : BV:8
132 : bvconcat(87, 102, 117, 131) : BV:32
133 : bvadd(56, 58, 132) : BV:32
134 : eq(133, 56) : BOOL
135 : eq(133, 63) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 2) : BOOL
138 : eq(133, 71) : BOOL
139 : eq(133, 74) : BOOL
140 : eq(133, 77) : BOOL
141 : ite(140, 79, 80) : BV:8
142 : ite(139, 76, 141) : BV:8
143 : ite(138, 73, 142) : BV:8
144 : ite(137, 70, 143) : BV:8
145 : ite(136, 68, 144) : BV:8
146 : ite(135, 65, 145) : BV:8
147 : ite(134, 62, 146) : BV:8
148 : bvadd(77, 58, 132) : BV:32
149 : eq(148, 56) : BOOL
150 : eq(148, 63) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 2) : BOOL
153 : eq(148, 71) : BOOL
154 : eq(148, 74) : BOOL
155 : eq(148, 77) : BOOL
156 : ite(155, 79, 80) : BV:8
157 : ite(154, 76, 156) : BV:8
158 : ite(153, 73, 157) : BV:8
159 : ite(152, 70, 158) : BV:8
160 : ite(151, 68, 159) : BV:8
161 : ite(150, 65, 160) : BV:8
162 : ite(149, 62, 161) : BV:8
163 : bvadd(63, 58, 132) : BV:32
164 : eq(163, 56) : BOOL
165 : eq(163, 63) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 2) : BOOL
168 : eq(163, 71) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : ite(170, 79, 80) : BV:8
172 : ite(169, 76, 171) : BV:8
173 : ite(168, 73, 172) : BV:8
174 : ite(167, 70, 173) : BV:8
175 : ite(166, 68, 174) : BV:8
176 : ite(165, 65, 175) : BV:8
177 : ite(164, 62, 176) : BV:8
178 : bvadd(58, 132) : BV:32
179 : eq(178, 56) : BOOL
180 : eq(178, 63) : BOOL
181 : eq(178, 66) : BOOL
182 : eq(178, 2) : BOOL
183 : eq(178, 71) : BOOL
184 : eq(178, 74) : BOOL
185 : eq(178, 77) : BOOL
186 : ite(185, 79, 80) : BV:8
187 : ite(184, 76, 186) : BV:8
188 : ite(183, 73, 187) : BV:8
189 : ite(182, 70, 188) : BV:8
190 : ite(181, 68, 189) : BV:8
191 : ite(180, 65, 190) : BV:8
192 : ite(179, 62, 191) : BV:8
193 : bvconcat(147, 162, 177, 192) : BV:32
194 : ite(55, 2, 193) : BV:32
195 : lambda(52, 194) : FUNCTION[BV:32 -> BV:32]
196 : map(51, 195) : MAP[BV:32 -> BV:32]
197 : lambda(17, 196) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
198 : map(16, 197) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
199 : sym_const(198) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 234, [ 1; 1 ] -> 223, [ 2; 2 ] -> 247, [ 3; 3 ] -> 251, [ 4; 303407372 ] -> 0, [ 303407373; 303407373 ] -> 198, [ 303407374; 303407374 ] -> 233, [ 303407375; 303407375 ] -> 236, [ 303407376; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1400991463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1400991464; 1400991467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1400991468; 1908697679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1908697680; 1908697683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1908697684; 2499359899 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2499359900; 2499359903 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2499359904; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1400991464 { 0x53816ee8 +1.1119709e40 } : BV:32
=input.dst.llvm-%m
1 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1908697680 { 0x71c46a50 +1.53449440e100 } : BV:32
=input.dst.llvm-%n
1 : 2319668228 { 0x8a435404 -1975299068 -1.52600145e149 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2499359900 { 0x94f9349c -1795607396 -1.94691801e170 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1550771751 { 0x5c6ee627 +1.86639869e57 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda55724Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda55725Var : BV:32
18 : eq(17, 2) : BOOL
19 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
20 : eq(17, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : eq(25, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
32 : eq(25, 31) : BOOL
33 : 233 { 0xe9 -23 } : BV:8
34 : eq(25, 2) : BOOL
35 : 234 { 0xea -22 } : BV:8
36 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
37 : eq(25, 36) : BOOL
38 : 236 { 0xec -20 } : BV:8
39 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
40 : eq(25, 39) : BOOL
41 : 198 { 0xc6 -58 } : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : eq(25, 42) : BOOL
44 : 247 { 0xf7 -9 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : bvadd(42, 23, 24) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 28) : BOOL
56 : eq(53, 31) : BOOL
57 : eq(53, 2) : BOOL
58 : eq(53, 36) : BOOL
59 : eq(53, 39) : BOOL
60 : eq(53, 42) : BOOL
61 : ite(60, 44, 45) : BV:8
62 : ite(59, 41, 61) : BV:8
63 : ite(58, 38, 62) : BV:8
64 : ite(57, 35, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : ite(54, 27, 66) : BV:8
68 : bvadd(28, 23, 24) : BV:32
69 : eq(68, 21) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 2) : BOOL
73 : eq(68, 36) : BOOL
74 : eq(68, 39) : BOOL
75 : eq(68, 42) : BOOL
76 : ite(75, 44, 45) : BV:8
77 : ite(74, 41, 76) : BV:8
78 : ite(73, 38, 77) : BV:8
79 : ite(72, 35, 78) : BV:8
80 : ite(71, 33, 79) : BV:8
81 : ite(70, 30, 80) : BV:8
82 : ite(69, 27, 81) : BV:8
83 : bvadd(23, 24) : BV:32
84 : eq(83, 21) : BOOL
85 : eq(83, 28) : BOOL
86 : eq(83, 31) : BOOL
87 : eq(83, 2) : BOOL
88 : eq(83, 36) : BOOL
89 : eq(83, 39) : BOOL
90 : eq(83, 42) : BOOL
91 : ite(90, 44, 45) : BV:8
92 : ite(89, 41, 91) : BV:8
93 : ite(88, 38, 92) : BV:8
94 : ite(87, 35, 93) : BV:8
95 : ite(86, 33, 94) : BV:8
96 : ite(85, 30, 95) : BV:8
97 : ite(84, 27, 96) : BV:8
98 : bvconcat(52, 67, 82, 97) : BV:32
99 : ite(20, 2, 98) : BV:32
100 : ite(18, 2, 99) : BV:32
101 : lambda(17, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(16, 101) : MAP[BV:32 -> BV:32]
103 : sym_const(102) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
2 : unit : UNIT
3 : Lambda55706Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda55707Var : BV:32
20 : eq(19, 4) : BOOL
21 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
22 : eq(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : eq(27, 23) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(27, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
34 : eq(27, 33) : BOOL
35 : 233 { 0xe9 -23 } : BV:8
36 : eq(27, 4) : BOOL
37 : 234 { 0xea -22 } : BV:8
38 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
39 : eq(27, 38) : BOOL
40 : 236 { 0xec -20 } : BV:8
41 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
42 : eq(27, 41) : BOOL
43 : 198 { 0xc6 -58 } : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : eq(27, 44) : BOOL
46 : 247 { 0xf7 -9 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : bvadd(44, 25, 26) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 30) : BOOL
58 : eq(55, 33) : BOOL
59 : eq(55, 4) : BOOL
60 : eq(55, 38) : BOOL
61 : eq(55, 41) : BOOL
62 : eq(55, 44) : BOOL
63 : ite(62, 46, 47) : BV:8
64 : ite(61, 43, 63) : BV:8
65 : ite(60, 40, 64) : BV:8
66 : ite(59, 37, 65) : BV:8
67 : ite(58, 35, 66) : BV:8
68 : ite(57, 32, 67) : BV:8
69 : ite(56, 29, 68) : BV:8
70 : bvadd(30, 25, 26) : BV:32
71 : eq(70, 23) : BOOL
72 : eq(70, 30) : BOOL
73 : eq(70, 33) : BOOL
74 : eq(70, 4) : BOOL
75 : eq(70, 38) : BOOL
76 : eq(70, 41) : BOOL
77 : eq(70, 44) : BOOL
78 : ite(77, 46, 47) : BV:8
79 : ite(76, 43, 78) : BV:8
80 : ite(75, 40, 79) : BV:8
81 : ite(74, 37, 80) : BV:8
82 : ite(73, 35, 81) : BV:8
83 : ite(72, 32, 82) : BV:8
84 : ite(71, 29, 83) : BV:8
85 : bvadd(25, 26) : BV:32
86 : eq(85, 23) : BOOL
87 : eq(85, 30) : BOOL
88 : eq(85, 33) : BOOL
89 : eq(85, 4) : BOOL
90 : eq(85, 38) : BOOL
91 : eq(85, 41) : BOOL
92 : eq(85, 44) : BOOL
93 : ite(92, 46, 47) : BV:8
94 : ite(91, 43, 93) : BV:8
95 : ite(90, 40, 94) : BV:8
96 : ite(89, 37, 95) : BV:8
97 : ite(88, 35, 96) : BV:8
98 : ite(87, 32, 97) : BV:8
99 : ite(86, 29, 98) : BV:8
100 : bvconcat(54, 69, 84, 99) : BV:32
101 : ite(22, 4, 100) : BV:32
102 : ite(20, 4, 101) : BV:32
103 : lambda(19, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(18, 103) : MAP[BV:32 -> BV:32]
105 : sum(1, 2, 104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
106 : sym_const(105) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(2, 1) : BOOL
19 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
20 : eq(2, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 2) : BV:32
24 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : eq(25, 15) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
31 : eq(25, 30) : BOOL
32 : 233 { 0xe9 -23 } : BV:8
33 : eq(25, 1) : BOOL
34 : 234 { 0xea -22 } : BV:8
35 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
36 : eq(25, 35) : BOOL
37 : 236 { 0xec -20 } : BV:8
38 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
39 : eq(25, 38) : BOOL
40 : 198 { 0xc6 -58 } : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(25, 41) : BOOL
43 : 247 { 0xf7 -9 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : bvadd(41, 23, 24) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 15) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 1) : BOOL
57 : eq(52, 35) : BOOL
58 : eq(52, 38) : BOOL
59 : eq(52, 41) : BOOL
60 : ite(59, 43, 44) : BV:8
61 : ite(58, 40, 60) : BV:8
62 : ite(57, 37, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : ite(55, 32, 63) : BV:8
65 : ite(54, 29, 64) : BV:8
66 : ite(53, 27, 65) : BV:8
67 : bvadd(15, 23, 24) : BV:32
68 : eq(67, 21) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 30) : BOOL
71 : eq(67, 1) : BOOL
72 : eq(67, 35) : BOOL
73 : eq(67, 38) : BOOL
74 : eq(67, 41) : BOOL
75 : ite(74, 43, 44) : BV:8
76 : ite(73, 40, 75) : BV:8
77 : ite(72, 37, 76) : BV:8
78 : ite(71, 34, 77) : BV:8
79 : ite(70, 32, 78) : BV:8
80 : ite(69, 29, 79) : BV:8
81 : ite(68, 27, 80) : BV:8
82 : bvadd(23, 24) : BV:32
83 : eq(82, 21) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 30) : BOOL
86 : eq(82, 1) : BOOL
87 : eq(82, 35) : BOOL
88 : eq(82, 38) : BOOL
89 : eq(82, 41) : BOOL
90 : ite(89, 43, 44) : BV:8
91 : ite(88, 40, 90) : BV:8
92 : ite(87, 37, 91) : BV:8
93 : ite(86, 34, 92) : BV:8
94 : ite(85, 32, 93) : BV:8
95 : ite(84, 29, 94) : BV:8
96 : ite(83, 27, 95) : BV:8
97 : bvconcat(51, 66, 81, 96) : BV:32
98 : ite(20, 1, 97) : BV:32
99 : ite(18, 1, 98) : BV:32
100 : sum(16, 17, 99) : SUM[UNIT,BV:32]
101 : sym_const(100) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda55729Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda55730Var : BV:32
18 : eq(17, 2) : BOOL
19 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
20 : eq(17, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : eq(25, 21) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : eq(25, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
32 : eq(25, 31) : BOOL
33 : 233 { 0xe9 -23 } : BV:8
34 : eq(25, 2) : BOOL
35 : 234 { 0xea -22 } : BV:8
36 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
37 : eq(25, 36) : BOOL
38 : 236 { 0xec -20 } : BV:8
39 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
40 : eq(25, 39) : BOOL
41 : 198 { 0xc6 -58 } : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : eq(25, 42) : BOOL
44 : 247 { 0xf7 -9 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(32, 33, 49) : BV:8
51 : ite(29, 30, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : bvadd(42, 23, 24) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 28) : BOOL
56 : eq(53, 31) : BOOL
57 : eq(53, 2) : BOOL
58 : eq(53, 36) : BOOL
59 : eq(53, 39) : BOOL
60 : eq(53, 42) : BOOL
61 : ite(60, 44, 45) : BV:8
62 : ite(59, 41, 61) : BV:8
63 : ite(58, 38, 62) : BV:8
64 : ite(57, 35, 63) : BV:8
65 : ite(56, 33, 64) : BV:8
66 : ite(55, 30, 65) : BV:8
67 : ite(54, 27, 66) : BV:8
68 : bvadd(28, 23, 24) : BV:32
69 : eq(68, 21) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 2) : BOOL
73 : eq(68, 36) : BOOL
74 : eq(68, 39) : BOOL
75 : eq(68, 42) : BOOL
76 : ite(75, 44, 45) : BV:8
77 : ite(74, 41, 76) : BV:8
78 : ite(73, 38, 77) : BV:8
79 : ite(72, 35, 78) : BV:8
80 : ite(71, 33, 79) : BV:8
81 : ite(70, 30, 80) : BV:8
82 : ite(69, 27, 81) : BV:8
83 : bvadd(23, 24) : BV:32
84 : eq(83, 21) : BOOL
85 : eq(83, 28) : BOOL
86 : eq(83, 31) : BOOL
87 : eq(83, 2) : BOOL
88 : eq(83, 36) : BOOL
89 : eq(83, 39) : BOOL
90 : eq(83, 42) : BOOL
91 : ite(90, 44, 45) : BV:8
92 : ite(89, 41, 91) : BV:8
93 : ite(88, 38, 92) : BV:8
94 : ite(87, 35, 93) : BV:8
95 : ite(86, 33, 94) : BV:8
96 : ite(85, 30, 95) : BV:8
97 : ite(84, 27, 96) : BV:8
98 : bvconcat(52, 67, 82, 97) : BV:32
99 : ite(20, 2, 98) : BV:32
100 : ite(18, 2, 99) : BV:32
101 : lambda(17, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(16, 101) : MAP[BV:32 -> BV:32]
103 : sym_const(102) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 626988664 { 0x255f1678 +1.74287319e203 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1908697680 { 0x71c46a50 +1.53449440e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1908697683 { 0x71c46a53 +1.53449475e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2499359900 { 0x94f9349c -1795607396 -1.94691801e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2499359903 { 0x94f9349f -1795607393 -1.94691836e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1400991464 { 0x53816ee8 +1.1119709e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1400991467 { 0x53816eeb +1.1119744e40 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda55589Var : BV:32
2 : Lambda55590Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2319668227 { 0x8a435403 -1975299069 -1.52600133e149 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2319668228 { 0x8a435404 -1975299068 -1.52600145e149 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2319668229 { 0x8a435405 -1975299067 -1.52600157e149 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1689547145 { 0x64b47189 +1.40971481e74 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 48) : BOOL
54 : 251 { 0xfb -5 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(52, 55) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
59 : eq(52, 58) : BOOL
60 : 233 { 0xe9 -23 } : BV:8
61 : eq(52, 3) : BOOL
62 : 234 { 0xea -22 } : BV:8
63 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
64 : eq(52, 63) : BOOL
65 : 236 { 0xec -20 } : BV:8
66 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
67 : eq(52, 66) : BOOL
68 : 198 { 0xc6 -58 } : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : eq(52, 69) : BOOL
71 : 247 { 0xf7 -9 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(56, 57, 77) : BV:8
79 : ite(53, 54, 78) : BV:8
80 : bvadd(69, 51) : BV:32
81 : eq(80, 48) : BOOL
82 : eq(80, 55) : BOOL
83 : eq(80, 58) : BOOL
84 : eq(80, 3) : BOOL
85 : eq(80, 63) : BOOL
86 : eq(80, 66) : BOOL
87 : eq(80, 69) : BOOL
88 : ite(87, 71, 72) : BV:8
89 : ite(86, 68, 88) : BV:8
90 : ite(85, 65, 89) : BV:8
91 : ite(84, 62, 90) : BV:8
92 : ite(83, 60, 91) : BV:8
93 : ite(82, 57, 92) : BV:8
94 : ite(81, 54, 93) : BV:8
95 : bvadd(55, 51) : BV:32
96 : eq(95, 48) : BOOL
97 : eq(95, 55) : BOOL
98 : eq(95, 58) : BOOL
99 : eq(95, 3) : BOOL
100 : eq(95, 63) : BOOL
101 : eq(95, 66) : BOOL
102 : eq(95, 69) : BOOL
103 : ite(102, 71, 72) : BV:8
104 : ite(101, 68, 103) : BV:8
105 : ite(100, 65, 104) : BV:8
106 : ite(99, 62, 105) : BV:8
107 : ite(98, 60, 106) : BV:8
108 : ite(97, 57, 107) : BV:8
109 : ite(96, 54, 108) : BV:8
110 : eq(51, 48) : BOOL
111 : eq(51, 55) : BOOL
112 : eq(51, 58) : BOOL
113 : eq(51, 3) : BOOL
114 : eq(51, 63) : BOOL
115 : eq(51, 66) : BOOL
116 : eq(51, 69) : BOOL
117 : ite(116, 71, 72) : BV:8
118 : ite(115, 68, 117) : BV:8
119 : ite(114, 65, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : ite(112, 60, 120) : BV:8
122 : ite(111, 57, 121) : BV:8
123 : ite(110, 54, 122) : BV:8
124 : bvconcat(79, 94, 109, 123) : BV:32
125 : bvadd(48, 50, 124) : BV:32
126 : eq(125, 48) : BOOL
127 : eq(125, 55) : BOOL
128 : eq(125, 58) : BOOL
129 : eq(125, 3) : BOOL
130 : eq(125, 63) : BOOL
131 : eq(125, 66) : BOOL
132 : eq(125, 69) : BOOL
133 : ite(132, 71, 72) : BV:8
134 : ite(131, 68, 133) : BV:8
135 : ite(130, 65, 134) : BV:8
136 : ite(129, 62, 135) : BV:8
137 : ite(128, 60, 136) : BV:8
138 : ite(127, 57, 137) : BV:8
139 : ite(126, 54, 138) : BV:8
140 : bvadd(69, 50, 124) : BV:32
141 : eq(140, 48) : BOOL
142 : eq(140, 55) : BOOL
143 : eq(140, 58) : BOOL
144 : eq(140, 3) : BOOL
145 : eq(140, 63) : BOOL
146 : eq(140, 66) : BOOL
147 : eq(140, 69) : BOOL
148 : ite(147, 71, 72) : BV:8
149 : ite(146, 68, 148) : BV:8
150 : ite(145, 65, 149) : BV:8
151 : ite(144, 62, 150) : BV:8
152 : ite(143, 60, 151) : BV:8
153 : ite(142, 57, 152) : BV:8
154 : ite(141, 54, 153) : BV:8
155 : bvadd(55, 50, 124) : BV:32
156 : eq(155, 48) : BOOL
157 : eq(155, 55) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 3) : BOOL
160 : eq(155, 63) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : ite(162, 71, 72) : BV:8
164 : ite(161, 68, 163) : BV:8
165 : ite(160, 65, 164) : BV:8
166 : ite(159, 62, 165) : BV:8
167 : ite(158, 60, 166) : BV:8
168 : ite(157, 57, 167) : BV:8
169 : ite(156, 54, 168) : BV:8
170 : bvadd(50, 124) : BV:32
171 : eq(170, 48) : BOOL
172 : eq(170, 55) : BOOL
173 : eq(170, 58) : BOOL
174 : eq(170, 3) : BOOL
175 : eq(170, 63) : BOOL
176 : eq(170, 66) : BOOL
177 : eq(170, 69) : BOOL
178 : ite(177, 71, 72) : BV:8
179 : ite(176, 68, 178) : BV:8
180 : ite(175, 65, 179) : BV:8
181 : ite(174, 62, 180) : BV:8
182 : ite(173, 60, 181) : BV:8
183 : ite(172, 57, 182) : BV:8
184 : ite(171, 54, 183) : BV:8
185 : bvconcat(139, 154, 169, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : ite(47, 185, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : lambda(1, 2, 188) : FUNCTION[BV:32,BV:32 -> BV:32]
190 : sym_const(189) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda55594Var : BV:32
2 : Lambda55595Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2319668227 { 0x8a435403 -1975299069 -1.52600133e149 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2319668228 { 0x8a435404 -1975299068 -1.52600145e149 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2319668229 { 0x8a435405 -1975299067 -1.52600157e149 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1689547145 { 0x64b47189 +1.40971481e74 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2319668227 ] -> true, [ 2319668228; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2319668227 ] -> true, [ 2319668228; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda55603Var : BV:32
2 : Lambda55604Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2319668227 { 0x8a435403 -1975299069 -1.52600133e149 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2319668228 { 0x8a435404 -1975299068 -1.52600145e149 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2319668229 { 0x8a435405 -1975299067 -1.52600157e149 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1689547143 { 0x64b47187 +1.40971457e74 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1689547144 { 0x64b47188 +1.40971469e74 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1689547145 { 0x64b47189 +1.40971481e74 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda55599Var : BV:32
2 : Lambda55600Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 251 { 0xfb -5 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
18 : eq(11, 17) : BOOL
19 : 233 { 0xe9 -23 } : BV:8
20 : eq(11, 3) : BOOL
21 : 234 { 0xea -22 } : BV:8
22 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
23 : eq(11, 22) : BOOL
24 : 236 { 0xec -20 } : BV:8
25 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
26 : eq(11, 25) : BOOL
27 : 198 { 0xc6 -58 } : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : eq(11, 28) : BOOL
30 : 247 { 0xf7 -9 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(18, 19, 35) : BV:8
37 : ite(15, 16, 36) : BV:8
38 : ite(12, 13, 37) : BV:8
39 : bvadd(28, 10) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 14) : BOOL
42 : eq(39, 17) : BOOL
43 : eq(39, 3) : BOOL
44 : eq(39, 22) : BOOL
45 : eq(39, 25) : BOOL
46 : eq(39, 28) : BOOL
47 : ite(46, 30, 31) : BV:8
48 : ite(45, 27, 47) : BV:8
49 : ite(44, 24, 48) : BV:8
50 : ite(43, 21, 49) : BV:8
51 : ite(42, 19, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : bvadd(14, 10) : BV:32
55 : eq(54, 7) : BOOL
56 : eq(54, 14) : BOOL
57 : eq(54, 17) : BOOL
58 : eq(54, 3) : BOOL
59 : eq(54, 22) : BOOL
60 : eq(54, 25) : BOOL
61 : eq(54, 28) : BOOL
62 : ite(61, 30, 31) : BV:8
63 : ite(60, 27, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 21, 64) : BV:8
66 : ite(57, 19, 65) : BV:8
67 : ite(56, 16, 66) : BV:8
68 : ite(55, 13, 67) : BV:8
69 : eq(10, 7) : BOOL
70 : eq(10, 14) : BOOL
71 : eq(10, 17) : BOOL
72 : eq(10, 3) : BOOL
73 : eq(10, 22) : BOOL
74 : eq(10, 25) : BOOL
75 : eq(10, 28) : BOOL
76 : ite(75, 30, 31) : BV:8
77 : ite(74, 27, 76) : BV:8
78 : ite(73, 24, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : ite(71, 19, 79) : BV:8
81 : ite(70, 16, 80) : BV:8
82 : ite(69, 13, 81) : BV:8
83 : bvconcat(38, 53, 68, 82) : BV:32
84 : bvadd(7, 9, 83) : BV:32
85 : eq(84, 7) : BOOL
86 : eq(84, 14) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 3) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : ite(91, 30, 31) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 24, 93) : BV:8
95 : ite(88, 21, 94) : BV:8
96 : ite(87, 19, 95) : BV:8
97 : ite(86, 16, 96) : BV:8
98 : ite(85, 13, 97) : BV:8
99 : bvadd(28, 9, 83) : BV:32
100 : eq(99, 7) : BOOL
101 : eq(99, 14) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 3) : BOOL
104 : eq(99, 22) : BOOL
105 : eq(99, 25) : BOOL
106 : eq(99, 28) : BOOL
107 : ite(106, 30, 31) : BV:8
108 : ite(105, 27, 107) : BV:8
109 : ite(104, 24, 108) : BV:8
110 : ite(103, 21, 109) : BV:8
111 : ite(102, 19, 110) : BV:8
112 : ite(101, 16, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : bvadd(14, 9, 83) : BV:32
115 : eq(114, 7) : BOOL
116 : eq(114, 14) : BOOL
117 : eq(114, 17) : BOOL
118 : eq(114, 3) : BOOL
119 : eq(114, 22) : BOOL
120 : eq(114, 25) : BOOL
121 : eq(114, 28) : BOOL
122 : ite(121, 30, 31) : BV:8
123 : ite(120, 27, 122) : BV:8
124 : ite(119, 24, 123) : BV:8
125 : ite(118, 21, 124) : BV:8
126 : ite(117, 19, 125) : BV:8
127 : ite(116, 16, 126) : BV:8
128 : ite(115, 13, 127) : BV:8
129 : bvadd(9, 83) : BV:32
130 : eq(129, 7) : BOOL
131 : eq(129, 14) : BOOL
132 : eq(129, 17) : BOOL
133 : eq(129, 3) : BOOL
134 : eq(129, 22) : BOOL
135 : eq(129, 25) : BOOL
136 : eq(129, 28) : BOOL
137 : ite(136, 30, 31) : BV:8
138 : ite(135, 27, 137) : BV:8
139 : ite(134, 24, 138) : BV:8
140 : ite(133, 21, 139) : BV:8
141 : ite(132, 19, 140) : BV:8
142 : ite(131, 16, 141) : BV:8
143 : ite(130, 13, 142) : BV:8
144 : bvconcat(98, 113, 128, 143) : BV:32
145 : ite(6, 3, 144) : BV:32
146 : lambda(1, 2, 145) : FUNCTION[BV:32,BV:32 -> BV:32]
147 : sym_const(146) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1689547143 ] -> true, [ 1689547144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda55610Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : eq(10, 6) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(10, 13) : BOOL
15 : 223 { 0xdf -33 } : BV:8
16 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
17 : eq(10, 16) : BOOL
18 : 233 { 0xe9 -23 } : BV:8
19 : eq(10, 2) : BOOL
20 : 234 { 0xea -22 } : BV:8
21 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
22 : eq(10, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
25 : eq(10, 24) : BOOL
26 : 198 { 0xc6 -58 } : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : eq(10, 27) : BOOL
29 : 247 { 0xf7 -9 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : bvadd(27, 8, 9) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 16) : BOOL
42 : eq(38, 2) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 27) : BOOL
46 : ite(45, 29, 30) : BV:8
47 : ite(44, 26, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : bvadd(13, 8, 9) : BV:32
54 : eq(53, 6) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 2) : BOOL
58 : eq(53, 21) : BOOL
59 : eq(53, 24) : BOOL
60 : eq(53, 27) : BOOL
61 : ite(60, 29, 30) : BV:8
62 : ite(59, 26, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 20, 63) : BV:8
65 : ite(56, 18, 64) : BV:8
66 : ite(55, 15, 65) : BV:8
67 : ite(54, 12, 66) : BV:8
68 : bvadd(8, 9) : BV:32
69 : eq(68, 6) : BOOL
70 : eq(68, 13) : BOOL
71 : eq(68, 16) : BOOL
72 : eq(68, 2) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 24) : BOOL
75 : eq(68, 27) : BOOL
76 : ite(75, 29, 30) : BV:8
77 : ite(74, 26, 76) : BV:8
78 : ite(73, 23, 77) : BV:8
79 : ite(72, 20, 78) : BV:8
80 : ite(71, 18, 79) : BV:8
81 : ite(70, 15, 80) : BV:8
82 : ite(69, 12, 81) : BV:8
83 : bvconcat(37, 52, 67, 82) : BV:32
84 : ite(5, 2, 83) : BV:32
85 : ite(3, 2, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1689547143 ] -> true, [ 1689547144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda55614Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : eq(10, 6) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(10, 13) : BOOL
15 : 223 { 0xdf -33 } : BV:8
16 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
17 : eq(10, 16) : BOOL
18 : 233 { 0xe9 -23 } : BV:8
19 : eq(10, 2) : BOOL
20 : 234 { 0xea -22 } : BV:8
21 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
22 : eq(10, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
25 : eq(10, 24) : BOOL
26 : 198 { 0xc6 -58 } : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : eq(10, 27) : BOOL
29 : 247 { 0xf7 -9 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : bvadd(27, 8, 9) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 16) : BOOL
42 : eq(38, 2) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 27) : BOOL
46 : ite(45, 29, 30) : BV:8
47 : ite(44, 26, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : bvadd(13, 8, 9) : BV:32
54 : eq(53, 6) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 2) : BOOL
58 : eq(53, 21) : BOOL
59 : eq(53, 24) : BOOL
60 : eq(53, 27) : BOOL
61 : ite(60, 29, 30) : BV:8
62 : ite(59, 26, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 20, 63) : BV:8
65 : ite(56, 18, 64) : BV:8
66 : ite(55, 15, 65) : BV:8
67 : ite(54, 12, 66) : BV:8
68 : bvadd(8, 9) : BV:32
69 : eq(68, 6) : BOOL
70 : eq(68, 13) : BOOL
71 : eq(68, 16) : BOOL
72 : eq(68, 2) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 24) : BOOL
75 : eq(68, 27) : BOOL
76 : ite(75, 29, 30) : BV:8
77 : ite(74, 26, 76) : BV:8
78 : ite(73, 23, 77) : BV:8
79 : ite(72, 20, 78) : BV:8
80 : ite(71, 18, 79) : BV:8
81 : ite(70, 15, 80) : BV:8
82 : ite(69, 12, 81) : BV:8
83 : bvconcat(37, 52, 67, 82) : BV:32
84 : ite(5, 2, 83) : BV:32
85 : ite(3, 2, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1689547143 ] -> true, [ 1689547144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda55618Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1149593668 { 0x44856844 +1.4224443e10 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 3974743552 { 0xece9c600 -320223744 -1.82635498e90 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : eq(10, 6) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(10, 13) : BOOL
15 : 223 { 0xdf -33 } : BV:8
16 : 303407374 { 0x1215a10e +1.16897749e165 } : BV:32
17 : eq(10, 16) : BOOL
18 : 233 { 0xe9 -23 } : BV:8
19 : eq(10, 2) : BOOL
20 : 234 { 0xea -22 } : BV:8
21 : 303407375 { 0x1215a10f +1.16897761e165 } : BV:32
22 : eq(10, 21) : BOOL
23 : 236 { 0xec -20 } : BV:8
24 : 303407373 { 0x1215a10d +1.16897737e165 } : BV:32
25 : eq(10, 24) : BOOL
26 : 198 { 0xc6 -58 } : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : eq(10, 27) : BOOL
29 : 247 { 0xf7 -9 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : bvadd(27, 8, 9) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 13) : BOOL
41 : eq(38, 16) : BOOL
42 : eq(38, 2) : BOOL
43 : eq(38, 21) : BOOL
44 : eq(38, 24) : BOOL
45 : eq(38, 27) : BOOL
46 : ite(45, 29, 30) : BV:8
47 : ite(44, 26, 46) : BV:8
48 : ite(43, 23, 47) : BV:8
49 : ite(42, 20, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : ite(39, 12, 51) : BV:8
53 : bvadd(13, 8, 9) : BV:32
54 : eq(53, 6) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 2) : BOOL
58 : eq(53, 21) : BOOL
59 : eq(53, 24) : BOOL
60 : eq(53, 27) : BOOL
61 : ite(60, 29, 30) : BV:8
62 : ite(59, 26, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 20, 63) : BV:8
65 : ite(56, 18, 64) : BV:8
66 : ite(55, 15, 65) : BV:8
67 : ite(54, 12, 66) : BV:8
68 : bvadd(8, 9) : BV:32
69 : eq(68, 6) : BOOL
70 : eq(68, 13) : BOOL
71 : eq(68, 16) : BOOL
72 : eq(68, 2) : BOOL
73 : eq(68, 21) : BOOL
74 : eq(68, 24) : BOOL
75 : eq(68, 27) : BOOL
76 : ite(75, 29, 30) : BV:8
77 : ite(74, 26, 76) : BV:8
78 : ite(73, 23, 77) : BV:8
79 : ite(72, 20, 78) : BV:8
80 : ite(71, 18, 79) : BV:8
81 : ite(70, 15, 80) : BV:8
82 : ite(69, 12, 81) : BV:8
83 : bvconcat(37, 52, 67, 82) : BV:32
84 : ite(5, 2, 83) : BV:32
85 : ite(3, 2, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1811248362
=counter_example_end
=global nodece 61 num_edges_traversed 1
=global nodece 61 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 62
=global nodece 62 nodece z3v487.ce4579.num_edges_traversed0
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(epsilon)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3v487.ce4579 845b52fb2a4d93ca905da18cfde057e1
=input.spec-%var-x-1
1 : Lambda57344Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57345Var : BV:32
18 : Lambda57346Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
28 : bvule(27, 17) : BOOL
29 : bvule(17, 10) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 17) : BOOL
32 : bvule(17, 8) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 8, 8) : BV:32
35 : ite(30, 27, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda57347Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 40 { 0x28 } : BV:8
73 : 16 { 0x10 +1.190e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 157 { 0x9d -99 } : BV:8
76 : 18 { 0x12 +1.214e129 } : BV:32
77 : eq(70, 76) : BOOL
78 : 133 { 0x85 -123 } : BV:8
79 : eq(70, 42) : BOOL
80 : 72 { 0x48 } : BV:8
81 : eq(70, 66) : BOOL
82 : 194 { 0xc2 -62 } : BV:8
83 : 17 { 0x11 +1.202e129 } : BV:32
84 : eq(70, 83) : BOOL
85 : 129 { 0x81 -127 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(70, 86) : BOOL
88 : 10 { 0xa } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(77, 78, 93) : BV:8
95 : ite(74, 75, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(46, 69) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 73) : BOOL
100 : eq(97, 76) : BOOL
101 : eq(97, 42) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 78, 108) : BV:8
110 : ite(99, 75, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(42, 69) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 73) : BOOL
115 : eq(112, 76) : BOOL
116 : eq(112, 42) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 78, 123) : BV:8
125 : ite(114, 75, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(69, 2) : BOOL
128 : eq(69, 73) : BOOL
129 : eq(69, 76) : BOOL
130 : eq(69, 42) : BOOL
131 : eq(69, 66) : BOOL
132 : eq(69, 83) : BOOL
133 : eq(69, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 78, 137) : BV:8
139 : ite(128, 75, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(66, 68, 141) : BV:32
143 : eq(142, 2) : BOOL
144 : eq(142, 73) : BOOL
145 : eq(142, 76) : BOOL
146 : eq(142, 42) : BOOL
147 : eq(142, 66) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 78, 153) : BV:8
155 : ite(144, 75, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(46, 68, 141) : BV:32
158 : eq(157, 2) : BOOL
159 : eq(157, 73) : BOOL
160 : eq(157, 76) : BOOL
161 : eq(157, 42) : BOOL
162 : eq(157, 66) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 78, 168) : BV:8
170 : ite(159, 75, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(42, 68, 141) : BV:32
173 : eq(172, 2) : BOOL
174 : eq(172, 73) : BOOL
175 : eq(172, 76) : BOOL
176 : eq(172, 42) : BOOL
177 : eq(172, 66) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 78, 183) : BV:8
185 : ite(174, 75, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(68, 141) : BV:32
188 : eq(187, 2) : BOOL
189 : eq(187, 73) : BOOL
190 : eq(187, 76) : BOOL
191 : eq(187, 42) : BOOL
192 : eq(187, 66) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 78, 198) : BV:8
200 : ite(189, 75, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(65, 2, 202) : BV:32
204 : ite(63, 2, 203) : BV:32
205 : lambda(60, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(59, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda57357Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57358Var : BV:32
18 : Lambda57359Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
28 : bvule(27, 17) : BOOL
29 : bvule(17, 10) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 17) : BOOL
32 : bvule(17, 8) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 8, 8) : BV:32
35 : ite(30, 27, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda57360Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 25) : BOOL
67 : and(31, 29) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : or(83, 84) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 40 { 0x28 } : BV:8
95 : 16 { 0x10 +1.190e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 157 { 0x9d -99 } : BV:8
98 : 18 { 0x12 +1.214e129 } : BV:32
99 : eq(92, 98) : BOOL
100 : 133 { 0x85 -123 } : BV:8
101 : eq(92, 42) : BOOL
102 : 72 { 0x48 } : BV:8
103 : eq(92, 88) : BOOL
104 : 194 { 0xc2 -62 } : BV:8
105 : 17 { 0x11 +1.202e129 } : BV:32
106 : eq(92, 105) : BOOL
107 : 129 { 0x81 -127 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(92, 108) : BOOL
110 : 10 { 0xa } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(99, 100, 115) : BV:8
117 : ite(96, 97, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(46, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 95) : BOOL
122 : eq(119, 98) : BOOL
123 : eq(119, 42) : BOOL
124 : eq(119, 88) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 100, 130) : BV:8
132 : ite(121, 97, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(42, 91) : BV:32
135 : eq(134, 2) : BOOL
136 : eq(134, 95) : BOOL
137 : eq(134, 98) : BOOL
138 : eq(134, 42) : BOOL
139 : eq(134, 88) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 100, 145) : BV:8
147 : ite(136, 97, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(91, 2) : BOOL
150 : eq(91, 95) : BOOL
151 : eq(91, 98) : BOOL
152 : eq(91, 42) : BOOL
153 : eq(91, 88) : BOOL
154 : eq(91, 105) : BOOL
155 : eq(91, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 100, 159) : BV:8
161 : ite(150, 97, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(88, 90, 163) : BV:32
165 : eq(164, 2) : BOOL
166 : eq(164, 95) : BOOL
167 : eq(164, 98) : BOOL
168 : eq(164, 42) : BOOL
169 : eq(164, 88) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 100, 175) : BV:8
177 : ite(166, 97, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(46, 90, 163) : BV:32
180 : eq(179, 2) : BOOL
181 : eq(179, 95) : BOOL
182 : eq(179, 98) : BOOL
183 : eq(179, 42) : BOOL
184 : eq(179, 88) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 100, 190) : BV:8
192 : ite(181, 97, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(42, 90, 163) : BV:32
195 : eq(194, 2) : BOOL
196 : eq(194, 95) : BOOL
197 : eq(194, 98) : BOOL
198 : eq(194, 42) : BOOL
199 : eq(194, 88) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 100, 205) : BV:8
207 : ite(196, 97, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(90, 163) : BV:32
210 : eq(209, 2) : BOOL
211 : eq(209, 95) : BOOL
212 : eq(209, 98) : BOOL
213 : eq(209, 42) : BOOL
214 : eq(209, 88) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 100, 220) : BV:8
222 : ite(211, 97, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(65, 2, 224) : BV:32
226 : ite(63, 2, 225) : BV:32
227 : ite(87, 224, 226) : BV:32
228 : ite(65, 2, 227) : BV:32
229 : ite(63, 2, 228) : BV:32
230 : lambda(60, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(59, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 40, [ 1; 1 ] -> 72, [ 2; 2 ] -> 0, [ 3; 3 ] -> 194, [ 4; 15 ] -> 0, [ 16; 16 ] -> 157, [ 17; 17 ] -> 129, [ 18; 18 ] -> 133, [ 19; 19 ] -> 10, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 2396151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2396152; 2396155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2396156; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2396155 { 0x248ffb +1.28564393e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda57274Var : BV:32
2 : Lambda57275Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 3) : BOOL
16 : 40 { 0x28 } : BV:8
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(14, 17) : BOOL
19 : 157 { 0x9d -99 } : BV:8
20 : 18 { 0x12 +1.214e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 133 { 0x85 -123 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 72 { 0x48 } : BV:8
26 : eq(14, 10) : BOOL
27 : 194 { 0xc2 -62 } : BV:8
28 : 17 { 0x11 +1.202e129 } : BV:32
29 : eq(14, 28) : BOOL
30 : 129 { 0x81 -127 } : BV:8
31 : 19 { 0x13 +1.226e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 10 { 0xa } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13) : BV:32
44 : eq(43, 3) : BOOL
45 : eq(43, 17) : BOOL
46 : eq(43, 20) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 10) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 25, 53) : BV:8
55 : ite(46, 22, 54) : BV:8
56 : ite(45, 19, 55) : BV:8
57 : ite(44, 16, 56) : BV:8
58 : bvadd(23, 13) : BV:32
59 : eq(58, 3) : BOOL
60 : eq(58, 17) : BOOL
61 : eq(58, 20) : BOOL
62 : eq(58, 23) : BOOL
63 : eq(58, 10) : BOOL
64 : eq(58, 28) : BOOL
65 : eq(58, 31) : BOOL
66 : ite(65, 33, 34) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 25, 68) : BV:8
70 : ite(61, 22, 69) : BV:8
71 : ite(60, 19, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : eq(13, 3) : BOOL
74 : eq(13, 17) : BOOL
75 : eq(13, 20) : BOOL
76 : eq(13, 23) : BOOL
77 : eq(13, 10) : BOOL
78 : eq(13, 28) : BOOL
79 : eq(13, 31) : BOOL
80 : ite(79, 33, 34) : BV:8
81 : ite(78, 30, 80) : BV:8
82 : ite(77, 27, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 22, 83) : BV:8
85 : ite(74, 19, 84) : BV:8
86 : ite(73, 16, 85) : BV:8
87 : bvconcat(41, 57, 72, 86) : BV:32
88 : bvadd(10, 12, 87) : BV:32
89 : eq(88, 3) : BOOL
90 : eq(88, 17) : BOOL
91 : eq(88, 20) : BOOL
92 : eq(88, 23) : BOOL
93 : eq(88, 10) : BOOL
94 : eq(88, 28) : BOOL
95 : eq(88, 31) : BOOL
96 : ite(95, 33, 34) : BV:8
97 : ite(94, 30, 96) : BV:8
98 : ite(93, 27, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 22, 99) : BV:8
101 : ite(90, 19, 100) : BV:8
102 : ite(89, 16, 101) : BV:8
103 : bvadd(42, 12, 87) : BV:32
104 : eq(103, 3) : BOOL
105 : eq(103, 17) : BOOL
106 : eq(103, 20) : BOOL
107 : eq(103, 23) : BOOL
108 : eq(103, 10) : BOOL
109 : eq(103, 28) : BOOL
110 : eq(103, 31) : BOOL
111 : ite(110, 33, 34) : BV:8
112 : ite(109, 30, 111) : BV:8
113 : ite(108, 27, 112) : BV:8
114 : ite(107, 25, 113) : BV:8
115 : ite(106, 22, 114) : BV:8
116 : ite(105, 19, 115) : BV:8
117 : ite(104, 16, 116) : BV:8
118 : bvadd(23, 12, 87) : BV:32
119 : eq(118, 3) : BOOL
120 : eq(118, 17) : BOOL
121 : eq(118, 20) : BOOL
122 : eq(118, 23) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 28) : BOOL
125 : eq(118, 31) : BOOL
126 : ite(125, 33, 34) : BV:8
127 : ite(124, 30, 126) : BV:8
128 : ite(123, 27, 127) : BV:8
129 : ite(122, 25, 128) : BV:8
130 : ite(121, 22, 129) : BV:8
131 : ite(120, 19, 130) : BV:8
132 : ite(119, 16, 131) : BV:8
133 : bvadd(12, 87) : BV:32
134 : eq(133, 3) : BOOL
135 : eq(133, 17) : BOOL
136 : eq(133, 20) : BOOL
137 : eq(133, 23) : BOOL
138 : eq(133, 10) : BOOL
139 : eq(133, 28) : BOOL
140 : eq(133, 31) : BOOL
141 : ite(140, 33, 34) : BV:8
142 : ite(139, 30, 141) : BV:8
143 : ite(138, 27, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 19, 145) : BV:8
147 : ite(134, 16, 146) : BV:8
148 : bvconcat(102, 117, 132, 147) : BV:32
149 : ite(9, 3, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda57276Var : BV:32
2 : Lambda57277Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
19 : bvule(18, 1) : BOOL
20 : bvule(1, 18) : BOOL
21 : and(19, 20) : BOOL
22 : ite(21, 18, 18) : BV:32
23 : ite(17, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 15) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda57286Var : BV:32
2 : Lambda57287Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
16 : bvule(1, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
19 : bvule(18, 1) : BOOL
20 : bvule(1, 18) : BOOL
21 : and(19, 20) : BOOL
22 : ite(21, 18, 18) : BV:32
23 : ite(17, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 15) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda57290Var : BV:32
2 : Lambda57291Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : bvule(3, 1) : BOOL
11 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(7, 1) : BOOL
27 : and(26, 12) : BOOL
28 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
29 : bvule(28, 1) : BOOL
30 : and(29, 18) : BOOL
31 : bvule(1, 15) : BOOL
32 : and(16, 31) : BOOL
33 : ite(32, 15, 15) : BV:32
34 : ite(30, 28, 33) : BV:32
35 : ite(27, 7, 34) : BV:32
36 : ite(25, 3, 35) : BV:32
37 : eq(36, 7) : BOOL
38 : bvule(3, 2) : BOOL
39 : bvule(2, 3) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 3, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : or(53, 55) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 3) : BOOL
65 : 40 { 0x28 } : BV:8
66 : 16 { 0x10 +1.190e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 157 { 0x9d -99 } : BV:8
69 : 18 { 0x12 +1.214e129 } : BV:32
70 : eq(63, 69) : BOOL
71 : 133 { 0x85 -123 } : BV:8
72 : eq(63, 41) : BOOL
73 : 72 { 0x48 } : BV:8
74 : eq(63, 59) : BOOL
75 : 194 { 0xc2 -62 } : BV:8
76 : 17 { 0x11 +1.202e129 } : BV:32
77 : eq(63, 76) : BOOL
78 : 129 { 0x81 -127 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(63, 79) : BOOL
81 : 10 { 0xa } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(45, 62) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 66) : BOOL
93 : eq(90, 69) : BOOL
94 : eq(90, 41) : BOOL
95 : eq(90, 59) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 71, 101) : BV:8
103 : ite(92, 68, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(41, 62) : BV:32
106 : eq(105, 3) : BOOL
107 : eq(105, 66) : BOOL
108 : eq(105, 69) : BOOL
109 : eq(105, 41) : BOOL
110 : eq(105, 59) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 71, 116) : BV:8
118 : ite(107, 68, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(62, 3) : BOOL
121 : eq(62, 66) : BOOL
122 : eq(62, 69) : BOOL
123 : eq(62, 41) : BOOL
124 : eq(62, 59) : BOOL
125 : eq(62, 76) : BOOL
126 : eq(62, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 71, 130) : BV:8
132 : ite(121, 68, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(59, 61, 134) : BV:32
136 : eq(135, 3) : BOOL
137 : eq(135, 66) : BOOL
138 : eq(135, 69) : BOOL
139 : eq(135, 41) : BOOL
140 : eq(135, 59) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 71, 146) : BV:8
148 : ite(137, 68, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(45, 61, 134) : BV:32
151 : eq(150, 3) : BOOL
152 : eq(150, 66) : BOOL
153 : eq(150, 69) : BOOL
154 : eq(150, 41) : BOOL
155 : eq(150, 59) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 71, 161) : BV:8
163 : ite(152, 68, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(41, 61, 134) : BV:32
166 : eq(165, 3) : BOOL
167 : eq(165, 66) : BOOL
168 : eq(165, 69) : BOOL
169 : eq(165, 41) : BOOL
170 : eq(165, 59) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 71, 176) : BV:8
178 : ite(167, 68, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(61, 134) : BV:32
181 : eq(180, 3) : BOOL
182 : eq(180, 66) : BOOL
183 : eq(180, 69) : BOOL
184 : eq(180, 41) : BOOL
185 : eq(180, 59) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 3, 195) : BV:32
197 : ite(6, 3, 196) : BV:32
198 : ite(58, 195, 197) : BV:32
199 : ite(9, 3, 198) : BV:32
200 : ite(6, 3, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3712464698
=counter_example_end
=global nodece 62 num_edges_traversed 0
=global nodece 62 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce4580.num_edges_traversed0
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(epsilon)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce4580 c836d03d8b9ffb68be747ad798943fa3
=input.spec-%var-x-1
1 : Lambda57394Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57395Var : BV:32
18 : Lambda57396Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda57397Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : eq(78, 74) : BOOL
82 : 212 { 0xd4 -44 } : BV:8
83 : eq(78, 36) : BOOL
84 : 245 { 0xf5 -11 } : BV:8
85 : eq(78, 40) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda57407Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda57408Var : BV:32
18 : Lambda57409Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda57410Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 168 { 0xa8 -88 } : BV:8
62 : eq(59, 55) : BOOL
63 : 212 { 0xd4 -44 } : BV:8
64 : eq(59, 36) : BOOL
65 : 245 { 0xf5 -11 } : BV:8
66 : eq(59, 40) : BOOL
67 : 180 { 0xb4 -76 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 245, [ 2; 2 ] -> 180, [ 3; 3 ] -> 212, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1093150351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1093150352; 1093150355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1093150356; 1515532167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1515532168; 1515532171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1515532172; 3443193451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3443193452; 3443193455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3443193456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.llvm-%n
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1515532171 { 0x5a552f8b +1.66551339e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1093150355 { 0x41282693 +1.31367719e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3443193455 { 0xcd3af66f -851773841 -1.46064555e27 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda57293Var : BV:32
2 : Lambda57294Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : eq(51, 47) : BOOL
55 : 212 { 0xd4 -44 } : BV:8
56 : eq(51, 32) : BOOL
57 : 245 { 0xf5 -11 } : BV:8
58 : eq(51, 36) : BOOL
59 : 180 { 0xb4 -76 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda57298Var : BV:32
2 : Lambda57299Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda57307Var : BV:32
2 : Lambda57308Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda57303Var : BV:32
2 : Lambda57304Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 168 { 0xa8 -88 } : BV:8
14 : eq(11, 7) : BOOL
15 : 212 { 0xd4 -44 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 245 { 0xf5 -11 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 180 { 0xb4 -76 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3074996336
=counter_example_end
=global nodece 63 num_edges_traversed 0
=global nodece 63 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce4888.num_edges_traversed2
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce4888 deb20b2d84ceb73bd7df9aa932337b3
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 137962127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 137962128; 137962131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 137962132; 807997699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807997700; 807997703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807997704; 1512563519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1512563520; 1512563523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1512563524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda58467Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda58468Var : BV:32
14 : lambda(13, 1) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : sum(9, 10, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sym_const(16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807997700 { 0x30291104 +1.32083177e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807997703 { 0x30291107 +1.32083213e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 137962128 { 0x8392290 +1.44636726e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 137962131 { 0x8392293 +1.44636762e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1512563520 { 0x5a27e340 +1.31162261e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1512563523 { 0x5a27e343 +1.31162297e53 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 64 num_edges_traversed 2
=global nodece 64 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 65
=global nodece 65 nodece z3v487.ce4870.num_edges_traversed2
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(epsilon)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce4870 17559919f6627c4a557771189d995c30
=retaddr_const
1 : 459523490 { 0x1b63c5a2 +1.77946877e183 } : BV:32
=input.spec-%var-x-1
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda874Var : BV:32
11 : Lambda875Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda876Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 7603007 ] -> 0, [ 7603008; 7603008 ] -> 4, [ 7603009; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2056; 7603007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7603008; 7603011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 7603012; 438370319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 438370320; 438370323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 438370324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda58405Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda58406Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 15) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 15) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 171169745 { 0xa33d7d1 +1.40502369e149 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 459523490 { 0x1b63c5a2 +1.77946877e183 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 973936699 { 0x3a0d183b +1.10230195e245 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7603011 { 0x740343 +1.90634953e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 438370320 { 0x1a210010 +1.25781440e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 438370323 { 0x1a210013 +1.25781476e181 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda817Var : BV:32
2 : Lambda818Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda825Var : BV:32
2 : Lambda826Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 7603008 { 0x740340 +1.90634918e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2975070850
=counter_example_end
=global nodece 65 num_edges_traversed 2
=global nodece 65 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 66
=global nodece 66 nodece z3.ce4852.num_edges_traversed2
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(epsilon)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce4852 bdb67e2ef2e3bb48bc14a7e128919c20
=retaddr_const
1 : 325794367 { 0x136b3a3f +1.83771502e167 } : BV:32
=input.spec-%var-x-1
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda927Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda928Var : BV:32
11 : Lambda929Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda930Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 645922815 ] -> 8, [ 645922816; 645922819 ] -> 0, [ 645922820; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 645922815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 645922816; 645922819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 645922820; 2820053559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820053560; 2820053563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2820053564; 3494369115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3494369116; 3494369119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3494369120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.llvm-%m
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.llvm-%x
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda58343Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda58344Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 645922817 { 0x26800001 +1.11e206 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 645922818 { 0x26800002 +1.23e206 } : BV:32
24 : eq(19, 23) : BOOL
25 : 645922816 { 0x26800000 +1.0e206 } : BV:32
26 : eq(19, 25) : BOOL
27 : 645922819 { 0x26800003 +1.35e206 } : BV:32
28 : eq(19, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : bvadd(8, 17, 18) : BV:32
45 : eq(44, 20) : BOOL
46 : eq(44, 23) : BOOL
47 : eq(44, 25) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 22, 29) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 22, 50) : BV:8
52 : ite(45, 22, 51) : BV:8
53 : bvadd(17, 18) : BV:32
54 : eq(53, 20) : BOOL
55 : eq(53, 23) : BOOL
56 : eq(53, 25) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 22, 29) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 22, 59) : BV:8
61 : ite(54, 22, 60) : BV:8
62 : bvconcat(33, 43, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 20) : BOOL
65 : eq(63, 23) : BOOL
66 : eq(63, 25) : BOOL
67 : eq(63, 27) : BOOL
68 : ite(67, 22, 29) : BV:8
69 : ite(66, 22, 68) : BV:8
70 : ite(65, 22, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : bvadd(34, 16, 62) : BV:32
73 : eq(72, 20) : BOOL
74 : eq(72, 23) : BOOL
75 : eq(72, 25) : BOOL
76 : eq(72, 27) : BOOL
77 : ite(76, 22, 29) : BV:8
78 : ite(75, 22, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 22, 79) : BV:8
81 : bvadd(8, 16, 62) : BV:32
82 : eq(81, 20) : BOOL
83 : eq(81, 23) : BOOL
84 : eq(81, 25) : BOOL
85 : eq(81, 27) : BOOL
86 : ite(85, 22, 29) : BV:8
87 : ite(84, 22, 86) : BV:8
88 : ite(83, 22, 87) : BV:8
89 : ite(82, 22, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 20) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 25) : BOOL
94 : eq(90, 27) : BOOL
95 : ite(94, 22, 29) : BV:8
96 : ite(93, 22, 95) : BV:8
97 : ite(92, 22, 96) : BV:8
98 : ite(91, 22, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : sum(9, 10, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 897265922 { 0x357b3102 +1.96243309e235 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 325794367 { 0x136b3a3f +1.83771502e167 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 639868110 { 0x26239cce +1.27822279e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 645922816 { 0x26800000 +1.0e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 645922819 { 0x26800003 +1.35e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2820053560 { 0xa8169a38 -1474913736 -1.17658138e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2820053563 { 0xa8169a3b -1474913733 -1.17658174e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3494369116 { 0xd047d75c -800598180 -1.56125974e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3494369119 { 0xd047d75f -800598177 -1.56126010e33 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda828Var : BV:32
2 : Lambda829Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda836Var : BV:32
2 : Lambda837Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 645922817 { 0x26800001 +1.11e206 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 645922818 { 0x26800002 +1.23e206 } : BV:32
13 : eq(8, 12) : BOOL
14 : 645922816 { 0x26800000 +1.0e206 } : BV:32
15 : eq(8, 14) : BOOL
16 : 645922819 { 0x26800003 +1.35e206 } : BV:32
17 : eq(8, 16) : BOOL
18 : 8 { 0x8 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1222028159
=counter_example_end
=global nodece 66 num_edges_traversed 2
=global nodece 66 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 67
=global nodece 67 nodece z3v487.ce4834.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce4834 bd7d0ec9c31f134be7aa552964f5e91
=retaddr_const
1 : 427322464 { 0x19786c60 +1.94080734e179 } : BV:32
=input.spec-%var-x-1
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4096 { 0x1000 +1.48828e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1193Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1194Var : BV:32
11 : Lambda1195Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1196Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 4096 { 0x1000 +1.48828e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4095 ] -> 0, [ 4096; 4096 ] -> 2, [ 4097; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 4095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4096; 4099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4100; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda58281Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda58282Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 4096 { 0x1000 +1.48828e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1896763661 { 0x710e510d +1.11184847e99 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 427322464 { 0x19786c60 +1.94080734e179 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1143910515 { 0x442eb073 +1.36475980e9 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4099 { 0x1003 +1.48863e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1137Var : BV:32
2 : Lambda1138Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4096 { 0x1000 +1.48828e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1145Var : BV:32
2 : Lambda1146Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4096 { 0x1000 +1.48828e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3669973894
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 68
=global nodece 68 nodece z3.ce4816.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce4816 9f7060505b689c4eb7bfc01f75f47ddf
=retaddr_const
1 : 737520530 { 0x2bf5ab92 +1.91929841e216 } : BV:32
=input.spec-%var-x-1
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1418Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1419Var : BV:32
11 : Lambda1420Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1421Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 942134971 ] -> 0, [ 942134972; 942134972 ] -> 1, [ 942134973; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 942134971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 942134972; 942134975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 942134976; 1084194647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1084194648; 1084194651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1084194652; 3425107883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3425107884; 3425107887 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3425107888; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda58219Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda58220Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 194177071 { 0xb92e82f +1.14771068e152 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 737520530 { 0x2bf5ab92 +1.91929841e216 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1406855773 { 0x53daea5d +1.71027719e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1084194648 { 0x409f7f58 +1.24607372e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1084194651 { 0x409f7f5b +1.24607408e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3425107884 { 0xcc26ffac -869859412 -1.30467748e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3425107887 { 0xcc26ffaf -869859409 -1.30467784e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 942134975 { 0x3827d6bf +1.31124103e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1362Var : BV:32
2 : Lambda1363Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1370Var : BV:32
2 : Lambda1371Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 942134972 { 0x3827d6bc +1.31124067e241 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2606379763
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 69
=global nodece 69 nodece z3.ce4798.num_edges_traversed2
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce4798 44395ee65eda4df2faf62de4b84c4bb2
=retaddr_const
1 : 561871738 { 0x217d7b7a +1.98033070e195 } : BV:32
=input.spec-%var-x-1
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2102Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda2103Var : BV:32
11 : Lambda2104Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda2105Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3129957035 ] -> 0, [ 3129957036; 3129957039 ] -> 255, [ 3129957040; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2231376759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2231376760; 2231376763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2231376764; 3129483643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129483644; 3129483647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3129483648; 3129957035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3129957036; 3129957039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3129957040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda58157Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda58158Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
23 : eq(18, 22) : BOOL
24 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
25 : eq(18, 24) : BOOL
26 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 1) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : bvadd(8, 17, 1) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 26) : BOOL
48 : ite(47, 21, 28) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 1) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 26) : BOOL
57 : ite(56, 21, 28) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(32, 42, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 26) : BOOL
67 : ite(66, 21, 28) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(33, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 26) : BOOL
76 : ite(75, 21, 28) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(8, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 26) : BOOL
85 : ite(84, 21, 28) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 26) : BOOL
94 : ite(93, 21, 28) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : sum(9, 10, 100) : SUM[UNIT,MAP[BV:32 -> BV:32]]
102 : sym_const(101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 376111491 { 0x166b0183 +1.83598363e173 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 561871738 { 0x217d7b7a +1.98033070e195 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1335717614 { 0x4f9d6eee +1.22994780e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2231376760 { 0x85001b78 -2063590536 -1.83827e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2231376763 { 0x85001b7b -2063590533 -1.83863e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3129483644 { 0xba88217c -1165483652 -1.6352186e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3129483647 { 0xba88217f -1165483649 -1.6352221e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2046Var : BV:32
2 : Lambda2047Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2054Var : BV:32
2 : Lambda2055Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3129957038 { 0xba8f5aae -1165010258 -1.11995482e246 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3129957037 { 0xba8f5aad -1165010259 -1.11995470e246 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3129957036 { 0xba8f5aac -1165010260 -1.11995458e246 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3129957039 { 0xba8f5aaf -1165010257 -1.11995494e246 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3032852315
=counter_example_end
=global nodece 69 num_edges_traversed 2
=global nodece 69 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 70
=global nodece 70 nodece z3v487.ce4726.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3v487.ce4726 98c7894dc3446b9ec6622c93f858a89b
=retaddr_const
1 : 241418397 { 0xe63c09d +1.77931559e157 } : BV:32
=input.spec-%var-x-1
1 : Lambda28652Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28653Var : BV:32
18 : Lambda28654Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28655Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda28677Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28678Var : BV:32
18 : Lambda28679Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28680Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2133985522 { 0x7f3208f2 +1.39089798e127 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda57925Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda57926Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1336420542 { 0x4fa828be +1.31374335e32 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1377444257 { 0x521a21a1 +1.20415127e37 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 241418397 { 0xe63c09d +1.77931559e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3820803701
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 71
=global nodece 71 nodece z3v487.ce4708.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce4708 eab472c0af1618bdce9865a4c422fad
=retaddr_const
1 : 1286316114 { 0x4caba052 +1.34083008e26 } : BV:32
=input.spec-%var-x-1
1 : Lambda32416Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32417Var : BV:32
18 : Lambda32418Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32419Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda32441Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32442Var : BV:32
18 : Lambda32443Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda32444Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1008205328 { 0x3c17fe10 +1.18744087e249 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda57863Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda57864Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1620140553 { 0x60916209 +1.13580429e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 81183198 { 0x4d6c1de +1.67779135e138 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1286316114 { 0x4caba052 +1.34083008e26 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2953158966
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 72
=global nodece 72 nodece z3v487.ce4690.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce4690 bcb9524aad693c7270ebbb4044a9d1
=retaddr_const
1 : 599874300 { 0x23c15afc +1.51058912e200 } : BV:32
=input.spec-%var-x-1
1 : Lambda36072Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36073Var : BV:32
18 : Lambda36074Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36075Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36097Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36098Var : BV:32
18 : Lambda36099Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36100Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 524291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524292; 524295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 524296; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1388731109 { 0x52c65ae5 +1.54964888e38 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda57801Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda57802Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1454517619 { 0x56b22d73 +1.39201200e46 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2048271171 { 0x7a162343 +1.17295110e117 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 599874300 { 0x23c15afc +1.51058912e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 524295 { 0x80007 +1.6250083e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2887141323
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 73
=global nodece 73 nodece z3v487.ce4672.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce4672 c24d3bfcb47cb5c05c2d89d4321af64
=retaddr_const
1 : 571999292 { 0x2218043c +1.18762922e197 } : BV:32
=input.spec-%var-x-1
1 : Lambda39444Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39445Var : BV:32
18 : Lambda39446Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39447Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39469Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda39470Var : BV:32
18 : Lambda39471Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda39472Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1571035518 { 0x5da4197e +1.28202795e60 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda57739Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda57740Var : BV:32
21 : lambda(20, 1) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : sum(16, 17, 22) : SUM[UNIT,MAP[BV:32 -> BV:32]]
24 : sym_const(23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1417378735 { 0x547b7baf +1.96471202e41 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1429306972 { 0x55317e5c +1.38666868e43 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 571999292 { 0x2218043c +1.18762922e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4043276009
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 74
=global nodece 74 nodece z3v487.ce4654.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3v487.ce4654 62604e2158a3a5b1696c379b4cd38ce7
=retaddr_const
1 : 1954669118 { 0x7481e23e +1.1471686e106 } : BV:32
=input.spec-%var-x-1
1 : Lambda42474Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42475Var : BV:32
17 : Lambda42476Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42477Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda42500Var : BV:32
17 : Lambda42501Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42502Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1645454027 { 0x6213a2cb +1.15340554e69 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : and(8, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(6, 7, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : ite(12, 13, 1) : BV:32
15 : unit : UNIT
16 : Lambda57677Var : BV:32
17 : lambda(16, 10) : FUNCTION[BV:32 -> BOOL]
18 : Lambda57678Var : BV:32
19 : lambda(18, 1) : FUNCTION[BV:32 -> BV:32]
20 : map(17, 19) : MAP[BV:32 -> BV:32]
21 : sum(14, 15, 20) : SUM[UNIT,MAP[BV:32 -> BV:32]]
22 : sym_const(21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1674913683 { 0x63d52793 +1.66527020e72 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1983597342 { 0x763b4b1e +1.46322989e109 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1954669118 { 0x7481e23e +1.1471686e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
906048494
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce184 expr point z3v487.ce184 done
=inductive-invariants point_set point z3.ce64
=inductive-invariants point_set point z3.ce64 expr point z3.ce64
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 4 for input.dst.llvm-%m
134744072
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 6 for input.dst.llvm-%x
134744072
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce64 expr point z3.ce64 done
=inductive-invariants point_set point z3.ce88
=inductive-invariants point_set point z3.ce88 expr point z3.ce88
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 done
=inductive-invariants point_set point z3v487.ce87
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 done
=inductive-invariants point_set point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 6 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 done
=inductive-invariants point_set point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 done
=inductive-invariants point_set point z3v487.ce51
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce51 expr point z3v487.ce51 done
=inductive-invariants point_set point z3v487.ce112
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 done
=inductive-invariants point_set point z3.ce231
=inductive-invariants point_set point z3.ce231 expr point z3.ce231
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce231 expr point z3.ce231 done
=inductive-invariants point_set point z3v487.ce255
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce255 expr point z3v487.ce255 done
=inductive-invariants point_set point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 done
=inductive-invariants point_set point z3.ce303
=inductive-invariants point_set point z3.ce303 expr point z3.ce303
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce303 expr point z3.ce303 done
=inductive-invariants point_set point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 done
=inductive-invariants point_set point z3.ce280
=inductive-invariants point_set point z3.ce280 expr point z3.ce280
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 6 for input.dst.llvm-%x
4208686592
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce280 expr point z3.ce280 done
=inductive-invariants point_set point z3v487.ce304
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce304 expr point z3v487.ce304 done
=inductive-invariants point_set point z3v487.ce63
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce63 expr point z3v487.ce63 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3.ce111
=inductive-invariants point_set point z3.ce111 expr point z3.ce111
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 done
=inductive-invariants point_set point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 done
=inductive-invariants point_set point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 4 for input.dst.llvm-%m
2155905152
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 done
=inductive-invariants point_set point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce183 expr point z3.ce183 done
=inductive-invariants point_set point z3.ce338
=inductive-invariants point_set point z3.ce338 expr point z3.ce338
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 4 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce338 expr point z3.ce338 done
=inductive-invariants point_set point z3v487.ce232
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce232 expr point z3v487.ce232 done
=inductive-invariants point_set point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 done
=inductive-invariants point_set point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 done
=inductive-invariants point_set point z3v487.ce339
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce339 expr point z3v487.ce339 done
=inductive-invariants point_set point z3v487.ce1900
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1900 expr point z3v487.ce1900 done
=inductive-invariants point_set point z3v487.ce1780
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1780 expr point z3v487.ce1780 done
=inductive-invariants point_set point z3.ce1740
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1740 expr point z3.ce1740 done
=inductive-invariants point_set point z3v487.ce1739
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1739 expr point z3v487.ce1739 done
=inductive-invariants point_set point z3.ce1779
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1779 expr point z3.ce1779 done
=inductive-invariants point_set point z3.ce1859
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1859 expr point z3.ce1859 done
=inductive-invariants point_set point z3v487.ce1819
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1819 expr point z3v487.ce1819 done
=inductive-invariants point_set point z3v487.ce1860
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1860 expr point z3v487.ce1860 done
=inductive-invariants point_set point z3.ce1899
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1899 expr point z3.ce1899 done
=inductive-invariants point_set point z3.ce1939
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1939 expr point z3.ce1939 done
=inductive-invariants point_set point z3.ce2020
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2020 expr point z3.ce2020 done
=inductive-invariants point_set point z3.ce1820
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1820 expr point z3.ce1820 done
=inductive-invariants point_set point z3v487.ce1979
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1979 expr point z3v487.ce1979 done
=inductive-invariants point_set point z3v487.ce1940
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1940 expr point z3v487.ce1940 done
=inductive-invariants point_set point z3.ce2059
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2059 expr point z3.ce2059 done
=inductive-invariants point_set point z3.ce1980
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1980 expr point z3.ce1980 done
=inductive-invariants point_set point z3v487.ce2099
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2099 expr point z3v487.ce2099 done
=inductive-invariants point_set point z3v487.ce2019
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2019 expr point z3v487.ce2019 done
=inductive-invariants point_set point z3v487.ce2139
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2139 expr point z3v487.ce2139 done
=inductive-invariants point_set point z3v487.ce2060
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2060 expr point z3v487.ce2060 done
=inductive-invariants point_set point z3.ce2100
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2100 expr point z3.ce2100 done
=inductive-invariants point_set point z3.ce2140
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2140 expr point z3.ce2140 done
=inductive-invariants point_set point z3.ce2977
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 5 for input.dst.llvm-%n
16
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2977 expr point z3.ce2977 done
=inductive-invariants point_set point z3.ce3001
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3001 expr point z3.ce3001 done
=inductive-invariants point_set point z3v487.ce2987
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2987 expr point z3v487.ce2987 done
=inductive-invariants point_set point z3v487.ce3088
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3088 expr point z3v487.ce3088 done
=inductive-invariants point_set point z3.ce3043
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 6 for input.dst.llvm-%x
32
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3043 expr point z3.ce3043 done
=inductive-invariants point_set point z3.ce3023
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3023 expr point z3.ce3023 done
=inductive-invariants point_set point z3v487.ce3053
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 6 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3053 expr point z3v487.ce3053 done
=inductive-invariants point_set point z3v487.ce3300
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3300 expr point z3v487.ce3300 done
=inductive-invariants point_set point z3v487.ce3350
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3350 expr point z3v487.ce3350 done
=inductive-invariants point_set point z3.ce3351
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 5 for input.dst.llvm-%n
8388610
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3351 expr point z3.ce3351 done
=inductive-invariants point_set point z3.ce3396
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 4 for input.dst.llvm-%m
256
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3396 expr point z3.ce3396 done
=inductive-invariants point_set point z3v487.ce3229
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3229 expr point z3v487.ce3229 done
=inductive-invariants point_set point z3v487.ce3254
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 5 for input.dst.llvm-%n
3
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3254 expr point z3v487.ce3254 done
=inductive-invariants point_set point z3.ce3255
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 5 for input.dst.llvm-%n
1073741825
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3255 expr point z3.ce3255 done
=inductive-invariants point_set point z3.ce3301
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 5 for input.dst.llvm-%n
1073741826
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3301 expr point z3.ce3301 done
=inductive-invariants point_set point z3v487.ce3397
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3397 expr point z3v487.ce3397 done
=inductive-invariants point_set point z3v487.ce3446
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3446 expr point z3v487.ce3446 done
=inductive-invariants point_set point z3.ce3447
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 5 for input.dst.llvm-%n
17
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3447 expr point z3.ce3447 done
=inductive-invariants point_set point z3.ce3492
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 4 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 5 for input.dst.llvm-%n
4016830072
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3492 expr point z3.ce3492 done
=inductive-invariants point_set point z3v487.ce3493
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 5 for input.dst.llvm-%n
4294279024
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3493 expr point z3v487.ce3493 done
=inductive-invariants point_set point z3v487.ce3542
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3542 expr point z3v487.ce3542 done
=inductive-invariants point_set point z3.ce3543
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 5 for input.dst.llvm-%n
4276960970
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3543 expr point z3.ce3543 done
=inductive-invariants point_set point z3.ce3588
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3588 expr point z3.ce3588 done
=inductive-invariants point_set point z3v487.ce3589
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 4 for input.dst.llvm-%m
16
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3589 expr point z3v487.ce3589 done
=inductive-invariants point_set point z3v487.ce3665
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 done
=inductive-invariants point_set point z3.ce3638
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 2 for input.spec-%var-i-0.L3%7%bbentry
2254971025
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 5 for input.dst.llvm-%n
2255753288
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2254971025
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2254971026
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3638 expr point z3.ce3638 done
=inductive-invariants point_set point z3.ce3666
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3666 expr point z3.ce3666 done
=inductive-invariants point_set point z3v487.ce3863
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 4 for input.dst.llvm-%m
2155905152
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 40 for input.spec-%var-ret-0.L3%19%bbentry
2155905152
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2155905152
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3863 expr point z3v487.ce3863 done
=inductive-invariants point_set point z3.ce3741
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 4 for input.dst.llvm-%m
4194304
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 5 for input.dst.llvm-%n
2303647414
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3741 expr point z3.ce3741 done
=inductive-invariants point_set point z3.ce3950
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3950 expr point z3.ce3950 done
=inductive-invariants point_set point z3v487.ce3919
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3919 expr point z3v487.ce3919 done
=inductive-invariants point_set point z3.ce4010
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 4 for input.dst.llvm-%m
256
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4010 expr point z3.ce4010 done
=inductive-invariants point_set point z3.ce4143
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 5 for input.dst.llvm-%n
2756605322
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 6 for input.dst.llvm-%x
8388608
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4143 expr point z3.ce4143 done
=inductive-invariants point_set point z3v487.ce4144
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 2 for input.spec-%var-i-0.L3%7%bbentry
294387711
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 4 for input.dst.llvm-%m
6
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 5 for input.dst.llvm-%n
2177151976
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 6 for input.dst.llvm-%x
160956416
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
294387711
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 40 for input.spec-%var-ret-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
294387712
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4144 expr point z3v487.ce4144 done
=inductive-invariants point_set point z3.ce4067
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 2 for input.spec-%var-i-0.L3%7%bbentry
428031
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 4 for input.dst.llvm-%m
8388608
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 5 for input.dst.llvm-%n
724214
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 6 for input.dst.llvm-%x
3279850496
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
428031
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
428032
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4067 expr point z3.ce4067 done
=inductive-invariants point_set point z3v487.ce4068
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 5 for input.dst.llvm-%n
1653086120
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 40 for input.spec-%var-ret-0.L3%19%bbentry
16
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
16
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4068 expr point z3v487.ce4068 done
=inductive-invariants point_set point z3.ce4266
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1168019386
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 4 for input.dst.llvm-%m
36
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 5 for input.dst.llvm-%n
880581637
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 6 for input.dst.llvm-%x
1644167172
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4266 expr point z3.ce4266 done
=inductive-invariants point_set point z3v487.ce4267
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 3 for input.spec-%var-ret-1.L3%7%bbentry
805305809
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 4 for input.dst.llvm-%m
9
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 5 for input.dst.llvm-%n
1087386996
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 6 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4267 expr point z3v487.ce4267 done
=inductive-invariants point_set point z3.ce4179
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 5 for input.dst.llvm-%n
2756605322
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 6 for input.dst.llvm-%x
8388608
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4179 expr point z3.ce4179 done
=inductive-invariants point_set point z3.ce4342
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 2 for input.spec-%var-i-0.L3%7%bbentry
16777215
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 3 for input.spec-%var-ret-1.L3%7%bbentry
776306772
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 4 for input.dst.llvm-%m
268437506
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 5 for input.dst.llvm-%n
134217921
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 6 for input.dst.llvm-%x
4227858432
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16777215
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 39 for input.spec-%var-j-0.L3%19%bbentry
134217921
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
16777216
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
134217921
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4342 expr point z3.ce4342 done
=inductive-invariants point_set point z3v487.ce4343
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1253632409
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 4 for input.dst.llvm-%m
1073741824
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 6 for input.dst.llvm-%x
1074266112
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 39 for input.spec-%var-j-0.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4343 expr point z3v487.ce4343 done
=inductive-invariants point_set point z3v487.ce4419
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 3 for input.spec-%var-ret-1.L3%7%bbentry
698236572
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 4 for input.dst.llvm-%m
2222981121
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 5 for input.dst.llvm-%n
578813952
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 39 for input.spec-%var-j-0.L3%19%bbentry
578813953
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
578813953
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4419 expr point z3v487.ce4419 done
=inductive-invariants point_set point z3.ce4418
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 2 for input.spec-%var-i-0.L3%7%bbentry
131071
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1498355505
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 4 for input.dst.llvm-%m
536870914
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 6 for input.dst.llvm-%x
786432
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
131071
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870913
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
131072
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870913
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4418 expr point z3.ce4418 done
=inductive-invariants point_set point z3v487.ce4512
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 2 for input.spec-%var-i-0.L3%7%bbentry
874905600
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 4 for input.dst.llvm-%m
134005904
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 5 for input.dst.llvm-%n
1217133556
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
874905600
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4512 expr point z3v487.ce4512 done
=inductive-invariants point_set point z3.ce4474
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 2 for input.spec-%var-i-0.L3%7%bbentry
131072
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 4 for input.dst.llvm-%m
536870914
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 6 for input.dst.llvm-%x
786432
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4474 expr point z3.ce4474 done
=inductive-invariants point_set point z3.ce4511
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 2 for input.spec-%var-i-0.L3%7%bbentry
1149593668
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 4 for input.dst.llvm-%m
1689547144
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 5 for input.dst.llvm-%n
2319668228
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1149593668
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4511 expr point z3.ce4511 done
=inductive-invariants point_set point z3.ce4542
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 2 for input.spec-%var-i-0.L3%7%bbentry
1149593668
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 4 for input.dst.llvm-%m
1689547144
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 5 for input.dst.llvm-%n
2319668228
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1149593668
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1149593669
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 45 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 46 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 49 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 50 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 53 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 54 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 57 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 58 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 61 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 62 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 63 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 64 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 65 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 66 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 67 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 val 68 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4542 expr point z3.ce4542 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce87
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce28
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce63
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce111
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce2987
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce4511
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=10; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce2987
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3350
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce3254
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3446
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3542
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce3665
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce183
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce2987
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce3350
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce3254
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce3446
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce3542
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3v487.ce3665
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce64
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce159
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce2987
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name local-sizes-are-equal
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 12 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.44
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.41
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-0.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce28
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce51
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce1740
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce1739
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce3053
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce3863
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce3741
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce3950
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce4143
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce4067
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3.ce4179
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=12; number of visited CEs=13; number of preds=6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 8->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
41
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->1; 42->0; 43->0; 44->0; 
42
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 
44
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->4294967295; 41->0; 42->0; 43->0; 44->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3863
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce4144
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce4266
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3053
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce3300
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce3396
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce3492
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3.ce3588
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce51
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce338
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce1779
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce3088
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3v487.ce3053
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce3396
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 4: z3.ce3492
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 5: z3.ce3588
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 6: z3.ce3638
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce3863
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3v487.ce4144
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce4266
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 45
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 49
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 53
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 57
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 61
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 63
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 65
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 67
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 1: z3.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 2: z3v487.ce159
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 3: z3.ce338
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 4: z3v487.ce3053
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 5: z3.ce3588
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 6: z3v487.ce3863
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 7: z3.ce4342
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 8: z3.ce4418
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 73
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 74
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini name local-sizes-are-equal
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini visited ce 0: z3v487.ce27
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-0.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-j-0.L3%19%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(7, 10) : BOOL
12 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
14 : map_get(12, 13) : SUM[UNIT,MAP[BV:32 -> BV:32]]
15 : sum_is(14, 8) : BOOL
16 : and(11, 15) : BOOL
17 : or(9, 16) : BOOL
18 : or(4, 17) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 6
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140468 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140469 : select(140378, 140379, 140468, 140380, 140364, 140365) : BV:32
=RhsExpr
140381 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140470 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140471 : select(140378, 140379, 140470, 140382, 140364, 140365) : BV:32
=RhsExpr
140383 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140472 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
140473 : select(140378, 140379, 140472, 140384, 140364, 140365) : BV:32
=RhsExpr
140385 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140385 : input.dst.llvm-%x : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140391 : islangaligned(140385, 140364) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
140904 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140905 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140906 : bvule(140904, 140905) : BOOL
140361 : 4 { 0x4 +1.47e129 } : BV:32
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140907 : bvadd(140361, 140415) : BV:32
140908 : bvadd(140904, 140907) : BV:32
140909 : eq(140905, 140908) : BOOL
140910 : and(140906, 140909) : BOOL
140911 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140912 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140913 : bvule(140911, 140912) : BOOL
140914 : and(140910, 140913) : BOOL
140915 : bvadd(140911, 140907) : BV:32
140916 : eq(140912, 140915) : BOOL
140917 : and(140914, 140916) : BOOL
140918 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
140919 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
140920 : bvule(140918, 140919) : BOOL
140921 : and(140917, 140920) : BOOL
140922 : bvadd(140918, 140907) : BV:32
140923 : eq(140919, 140922) : BOOL
140924 : and(140921, 140923) : BOOL
140925 : bvuge(140904, 140911) : BOOL
140926 : bvule(140904, 140912) : BOOL
140927 : and(140925, 140926) : BOOL
140929 : bvuge(140905, 140911) : BOOL
140930 : bvule(140905, 140912) : BOOL
140931 : and(140929, 140930) : BOOL
140932 : not(140931) : BOOL
140933 : andnot1(140927, 140932) : BOOL
140928 : bvuge(140911, 140904) : BOOL
140934 : bvule(140911, 140905) : BOOL
140935 : and(140928, 140934) : BOOL
140937 : bvuge(140912, 140904) : BOOL
140938 : bvule(140912, 140905) : BOOL
140939 : and(140937, 140938) : BOOL
140940 : not(140939) : BOOL
140941 : andnot1(140935, 140940) : BOOL
140936 : and(140933, 140941) : BOOL
140942 : bvuge(140904, 140918) : BOOL
140943 : bvule(140904, 140919) : BOOL
140944 : and(140942, 140943) : BOOL
140946 : bvuge(140905, 140918) : BOOL
140947 : bvule(140905, 140919) : BOOL
140948 : and(140946, 140947) : BOOL
140949 : not(140948) : BOOL
140950 : andnot1(140944, 140949) : BOOL
140953 : and(140936, 140950) : BOOL
140945 : bvuge(140918, 140904) : BOOL
140951 : bvule(140918, 140905) : BOOL
140952 : and(140945, 140951) : BOOL
140954 : bvuge(140919, 140904) : BOOL
140955 : bvule(140919, 140905) : BOOL
140956 : and(140954, 140955) : BOOL
140957 : not(140956) : BOOL
140958 : andnot1(140952, 140957) : BOOL
140959 : and(140953, 140958) : BOOL
140960 : bvuge(140911, 140918) : BOOL
140961 : bvule(140911, 140919) : BOOL
140962 : and(140960, 140961) : BOOL
140964 : bvuge(140912, 140918) : BOOL
140965 : bvule(140912, 140919) : BOOL
140966 : and(140964, 140965) : BOOL
140967 : not(140966) : BOOL
140968 : andnot1(140962, 140967) : BOOL
140971 : and(140959, 140968) : BOOL
140963 : bvuge(140918, 140911) : BOOL
140969 : bvule(140918, 140912) : BOOL
140970 : and(140963, 140969) : BOOL
140972 : bvuge(140919, 140911) : BOOL
140973 : bvule(140919, 140912) : BOOL
140974 : and(140972, 140973) : BOOL
140975 : not(140974) : BOOL
140976 : andnot1(140970, 140975) : BOOL
140977 : and(140971, 140976) : BOOL
140978 : and(140924, 140977) : BOOL
140382 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140979 : 3 { 0x3 +1.35e129 } : BV:32
140980 : bvand(140382, 140979) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140981 : eq(140980, 140276) : BOOL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140982 : bvand(140384, 140979) : BV:32
140983 : eq(140982, 140276) : BOOL
140984 : and(140981, 140983) : BOOL
140380 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140985 : bvand(140380, 140979) : BV:32
140986 : eq(140985, 140276) : BOOL
140987 : and(140984, 140986) : BOOL
140988 : and(140978, 140987) : BOOL
140989 : eq(140382, 140904) : BOOL
140990 : eq(140384, 140911) : BOOL
140991 : and(140989, 140990) : BOOL
140992 : eq(140380, 140918) : BOOL
140993 : and(140991, 140992) : BOOL
140994 : and(140988, 140993) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140345 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140349 : bvule(140276, 140345) : BOOL
140383 : input.dst.llvm-%n : BV:32
140996 : bvult(140345, 140383) : BOOL
140997 : and(140349, 140996) : BOOL
140998 : lambda(140345, 140997) : FUNCTION[BV:32 -> BOOL]
140346 : Lambda1Var : BV:32
140353 : bvule(140276, 140346) : BOOL
140381 : input.dst.llvm-%m : BV:32
140999 : bvult(140346, 140381) : BOOL
141018 : and(140353, 140999) : BOOL
141019 : lambda(140346, 141018) : FUNCTION[BV:32 -> BOOL]
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140995 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140361 : 4 { 0x4 +1.47e129 } : BV:32
140367 : bvmul(140346, 140361) : BV:32
140362 : bvmul(140345, 140361) : BV:32
140385 : input.dst.llvm-%x : BV:32
141039 : bvadd(140362, 140385) : BV:32
140364 : 4 { 0x4 +1.0e1025 } : INT
140365 : 0 { 0x0 } : BOOL
141059 : select(140378, 140379, 140995, 141039, 140364, 140365) : BV:32
141060 : bvadd(140367, 141059) : BV:32
141061 : select(140378, 140379, 140995, 141060, 140364, 140365) : BV:32
141062 : lambda(140346, 141061) : FUNCTION[BV:32 -> BV:32]
141063 : map(141019, 141062) : MAP[BV:32 -> BV:32]
141064 : lambda(140345, 141063) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141065 : map(140998, 141064) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141066 : eq(140273, 141065) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140614 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140381 : input.dst.llvm-%m : BV:32
140615 : bvult(140614, 140381) : BOOL
140507 : 4 { 0x4 +1.0e1025 } : BV:64
140612 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140409 : 32 { 0x20 +1.0e1025 } : INT
140633 : bvsign_ext(140612, 140409) : BV:64
140752 : bvmul(140507, 140633) : BV:64
140413 : 63 { 0x3f +1.0e1025 } : INT
140753 : bvextract(140752, 140413, 140409) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140632 : bvslt(140612, 140276) : BOOL
140415 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140766 : ite(140632, 140415, 140276) : BV:32
140768 : eq(140753, 140766) : BOOL
140364 : 4 { 0x4 +1.0e1025 } : INT
140770 : isindexforsize(140768, 140364) : BOOL
140385 : input.dst.llvm-%x : BV:32
140361 : 4 { 0x4 +1.47e129 } : BV:32
140699 : bvmul(140361, 140612) : BV:32
140702 : bvadd(140385, 140699) : BV:32
140772 : isgepoffset(140702, 140699) : BOOL
140776 : islangaligned(140702, 140364) : BOOL
140378 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140379 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140493 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140365 : 0 { 0x0 } : BOOL
140708 : select(140378, 140379, 140493, 140702, 140364, 140365) : BV:32
140778 : islangaligned(140708, 140364) : BOOL
140781 : and(140776, 140778) : BOOL
140648 : bvsign_ext(140614, 140409) : BV:64
140794 : bvmul(140507, 140648) : BV:64
140795 : bvextract(140794, 140413, 140409) : BV:32
140647 : bvslt(140614, 140276) : BOOL
140808 : ite(140647, 140415, 140276) : BV:32
140810 : eq(140795, 140808) : BOOL
140812 : isindexforsize(140810, 140364) : BOOL
140711 : bvmul(140361, 140614) : BV:32
140713 : bvadd(140708, 140711) : BV:32
140814 : isgepoffset(140713, 140711) : BOOL
140819 : and(140770, 140772, 140776, 140781, 140812, 140814) : BOOL
140734 : islangaligned(140713, 140364) : BOOL
200711 : and(140819, 140734) : BOOL
140275 : 1 { 0x1 } : BOOL
201625 : eq(200711, 140275) : BOOL
201701 : implies(140615, 201625) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
